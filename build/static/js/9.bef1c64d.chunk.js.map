{"version":3,"sources":["redux/store.tsx","Provider.tsx","utils/connectorNames.tsx","utils/getRPC.tsx","redux/modalShowSlice.tsx","redux/triedEager.tsx","redux/modalExpand.tsx","utils/connectors.tsx"],"names":["store","configureStore","reducer","modalShow","modalShowReducer","triedEager","triedEagerReducer","modalExpand","modalExpandReducer","Web3Provider","children","reduxStore","getLibrary","ConnectorNames","RPC_NODES","process","getRPCNodeUrl","url","sample","undefined","getChainID","parseInt","modalShowSlice","createSlice","name","initialState","show","reducers","changeState","state","actions","triedEagerSlice","tried","setState","action","payload","modalShowExpand","expand","setExpand","RPC_URL","CHAIN_ID","Error","NaN","injected","InjectedConnector","supportedChainIds","bscConnector","BscConnector","walletconnect","WalletConnectConnector","rpc","qrcode","pollingInterval","connectorsByName","Injected","WalletConnect","BSC","provider","library","ethers","providers","signMessage","account","message","a","connecetedWallet","localStorage","getItem","window","BinanceChain","bnbSign","signature","wc","wcMessage","utils","hexlify","toUtf8Bytes","signPersonalMessage","getSigner"],"mappings":"wMAaeA,EARDC,YAAe,CACzBC,QAAS,CACLC,UAAWC,IACXC,WAAYC,IACZC,YAAaC,O,OCQNC,UAVM,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SACpB,OACI,mCACI,cAAC,IAAD,CAAUV,MAAOW,EAAjB,SACI,cAAC,IAAD,CAAmBC,WAAYA,IAA/B,SAA4CF,U,iCCXrD,IAAKG,EAAZ,kC,SAAYA,K,oBAAAA,E,2BAAAA,E,+BAAAA,M,uCCAZ,0FAYO,IAAMC,EAAY,CACrBC,oCACAA,oCACAA,sCAGEC,EAAgB,WAElB,IAAMC,EAAMC,IAAOJ,GAGnB,QAAWK,GAAPF,EAKJ,OAAOA,GAQX,IAEMG,EAAa,WACf,OAAOC,SAHKN,KAGa,M,iCCvC7B,+CAEaO,EAAiBC,YAAY,CACtCC,KAAM,YACNC,aAAc,CACVC,MAAM,GAEVC,SAAU,CACNC,YAAa,SAACC,GACVA,EAAMH,MAAOG,EAAMH,SAMhBE,EAAgBN,EAAeQ,QAA/BF,YAEAN,MAAf,S,iCCjBA,+CAEaS,EAAkBR,YAAY,CACvCC,KAAM,aACNC,aAAc,CACVO,OAAO,GAEXL,SAAU,CACNM,SAAU,SAACJ,EAAOK,GACdL,EAAMG,MAAQE,EAAOC,YAMlBF,EAAaF,EAAgBD,QAA7BG,SAEAF,MAAf,S,iCCjBA,+CAEaK,EAAkBb,YAAY,CACvCC,KAAM,cACNC,aAAc,CACVY,QAAQ,GAEZV,SAAU,CACNW,UAAW,SAACT,EAAOK,GACfL,EAAMQ,OAASH,EAAOC,YAMnBG,EAAcF,EAAgBN,QAA9BQ,UAEAF,MAAf,S,2TCJMG,EAA8BvB,cAC9BwB,EAAmBpB,cAGzB,QAAeD,GAAXoB,EACA,MAAM,IAAIE,MAAM,oCAIpB,GAAgBC,KAAZF,EACA,MAAM,IAAIC,MAAM,oDAIb,IAAME,EAAW,IAAIC,IAAkB,CAC1CC,kBAAmB,CAACL,KAGXM,EAAe,IAAIC,eAAa,CAAEF,kBAAmB,CAACL,KAEtDQ,EAAgB,IAAIC,IAAuB,CACpDC,IAAI,eAAIV,EAAWD,GACnBY,QAAQ,EACRC,gBAxB6B,OA4BpBC,GAAkD,mBAC1DxC,IAAeyC,SAAWX,GADgC,cAE1D9B,IAAe0C,cAAgBP,GAF2B,cAG1DnC,IAAe2C,IAAMV,GAHqC,GAOlDlC,EAAa,SAAC6C,GACvB,IAAMC,EAAU,IAAIC,IAAOC,UAAUnD,aAAagD,GAElD,OADAC,EAAQN,gBAAkB,KACnBM,GAGEG,EAAW,uCAAG,WAAOJ,EAAeK,EAAiBC,GAAvC,2BAAAC,EAAA,0DACjBC,EAAmBC,aAAaC,QAAQ,YAGtBtD,IAAe2C,MAAOY,OAAOC,aAJ9B,gCAKSD,OAAOC,aAAaC,QAAQR,EAASC,GAL9C,uBAKXQ,EALW,EAKXA,UALW,kBAMZA,GANY,UAUnBN,GAAoBpD,IAAe0C,iBAAnC,UAAoDE,EAASA,gBAA7D,aAAoD,EAAmBe,IAVpD,wBAWbC,EAAYd,IAAOe,MAAMC,QAAQhB,IAAOe,MAAME,YAAYb,IAX7C,oBAYKN,EAASA,gBAZd,aAYK,EAAmBe,GAAGK,oBAAoB,CAACJ,EAAWX,IAZ3D,eAYbS,EAZa,yBAaZA,GAbY,iCAgBhBd,EAASqB,UAAUhB,GAASD,YAAYE,IAhBxB,4CAAH","file":"static/js/9.bef1c64d.chunk.js","sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport modalShowReducer from './modalShowSlice';\r\nimport triedEagerReducer from './triedEager';\r\nimport modalExpandReducer from './modalExpand';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        modalShow: modalShowReducer,\r\n        triedEager: triedEagerReducer,\r\n        modalExpand: modalExpandReducer,\r\n    },\r\n});\r\n\r\nexport default store;\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React, { ReactNode } from 'react';\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { Provider } from 'react-redux';\n\nimport { getLibrary } from './utils/connectors';\nimport reduxStore from './redux/store';\n\nconst Web3Provider = ({ children }: { children: ReactNode }) => {\n    return (\n        <>\n            <Provider store={reduxStore}>\n                <Web3ReactProvider getLibrary={getLibrary}>{children}</Web3ReactProvider>\n            </Provider>\n        </>\n    );\n};\n\nexport default Web3Provider;\n","export enum ConnectorNames {\n    Injected = 'Injected',\n    BSC = 'Binance Chain Wallet',\n    WalletConnect = 'WalletConnect',\n}\n","import sample from 'lodash/sample';\n\n// Error check \".env\" file for BSC_RPC_URL\nif (\n    !process.env.REACT_APP_BSC_RPC_URL_1 ||\n    !process.env.REACT_APP_BSC_RPC_URL_2 ||\n    !process.env.REACT_APP_BSC_RPC_URL_3\n) {\n    throw Error('BSC_RPC_URLs is undefined');\n}\n\n// Array of available nodes to connect to Binance Smart Chain\nexport const RPC_NODES = [\n    process.env.REACT_APP_BSC_RPC_URL_1,\n    process.env.REACT_APP_BSC_RPC_URL_2,\n    process.env.REACT_APP_BSC_RPC_URL_3,\n];\n\nconst getRPCNodeUrl = (): string | undefined => {\n    // get URL\n    const url = sample(RPC_NODES);\n\n    // return undefined if failed to extract valid URL\n    if (url == undefined) {\n        return undefined;\n    }\n\n    // return valid string URL\n    return url;\n};\n\n// Error check \".env\" file for BSC_CHAIN_ID\nif (process.env.REACT_APP_BSC_CHAIN_ID == undefined) {\n    throw new Error('BSC_CHAIN_ID is undefined');\n}\n\nconst chainID = process.env.REACT_APP_BSC_CHAIN_ID;\n\nconst getChainID = () => {\n    return parseInt(chainID, 10);\n};\n\nexport { getRPCNodeUrl, getChainID };\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const modalShowSlice = createSlice({\n    name: 'modalShow',\n    initialState: {\n        show: false,\n    },\n    reducers: {\n        changeState: (state) => {\n            state.show = state.show ? false : true;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { changeState } = modalShowSlice.actions;\n\nexport default modalShowSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport const triedEagerSlice = createSlice({\n    name: 'triedEager',\n    initialState: {\n        tried: false,\n    },\n    reducers: {\n        setState: (state, action: PayloadAction<boolean>) => {\n            state.tried = action.payload;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setState } = triedEagerSlice.actions;\n\nexport default triedEagerSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport const modalShowExpand = createSlice({\r\n    name: 'modalExpand',\r\n    initialState: {\r\n        expand: false,\r\n    },\r\n    reducers: {\r\n        setExpand: (state, action: PayloadAction<boolean>) => {\r\n            state.expand = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { setExpand } = modalShowExpand.actions;\r\n\r\nexport default modalShowExpand.reducer;\r\n","// Library Import\r\nimport { InjectedConnector } from '@web3-react/injected-connector';\r\nimport { BscConnector } from '@binance-chain/bsc-connector';\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\r\n\r\nimport { ethers } from 'ethers';\r\n\r\n// Import TSX File\r\nimport { getRPCNodeUrl, getChainID } from './getRPC';\r\nimport { ConnectorNames } from './connectorNames';\r\n\r\n// Define Constants\r\nconst POLLING_INTERVAL: number = 12000;\r\nconst RPC_URL: string | undefined = getRPCNodeUrl();\r\nconst CHAIN_ID: number = getChainID();\r\n\r\n// Type Check: RPC_URL should be valid string\r\nif (RPC_URL == undefined) {\r\n    throw new Error('URL Type Error: should be string');\r\n}\r\n\r\n// Type Check: CHAIN_ID should be valid Number\r\nif (CHAIN_ID == NaN) {\r\n    throw new Error('Invalid Numneric Error: should be a valid number');\r\n}\r\n\r\n// Connect to Inject Connector\r\nexport const injected = new InjectedConnector({\r\n    supportedChainIds: [CHAIN_ID],\r\n});\r\n\r\nexport const bscConnector = new BscConnector({ supportedChainIds: [CHAIN_ID] });\r\n\r\nexport const walletconnect = new WalletConnectConnector({\r\n    rpc: { [CHAIN_ID]: RPC_URL },\r\n    qrcode: true,\r\n    pollingInterval: POLLING_INTERVAL,\r\n});\r\n\r\n// Connectors dictionary for fast lookup\r\nexport const connectorsByName: { [connectorName: string]: any } = {\r\n    [ConnectorNames.Injected]: injected,\r\n    [ConnectorNames.WalletConnect]: walletconnect,\r\n    [ConnectorNames.BSC]: bscConnector,\r\n};\r\n\r\n// getLibrary function for Web3Provider\r\nexport const getLibrary = (provider: any): ethers.providers.Web3Provider => {\r\n    const library = new ethers.providers.Web3Provider(provider);\r\n    library.pollingInterval = 12000;\r\n    return library;\r\n};\r\n\r\nexport const signMessage = async (provider: any, account: string, message: string): Promise<string> => {\r\n    const connecetedWallet = localStorage.getItem('Wallet');\r\n\r\n    // https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\r\n    if (connecetedWallet == ConnectorNames.BSC && window.BinanceChain) {\r\n        const { signature } = await window.BinanceChain.bnbSign(account, message);\r\n        return signature;\r\n    }\r\n\r\n    // https://github.com/WalletConnect/walletconnect-monorepo/issues/462\r\n    if (connecetedWallet == ConnectorNames.WalletConnect && provider.provider?.wc) {\r\n        const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message));\r\n        const signature = await provider.provider?.wc.signPersonalMessage([wcMessage, account]);\r\n        return signature;\r\n    }\r\n\r\n    return provider.getSigner(account).signMessage(message);\r\n};\r\n"],"sourceRoot":""}
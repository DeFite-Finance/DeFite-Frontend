{"version":3,"sources":["utils/getEthErrorMessage.tsx","hooks/walletTokenNetwork.tsx","hooks/useAuth.tsx","components/ConnectButton/index.tsx","components/Header/index.tsx","hooks/useEagerConnect.tsx","hooks/useInactiveListener.tsx","utils/injectConnection.tsx","components/Footer/Footer.tsx","App.tsx","utils/connectorNames.tsx","redux/hook.tsx","utils/getRPC.tsx","redux/modalShowSlice.tsx","redux/triedEager.tsx","components/Wallet/address.tsx","utils/connectors.tsx"],"names":["getErrorMessage","error","NoEthereumProviderError","UnsupportedChainIdError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","console","setupNetwork","a","provider","window","ethereum","chainId","getChainID","request","method","params","toString","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","getRPCNodeUrl","blockExplorerUrls","useAuth","dispatch","useAppDispatch","useWeb3React","activate","deactivate","login","useCallback","connectorID","connector","connectorsByName","undefined","catch","setState","localStorage","removeItem","NoBscProviderError","log","WalletConnectConnector","walletConnectProvider","message","logout","connecetedWallet","getItem","ConnectorNames","WalletConnect","close","ConnectButton","active","address","WalletAddress","style","display","gridGap","gridTemplateColumns","maxWidth","margin","Dropdown","Toggle","variant","id","Menu","Item","Divider","onClick","Button","changeState","marginTop","marginBottom","Header","Navbar","bg","expand","sticky","Brand","href","marginLeft","Collapse","Nav","className","Link","useEagerConnect","useEffect","BSC","bscConnector","isAuthorized","then","Injected","useInactiveListener","suppress","on","handleConnect","injected","handleChainChanged","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener","InjectedConnector","triedEager","useAppSelector","state","tried","ETHBalance","account","library","React","useState","ethbalance","setEthbalance","web3","Web3","ETHcoinABI","JSON","parse","stringify","require","ETHcontract","eth","Contract","methods","balanceOf","call","balance","NaN","BTCBalance","btcbalance","setBtcbalance","BitcoinABI","BTCcontract","Footer","WalletModal","lazy","WalletInfo","Account","Routes","App","injectedConnector","useDispatch","useSelector","RPC_NODES","process","url","sample","parseInt","modalShowSlice","createSlice","initialState","show","reducers","actions","triedEagerSlice","action","payload","substring","RPC_URL","CHAIN_ID","Error","supportedChainIds","BscConnector","walletconnect","rpc","qrcode","pollingInterval","getLibrary","ethers","providers","Web3Provider","signMessage","BinanceChain","bnbSign","signature","wc","wcMessage","utils","hexlify","toUtf8Bytes","signPersonalMessage","getSigner"],"mappings":"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","file":"static/js/6.e62c3eb8.chunk.js","sourcesContent":["import {\n    NoEthereumProviderError,\n    UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector';\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector';\nimport { UnsupportedChainIdError } from '@web3-react/core';\n\nconst getErrorMessage = (error: Error) => {\n    if (error instanceof NoEthereumProviderError) {\n        return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.';\n    }\n    if (error instanceof UnsupportedChainIdError) {\n        return 'You are connected to an unsupported network.';\n    }\n    if (\n        error instanceof UserRejectedRequestErrorInjected ||\n        error instanceof UserRejectedRequestErrorWalletConnect\n        // error instanceof UserRejectedRequestErrorFrame\n    ) {\n        return 'Please authorize this website to access your Ethereum account.';\n    }\n\n    console.error(error);\n    return 'An unknown error occurred. Check the console for more details.';\n};\n\nexport { getErrorMessage };\n","import { getChainID, getRPCNodeUrl } from '../utils/getRPC';\r\n\r\nexport const setupNetwork = async () => {\r\n    const provider = window.ethereum;\r\n\r\n    if (provider) {\r\n        const chainId = getChainID();\r\n        try {\r\n            await provider.request({\r\n                method: 'wallet_addEthereumChain',\r\n                params: [\r\n                    {\r\n                        chainId: `0x${chainId.toString(16)}`,\r\n                        chainName: 'Binance Smart Chain Mainnet',\r\n                        nativeCurrency: {\r\n                            name: 'BNB',\r\n                            symbol: 'bnb',\r\n                            decimals: 18,\r\n                        },\r\n                        rpcUrls: [getRPCNodeUrl()],\r\n                        blockExplorerUrls: ['https://bscscan.com/'],\r\n                    },\r\n                ],\r\n            });\r\n            return true;\r\n        } catch (error) {\r\n            console.error(error);\r\n            return false;\r\n        }\r\n    } else {\r\n        console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\");\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const registerToken = async (\r\n    tokenAddress: string,\r\n    tokenSymbol: string,\r\n    tokenDecimals: number,\r\n    tokenImage: string,\r\n) => {\r\n    const provider = window.ethereum;\r\n\r\n    const tokenAdded = await (provider as any).request({\r\n        method: 'wallet_watchAsset',\r\n        params: {\r\n            type: 'ERC20',\r\n            options: {\r\n                address: tokenAddress,\r\n                symbol: tokenSymbol,\r\n                decimals: tokenDecimals,\r\n                image: tokenImage,\r\n            },\r\n        },\r\n    });\r\n\r\n    return tokenAdded;\r\n};\r\n","import { useCallback } from 'react';\r\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\r\nimport { NoBscProviderError } from '@binance-chain/bsc-connector';\r\nimport {\r\n    NoEthereumProviderError,\r\n    UserRejectedRequestError as UserRejectedRequestErrorInjected,\r\n} from '@web3-react/injected-connector';\r\nimport {\r\n    UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\r\n    WalletConnectConnector,\r\n} from '@web3-react/walletconnect-connector';\r\nimport { connectorsByName } from '../utils/connectors';\r\nimport { ConnectorNames } from '../utils/connectorNames';\r\nimport { useAppDispatch } from '../redux/hook';\r\nimport { setState } from '../redux/triedEager';\r\nimport { setupNetwork } from './walletTokenNetwork';\r\n\r\nconst useAuth = () => {\r\n    const dispatch = useAppDispatch();\r\n    const { activate, deactivate } = useWeb3React();\r\n\r\n    const login = useCallback(\r\n        (connectorID: string) => {\r\n            const connector = connectorsByName[connectorID];\r\n            if (connector) {\r\n                activate(connector, async (error: Error) => {\r\n                    if (error instanceof UnsupportedChainIdError) {\r\n                        const hasSetup = await setupNetwork();\r\n                        if (hasSetup) {\r\n                            activate(connector, undefined, true).catch(() => {\r\n                                dispatch(setState(true));\r\n                            });\r\n                        }\r\n                    } else {\r\n                        window.localStorage.removeItem('Wallet');\r\n                        if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\r\n                            console.log('Provider Error', 'No provider was found');\r\n                        } else if (\r\n                            error instanceof UserRejectedRequestErrorInjected ||\r\n                            error instanceof UserRejectedRequestErrorWalletConnect\r\n                        ) {\r\n                            if (connector instanceof WalletConnectConnector) {\r\n                                const walletConnector = connector as WalletConnectConnector;\r\n                                walletConnector.walletConnectProvider = null;\r\n                            }\r\n                            console.log('Authorization Error', 'Please authorize to access your account');\r\n                        } else {\r\n                            console.log(error.name, error.message);\r\n                        }\r\n                    }\r\n                }).catch(() => {\r\n                    dispatch(setState(true));\r\n                });\r\n            } else {\r\n                console.log(\"Can't find connector\", 'The connector config is wrong');\r\n            }\r\n        },\r\n        [activate, dispatch],\r\n    );\r\n\r\n    const logout = useCallback(() => {\r\n        const connecetedWallet = localStorage.getItem('Wallet');\r\n        if (connecetedWallet == ConnectorNames.WalletConnect) {\r\n            connectorsByName[connecetedWallet].close();\r\n            // resetWalletConnector(connectorsByName[connecetedWallet]);\r\n        }\r\n\r\n        localStorage.removeItem('Wallet');\r\n\r\n        dispatch(setState(false));\r\n        deactivate();\r\n    }, [deactivate, dispatch]);\r\n\r\n    return { login, logout };\r\n};\r\n\r\nexport default useAuth;\r\n","import React from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nimport { changeState } from '../../redux/modalShowSlice';\r\nimport { getErrorMessage } from '../../utils/getEthErrorMessage';\r\nimport { useAppDispatch } from '../../redux/hook';\r\nimport useAuth from '../../hooks/useAuth';\r\n\r\nimport WalletAddress from '../Wallet/address';\r\n\r\nconst ConnectButton = () => {\r\n    const { active, error } = useWeb3React();\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { logout } = useAuth();\r\n\r\n    const address = WalletAddress();\r\n\r\n    return (\r\n        <>\r\n            {/* <hr style={{ margin: '2rem' }} /> */}\r\n            <div\r\n                style={{\r\n                    display: 'grid',\r\n                    gridGap: '1rem',\r\n                    gridTemplateColumns: 'fit-content',\r\n                    maxWidth: '20rem',\r\n                    margin: 'auto',\r\n                }}\r\n            >\r\n                {(active || error) && (\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n                            {address}\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item>Wallet</Dropdown.Item>\r\n                            <Dropdown.Item>Transactions</Dropdown.Item>\r\n                            <Dropdown.Divider />\r\n                            <Dropdown.Item onClick={logout}>Disconnect</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                )}\r\n                {!active && !error && (\r\n                    <Button variant=\"primary\" onClick={() => dispatch(changeState())}>\r\n                        Connect Wallet\r\n                    </Button>\r\n                )}\r\n            </div>\r\n\r\n            {!!error && <h4 style={{ marginTop: '1rem', marginBottom: '0' }}>{getErrorMessage(error)}</h4>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ConnectButton;\r\n","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n// import Container from 'react-bootstrap/Container';\r\nimport ConnectButton from '../ConnectButton';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <>\r\n            <Navbar bg=\"light\" expand=\"lg\" variant=\"light\" sticky=\"top\">\r\n                <Navbar.Brand href=\"/\" style={{ marginLeft: '1%' }}>\r\n                    DeFite Button\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"container-fluid\">\r\n                        <Nav.Item style={{ marginLeft: '1%' }}>\r\n                            <Nav.Link href=\"/home\">Home</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item style={{ marginLeft: '1%' }}>\r\n                            <Nav.Link href=\"/swap\">Swap</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item style={{ marginLeft: '1%' }}>\r\n                            <Nav.Link href=\"/lending\">Lending</Nav.Link>\r\n                        </Nav.Item>\r\n\r\n                        <Nav.Item className=\"ms-auto\">\r\n                            <ConnectButton />\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import { useEffect } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { useAppDispatch } from '../redux/hook';\r\nimport { bscConnector } from '../utils/connectors';\r\nimport { ConnectorNames } from '../utils/connectorNames';\r\nimport { setState } from '../redux/triedEager';\r\nimport useAuth from './useAuth';\r\n\r\nconst useEagerConnect = () => {\r\n    // const triedEager = useAppSelector((state) => state.triedEager.tried);\r\n    const { activate } = useWeb3React();\r\n    const dispatch = useAppDispatch();\r\n    const { login } = useAuth();\r\n\r\n    useEffect(() => {\r\n        const connecetedWallet = localStorage.getItem('Wallet');\r\n\r\n        if (connecetedWallet == ConnectorNames.BSC) {\r\n            bscConnector.isAuthorized().then((isAuthorized: boolean) => {\r\n                if (isAuthorized) {\r\n                    activate(bscConnector, undefined, true).catch(() => {\r\n                        dispatch(setState(true));\r\n                    });\r\n                } else {\r\n                    if (window.ethereum) {\r\n                        activate(bscConnector, undefined, true).catch(() => {\r\n                            dispatch(setState(true));\r\n                        });\r\n                    } else {\r\n                        dispatch(setState(false));\r\n                    }\r\n                    dispatch(setState(false));\r\n                }\r\n            });\r\n        } else if (connecetedWallet == ConnectorNames.Injected || connecetedWallet == ConnectorNames.WalletConnect) {\r\n            login(connecetedWallet);\r\n        }\r\n    }, [activate, dispatch, login]); // intentionally only running on mount (make sure it's only mounted once :))\r\n};\r\n\r\nexport default useEagerConnect;\r\n","import { useEffect } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nimport { injected } from '../utils/connectors';\r\n\r\nconst useInactiveListener = (suppress: boolean = false) => {\r\n    const { active, error, activate } = useWeb3React();\r\n\r\n    useEffect((): any => {\r\n        const { ethereum } = window as any;\r\n        if (ethereum && ethereum.on && !active && !error && !suppress) {\r\n            const handleConnect = () => {\r\n                console.log(\"Handling 'connect' event\");\r\n                activate(injected);\r\n            };\r\n            const handleChainChanged = (chainId: string | number) => {\r\n                console.log(\"Handling 'chainChanged' event with payload\", chainId);\r\n                activate(injected);\r\n            };\r\n            const handleAccountsChanged = (accounts: string[]) => {\r\n                console.log(\"Handling 'accountsChanged' event with payload\", accounts);\r\n                if (accounts.length > 0) {\r\n                    activate(injected);\r\n                }\r\n            };\r\n            const handleNetworkChanged = (networkId: string | number) => {\r\n                console.log(\"Handling 'networkChanged' event with payload\", networkId);\r\n                activate(injected);\r\n            };\r\n\r\n            ethereum.on('connect', handleConnect);\r\n            ethereum.on('chainChanged', handleChainChanged);\r\n            ethereum.on('accountsChanged', handleAccountsChanged);\r\n            ethereum.on('networkChanged', handleNetworkChanged);\r\n\r\n            return () => {\r\n                if (ethereum.removeListener) {\r\n                    ethereum.removeListener('connect', handleConnect);\r\n                    ethereum.removeListener('chainChanged', handleChainChanged);\r\n                    ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n                    ethereum.removeListener('networkChanged', handleNetworkChanged);\r\n                }\r\n            };\r\n        }\r\n    }, [active, error, suppress, activate]);\r\n};\r\n\r\nexport default useInactiveListener;\r\n","import useEagerConnect from '../hooks/useEagerConnect';\r\nimport useInactiveListener from '../hooks/useInactiveListener';\r\nimport { useAppSelector } from '../redux/hook';\r\n\r\nconst InjectedConnector = () => {\r\n    const triedEager = useAppSelector((state) => state.triedEager.tried);\r\n\r\n    // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\r\n    useEagerConnect();\r\n\r\n    // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\r\n    useInactiveListener(!triedEager);\r\n};\r\n\r\nexport default InjectedConnector;\r\n","import React from 'react';\r\n// import { Link, Redirect } from 'react-router-dom';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport Web3 from 'web3';\r\nimport './index.css';\r\n\r\nconst ETHBalance = () => {\r\n    const { account, library, chainId } = useWeb3React();\r\n    const [ethbalance, setEthbalance] = React.useState<number>();\r\n    const web3 = new Web3('https://bsc-dataseed1.binance.org:443');\r\n\r\n    const Address = '0x2170Ed0880ac9A755fd29B2688956BD959F933F8';\r\n    const ETHcoinABI = JSON.parse(JSON.stringify(require('./EthcoinABI.json')));\r\n    const ETHcontract = new web3.eth.Contract(ETHcoinABI, Address);\r\n    React.useEffect((): any => {\r\n        if (!!account && !!library) {\r\n            let stale = false;\r\n\r\n            ETHcontract.methods\r\n                .balanceOf(account)\r\n                .call()\r\n                .then((balance: any) => {\r\n                    if (!stale) {\r\n                        setEthbalance(balance);\r\n                    }\r\n                })\r\n                .catch(() => {\r\n                    if (!stale) {\r\n                        setEthbalance(NaN);\r\n                    }\r\n                });\r\n\r\n            return () => {\r\n                setEthbalance(undefined);\r\n            };\r\n        }\r\n    }, [account, library, chainId]);\r\n    // console.log(ethbalance);\r\n    return (\r\n        <>\r\n            <p id=\"title\">ETH: {ethbalance === null ? 'Error' : ethbalance ? `${ethbalance}` : ''}</p>\r\n        </>\r\n    );\r\n};\r\n\r\nconst BTCBalance = () => {\r\n    const { account, library, chainId } = useWeb3React();\r\n    const [btcbalance, setBtcbalance] = React.useState<number>();\r\n    const web3 = new Web3('https://bsc-dataseed1.binance.org:443');\r\n\r\n    const Address = '0x5aF03DbdD8273A81B9e713AF821D25e819d31894';\r\n    const BitcoinABI = JSON.parse(JSON.stringify(require('./BitcoinABI.json')));\r\n    const BTCcontract = new web3.eth.Contract(BitcoinABI, Address);\r\n    React.useEffect((): any => {\r\n        if (!!account && !!library) {\r\n            let stale = false;\r\n\r\n            BTCcontract.methods\r\n                .balanceOf(account)\r\n                .call()\r\n                .then((balance: any) => {\r\n                    if (!stale) {\r\n                        setBtcbalance(balance);\r\n                    }\r\n                })\r\n                .catch(() => {\r\n                    if (!stale) {\r\n                        setBtcbalance(NaN);\r\n                    }\r\n                });\r\n\r\n            return () => {\r\n                setBtcbalance(undefined);\r\n            };\r\n        }\r\n    }, [account, library, chainId]);\r\n    // console.log(btcbalance);\r\n    return (\r\n        <>\r\n            <p id=\"title\">BTC: {btcbalance === null ? 'Error' : btcbalance ? `${btcbalance}` : ''}</p>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const Footer = () => {\r\n    const { account, library } = useWeb3React();\r\n    if (!account || !library) {\r\n        return (\r\n            <>\r\n                <div id=\"footer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-3\">\r\n                            <p id=\"title\">Welcome to Iris Fintech</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <div id=\"footer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-3\">\r\n                            <p id=\"title\">Wallet Connected</p>\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <BTCBalance />\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <ETHBalance />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n};\r\n","import React, { lazy } from 'react';\r\n\r\nconst WalletModal = lazy(() => import('./components/WalletModal'));\r\nconst WalletInfo = lazy(() => import('./components/Wallet'));\r\nconst Account = lazy(() => import('./components/Account'));\r\nconst Routes = lazy(() => import('./route'));\r\nimport Header from './components/Header';\r\nimport injectedConnector from './utils/injectConnection';\r\nimport { Footer } from './components/Footer/Footer';\r\n\r\nconst App = () => {\r\n    injectedConnector();\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <Routes />\r\n            <WalletInfo />\r\n            <WalletModal />\r\n            <Account />\r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","export enum ConnectorNames {\n    Injected = 'Injected',\n    BSC = 'Binance Chain Wallet',\n    WalletConnect = 'WalletConnect',\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import sample from 'lodash/sample';\n\n// Error check \".env\" file for BSC_RPC_URL\nif (\n    !process.env.REACT_APP_BSC_RPC_URL_1 ||\n    !process.env.REACT_APP_BSC_RPC_URL_2 ||\n    !process.env.REACT_APP_BSC_RPC_URL_3\n) {\n    throw Error('BSC_RPC_URLs is undefined');\n}\n\n// Array of available nodes to connect to Binance Smart Chain\nexport const RPC_NODES = [\n    process.env.REACT_APP_BSC_RPC_URL_1,\n    process.env.REACT_APP_BSC_RPC_URL_2,\n    process.env.REACT_APP_BSC_RPC_URL_3,\n];\n\nconst getRPCNodeUrl = (): string | undefined => {\n    // get URL\n    const url = sample(RPC_NODES);\n\n    // return undefined if failed to extract valid URL\n    if (url == undefined) {\n        return undefined;\n    }\n\n    // return valid string URL\n    return url;\n};\n\n// Error check \".env\" file for BSC_CHAIN_ID\nif (process.env.REACT_APP_BSC_CHAIN_ID == undefined) {\n    throw new Error('BSC_CHAIN_ID is undefined');\n}\n\nconst chainID = process.env.REACT_APP_BSC_CHAIN_ID;\n\nconst getChainID = () => {\n    return parseInt(chainID, 10);\n};\n\nexport { getRPCNodeUrl, getChainID };\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const modalShowSlice = createSlice({\n    name: 'modalShow',\n    initialState: {\n        show: false,\n    },\n    reducers: {\n        changeState: (state) => {\n            state.show = state.show ? false : true;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { changeState } = modalShowSlice.actions;\n\nexport default modalShowSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport const triedEagerSlice = createSlice({\n    name: 'triedEager',\n    initialState: {\n        tried: false,\n    },\n    reducers: {\n        setState: (state, action: PayloadAction<boolean>) => {\n            state.tried = action.payload;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setState } = triedEagerSlice.actions;\n\nexport default triedEagerSlice.reducer;\n","import { useWeb3React } from '@web3-react/core';\r\n\r\nconst WalletAddress = () => {\r\n    const { account } = useWeb3React();\r\n\r\n    return account ? `${account.substring(0, 6)}...${account.substring(account.length - 4)}` : '';\r\n};\r\n\r\nexport default WalletAddress;\r\n","// Library Import\r\nimport { InjectedConnector } from '@web3-react/injected-connector';\r\nimport { BscConnector } from '@binance-chain/bsc-connector';\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\r\n\r\nimport { ethers } from 'ethers';\r\n\r\n// Import TSX File\r\nimport { getRPCNodeUrl, getChainID } from './getRPC';\r\nimport { ConnectorNames } from './connectorNames';\r\n\r\n// Define Constants\r\nconst POLLING_INTERVAL: number = 12000;\r\nconst RPC_URL: string | undefined = getRPCNodeUrl();\r\nconst CHAIN_ID: number = getChainID();\r\n\r\n// Type Check: RPC_URL should be valid string\r\nif (RPC_URL == undefined) {\r\n    throw new Error('URL Type Error: should be string');\r\n}\r\n\r\n// Type Check: CHAIN_ID should be valid Number\r\nif (CHAIN_ID == NaN) {\r\n    throw new Error('Invalid Numneric Error: should be a valid number');\r\n}\r\n\r\n// Connect to Inject Connector\r\nexport const injected = new InjectedConnector({\r\n    supportedChainIds: [CHAIN_ID],\r\n});\r\n\r\nexport const bscConnector = new BscConnector({ supportedChainIds: [CHAIN_ID] });\r\n\r\nexport const walletconnect = new WalletConnectConnector({\r\n    rpc: { [CHAIN_ID]: RPC_URL },\r\n    qrcode: true,\r\n    pollingInterval: POLLING_INTERVAL,\r\n});\r\n\r\n// Connectors dictionary for fast lookup\r\nexport const connectorsByName: { [connectorName: string]: any } = {\r\n    [ConnectorNames.Injected]: injected,\r\n    [ConnectorNames.WalletConnect]: walletconnect,\r\n    [ConnectorNames.BSC]: bscConnector,\r\n};\r\n\r\n// getLibrary function for Web3Provider\r\nexport const getLibrary = (provider: any): ethers.providers.Web3Provider => {\r\n    const library = new ethers.providers.Web3Provider(provider);\r\n    library.pollingInterval = 12000;\r\n    return library;\r\n};\r\n\r\nexport const signMessage = async (provider: any, account: string, message: string): Promise<string> => {\r\n    const connecetedWallet = localStorage.getItem('Wallet');\r\n\r\n    // https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\r\n    if (connecetedWallet == ConnectorNames.BSC && window.BinanceChain) {\r\n        const { signature } = await window.BinanceChain.bnbSign(account, message);\r\n        return signature;\r\n    }\r\n\r\n    // https://github.com/WalletConnect/walletconnect-monorepo/issues/462\r\n    if (connecetedWallet == ConnectorNames.WalletConnect && provider.provider?.wc) {\r\n        const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message));\r\n        const signature = await provider.provider?.wc.signPersonalMessage([wcMessage, account]);\r\n        return signature;\r\n    }\r\n\r\n    return provider.getSigner(account).signMessage(message);\r\n};\r\n"],"sourceRoot":""}
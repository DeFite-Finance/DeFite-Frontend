/*! For license information please see vendors-27545368.fa2c86d480c26ffc2899.js.LICENSE.txt */
(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[2492],{79785:function(t,i,r){"use strict";var e=r(48764).Buffer,n=r(35717),o=r(3349),h=new Array(16),s=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],u=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],a=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],l=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],f=[0,1518500249,1859775393,2400959708,2840853838],c=[1352829926,1548603684,1836072691,2053994217,0];function m(){o.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function p(t,i){return t<<i|t>>>32-i}function d(t,i,r,e,n,o,h,s){return p(t+(i^r^e)+o+h|0,s)+n|0}function w(t,i,r,e,n,o,h,s){return p(t+(i&r|~i&e)+o+h|0,s)+n|0}function v(t,i,r,e,n,o,h,s){return p(t+((i|~r)^e)+o+h|0,s)+n|0}function g(t,i,r,e,n,o,h,s){return p(t+(i&e|r&~e)+o+h|0,s)+n|0}function y(t,i,r,e,n,o,h,s){return p(t+(i^(r|~e))+o+h|0,s)+n|0}n(m,o),m.prototype._update=function(){for(var t=h,i=0;i<16;++i)t[i]=this._block.readInt32LE(4*i);for(var r=0|this._a,e=0|this._b,n=0|this._c,o=0|this._d,m=0|this._e,_=0|this._a,M=0|this._b,b=0|this._c,k=0|this._d,E=0|this._e,A=0;A<80;A+=1){var x,B;A<16?(x=d(r,e,n,o,m,t[s[A]],f[0],a[A]),B=y(_,M,b,k,E,t[u[A]],c[0],l[A])):A<32?(x=w(r,e,n,o,m,t[s[A]],f[1],a[A]),B=g(_,M,b,k,E,t[u[A]],c[1],l[A])):A<48?(x=v(r,e,n,o,m,t[s[A]],f[2],a[A]),B=v(_,M,b,k,E,t[u[A]],c[2],l[A])):A<64?(x=g(r,e,n,o,m,t[s[A]],f[3],a[A]),B=w(_,M,b,k,E,t[u[A]],c[3],l[A])):(x=y(r,e,n,o,m,t[s[A]],f[4],a[A]),B=d(_,M,b,k,E,t[u[A]],c[4],l[A])),r=m,m=o,o=p(n,10),n=e,e=x,_=E,E=k,k=p(b,10),b=M,M=B}var I=this._b+n+k|0;this._b=this._c+o+E|0,this._c=this._d+m+_|0,this._d=this._e+r+M|0,this._e=this._a+e+b|0,this._a=I},m.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=e.alloc?e.alloc(20):new e(20);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t.writeInt32LE(this._e,16),t},t.exports=m},51675:function(t,i,r){"use strict";var e=r(23085).Buffer,n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0}),i.getLength=i.decode=i.encode=void 0;var o=n(r(33493));function h(t,i){if("0"===t[0]&&"0"===t[1])throw new Error("invalid RLP: extra zeros");return parseInt(t,i)}function s(t,i){if(t<56)return e.from([t+i]);var r=l(t),n=l(i+55+r.length/2);return e.from(n+r,"hex")}function u(t){var i,r,n,o,s,a=[],l=t[0];if(l<=127)return{data:t.slice(0,1),remainder:t.slice(1)};if(l<=183){if(i=l-127,n=128===l?e.from([]):t.slice(1,i),2===i&&n[0]<128)throw new Error("invalid rlp encoding: byte must be less 0x80");return{data:n,remainder:t.slice(i)}}if(l<=191){if(r=l-182,t.length-1<r)throw new Error("invalid RLP: not enough bytes for string length");if((i=h(t.slice(1,r).toString("hex"),16))<=55)throw new Error("invalid RLP: expected string length to be greater than 55");if((n=t.slice(r,i+r)).length<i)throw new Error("invalid RLP: not enough bytes for string");return{data:n,remainder:t.slice(i+r)}}if(l<=247){for(i=l-191,o=t.slice(1,i);o.length;)s=u(o),a.push(s.data),o=s.remainder;return{data:a,remainder:t.slice(i)}}var f=(r=l-246)+(i=h(t.slice(1,r).toString("hex"),16));if(f>t.length)throw new Error("invalid rlp: total length is larger than the data");if(0===(o=t.slice(r,f)).length)throw new Error("invalid rlp, List has a invalid length");for(;o.length;)s=u(o),a.push(s.data),o=s.remainder;return{data:a,remainder:t.slice(f)}}function a(t){return"0x"===t.slice(0,2)}function l(t){if(t<0)throw new Error("Invalid integer as argument, must be unsigned!");var i=t.toString(16);return i.length%2?"0"+i:i}function f(t){if(!e.isBuffer(t)){if("string"==typeof t)return a(t)?e.from((r="string"!=typeof(n=t)?n:a(n)?n.slice(2):n).length%2?"0"+r:r,"hex"):e.from(t);if("number"==typeof t||"bigint"==typeof t)return t?(i=l(t),e.from(i,"hex")):e.from([]);if(null==t)return e.from([]);if(t instanceof Uint8Array)return e.from(t);if(o.default.isBN(t))return e.from(t.toArray());throw new Error("invalid type")}var i,r,n;return t}i.encode=function t(i){if(Array.isArray(i)){for(var r=[],n=0;n<i.length;n++)r.push(t(i[n]));var o=e.concat(r);return e.concat([s(o.length,192),o])}var h=f(i);return 1===h.length&&h[0]<128?h:e.concat([s(h.length,128),h])},i.decode=function(t,i){if(void 0===i&&(i=!1),!t||0===t.length)return e.from([]);var r=u(f(t));if(i)return r;if(0!==r.remainder.length)throw new Error("invalid remainder");return r.data},i.getLength=function(t){if(!t||0===t.length)return e.from([]);var i=f(t),r=i[0];if(r<=127)return i.length;if(r<=183)return r-127;if(r<=191)return r-182;if(r<=247)return r-191;var n=r-246;return n+h(i.slice(1,n).toString("hex"),16)}},33493:function(t,i,r){!function(t,i){"use strict";function e(t,i){if(!t)throw new Error(i||"Assertion failed")}function n(t,i){t.super_=i;var r=function(){};r.prototype=i.prototype,t.prototype=new r,t.prototype.constructor=t}function o(t,i,r){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==i&&"be"!==i||(r=i,i=10),this._init(t||0,i||10,r||"be"))}var h;"object"==typeof t?t.exports=o:i.BN=o,o.BN=o,o.wordSize=26;try{h="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:r(6567).Buffer}catch(t){}function s(t,i){var r=t.charCodeAt(i);return r>=48&&r<=57?r-48:r>=65&&r<=70?r-55:r>=97&&r<=102?r-87:void e(!1,"Invalid character in "+t)}function u(t,i,r){var e=s(t,r);return r-1>=i&&(e|=s(t,r-1)<<4),e}function a(t,i,r,n){for(var o=0,h=0,s=Math.min(t.length,r),u=i;u<s;u++){var a=t.charCodeAt(u)-48;o*=n,h=a>=49?a-49+10:a>=17?a-17+10:a,e(a>=0&&h<n,"Invalid character"),o+=h}return o}function l(t,i){t.words=i.words,t.length=i.length,t.negative=i.negative,t.red=i.red}if(o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,i){return t.cmp(i)>0?t:i},o.min=function(t,i){return t.cmp(i)<0?t:i},o.prototype._init=function(t,i,r){if("number"==typeof t)return this._initNumber(t,i,r);if("object"==typeof t)return this._initArray(t,i,r);"hex"===i&&(i=16),e(i===(0|i)&&i>=2&&i<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(n++,this.negative=1),n<t.length&&(16===i?this._parseHex(t,n,r):(this._parseBase(t,i,n),"le"===r&&this._initArray(this.toArray(),i,r)))},o.prototype._initNumber=function(t,i,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(e(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),i,r)},o.prototype._initArray=function(t,i,r){if(e("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,h,s=0;if("be"===r)for(n=t.length-1,o=0;n>=0;n-=3)h=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===r)for(n=0,o=0;n<t.length;n+=3)h=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this._strip()},o.prototype._parseHex=function(t,i,r){this.length=Math.ceil((t.length-i)/6),this.words=new Array(this.length);for(var e=0;e<this.length;e++)this.words[e]=0;var n,o=0,h=0;if("be"===r)for(e=t.length-1;e>=i;e-=2)n=u(t,i,e)<<o,this.words[h]|=67108863&n,o>=18?(o-=18,h+=1,this.words[h]|=n>>>26):o+=8;else for(e=(t.length-i)%2==0?i+1:i;e<t.length;e+=2)n=u(t,i,e)<<o,this.words[h]|=67108863&n,o>=18?(o-=18,h+=1,this.words[h]|=n>>>26):o+=8;this._strip()},o.prototype._parseBase=function(t,i,r){this.words=[0],this.length=1;for(var e=0,n=1;n<=67108863;n*=i)e++;e--,n=n/i|0;for(var o=t.length-r,h=o%e,s=Math.min(o,o-h)+r,u=0,l=r;l<s;l+=e)u=a(t,l,l+e,i),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==h){var f=1;for(u=a(t,l,t.length,i),l=0;l<h;l++)f*=i;this.imuln(f),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this._strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var i=0;i<this.length;i++)t.words[i]=this.words[i];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype._move=function(t){l(t,this)},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{o.prototype[Symbol.for("nodejs.util.inspect.custom")]=f}catch(t){o.prototype.inspect=f}else o.prototype.inspect=f;function f(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var c=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],m=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];o.prototype.toString=function(t,i){var r;if(i=0|i||1,16===(t=t||10)||"hex"===t){r="";for(var n=0,o=0,h=0;h<this.length;h++){var s=this.words[h],u=(16777215&(s<<n|o)).toString(16);r=0!==(o=s>>>24-n&16777215)||h!==this.length-1?c[6-u.length]+u+r:u+r,(n+=2)>=26&&(n-=26,h--)}for(0!==o&&(r=o.toString(16)+r);r.length%i!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var a=m[t],l=p[t];r="";var f=this.clone();for(f.negative=0;!f.isZero();){var d=f.modrn(l).toString(t);r=(f=f.idivn(l)).isZero()?d+r:c[a-d.length]+d+r}for(this.isZero()&&(r="0"+r);r.length%i!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}e(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&e(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16,2)},h&&(o.prototype.toBuffer=function(t,i){return this.toArrayLike(h,t,i)}),o.prototype.toArray=function(t,i){return this.toArrayLike(Array,t,i)};function d(t,i,r){r.negative=i.negative^t.negative;var e=t.length+i.length|0;r.length=e,e=e-1|0;var n=0|t.words[0],o=0|i.words[0],h=n*o,s=67108863&h,u=h/67108864|0;r.words[0]=s;for(var a=1;a<e;a++){for(var l=u>>>26,f=67108863&u,c=Math.min(a,i.length-1),m=Math.max(0,a-t.length+1);m<=c;m++){var p=a-m|0;l+=(h=(n=0|t.words[p])*(o=0|i.words[m])+f)/67108864|0,f=67108863&h}r.words[a]=0|f,u=0|l}return 0!==u?r.words[a]=0|u:r.length--,r._strip()}o.prototype.toArrayLike=function(t,i,r){this._strip();var n=this.byteLength(),o=r||Math.max(1,n);e(n<=o,"byte array longer than desired length"),e(o>0,"Requested array length <= 0");var h=function(t,i){return t.allocUnsafe?t.allocUnsafe(i):new t(i)}(t,o);return this["_toArrayLike"+("le"===i?"LE":"BE")](h,n),h},o.prototype._toArrayLikeLE=function(t,i){for(var r=0,e=0,n=0,o=0;n<this.length;n++){var h=this.words[n]<<o|e;t[r++]=255&h,r<t.length&&(t[r++]=h>>8&255),r<t.length&&(t[r++]=h>>16&255),6===o?(r<t.length&&(t[r++]=h>>24&255),e=0,o=0):(e=h>>>24,o+=2)}if(r<t.length)for(t[r++]=e;r<t.length;)t[r++]=0},o.prototype._toArrayLikeBE=function(t,i){for(var r=t.length-1,e=0,n=0,o=0;n<this.length;n++){var h=this.words[n]<<o|e;t[r--]=255&h,r>=0&&(t[r--]=h>>8&255),r>=0&&(t[r--]=h>>16&255),6===o?(r>=0&&(t[r--]=h>>24&255),e=0,o=0):(e=h>>>24,o+=2)}if(r>=0)for(t[r--]=e;r>=0;)t[r--]=0},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var i=t,r=0;return i>=4096&&(r+=13,i>>>=13),i>=64&&(r+=7,i>>>=7),i>=8&&(r+=4,i>>>=4),i>=2&&(r+=2,i>>>=2),r+i},o.prototype._zeroBits=function(t){if(0===t)return 26;var i=t,r=0;return 0==(8191&i)&&(r+=13,i>>>=13),0==(127&i)&&(r+=7,i>>>=7),0==(15&i)&&(r+=4,i>>>=4),0==(3&i)&&(r+=2,i>>>=2),0==(1&i)&&r++,r},o.prototype.bitLength=function(){var t=this.words[this.length-1],i=this._countBits(t);return 26*(this.length-1)+i},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,i=0;i<this.length;i++){var r=this._zeroBits(this.words[i]);if(t+=r,26!==r)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var i=0;i<t.length;i++)this.words[i]=this.words[i]|t.words[i];return this._strip()},o.prototype.ior=function(t){return e(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var i;i=this.length>t.length?t:this;for(var r=0;r<i.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=i.length,this._strip()},o.prototype.iand=function(t){return e(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var i,r;this.length>t.length?(i=this,r=t):(i=t,r=this);for(var e=0;e<r.length;e++)this.words[e]=i.words[e]^r.words[e];if(this!==i)for(;e<i.length;e++)this.words[e]=i.words[e];return this.length=i.length,this._strip()},o.prototype.ixor=function(t){return e(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){e("number"==typeof t&&t>=0);var i=0|Math.ceil(t/26),r=t%26;this._expand(i),r>0&&i--;for(var n=0;n<i;n++)this.words[n]=67108863&~this.words[n];return r>0&&(this.words[n]=~this.words[n]&67108863>>26-r),this._strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,i){e("number"==typeof t&&t>=0);var r=t/26|0,n=t%26;return this._expand(r+1),this.words[r]=i?this.words[r]|1<<n:this.words[r]&~(1<<n),this._strip()},o.prototype.iadd=function(t){var i,r,e;if(0!==this.negative&&0===t.negative)return this.negative=0,i=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,i=this.isub(t),t.negative=1,i._normSign();this.length>t.length?(r=this,e=t):(r=t,e=this);for(var n=0,o=0;o<e.length;o++)i=(0|r.words[o])+(0|e.words[o])+n,this.words[o]=67108863&i,n=i>>>26;for(;0!==n&&o<r.length;o++)i=(0|r.words[o])+n,this.words[o]=67108863&i,n=i>>>26;if(this.length=r.length,0!==n)this.words[this.length]=n,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(t){var i;return 0!==t.negative&&0===this.negative?(t.negative=0,i=this.sub(t),t.negative^=1,i):0===t.negative&&0!==this.negative?(this.negative=0,i=t.sub(this),this.negative=1,i):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var i=this.iadd(t);return t.negative=1,i._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,e,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(r=this,e=t):(r=t,e=this);for(var o=0,h=0;h<e.length;h++)o=(i=(0|r.words[h])-(0|e.words[h])+o)>>26,this.words[h]=67108863&i;for(;0!==o&&h<r.length;h++)o=(i=(0|r.words[h])+o)>>26,this.words[h]=67108863&i;if(0===o&&h<r.length&&r!==this)for(;h<r.length;h++)this.words[h]=r.words[h];return this.length=Math.max(this.length,h),r!==this&&(this.negative=1),this._strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var w=function(t,i,r){var e,n,o,h=t.words,s=i.words,u=r.words,a=0,l=0|h[0],f=8191&l,c=l>>>13,m=0|h[1],p=8191&m,d=m>>>13,w=0|h[2],v=8191&w,g=w>>>13,y=0|h[3],_=8191&y,M=y>>>13,b=0|h[4],k=8191&b,E=b>>>13,A=0|h[5],x=8191&A,B=A>>>13,I=0|h[6],S=8191&I,T=I>>>13,L=0|h[7],U=8191&L,R=L>>>13,K=0|h[8],N=8191&K,P=K>>>13,q=0|h[9],Z=8191&q,z=q>>>13,O=0|s[0],j=8191&O,C=O>>>13,F=0|s[1],H=8191&F,V=F>>>13,$=0|s[2],D=8191&$,Y=$>>>13,G=0|s[3],X=8191&G,J=G>>>13,W=0|s[4],Q=8191&W,tt=W>>>13,it=0|s[5],rt=8191&it,et=it>>>13,nt=0|s[6],ot=8191&nt,ht=nt>>>13,st=0|s[7],ut=8191&st,at=st>>>13,lt=0|s[8],ft=8191&lt,ct=lt>>>13,mt=0|s[9],pt=8191&mt,dt=mt>>>13;r.negative=t.negative^i.negative,r.length=19;var wt=(a+(e=Math.imul(f,j))|0)+((8191&(n=(n=Math.imul(f,C))+Math.imul(c,j)|0))<<13)|0;a=((o=Math.imul(c,C))+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,e=Math.imul(p,j),n=(n=Math.imul(p,C))+Math.imul(d,j)|0,o=Math.imul(d,C);var vt=(a+(e=e+Math.imul(f,H)|0)|0)+((8191&(n=(n=n+Math.imul(f,V)|0)+Math.imul(c,H)|0))<<13)|0;a=((o=o+Math.imul(c,V)|0)+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,e=Math.imul(v,j),n=(n=Math.imul(v,C))+Math.imul(g,j)|0,o=Math.imul(g,C),e=e+Math.imul(p,H)|0,n=(n=n+Math.imul(p,V)|0)+Math.imul(d,H)|0,o=o+Math.imul(d,V)|0;var gt=(a+(e=e+Math.imul(f,D)|0)|0)+((8191&(n=(n=n+Math.imul(f,Y)|0)+Math.imul(c,D)|0))<<13)|0;a=((o=o+Math.imul(c,Y)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,e=Math.imul(_,j),n=(n=Math.imul(_,C))+Math.imul(M,j)|0,o=Math.imul(M,C),e=e+Math.imul(v,H)|0,n=(n=n+Math.imul(v,V)|0)+Math.imul(g,H)|0,o=o+Math.imul(g,V)|0,e=e+Math.imul(p,D)|0,n=(n=n+Math.imul(p,Y)|0)+Math.imul(d,D)|0,o=o+Math.imul(d,Y)|0;var yt=(a+(e=e+Math.imul(f,X)|0)|0)+((8191&(n=(n=n+Math.imul(f,J)|0)+Math.imul(c,X)|0))<<13)|0;a=((o=o+Math.imul(c,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,e=Math.imul(k,j),n=(n=Math.imul(k,C))+Math.imul(E,j)|0,o=Math.imul(E,C),e=e+Math.imul(_,H)|0,n=(n=n+Math.imul(_,V)|0)+Math.imul(M,H)|0,o=o+Math.imul(M,V)|0,e=e+Math.imul(v,D)|0,n=(n=n+Math.imul(v,Y)|0)+Math.imul(g,D)|0,o=o+Math.imul(g,Y)|0,e=e+Math.imul(p,X)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(d,X)|0,o=o+Math.imul(d,J)|0;var _t=(a+(e=e+Math.imul(f,Q)|0)|0)+((8191&(n=(n=n+Math.imul(f,tt)|0)+Math.imul(c,Q)|0))<<13)|0;a=((o=o+Math.imul(c,tt)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,e=Math.imul(x,j),n=(n=Math.imul(x,C))+Math.imul(B,j)|0,o=Math.imul(B,C),e=e+Math.imul(k,H)|0,n=(n=n+Math.imul(k,V)|0)+Math.imul(E,H)|0,o=o+Math.imul(E,V)|0,e=e+Math.imul(_,D)|0,n=(n=n+Math.imul(_,Y)|0)+Math.imul(M,D)|0,o=o+Math.imul(M,Y)|0,e=e+Math.imul(v,X)|0,n=(n=n+Math.imul(v,J)|0)+Math.imul(g,X)|0,o=o+Math.imul(g,J)|0,e=e+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(d,Q)|0,o=o+Math.imul(d,tt)|0;var Mt=(a+(e=e+Math.imul(f,rt)|0)|0)+((8191&(n=(n=n+Math.imul(f,et)|0)+Math.imul(c,rt)|0))<<13)|0;a=((o=o+Math.imul(c,et)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,e=Math.imul(S,j),n=(n=Math.imul(S,C))+Math.imul(T,j)|0,o=Math.imul(T,C),e=e+Math.imul(x,H)|0,n=(n=n+Math.imul(x,V)|0)+Math.imul(B,H)|0,o=o+Math.imul(B,V)|0,e=e+Math.imul(k,D)|0,n=(n=n+Math.imul(k,Y)|0)+Math.imul(E,D)|0,o=o+Math.imul(E,Y)|0,e=e+Math.imul(_,X)|0,n=(n=n+Math.imul(_,J)|0)+Math.imul(M,X)|0,o=o+Math.imul(M,J)|0,e=e+Math.imul(v,Q)|0,n=(n=n+Math.imul(v,tt)|0)+Math.imul(g,Q)|0,o=o+Math.imul(g,tt)|0,e=e+Math.imul(p,rt)|0,n=(n=n+Math.imul(p,et)|0)+Math.imul(d,rt)|0,o=o+Math.imul(d,et)|0;var bt=(a+(e=e+Math.imul(f,ot)|0)|0)+((8191&(n=(n=n+Math.imul(f,ht)|0)+Math.imul(c,ot)|0))<<13)|0;a=((o=o+Math.imul(c,ht)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,e=Math.imul(U,j),n=(n=Math.imul(U,C))+Math.imul(R,j)|0,o=Math.imul(R,C),e=e+Math.imul(S,H)|0,n=(n=n+Math.imul(S,V)|0)+Math.imul(T,H)|0,o=o+Math.imul(T,V)|0,e=e+Math.imul(x,D)|0,n=(n=n+Math.imul(x,Y)|0)+Math.imul(B,D)|0,o=o+Math.imul(B,Y)|0,e=e+Math.imul(k,X)|0,n=(n=n+Math.imul(k,J)|0)+Math.imul(E,X)|0,o=o+Math.imul(E,J)|0,e=e+Math.imul(_,Q)|0,n=(n=n+Math.imul(_,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,e=e+Math.imul(v,rt)|0,n=(n=n+Math.imul(v,et)|0)+Math.imul(g,rt)|0,o=o+Math.imul(g,et)|0,e=e+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,ht)|0)+Math.imul(d,ot)|0,o=o+Math.imul(d,ht)|0;var kt=(a+(e=e+Math.imul(f,ut)|0)|0)+((8191&(n=(n=n+Math.imul(f,at)|0)+Math.imul(c,ut)|0))<<13)|0;a=((o=o+Math.imul(c,at)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,e=Math.imul(N,j),n=(n=Math.imul(N,C))+Math.imul(P,j)|0,o=Math.imul(P,C),e=e+Math.imul(U,H)|0,n=(n=n+Math.imul(U,V)|0)+Math.imul(R,H)|0,o=o+Math.imul(R,V)|0,e=e+Math.imul(S,D)|0,n=(n=n+Math.imul(S,Y)|0)+Math.imul(T,D)|0,o=o+Math.imul(T,Y)|0,e=e+Math.imul(x,X)|0,n=(n=n+Math.imul(x,J)|0)+Math.imul(B,X)|0,o=o+Math.imul(B,J)|0,e=e+Math.imul(k,Q)|0,n=(n=n+Math.imul(k,tt)|0)+Math.imul(E,Q)|0,o=o+Math.imul(E,tt)|0,e=e+Math.imul(_,rt)|0,n=(n=n+Math.imul(_,et)|0)+Math.imul(M,rt)|0,o=o+Math.imul(M,et)|0,e=e+Math.imul(v,ot)|0,n=(n=n+Math.imul(v,ht)|0)+Math.imul(g,ot)|0,o=o+Math.imul(g,ht)|0,e=e+Math.imul(p,ut)|0,n=(n=n+Math.imul(p,at)|0)+Math.imul(d,ut)|0,o=o+Math.imul(d,at)|0;var Et=(a+(e=e+Math.imul(f,ft)|0)|0)+((8191&(n=(n=n+Math.imul(f,ct)|0)+Math.imul(c,ft)|0))<<13)|0;a=((o=o+Math.imul(c,ct)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,e=Math.imul(Z,j),n=(n=Math.imul(Z,C))+Math.imul(z,j)|0,o=Math.imul(z,C),e=e+Math.imul(N,H)|0,n=(n=n+Math.imul(N,V)|0)+Math.imul(P,H)|0,o=o+Math.imul(P,V)|0,e=e+Math.imul(U,D)|0,n=(n=n+Math.imul(U,Y)|0)+Math.imul(R,D)|0,o=o+Math.imul(R,Y)|0,e=e+Math.imul(S,X)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(T,X)|0,o=o+Math.imul(T,J)|0,e=e+Math.imul(x,Q)|0,n=(n=n+Math.imul(x,tt)|0)+Math.imul(B,Q)|0,o=o+Math.imul(B,tt)|0,e=e+Math.imul(k,rt)|0,n=(n=n+Math.imul(k,et)|0)+Math.imul(E,rt)|0,o=o+Math.imul(E,et)|0,e=e+Math.imul(_,ot)|0,n=(n=n+Math.imul(_,ht)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,ht)|0,e=e+Math.imul(v,ut)|0,n=(n=n+Math.imul(v,at)|0)+Math.imul(g,ut)|0,o=o+Math.imul(g,at)|0,e=e+Math.imul(p,ft)|0,n=(n=n+Math.imul(p,ct)|0)+Math.imul(d,ft)|0,o=o+Math.imul(d,ct)|0;var At=(a+(e=e+Math.imul(f,pt)|0)|0)+((8191&(n=(n=n+Math.imul(f,dt)|0)+Math.imul(c,pt)|0))<<13)|0;a=((o=o+Math.imul(c,dt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,e=Math.imul(Z,H),n=(n=Math.imul(Z,V))+Math.imul(z,H)|0,o=Math.imul(z,V),e=e+Math.imul(N,D)|0,n=(n=n+Math.imul(N,Y)|0)+Math.imul(P,D)|0,o=o+Math.imul(P,Y)|0,e=e+Math.imul(U,X)|0,n=(n=n+Math.imul(U,J)|0)+Math.imul(R,X)|0,o=o+Math.imul(R,J)|0,e=e+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(T,Q)|0,o=o+Math.imul(T,tt)|0,e=e+Math.imul(x,rt)|0,n=(n=n+Math.imul(x,et)|0)+Math.imul(B,rt)|0,o=o+Math.imul(B,et)|0,e=e+Math.imul(k,ot)|0,n=(n=n+Math.imul(k,ht)|0)+Math.imul(E,ot)|0,o=o+Math.imul(E,ht)|0,e=e+Math.imul(_,ut)|0,n=(n=n+Math.imul(_,at)|0)+Math.imul(M,ut)|0,o=o+Math.imul(M,at)|0,e=e+Math.imul(v,ft)|0,n=(n=n+Math.imul(v,ct)|0)+Math.imul(g,ft)|0,o=o+Math.imul(g,ct)|0;var xt=(a+(e=e+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,dt)|0)+Math.imul(d,pt)|0))<<13)|0;a=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,e=Math.imul(Z,D),n=(n=Math.imul(Z,Y))+Math.imul(z,D)|0,o=Math.imul(z,Y),e=e+Math.imul(N,X)|0,n=(n=n+Math.imul(N,J)|0)+Math.imul(P,X)|0,o=o+Math.imul(P,J)|0,e=e+Math.imul(U,Q)|0,n=(n=n+Math.imul(U,tt)|0)+Math.imul(R,Q)|0,o=o+Math.imul(R,tt)|0,e=e+Math.imul(S,rt)|0,n=(n=n+Math.imul(S,et)|0)+Math.imul(T,rt)|0,o=o+Math.imul(T,et)|0,e=e+Math.imul(x,ot)|0,n=(n=n+Math.imul(x,ht)|0)+Math.imul(B,ot)|0,o=o+Math.imul(B,ht)|0,e=e+Math.imul(k,ut)|0,n=(n=n+Math.imul(k,at)|0)+Math.imul(E,ut)|0,o=o+Math.imul(E,at)|0,e=e+Math.imul(_,ft)|0,n=(n=n+Math.imul(_,ct)|0)+Math.imul(M,ft)|0,o=o+Math.imul(M,ct)|0;var Bt=(a+(e=e+Math.imul(v,pt)|0)|0)+((8191&(n=(n=n+Math.imul(v,dt)|0)+Math.imul(g,pt)|0))<<13)|0;a=((o=o+Math.imul(g,dt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,e=Math.imul(Z,X),n=(n=Math.imul(Z,J))+Math.imul(z,X)|0,o=Math.imul(z,J),e=e+Math.imul(N,Q)|0,n=(n=n+Math.imul(N,tt)|0)+Math.imul(P,Q)|0,o=o+Math.imul(P,tt)|0,e=e+Math.imul(U,rt)|0,n=(n=n+Math.imul(U,et)|0)+Math.imul(R,rt)|0,o=o+Math.imul(R,et)|0,e=e+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,ht)|0)+Math.imul(T,ot)|0,o=o+Math.imul(T,ht)|0,e=e+Math.imul(x,ut)|0,n=(n=n+Math.imul(x,at)|0)+Math.imul(B,ut)|0,o=o+Math.imul(B,at)|0,e=e+Math.imul(k,ft)|0,n=(n=n+Math.imul(k,ct)|0)+Math.imul(E,ft)|0,o=o+Math.imul(E,ct)|0;var It=(a+(e=e+Math.imul(_,pt)|0)|0)+((8191&(n=(n=n+Math.imul(_,dt)|0)+Math.imul(M,pt)|0))<<13)|0;a=((o=o+Math.imul(M,dt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,e=Math.imul(Z,Q),n=(n=Math.imul(Z,tt))+Math.imul(z,Q)|0,o=Math.imul(z,tt),e=e+Math.imul(N,rt)|0,n=(n=n+Math.imul(N,et)|0)+Math.imul(P,rt)|0,o=o+Math.imul(P,et)|0,e=e+Math.imul(U,ot)|0,n=(n=n+Math.imul(U,ht)|0)+Math.imul(R,ot)|0,o=o+Math.imul(R,ht)|0,e=e+Math.imul(S,ut)|0,n=(n=n+Math.imul(S,at)|0)+Math.imul(T,ut)|0,o=o+Math.imul(T,at)|0,e=e+Math.imul(x,ft)|0,n=(n=n+Math.imul(x,ct)|0)+Math.imul(B,ft)|0,o=o+Math.imul(B,ct)|0;var St=(a+(e=e+Math.imul(k,pt)|0)|0)+((8191&(n=(n=n+Math.imul(k,dt)|0)+Math.imul(E,pt)|0))<<13)|0;a=((o=o+Math.imul(E,dt)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,e=Math.imul(Z,rt),n=(n=Math.imul(Z,et))+Math.imul(z,rt)|0,o=Math.imul(z,et),e=e+Math.imul(N,ot)|0,n=(n=n+Math.imul(N,ht)|0)+Math.imul(P,ot)|0,o=o+Math.imul(P,ht)|0,e=e+Math.imul(U,ut)|0,n=(n=n+Math.imul(U,at)|0)+Math.imul(R,ut)|0,o=o+Math.imul(R,at)|0,e=e+Math.imul(S,ft)|0,n=(n=n+Math.imul(S,ct)|0)+Math.imul(T,ft)|0,o=o+Math.imul(T,ct)|0;var Tt=(a+(e=e+Math.imul(x,pt)|0)|0)+((8191&(n=(n=n+Math.imul(x,dt)|0)+Math.imul(B,pt)|0))<<13)|0;a=((o=o+Math.imul(B,dt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,e=Math.imul(Z,ot),n=(n=Math.imul(Z,ht))+Math.imul(z,ot)|0,o=Math.imul(z,ht),e=e+Math.imul(N,ut)|0,n=(n=n+Math.imul(N,at)|0)+Math.imul(P,ut)|0,o=o+Math.imul(P,at)|0,e=e+Math.imul(U,ft)|0,n=(n=n+Math.imul(U,ct)|0)+Math.imul(R,ft)|0,o=o+Math.imul(R,ct)|0;var Lt=(a+(e=e+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,dt)|0)+Math.imul(T,pt)|0))<<13)|0;a=((o=o+Math.imul(T,dt)|0)+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,e=Math.imul(Z,ut),n=(n=Math.imul(Z,at))+Math.imul(z,ut)|0,o=Math.imul(z,at),e=e+Math.imul(N,ft)|0,n=(n=n+Math.imul(N,ct)|0)+Math.imul(P,ft)|0,o=o+Math.imul(P,ct)|0;var Ut=(a+(e=e+Math.imul(U,pt)|0)|0)+((8191&(n=(n=n+Math.imul(U,dt)|0)+Math.imul(R,pt)|0))<<13)|0;a=((o=o+Math.imul(R,dt)|0)+(n>>>13)|0)+(Ut>>>26)|0,Ut&=67108863,e=Math.imul(Z,ft),n=(n=Math.imul(Z,ct))+Math.imul(z,ft)|0,o=Math.imul(z,ct);var Rt=(a+(e=e+Math.imul(N,pt)|0)|0)+((8191&(n=(n=n+Math.imul(N,dt)|0)+Math.imul(P,pt)|0))<<13)|0;a=((o=o+Math.imul(P,dt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863;var Kt=(a+(e=Math.imul(Z,pt))|0)+((8191&(n=(n=Math.imul(Z,dt))+Math.imul(z,pt)|0))<<13)|0;return a=((o=Math.imul(z,dt))+(n>>>13)|0)+(Kt>>>26)|0,Kt&=67108863,u[0]=wt,u[1]=vt,u[2]=gt,u[3]=yt,u[4]=_t,u[5]=Mt,u[6]=bt,u[7]=kt,u[8]=Et,u[9]=At,u[10]=xt,u[11]=Bt,u[12]=It,u[13]=St,u[14]=Tt,u[15]=Lt,u[16]=Ut,u[17]=Rt,u[18]=Kt,0!==a&&(u[19]=a,r.length++),r};function v(t,i,r){r.negative=i.negative^t.negative,r.length=t.length+i.length;for(var e=0,n=0,o=0;o<r.length-1;o++){var h=n;n=0;for(var s=67108863&e,u=Math.min(o,i.length-1),a=Math.max(0,o-t.length+1);a<=u;a++){var l=o-a,f=(0|t.words[l])*(0|i.words[a]),c=67108863&f;s=67108863&(c=c+s|0),n+=(h=(h=h+(f/67108864|0)|0)+(c>>>26)|0)>>>26,h&=67108863}r.words[o]=s,e=h,h=n}return 0!==e?r.words[o]=e:r.length--,r._strip()}function g(t,i,r){return v(t,i,r)}function y(t,i){this.x=t,this.y=i}Math.imul||(w=d),o.prototype.mulTo=function(t,i){var r=this.length+t.length;return 10===this.length&&10===t.length?w(this,t,i):r<63?d(this,t,i):r<1024?v(this,t,i):g(this,t,i)},y.prototype.makeRBT=function(t){for(var i=new Array(t),r=o.prototype._countBits(t)-1,e=0;e<t;e++)i[e]=this.revBin(e,r,t);return i},y.prototype.revBin=function(t,i,r){if(0===t||t===r-1)return t;for(var e=0,n=0;n<i;n++)e|=(1&t)<<i-n-1,t>>=1;return e},y.prototype.permute=function(t,i,r,e,n,o){for(var h=0;h<o;h++)e[h]=i[t[h]],n[h]=r[t[h]]},y.prototype.transform=function(t,i,r,e,n,o){this.permute(o,t,i,r,e,n);for(var h=1;h<n;h<<=1)for(var s=h<<1,u=Math.cos(2*Math.PI/s),a=Math.sin(2*Math.PI/s),l=0;l<n;l+=s)for(var f=u,c=a,m=0;m<h;m++){var p=r[l+m],d=e[l+m],w=r[l+m+h],v=e[l+m+h],g=f*w-c*v;v=f*v+c*w,w=g,r[l+m]=p+w,e[l+m]=d+v,r[l+m+h]=p-w,e[l+m+h]=d-v,m!==s&&(g=u*f-a*c,c=u*c+a*f,f=g)}},y.prototype.guessLen13b=function(t,i){var r=1|Math.max(i,t),e=1&r,n=0;for(r=r/2|0;r;r>>>=1)n++;return 1<<n+1+e},y.prototype.conjugate=function(t,i,r){if(!(r<=1))for(var e=0;e<r/2;e++){var n=t[e];t[e]=t[r-e-1],t[r-e-1]=n,n=i[e],i[e]=-i[r-e-1],i[r-e-1]=-n}},y.prototype.normalize13b=function(t,i){for(var r=0,e=0;e<i/2;e++){var n=8192*Math.round(t[2*e+1]/i)+Math.round(t[2*e]/i)+r;t[e]=67108863&n,r=n<67108864?0:n/67108864|0}return t},y.prototype.convert13b=function(t,i,r,n){for(var o=0,h=0;h<i;h++)o+=0|t[h],r[2*h]=8191&o,o>>>=13,r[2*h+1]=8191&o,o>>>=13;for(h=2*i;h<n;++h)r[h]=0;e(0===o),e(0==(-8192&o))},y.prototype.stub=function(t){for(var i=new Array(t),r=0;r<t;r++)i[r]=0;return i},y.prototype.mulp=function(t,i,r){var e=2*this.guessLen13b(t.length,i.length),n=this.makeRBT(e),o=this.stub(e),h=new Array(e),s=new Array(e),u=new Array(e),a=new Array(e),l=new Array(e),f=new Array(e),c=r.words;c.length=e,this.convert13b(t.words,t.length,h,e),this.convert13b(i.words,i.length,a,e),this.transform(h,o,s,u,e,n),this.transform(a,o,l,f,e,n);for(var m=0;m<e;m++){var p=s[m]*l[m]-u[m]*f[m];u[m]=s[m]*f[m]+u[m]*l[m],s[m]=p}return this.conjugate(s,u,e),this.transform(s,u,c,o,e,n),this.conjugate(c,o,e),this.normalize13b(c,e),r.negative=t.negative^i.negative,r.length=t.length+i.length,r._strip()},o.prototype.mul=function(t){var i=new o(null);return i.words=new Array(this.length+t.length),this.mulTo(t,i)},o.prototype.mulf=function(t){var i=new o(null);return i.words=new Array(this.length+t.length),g(this,t,i)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){var i=t<0;i&&(t=-t),e("number"==typeof t),e(t<67108864);for(var r=0,n=0;n<this.length;n++){var o=(0|this.words[n])*t,h=(67108863&o)+(67108863&r);r>>=26,r+=o/67108864|0,r+=h>>>26,this.words[n]=67108863&h}return 0!==r&&(this.words[n]=r,this.length++),i?this.ineg():this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var i=function(t){for(var i=new Array(t.bitLength()),r=0;r<i.length;r++){var e=r/26|0,n=r%26;i[r]=t.words[e]>>>n&1}return i}(t);if(0===i.length)return new o(1);for(var r=this,e=0;e<i.length&&0===i[e];e++,r=r.sqr());if(++e<i.length)for(var n=r.sqr();e<i.length;e++,n=n.sqr())0!==i[e]&&(r=r.mul(n));return r},o.prototype.iushln=function(t){e("number"==typeof t&&t>=0);var i,r=t%26,n=(t-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var h=0;for(i=0;i<this.length;i++){var s=this.words[i]&o,u=(0|this.words[i])-s<<r;this.words[i]=u|h,h=s>>>26-r}h&&(this.words[i]=h,this.length++)}if(0!==n){for(i=this.length-1;i>=0;i--)this.words[i+n]=this.words[i];for(i=0;i<n;i++)this.words[i]=0;this.length+=n}return this._strip()},o.prototype.ishln=function(t){return e(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,i,r){var n;e("number"==typeof t&&t>=0),n=i?(i-i%26)/26:0;var o=t%26,h=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,u=r;if(n-=h,n=Math.max(0,n),u){for(var a=0;a<h;a++)u.words[a]=this.words[a];u.length=h}if(0===h);else if(this.length>h)for(this.length-=h,a=0;a<this.length;a++)this.words[a]=this.words[a+h];else this.words[0]=0,this.length=1;var l=0;for(a=this.length-1;a>=0&&(0!==l||a>=n);a--){var f=0|this.words[a];this.words[a]=l<<26-o|f>>>o,l=f&s}return u&&0!==l&&(u.words[u.length++]=l),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},o.prototype.ishrn=function(t,i,r){return e(0===this.negative),this.iushrn(t,i,r)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){e("number"==typeof t&&t>=0);var i=t%26,r=(t-i)/26,n=1<<i;return!(this.length<=r)&&!!(this.words[r]&n)},o.prototype.imaskn=function(t){e("number"==typeof t&&t>=0);var i=t%26,r=(t-i)/26;if(e(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==i&&r++,this.length=Math.min(r,this.length),0!==i){var n=67108863^67108863>>>i<<i;this.words[this.length-1]&=n}return this._strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return e("number"==typeof t),e(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<=t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var i=0;i<this.length&&this.words[i]>=67108864;i++)this.words[i]-=67108864,i===this.length-1?this.words[i+1]=1:this.words[i+1]++;return this.length=Math.max(this.length,i+1),this},o.prototype.isubn=function(t){if(e("number"==typeof t),e(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var i=0;i<this.length&&this.words[i]<0;i++)this.words[i]+=67108864,this.words[i+1]-=1;return this._strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,i,r){var n,o,h=t.length+r;this._expand(h);var s=0;for(n=0;n<t.length;n++){o=(0|this.words[n+r])+s;var u=(0|t.words[n])*i;s=((o-=67108863&u)>>26)-(u/67108864|0),this.words[n+r]=67108863&o}for(;n<this.length-r;n++)s=(o=(0|this.words[n+r])+s)>>26,this.words[n+r]=67108863&o;if(0===s)return this._strip();for(e(-1===s),s=0,n=0;n<this.length;n++)s=(o=-(0|this.words[n])+s)>>26,this.words[n]=67108863&o;return this.negative=1,this._strip()},o.prototype._wordDiv=function(t,i){var r=(this.length,t.length),e=this.clone(),n=t,h=0|n.words[n.length-1];0!==(r=26-this._countBits(h))&&(n=n.ushln(r),e.iushln(r),h=0|n.words[n.length-1]);var s,u=e.length-n.length;if("mod"!==i){(s=new o(null)).length=u+1,s.words=new Array(s.length);for(var a=0;a<s.length;a++)s.words[a]=0}var l=e.clone()._ishlnsubmul(n,1,u);0===l.negative&&(e=l,s&&(s.words[u]=1));for(var f=u-1;f>=0;f--){var c=67108864*(0|e.words[n.length+f])+(0|e.words[n.length+f-1]);for(c=Math.min(c/h|0,67108863),e._ishlnsubmul(n,c,f);0!==e.negative;)c--,e.negative=0,e._ishlnsubmul(n,1,f),e.isZero()||(e.negative^=1);s&&(s.words[f]=c)}return s&&s._strip(),e._strip(),"div"!==i&&0!==r&&e.iushrn(r),{div:s||null,mod:e}},o.prototype.divmod=function(t,i,r){return e(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,i),"mod"!==i&&(n=s.div.neg()),"div"!==i&&(h=s.mod.neg(),r&&0!==h.negative&&h.iadd(t)),{div:n,mod:h}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),i),"mod"!==i&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),i),"div"!==i&&(h=s.mod.neg(),r&&0!==h.negative&&h.isub(t)),{div:s.div,mod:h}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===i?{div:this.divn(t.words[0]),mod:null}:"mod"===i?{div:null,mod:new o(this.modrn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modrn(t.words[0]))}:this._wordDiv(t,i);var n,h,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var i=this.divmod(t);if(i.mod.isZero())return i.div;var r=0!==i.div.negative?i.mod.isub(t):i.mod,e=t.ushrn(1),n=t.andln(1),o=r.cmp(e);return o<0||1===n&&0===o?i.div:0!==i.div.negative?i.div.isubn(1):i.div.iaddn(1)},o.prototype.modrn=function(t){var i=t<0;i&&(t=-t),e(t<=67108863);for(var r=(1<<26)%t,n=0,o=this.length-1;o>=0;o--)n=(r*n+(0|this.words[o]))%t;return i?-n:n},o.prototype.modn=function(t){return this.modrn(t)},o.prototype.idivn=function(t){var i=t<0;i&&(t=-t),e(t<=67108863);for(var r=0,n=this.length-1;n>=0;n--){var o=(0|this.words[n])+67108864*r;this.words[n]=o/t|0,r=o%t}return this._strip(),i?this.ineg():this},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){e(0===t.negative),e(!t.isZero());var i=this,r=t.clone();i=0!==i.negative?i.umod(t):i.clone();for(var n=new o(1),h=new o(0),s=new o(0),u=new o(1),a=0;i.isEven()&&r.isEven();)i.iushrn(1),r.iushrn(1),++a;for(var l=r.clone(),f=i.clone();!i.isZero();){for(var c=0,m=1;0==(i.words[0]&m)&&c<26;++c,m<<=1);if(c>0)for(i.iushrn(c);c-- >0;)(n.isOdd()||h.isOdd())&&(n.iadd(l),h.isub(f)),n.iushrn(1),h.iushrn(1);for(var p=0,d=1;0==(r.words[0]&d)&&p<26;++p,d<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(s.isOdd()||u.isOdd())&&(s.iadd(l),u.isub(f)),s.iushrn(1),u.iushrn(1);i.cmp(r)>=0?(i.isub(r),n.isub(s),h.isub(u)):(r.isub(i),s.isub(n),u.isub(h))}return{a:s,b:u,gcd:r.iushln(a)}},o.prototype._invmp=function(t){e(0===t.negative),e(!t.isZero());var i=this,r=t.clone();i=0!==i.negative?i.umod(t):i.clone();for(var n,h=new o(1),s=new o(0),u=r.clone();i.cmpn(1)>0&&r.cmpn(1)>0;){for(var a=0,l=1;0==(i.words[0]&l)&&a<26;++a,l<<=1);if(a>0)for(i.iushrn(a);a-- >0;)h.isOdd()&&h.iadd(u),h.iushrn(1);for(var f=0,c=1;0==(r.words[0]&c)&&f<26;++f,c<<=1);if(f>0)for(r.iushrn(f);f-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);i.cmp(r)>=0?(i.isub(r),h.isub(s)):(r.isub(i),s.isub(h))}return(n=0===i.cmpn(1)?h:s).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var i=this.clone(),r=t.clone();i.negative=0,r.negative=0;for(var e=0;i.isEven()&&r.isEven();e++)i.iushrn(1),r.iushrn(1);for(;;){for(;i.isEven();)i.iushrn(1);for(;r.isEven();)r.iushrn(1);var n=i.cmp(r);if(n<0){var o=i;i=r,r=o}else if(0===n||0===r.cmpn(1))break;i.isub(r)}return r.iushln(e)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){e("number"==typeof t);var i=t%26,r=(t-i)/26,n=1<<i;if(this.length<=r)return this._expand(r+1),this.words[r]|=n,this;for(var o=n,h=r;0!==o&&h<this.length;h++){var s=0|this.words[h];o=(s+=o)>>>26,s&=67108863,this.words[h]=s}return 0!==o&&(this.words[h]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var i,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this._strip(),this.length>1)i=1;else{r&&(t=-t),e(t<=67108863,"Number is too big");var n=0|this.words[0];i=n===t?0:n<t?-1:1}return 0!==this.negative?0|-i:i},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var i=this.ucmp(t);return 0!==this.negative?0|-i:i},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var i=0,r=this.length-1;r>=0;r--){var e=0|this.words[r],n=0|t.words[r];if(e!==n){e<n?i=-1:e>n&&(i=1);break}}return i},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new x(t)},o.prototype.toRed=function(t){return e(!this.red,"Already a number in reduction context"),e(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return e(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return e(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return e(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return e(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return e(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return e(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return e(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return e(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return e(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return e(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return e(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return e(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return e(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return e(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return e(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var _={k256:null,p224:null,p192:null,p25519:null};function M(t,i){this.name=t,this.p=new o(i,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){M.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function k(){M.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function E(){M.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function A(){M.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function x(t){if("string"==typeof t){var i=o._prime(t);this.m=i.p,this.prime=i}else e(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function B(t){x.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}M.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},M.prototype.ireduce=function(t){var i,r=t;do{this.split(r,this.tmp),i=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(i>this.n);var e=i<this.n?-1:r.ucmp(this.p);return 0===e?(r.words[0]=0,r.length=1):e>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},M.prototype.split=function(t,i){t.iushrn(this.n,0,i)},M.prototype.imulK=function(t){return t.imul(this.k)},n(b,M),b.prototype.split=function(t,i){for(var r=4194303,e=Math.min(t.length,9),n=0;n<e;n++)i.words[n]=t.words[n];if(i.length=e,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(i.words[i.length++]=o&r,n=10;n<t.length;n++){var h=0|t.words[n];t.words[n-10]=(h&r)<<4|o>>>22,o=h}o>>>=22,t.words[n-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var i=0,r=0;r<t.length;r++){var e=0|t.words[r];i+=977*e,t.words[r]=67108863&i,i=64*e+(i/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(k,M),n(E,M),n(A,M),A.prototype.imulK=function(t){for(var i=0,r=0;r<t.length;r++){var e=19*(0|t.words[r])+i,n=67108863&e;e>>>=26,t.words[r]=n,i=e}return 0!==i&&(t.words[t.length++]=i),t},o._prime=function(t){if(_[t])return _[t];var i;if("k256"===t)i=new b;else if("p224"===t)i=new k;else if("p192"===t)i=new E;else{if("p25519"!==t)throw new Error("Unknown prime "+t);i=new A}return _[t]=i,i},x.prototype._verify1=function(t){e(0===t.negative,"red works only with positives"),e(t.red,"red works only with red numbers")},x.prototype._verify2=function(t,i){e(0==(t.negative|i.negative),"red works only with positives"),e(t.red&&t.red===i.red,"red works only with red numbers")},x.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):(l(t,t.umod(this.m)._forceRed(this)),t)},x.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},x.prototype.add=function(t,i){this._verify2(t,i);var r=t.add(i);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},x.prototype.iadd=function(t,i){this._verify2(t,i);var r=t.iadd(i);return r.cmp(this.m)>=0&&r.isub(this.m),r},x.prototype.sub=function(t,i){this._verify2(t,i);var r=t.sub(i);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},x.prototype.isub=function(t,i){this._verify2(t,i);var r=t.isub(i);return r.cmpn(0)<0&&r.iadd(this.m),r},x.prototype.shl=function(t,i){return this._verify1(t),this.imod(t.ushln(i))},x.prototype.imul=function(t,i){return this._verify2(t,i),this.imod(t.imul(i))},x.prototype.mul=function(t,i){return this._verify2(t,i),this.imod(t.mul(i))},x.prototype.isqr=function(t){return this.imul(t,t.clone())},x.prototype.sqr=function(t){return this.mul(t,t)},x.prototype.sqrt=function(t){if(t.isZero())return t.clone();var i=this.m.andln(3);if(e(i%2==1),3===i){var r=this.m.add(new o(1)).iushrn(2);return this.pow(t,r)}for(var n=this.m.subn(1),h=0;!n.isZero()&&0===n.andln(1);)h++,n.iushrn(1);e(!n.isZero());var s=new o(1).toRed(this),u=s.redNeg(),a=this.m.subn(1).iushrn(1),l=this.m.bitLength();for(l=new o(2*l*l).toRed(this);0!==this.pow(l,a).cmp(u);)l.redIAdd(u);for(var f=this.pow(l,n),c=this.pow(t,n.addn(1).iushrn(1)),m=this.pow(t,n),p=h;0!==m.cmp(s);){for(var d=m,w=0;0!==d.cmp(s);w++)d=d.redSqr();e(w<p);var v=this.pow(f,new o(1).iushln(p-w-1));c=c.redMul(v),f=v.redSqr(),m=m.redMul(f),p=w}return c},x.prototype.invm=function(t){var i=t._invmp(this.m);return 0!==i.negative?(i.negative=0,this.imod(i).redNeg()):this.imod(i)},x.prototype.pow=function(t,i){if(i.isZero())return new o(1).toRed(this);if(0===i.cmpn(1))return t.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=t;for(var e=2;e<r.length;e++)r[e]=this.mul(r[e-1],t);var n=r[0],h=0,s=0,u=i.bitLength()%26;for(0===u&&(u=26),e=i.length-1;e>=0;e--){for(var a=i.words[e],l=u-1;l>=0;l--){var f=a>>l&1;n!==r[0]&&(n=this.sqr(n)),0!==f||0!==h?(h<<=1,h|=f,(4===++s||0===e&&0===l)&&(n=this.mul(n,r[h]),s=0,h=0)):s=0}u=26}return n},x.prototype.convertTo=function(t){var i=t.umod(this.m);return i===t?i.clone():i},x.prototype.convertFrom=function(t){var i=t.clone();return i.red=null,i},o.mont=function(t){return new B(t)},n(B,x),B.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},B.prototype.convertFrom=function(t){var i=this.imod(t.mul(this.rinv));return i.red=null,i},B.prototype.imul=function(t,i){if(t.isZero()||i.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(i),e=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(e).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},B.prototype.mul=function(t,i){if(t.isZero()||i.isZero())return new o(0)._forceRed(this);var r=t.mul(i),e=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(e).iushrn(this.shift),h=n;return n.cmp(this.m)>=0?h=n.isub(this.m):n.cmpn(0)<0&&(h=n.iadd(this.m)),h._forceRed(this)},B.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=r.nmd(t),this)},89509:function(t,i,r){var e=r(48764),n=e.Buffer;function o(t,i){for(var r in t)i[r]=t[r]}function h(t,i,r){return n(t,i,r)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?t.exports=e:(o(e,i),i.Buffer=h),h.prototype=Object.create(n.prototype),o(n,h),h.from=function(t,i,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return n(t,i,r)},h.alloc=function(t,i,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var e=n(t);return void 0!==i?"string"==typeof r?e.fill(i,r):e.fill(i):e.fill(0),e},h.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n(t)},h.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return e.SlowBuffer(t)}},37253:function(t,i,r){const e=r(89539),n=r(17187);var o="object"==typeof Reflect?Reflect:null,h=o&&"function"==typeof o.apply?o.apply:function(t,i,r){return Function.prototype.apply.call(t,i,r)};function s(){n.call(this)}function u(t,i,r){try{h(t,i,r)}catch(t){setTimeout((()=>{throw t}))}}function a(t,i){for(var r=new Array(i),e=0;e<i;++e)r[e]=t[e];return r}t.exports=s,e.inherits(s,n),s.prototype.emit=function(t){for(var i=[],r=1;r<arguments.length;r++)i.push(arguments[r]);var e="error"===t,n=this._events;if(void 0!==n)e=e&&void 0===n.error;else if(!e)return!1;if(e){var o;if(i.length>0&&(o=i[0]),o instanceof Error)throw o;var h=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw h.context=o,h}var s=n[t];if(void 0===s)return!1;if("function"==typeof s)u(s,this,i);else{var l=s.length,f=a(s,l);for(r=0;r<l;++r)u(f[r],this,i)}return!0}},2399:function(t,i,r){"use strict";var e,n=r(34155),o=r(48764),h=o.Buffer,s={};for(e in o)o.hasOwnProperty(e)&&"SlowBuffer"!==e&&"Buffer"!==e&&(s[e]=o[e]);var u=s.Buffer={};for(e in h)h.hasOwnProperty(e)&&"allocUnsafe"!==e&&"allocUnsafeSlow"!==e&&(u[e]=h[e]);if(s.Buffer.prototype=h.prototype,u.from&&u.from!==Uint8Array.from||(u.from=function(t,i,r){if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type '+typeof t);if(t&&void 0===t.length)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);return h(t,i,r)}),u.alloc||(u.alloc=function(t,i,r){if("number"!=typeof t)throw new TypeError('The "size" argument must be of type number. Received type '+typeof t);if(t<0||t>=2*(1<<30))throw new RangeError('The value "'+t+'" is invalid for option "size"');var e=h(t);return i&&0!==i.length?"string"==typeof r?e.fill(i,r):e.fill(i):e.fill(0),e}),!s.kStringMaxLength)try{s.kStringMaxLength=n.binding("buffer").kStringMaxLength}catch(t){}s.constants||(s.constants={MAX_LENGTH:s.kMaxLength},s.kStringMaxLength&&(s.constants.MAX_STRING_LENGTH=s.kStringMaxLength)),t.exports=s},60053:function(t,i,r){"use strict";var e,n,o,h,s=r(25108);if("object"==typeof performance&&"function"==typeof performance.now){var u=performance;i.unstable_now=function(){return u.now()}}else{var a=Date,l=a.now();i.unstable_now=function(){return a.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var f=null,c=null,m=function(){if(null!==f)try{var t=i.unstable_now();f(!0,t),f=null}catch(t){throw setTimeout(m,0),t}};e=function(t){null!==f?setTimeout(e,0,t):(f=t,setTimeout(m,0))},n=function(t,i){c=setTimeout(t,i)},o=function(){clearTimeout(c)},i.unstable_shouldYield=function(){return!1},h=i.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,d=window.clearTimeout;if(void 0!==s){var w=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&s.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof w&&s.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,g=null,y=-1,_=5,M=0;i.unstable_shouldYield=function(){return i.unstable_now()>=M},h=function(){},i.unstable_forceFrameRate=function(t){0>t||125<t?s.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<t?Math.floor(1e3/t):5};var b=new MessageChannel,k=b.port2;b.port1.onmessage=function(){if(null!==g){var t=i.unstable_now();M=t+_;try{g(!0,t)?k.postMessage(null):(v=!1,g=null)}catch(t){throw k.postMessage(null),t}}else v=!1},e=function(t){g=t,v||(v=!0,k.postMessage(null))},n=function(t,r){y=p((function(){t(i.unstable_now())}),r)},o=function(){d(y),y=-1}}function E(t,i){var r=t.length;t.push(i);t:for(;;){var e=r-1>>>1,n=t[e];if(!(void 0!==n&&0<B(n,i)))break t;t[e]=i,t[r]=n,r=e}}function A(t){return void 0===(t=t[0])?null:t}function x(t){var i=t[0];if(void 0!==i){var r=t.pop();if(r!==i){t[0]=r;t:for(var e=0,n=t.length;e<n;){var o=2*(e+1)-1,h=t[o],s=o+1,u=t[s];if(void 0!==h&&0>B(h,r))void 0!==u&&0>B(u,h)?(t[e]=u,t[s]=r,e=s):(t[e]=h,t[o]=r,e=o);else{if(!(void 0!==u&&0>B(u,r)))break t;t[e]=u,t[s]=r,e=s}}}return i}return null}function B(t,i){var r=t.sortIndex-i.sortIndex;return 0!==r?r:t.id-i.id}var I=[],S=[],T=1,L=null,U=3,R=!1,K=!1,N=!1;function P(t){for(var i=A(S);null!==i;){if(null===i.callback)x(S);else{if(!(i.startTime<=t))break;x(S),i.sortIndex=i.expirationTime,E(I,i)}i=A(S)}}function q(t){if(N=!1,P(t),!K)if(null!==A(I))K=!0,e(Z);else{var i=A(S);null!==i&&n(q,i.startTime-t)}}function Z(t,r){K=!1,N&&(N=!1,o()),R=!0;var e=U;try{for(P(r),L=A(I);null!==L&&(!(L.expirationTime>r)||t&&!i.unstable_shouldYield());){var h=L.callback;if("function"==typeof h){L.callback=null,U=L.priorityLevel;var s=h(L.expirationTime<=r);r=i.unstable_now(),"function"==typeof s?L.callback=s:L===A(I)&&x(I),P(r)}else x(I);L=A(I)}if(null!==L)var u=!0;else{var a=A(S);null!==a&&n(q,a.startTime-r),u=!1}return u}finally{L=null,U=e,R=!1}}var z=h;i.unstable_IdlePriority=5,i.unstable_ImmediatePriority=1,i.unstable_LowPriority=4,i.unstable_NormalPriority=3,i.unstable_Profiling=null,i.unstable_UserBlockingPriority=2,i.unstable_cancelCallback=function(t){t.callback=null},i.unstable_continueExecution=function(){K||R||(K=!0,e(Z))},i.unstable_getCurrentPriorityLevel=function(){return U},i.unstable_getFirstCallbackNode=function(){return A(I)},i.unstable_next=function(t){switch(U){case 1:case 2:case 3:var i=3;break;default:i=U}var r=U;U=i;try{return t()}finally{U=r}},i.unstable_pauseExecution=function(){},i.unstable_requestPaint=z,i.unstable_runWithPriority=function(t,i){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var r=U;U=t;try{return i()}finally{U=r}},i.unstable_scheduleCallback=function(t,r,h){var s=i.unstable_now();switch("object"==typeof h&&null!==h?h="number"==typeof(h=h.delay)&&0<h?s+h:s:h=s,t){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return t={id:T++,callback:r,priorityLevel:t,startTime:h,expirationTime:u=h+u,sortIndex:-1},h>s?(t.sortIndex=h,E(S,t),null===A(I)&&t===A(S)&&(N?o():N=!0,n(q,h-s))):(t.sortIndex=u,E(I,t),K||R||(K=!0,e(Z))),t},i.unstable_wrapCallback=function(t){var i=U;return function(){var r=U;U=i;try{return t.apply(this,arguments)}finally{U=r}}}},63840:function(t,i,r){"use strict";t.exports=r(60053)},17635:function(t){"use strict";!function(i){const r=2147483647;function e(t){const i=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);let r=1779033703,e=3144134277,n=1013904242,o=2773480762,h=1359893119,s=2600822924,u=528734635,a=1541459225;const l=new Uint32Array(64);function f(t){let f=0,c=t.length;for(;c>=64;){let m,p,d,w,v,g=r,y=e,_=n,M=o,b=h,k=s,E=u,A=a;for(p=0;p<16;p++)d=f+4*p,l[p]=(255&t[d])<<24|(255&t[d+1])<<16|(255&t[d+2])<<8|255&t[d+3];for(p=16;p<64;p++)m=l[p-2],w=(m>>>17|m<<15)^(m>>>19|m<<13)^m>>>10,m=l[p-15],v=(m>>>7|m<<25)^(m>>>18|m<<14)^m>>>3,l[p]=(w+l[p-7]|0)+(v+l[p-16]|0)|0;for(p=0;p<64;p++)w=(((b>>>6|b<<26)^(b>>>11|b<<21)^(b>>>25|b<<7))+(b&k^~b&E)|0)+(A+(i[p]+l[p]|0)|0)|0,v=((g>>>2|g<<30)^(g>>>13|g<<19)^(g>>>22|g<<10))+(g&y^g&_^y&_)|0,A=E,E=k,k=b,b=M+w|0,M=_,_=y,y=g,g=w+v|0;r=r+g|0,e=e+y|0,n=n+_|0,o=o+M|0,h=h+b|0,s=s+k|0,u=u+E|0,a=a+A|0,f+=64,c-=64}}f(t);let c,m=t.length%64,p=t.length/536870912|0,d=t.length<<3,w=m<56?56:120,v=t.slice(t.length-m,t.length);for(v.push(128),c=m+1;c<w;c++)v.push(0);return v.push(p>>>24&255),v.push(p>>>16&255),v.push(p>>>8&255),v.push(p>>>0&255),v.push(d>>>24&255),v.push(d>>>16&255),v.push(d>>>8&255),v.push(d>>>0&255),f(v),[r>>>24&255,r>>>16&255,r>>>8&255,r>>>0&255,e>>>24&255,e>>>16&255,e>>>8&255,e>>>0&255,n>>>24&255,n>>>16&255,n>>>8&255,n>>>0&255,o>>>24&255,o>>>16&255,o>>>8&255,o>>>0&255,h>>>24&255,h>>>16&255,h>>>8&255,h>>>0&255,s>>>24&255,s>>>16&255,s>>>8&255,s>>>0&255,u>>>24&255,u>>>16&255,u>>>8&255,u>>>0&255,a>>>24&255,a>>>16&255,a>>>8&255,a>>>0&255]}function n(t,i,r){t=t.length<=64?t:e(t);const n=64+i.length+4,o=new Array(n),h=new Array(64);let s,u=[];for(s=0;s<64;s++)o[s]=54;for(s=0;s<t.length;s++)o[s]^=t[s];for(s=0;s<i.length;s++)o[64+s]=i[s];for(s=n-4;s<n;s++)o[s]=0;for(s=0;s<64;s++)h[s]=92;for(s=0;s<t.length;s++)h[s]^=t[s];function a(){for(let t=n-1;t>=n-4;t--){if(o[t]++,o[t]<=255)return;o[t]=0}}for(;r>=32;)a(),u=u.concat(e(h.concat(e(o)))),r-=32;return r>0&&(a(),u=u.concat(e(h.concat(e(o))).slice(0,r))),u}function o(t,i,r,e,n){let o;for(a(t,16*(2*r-1),n,0,16),o=0;o<2*r;o++)u(t,16*o,n,16),s(n,e),a(n,0,t,i+16*o,16);for(o=0;o<r;o++)a(t,i+2*o*16,t,16*o,16);for(o=0;o<r;o++)a(t,i+16*(2*o+1),t,16*(o+r),16)}function h(t,i){return t<<i|t>>>32-i}function s(t,i){a(t,0,i,0,16);for(let t=8;t>0;t-=2)i[4]^=h(i[0]+i[12],7),i[8]^=h(i[4]+i[0],9),i[12]^=h(i[8]+i[4],13),i[0]^=h(i[12]+i[8],18),i[9]^=h(i[5]+i[1],7),i[13]^=h(i[9]+i[5],9),i[1]^=h(i[13]+i[9],13),i[5]^=h(i[1]+i[13],18),i[14]^=h(i[10]+i[6],7),i[2]^=h(i[14]+i[10],9),i[6]^=h(i[2]+i[14],13),i[10]^=h(i[6]+i[2],18),i[3]^=h(i[15]+i[11],7),i[7]^=h(i[3]+i[15],9),i[11]^=h(i[7]+i[3],13),i[15]^=h(i[11]+i[7],18),i[1]^=h(i[0]+i[3],7),i[2]^=h(i[1]+i[0],9),i[3]^=h(i[2]+i[1],13),i[0]^=h(i[3]+i[2],18),i[6]^=h(i[5]+i[4],7),i[7]^=h(i[6]+i[5],9),i[4]^=h(i[7]+i[6],13),i[5]^=h(i[4]+i[7],18),i[11]^=h(i[10]+i[9],7),i[8]^=h(i[11]+i[10],9),i[9]^=h(i[8]+i[11],13),i[10]^=h(i[9]+i[8],18),i[12]^=h(i[15]+i[14],7),i[13]^=h(i[12]+i[15],9),i[14]^=h(i[13]+i[12],13),i[15]^=h(i[14]+i[13],18);for(let r=0;r<16;++r)t[r]+=i[r]}function u(t,i,r,e){for(let n=0;n<e;n++)r[n]^=t[i+n]}function a(t,i,r,e,n){for(;n--;)r[e++]=t[i++]}function l(t){if(!t||"number"!=typeof t.length)return!1;for(let i=0;i<t.length;i++){const r=t[i];if("number"!=typeof r||r%1||r<0||r>=256)return!1}return!0}function f(t,i){if("number"!=typeof t||t%1)throw new Error("invalid "+i);return t}function c(t,i,e,h,s,c,m){if(e=f(e,"N"),h=f(h,"r"),s=f(s,"p"),c=f(c,"dkLen"),0===e||0!=(e&e-1))throw new Error("N must be power of 2");if(e>r/128/h)throw new Error("N too large");if(h>r/128/s)throw new Error("r too large");if(!l(t))throw new Error("password must be an array or buffer");if(t=Array.prototype.slice.call(t),!l(i))throw new Error("salt must be an array or buffer");i=Array.prototype.slice.call(i);let p=n(t,i,128*s*h);const d=new Uint32Array(32*s*h);for(let t=0;t<d.length;t++){const i=4*t;d[t]=(255&p[i+3])<<24|(255&p[i+2])<<16|(255&p[i+1])<<8|(255&p[i+0])<<0}const w=new Uint32Array(64*h),v=new Uint32Array(32*h*e),g=32*h,y=new Uint32Array(16),_=new Uint32Array(16),M=s*e*2;let b,k,E=0,A=null,x=!1,B=0,I=0;const S=m?parseInt(1e3/h):4294967295,T="undefined"!=typeof setImmediate?setImmediate:setTimeout,L=function(){if(x)return m(new Error("cancelled"),E/M);let i;switch(B){case 0:k=32*I*h,a(d,k,w,0,g),B=1,b=0;case 1:i=e-b,i>S&&(i=S);for(let t=0;t<i;t++)a(w,0,v,(b+t)*g,g),o(w,g,h,y,_);if(b+=i,E+=i,m){const t=parseInt(1e3*E/M);if(t!==A){if(x=m(null,E/M),x)break;A=t}}if(b<e)break;b=0,B=2;case 2:i=e-b,i>S&&(i=S);for(let t=0;t<i;t++){const t=w[16*(2*h-1)]&e-1;u(v,t*g,w,g),o(w,g,h,y,_)}if(b+=i,E+=i,m){const t=parseInt(1e3*E/M);if(t!==A){if(x=m(null,E/M),x)break;A=t}}if(b<e)break;if(a(w,0,d,k,g),I++,I<s){B=0;break}p=[];for(let t=0;t<d.length;t++)p.push(d[t]>>0&255),p.push(d[t]>>8&255),p.push(d[t]>>16&255),p.push(d[t]>>24&255);const r=n(t,p,c);return m&&m(null,1,r),r}m&&T(L)};if(!m)for(;;){const t=L();if(null!=t)return t}L()}const m={scrypt:function(t,i,r,e,n,o,h){return new Promise((function(s,u){let a=0;h&&h(0),c(t,i,r,e,n,o,(function(t,i,r){if(t)u(t);else if(r)h&&1!==a&&h(1),s(new Uint8Array(r));else if(h&&i!==a)return a=i,h(i)}))}))},syncScrypt:function(t,i,r,e,n,o){return new Uint8Array(c(t,i,r,e,n,o))}};t.exports=m}()},17221:function(t,i,r){t.exports=r(59119)(r(58573))},58573:function(t,i,r){const e=new(0,r(86266).ec)("secp256k1"),n=e.curve,o=n.n.constructor;function h(t){const i=t[0];switch(i){case 2:case 3:return 33!==t.length?null:function(t,i){let r=new o(i);if(r.cmp(n.p)>=0)return null;r=r.toRed(n.red);let h=r.redSqr().redIMul(r).redIAdd(n.b).redSqrt();return 3===t!==h.isOdd()&&(h=h.redNeg()),e.keyPair({pub:{x:r,y:h}})}(i,t.subarray(1,33));case 4:case 6:case 7:return 65!==t.length?null:function(t,i,r){let h=new o(i),s=new o(r);if(h.cmp(n.p)>=0||s.cmp(n.p)>=0)return null;if(h=h.toRed(n.red),s=s.toRed(n.red),(6===t||7===t)&&s.isOdd()!==(7===t))return null;const u=h.redSqr().redIMul(h);return s.redSqr().redISub(u.redIAdd(n.b)).isZero()?e.keyPair({pub:{x:h,y:s}}):null}(i,t.subarray(1,33),t.subarray(33,65));default:return null}}function s(t,i){const r=i.encode(null,33===t.length);for(let i=0;i<t.length;++i)t[i]=r[i]}t.exports={contextRandomize:()=>0,privateKeyVerify(t){const i=new o(t);return i.cmp(n.n)<0&&!i.isZero()?0:1},privateKeyNegate(t){const i=new o(t),r=n.n.sub(i).umod(n.n).toArrayLike(Uint8Array,"be",32);return t.set(r),0},privateKeyTweakAdd(t,i){const r=new o(i);if(r.cmp(n.n)>=0)return 1;if(r.iadd(new o(t)),r.cmp(n.n)>=0&&r.isub(n.n),r.isZero())return 1;const e=r.toArrayLike(Uint8Array,"be",32);return t.set(e),0},privateKeyTweakMul(t,i){let r=new o(i);if(r.cmp(n.n)>=0||r.isZero())return 1;r.imul(new o(t)),r.cmp(n.n)>=0&&(r=r.umod(n.n));const e=r.toArrayLike(Uint8Array,"be",32);return t.set(e),0},publicKeyVerify:t=>null===h(t)?1:0,publicKeyCreate(t,i){const r=new o(i);if(r.cmp(n.n)>=0||r.isZero())return 1;return s(t,e.keyFromPrivate(i).getPublic()),0},publicKeyConvert(t,i){const r=h(i);if(null===r)return 1;return s(t,r.getPublic()),0},publicKeyNegate(t,i){const r=h(i);if(null===r)return 1;const e=r.getPublic();return e.y=e.y.redNeg(),s(t,e),0},publicKeyCombine(t,i){const r=new Array(i.length);for(let t=0;t<i.length;++t)if(r[t]=h(i[t]),null===r[t])return 1;let e=r[0].getPublic();for(let t=1;t<r.length;++t)e=e.add(r[t].pub);return e.isInfinity()?2:(s(t,e),0)},publicKeyTweakAdd(t,i,r){const e=h(i);if(null===e)return 1;if((r=new o(r)).cmp(n.n)>=0)return 2;const u=e.getPublic().add(n.g.mul(r));return u.isInfinity()?2:(s(t,u),0)},publicKeyTweakMul(t,i,r){const e=h(i);if(null===e)return 1;if((r=new o(r)).cmp(n.n)>=0||r.isZero())return 2;return s(t,e.getPublic().mul(r)),0},signatureNormalize(t){const i=new o(t.subarray(0,32)),r=new o(t.subarray(32,64));return i.cmp(n.n)>=0||r.cmp(n.n)>=0?1:(1===r.cmp(e.nh)&&t.set(n.n.sub(r).toArrayLike(Uint8Array,"be",32),32),0)},signatureExport(t,i){const r=i.subarray(0,32),e=i.subarray(32,64);if(new o(r).cmp(n.n)>=0)return 1;if(new o(e).cmp(n.n)>=0)return 1;const{output:h}=t;let s=h.subarray(4,37);s[0]=0,s.set(r,1);let u=33,a=0;for(;u>1&&0===s[a]&&!(128&s[a+1]);--u,++a);if(s=s.subarray(a),128&s[0])return 1;if(u>1&&0===s[0]&&!(128&s[1]))return 1;let l=h.subarray(39,72);l[0]=0,l.set(e,1);let f=33,c=0;for(;f>1&&0===l[c]&&!(128&l[c+1]);--f,++c);return l=l.subarray(c),128&l[0]||f>1&&0===l[0]&&!(128&l[1])?1:(t.outputlen=6+u+f,h[0]=48,h[1]=t.outputlen-2,h[2]=2,h[3]=s.length,h.set(s,4),h[4+u]=2,h[5+u]=l.length,h.set(l,6+u),0)},signatureImport(t,i){if(i.length<8)return 1;if(i.length>72)return 1;if(48!==i[0])return 1;if(i[1]!==i.length-2)return 1;if(2!==i[2])return 1;const r=i[3];if(0===r)return 1;if(5+r>=i.length)return 1;if(2!==i[4+r])return 1;const e=i[5+r];if(0===e)return 1;if(6+r+e!==i.length)return 1;if(128&i[4])return 1;if(r>1&&0===i[4]&&!(128&i[5]))return 1;if(128&i[r+6])return 1;if(e>1&&0===i[r+6]&&!(128&i[r+7]))return 1;let h=i.subarray(4,4+r);if(33===h.length&&0===h[0]&&(h=h.subarray(1)),h.length>32)return 1;let s=i.subarray(6+r);if(33===s.length&&0===s[0]&&(s=s.slice(1)),s.length>32)throw new Error("S length is too long");let u=new o(h);u.cmp(n.n)>=0&&(u=new o(0));let a=new o(i.subarray(6+r));return a.cmp(n.n)>=0&&(a=new o(0)),t.set(u.toArrayLike(Uint8Array,"be",32),0),t.set(a.toArrayLike(Uint8Array,"be",32),32),0},ecdsaSign(t,i,r,h,s){if(s){const t=s;s=e=>{const n=t(i,r,null,h,e);if(!(n instanceof Uint8Array&&32===n.length))throw new Error("This is the way");return new o(n)}}const u=new o(r);if(u.cmp(n.n)>=0||u.isZero())return 1;let a;try{a=e.sign(i,r,{canonical:!0,k:s,pers:h})}catch(t){return 1}return t.signature.set(a.r.toArrayLike(Uint8Array,"be",32),0),t.signature.set(a.s.toArrayLike(Uint8Array,"be",32),32),t.recid=a.recoveryParam,0},ecdsaVerify(t,i,r){const s={r:t.subarray(0,32),s:t.subarray(32,64)},u=new o(s.r),a=new o(s.s);if(u.cmp(n.n)>=0||a.cmp(n.n)>=0)return 1;if(1===a.cmp(e.nh)||u.isZero()||a.isZero())return 3;const l=h(r);if(null===l)return 2;const f=l.getPublic();return e.verify(i,s,f)?0:3},ecdsaRecover(t,i,r,h){const u={r:i.slice(0,32),s:i.slice(32,64)},a=new o(u.r),l=new o(u.s);if(a.cmp(n.n)>=0||l.cmp(n.n)>=0)return 1;if(a.isZero()||l.isZero())return 2;let f;try{f=e.recoverPubKey(h,u,r)}catch(t){return 2}return s(t,f),0},ecdh(t,i,r,s,u,a,l){const f=h(i);if(null===f)return 1;const c=new o(r);if(c.cmp(n.n)>=0||c.isZero())return 2;const m=f.getPublic().mul(c);if(void 0===u){const i=m.encode(null,!0),r=e.hash().update(i).digest();for(let i=0;i<32;++i)t[i]=r[i]}else{a||(a=new Uint8Array(32));const i=m.getX().toArray("be",32);for(let t=0;t<32;++t)a[t]=i[t];l||(l=new Uint8Array(32));const r=m.getY().toArray("be",32);for(let t=0;t<32;++t)l[t]=r[t];const e=u(a,l,s);if(!(e instanceof Uint8Array&&e.length===t.length))return 2;t.set(e)}return 0}}},59119:function(t){const i="Impossible case. Please create issue.",r="The tweak was out of range or the resulted private key is invalid",e="The tweak was out of range or equal to zero",n="Unknow error on context randomization",o="Private Key is invalid",h="Public Key could not be parsed",s="Public Key serialization error",u="The sum of the public keys is not valid",a="Signature could not be parsed",l="The nonce generation function failed, or the private key was invalid",f="Public key could not be recover",c="Scalar was invalid (zero or overflow)";function m(t,i){if(!t)throw new Error(i)}function p(t,i,r){if(m(i instanceof Uint8Array,`Expected ${t} to be an Uint8Array`),void 0!==r)if(Array.isArray(r)){const e=`Expected ${t} to be an Uint8Array with length [${r.join(", ")}]`;m(r.includes(i.length),e)}else{const e=`Expected ${t} to be an Uint8Array with length ${r}`;m(i.length===r,e)}}function d(t){m("Boolean"===v(t),"Expected compressed to be a Boolean")}function w(t=(t=>new Uint8Array(t)),i){return"function"==typeof t&&(t=t(i)),p("output",t,i),t}function v(t){return Object.prototype.toString.call(t).slice(8,-1)}t.exports=t=>({contextRandomize(i){if(m(null===i||i instanceof Uint8Array,"Expected seed to be an Uint8Array or null"),null!==i&&p("seed",i,32),1===t.contextRandomize(i))throw new Error(n)},privateKeyVerify:i=>(p("private key",i,32),0===t.privateKeyVerify(i)),privateKeyNegate(r){switch(p("private key",r,32),t.privateKeyNegate(r)){case 0:return r;case 1:throw new Error(i)}},privateKeyTweakAdd(i,e){switch(p("private key",i,32),p("tweak",e,32),t.privateKeyTweakAdd(i,e)){case 0:return i;case 1:throw new Error(r)}},privateKeyTweakMul(i,r){switch(p("private key",i,32),p("tweak",r,32),t.privateKeyTweakMul(i,r)){case 0:return i;case 1:throw new Error(e)}},publicKeyVerify:i=>(p("public key",i,[33,65]),0===t.publicKeyVerify(i)),publicKeyCreate(i,r=!0,e){switch(p("private key",i,32),d(r),e=w(e,r?33:65),t.publicKeyCreate(e,i)){case 0:return e;case 1:throw new Error(o);case 2:throw new Error(s)}},publicKeyConvert(i,r=!0,e){switch(p("public key",i,[33,65]),d(r),e=w(e,r?33:65),t.publicKeyConvert(e,i)){case 0:return e;case 1:throw new Error(h);case 2:throw new Error(s)}},publicKeyNegate(r,e=!0,n){switch(p("public key",r,[33,65]),d(e),n=w(n,e?33:65),t.publicKeyNegate(n,r)){case 0:return n;case 1:throw new Error(h);case 2:throw new Error(i);case 3:throw new Error(s)}},publicKeyCombine(i,r=!0,e){m(Array.isArray(i),"Expected public keys to be an Array"),m(i.length>0,"Expected public keys array will have more than zero items");for(const t of i)p("public key",t,[33,65]);switch(d(r),e=w(e,r?33:65),t.publicKeyCombine(e,i)){case 0:return e;case 1:throw new Error(h);case 2:throw new Error(u);case 3:throw new Error(s)}},publicKeyTweakAdd(i,e,n=!0,o){switch(p("public key",i,[33,65]),p("tweak",e,32),d(n),o=w(o,n?33:65),t.publicKeyTweakAdd(o,i,e)){case 0:return o;case 1:throw new Error(h);case 2:throw new Error(r)}},publicKeyTweakMul(i,r,n=!0,o){switch(p("public key",i,[33,65]),p("tweak",r,32),d(n),o=w(o,n?33:65),t.publicKeyTweakMul(o,i,r)){case 0:return o;case 1:throw new Error(h);case 2:throw new Error(e)}},signatureNormalize(i){switch(p("signature",i,64),t.signatureNormalize(i)){case 0:return i;case 1:throw new Error(a)}},signatureExport(r,e){p("signature",r,64);const n={output:e=w(e,72),outputlen:72};switch(t.signatureExport(n,r)){case 0:return e.slice(0,n.outputlen);case 1:throw new Error(a);case 2:throw new Error(i)}},signatureImport(r,e){switch(p("signature",r),e=w(e,64),t.signatureImport(e,r)){case 0:return e;case 1:throw new Error(a);case 2:throw new Error(i)}},ecdsaSign(r,e,n={},o){p("message",r,32),p("private key",e,32),m("Object"===v(n),"Expected options to be an Object"),void 0!==n.data&&p("options.data",n.data),void 0!==n.noncefn&&m("Function"===v(n.noncefn),"Expected options.noncefn to be a Function");const h={signature:o=w(o,64),recid:null};switch(t.ecdsaSign(h,r,e,n.data,n.noncefn)){case 0:return h;case 1:throw new Error(l);case 2:throw new Error(i)}},ecdsaVerify(i,r,e){switch(p("signature",i,64),p("message",r,32),p("public key",e,[33,65]),t.ecdsaVerify(i,r,e)){case 0:return!0;case 3:return!1;case 1:throw new Error(a);case 2:throw new Error(h)}},ecdsaRecover(r,e,n,o=!0,h){switch(p("signature",r,64),m("Number"===v(e)&&e>=0&&e<=3,"Expected recovery id to be a Number within interval [0, 3]"),p("message",n,32),d(o),h=w(h,o?33:65),t.ecdsaRecover(h,r,e,n)){case 0:return h;case 1:throw new Error(a);case 2:throw new Error(f);case 3:throw new Error(i)}},ecdh(i,r,e={},n){switch(p("public key",i,[33,65]),p("private key",r,32),m("Object"===v(e),"Expected options to be an Object"),void 0!==e.data&&p("options.data",e.data),void 0!==e.hashfn?(m("Function"===v(e.hashfn),"Expected options.hashfn to be a Function"),void 0!==e.xbuf&&p("options.xbuf",e.xbuf,32),void 0!==e.ybuf&&p("options.ybuf",e.ybuf,32),p("output",n)):n=w(n,32),t.ecdh(n,i,r,e.data,e.hashfn,e.xbuf,e.ybuf)){case 0:return n;case 1:throw new Error(h);case 2:throw new Error(c)}}})},80045:function(t,i,r){var e=r(34155);!function(i){"use strict";var r=function(t){setTimeout(t,0)};void 0!==e&&e&&"function"==typeof e.nextTick&&(r=e.nextTick),t.exports=function(t){var i={capacity:t||1,current:0,queue:[],firstHere:!1,take:function(){if(!1===i.firstHere){i.current++,i.firstHere=!0;var t=1}else t=0;var r={n:1};"function"==typeof arguments[0]?r.task=arguments[0]:r.n=arguments[0],arguments.length>=2&&("function"==typeof arguments[1]?r.task=arguments[1]:r.n=arguments[1]);var e=r.task;if(r.task=function(){e(i.leave)},i.current+r.n-t>i.capacity)return 1===t&&(i.current--,i.firstHere=!1),i.queue.push(r);i.current+=r.n-t,r.task(i.leave),1===t&&(i.firstHere=!1)},leave:function(t){if(t=t||1,i.current-=t,i.queue.length){var e=i.queue[0];e.n+i.current>i.capacity||(i.queue.shift(),i.current+=e.n,r(e.task))}else if(i.current<0)throw new Error("leave called too many times.")},available:function(t){return t=t||1,i.current+t<=i.capacity}};return i}}()},24189:function(t,i,r){var e=r(89509).Buffer;function n(t,i){this._block=e.alloc(t),this._finalSize=i,this._blockSize=t,this._len=0}n.prototype.update=function(t,i){"string"==typeof t&&(i=i||"utf8",t=e.from(t,i));for(var r=this._block,n=this._blockSize,o=t.length,h=this._len,s=0;s<o;){for(var u=h%n,a=Math.min(o-s,n-u),l=0;l<a;l++)r[u+l]=t[s+l];s+=a,(h+=a)%n==0&&this._update(r)}return this._len+=o,this},n.prototype.digest=function(t){var i=this._len%this._blockSize;this._block[i]=128,this._block.fill(0,i+1),i>=this._finalSize&&(this._update(this._block),this._block.fill(0));var r=8*this._len;if(r<=4294967295)this._block.writeUInt32BE(r,this._blockSize-4);else{var e=(4294967295&r)>>>0,n=(r-e)/4294967296;this._block.writeUInt32BE(n,this._blockSize-8),this._block.writeUInt32BE(e,this._blockSize-4)}this._update(this._block);var o=this._hash();return t?o.toString(t):o},n.prototype._update=function(){throw new Error("_update must be implemented by subclass")},t.exports=n},89072:function(t,i,r){var e=t.exports=function(t){t=t.toLowerCase();var i=e[t];if(!i)throw new Error(t+" is not supported (we accept pull requests)");return new i};e.sha=r(74448),e.sha1=r(18336),e.sha224=r(48432),e.sha256=r(67499),e.sha384=r(51686),e.sha512=r(87816)},74448:function(t,i,r){var e=r(35717),n=r(24189),o=r(89509).Buffer,h=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function u(){this.init(),this._w=s,n.call(this,64,56)}function a(t){return t<<30|t>>>2}function l(t,i,r,e){return 0===t?i&r|~i&e:2===t?i&r|i&e|r&e:i^r^e}e(u,n),u.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},u.prototype._update=function(t){for(var i,r=this._w,e=0|this._a,n=0|this._b,o=0|this._c,s=0|this._d,u=0|this._e,f=0;f<16;++f)r[f]=t.readInt32BE(4*f);for(;f<80;++f)r[f]=r[f-3]^r[f-8]^r[f-14]^r[f-16];for(var c=0;c<80;++c){var m=~~(c/20),p=0|((i=e)<<5|i>>>27)+l(m,n,o,s)+u+r[c]+h[m];u=s,s=o,o=a(n),n=e,e=p}this._a=e+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=u+this._e|0},u.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=u},18336:function(t,i,r){var e=r(35717),n=r(24189),o=r(89509).Buffer,h=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function u(){this.init(),this._w=s,n.call(this,64,56)}function a(t){return t<<5|t>>>27}function l(t){return t<<30|t>>>2}function f(t,i,r,e){return 0===t?i&r|~i&e:2===t?i&r|i&e|r&e:i^r^e}e(u,n),u.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},u.prototype._update=function(t){for(var i,r=this._w,e=0|this._a,n=0|this._b,o=0|this._c,s=0|this._d,u=0|this._e,c=0;c<16;++c)r[c]=t.readInt32BE(4*c);for(;c<80;++c)r[c]=(i=r[c-3]^r[c-8]^r[c-14]^r[c-16])<<1|i>>>31;for(var m=0;m<80;++m){var p=~~(m/20),d=a(e)+f(p,n,o,s)+u+r[m]+h[p]|0;u=s,s=o,o=l(n),n=e,e=d}this._a=e+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=u+this._e|0},u.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=u},48432:function(t,i,r){var e=r(35717),n=r(67499),o=r(24189),h=r(89509).Buffer,s=new Array(64);function u(){this.init(),this._w=s,o.call(this,64,56)}e(u,n),u.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},u.prototype._hash=function(){var t=h.allocUnsafe(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},t.exports=u},67499:function(t,i,r){var e=r(35717),n=r(24189),o=r(89509).Buffer,h=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=new Array(64);function u(){this.init(),this._w=s,n.call(this,64,56)}function a(t,i,r){return r^t&(i^r)}function l(t,i,r){return t&i|r&(t|i)}function f(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function c(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function m(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}e(u,n),u.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},u.prototype._update=function(t){for(var i,r=this._w,e=0|this._a,n=0|this._b,o=0|this._c,s=0|this._d,u=0|this._e,p=0|this._f,d=0|this._g,w=0|this._h,v=0;v<16;++v)r[v]=t.readInt32BE(4*v);for(;v<64;++v)r[v]=0|(((i=r[v-2])>>>17|i<<15)^(i>>>19|i<<13)^i>>>10)+r[v-7]+m(r[v-15])+r[v-16];for(var g=0;g<64;++g){var y=w+c(u)+a(u,p,d)+h[g]+r[g]|0,_=f(e)+l(e,n,o)|0;w=d,d=p,p=u,u=s+y|0,s=o,o=n,n=e,e=y+_|0}this._a=e+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=u+this._e|0,this._f=p+this._f|0,this._g=d+this._g|0,this._h=w+this._h|0},u.prototype._hash=function(){var t=o.allocUnsafe(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},t.exports=u},51686:function(t,i,r){var e=r(35717),n=r(87816),o=r(24189),h=r(89509).Buffer,s=new Array(160);function u(){this.init(),this._w=s,o.call(this,128,112)}e(u,n),u.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},u.prototype._hash=function(){var t=h.allocUnsafe(48);function i(i,r,e){t.writeInt32BE(i,e),t.writeInt32BE(r,e+4)}return i(this._ah,this._al,0),i(this._bh,this._bl,8),i(this._ch,this._cl,16),i(this._dh,this._dl,24),i(this._eh,this._el,32),i(this._fh,this._fl,40),t},t.exports=u},87816:function(t,i,r){var e=r(35717),n=r(24189),o=r(89509).Buffer,h=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],s=new Array(160);function u(){this.init(),this._w=s,n.call(this,128,112)}function a(t,i,r){return r^t&(i^r)}function l(t,i,r){return t&i|r&(t|i)}function f(t,i){return(t>>>28|i<<4)^(i>>>2|t<<30)^(i>>>7|t<<25)}function c(t,i){return(t>>>14|i<<18)^(t>>>18|i<<14)^(i>>>9|t<<23)}function m(t,i){return(t>>>1|i<<31)^(t>>>8|i<<24)^t>>>7}function p(t,i){return(t>>>1|i<<31)^(t>>>8|i<<24)^(t>>>7|i<<25)}function d(t,i){return(t>>>19|i<<13)^(i>>>29|t<<3)^t>>>6}function w(t,i){return(t>>>19|i<<13)^(i>>>29|t<<3)^(t>>>6|i<<26)}function v(t,i){return t>>>0<i>>>0?1:0}e(u,n),u.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},u.prototype._update=function(t){for(var i=this._w,r=0|this._ah,e=0|this._bh,n=0|this._ch,o=0|this._dh,s=0|this._eh,u=0|this._fh,g=0|this._gh,y=0|this._hh,_=0|this._al,M=0|this._bl,b=0|this._cl,k=0|this._dl,E=0|this._el,A=0|this._fl,x=0|this._gl,B=0|this._hl,I=0;I<32;I+=2)i[I]=t.readInt32BE(4*I),i[I+1]=t.readInt32BE(4*I+4);for(;I<160;I+=2){var S=i[I-30],T=i[I-30+1],L=m(S,T),U=p(T,S),R=d(S=i[I-4],T=i[I-4+1]),K=w(T,S),N=i[I-14],P=i[I-14+1],q=i[I-32],Z=i[I-32+1],z=U+P|0,O=L+N+v(z,U)|0;O=(O=O+R+v(z=z+K|0,K)|0)+q+v(z=z+Z|0,Z)|0,i[I]=O,i[I+1]=z}for(var j=0;j<160;j+=2){O=i[j],z=i[j+1];var C=l(r,e,n),F=l(_,M,b),H=f(r,_),V=f(_,r),$=c(s,E),D=c(E,s),Y=h[j],G=h[j+1],X=a(s,u,g),J=a(E,A,x),W=B+D|0,Q=y+$+v(W,B)|0;Q=(Q=(Q=Q+X+v(W=W+J|0,J)|0)+Y+v(W=W+G|0,G)|0)+O+v(W=W+z|0,z)|0;var tt=V+F|0,it=H+C+v(tt,V)|0;y=g,B=x,g=u,x=A,u=s,A=E,s=o+Q+v(E=k+W|0,k)|0,o=n,k=b,n=e,b=M,e=r,M=_,r=Q+it+v(_=W+tt|0,W)|0}this._al=this._al+_|0,this._bl=this._bl+M|0,this._cl=this._cl+b|0,this._dl=this._dl+k|0,this._el=this._el+E|0,this._fl=this._fl+A|0,this._gl=this._gl+x|0,this._hl=this._hl+B|0,this._ah=this._ah+r+v(this._al,_)|0,this._bh=this._bh+e+v(this._bl,M)|0,this._ch=this._ch+n+v(this._cl,b)|0,this._dh=this._dh+o+v(this._dl,k)|0,this._eh=this._eh+s+v(this._el,E)|0,this._fh=this._fh+u+v(this._fl,A)|0,this._gh=this._gh+g+v(this._gl,x)|0,this._hh=this._hh+y+v(this._hl,B)|0},u.prototype._hash=function(){var t=o.allocUnsafe(64);function i(i,r,e){t.writeInt32BE(i,e),t.writeInt32BE(r,e+4)}return i(this._ah,this._al,0),i(this._bh,this._bl,8),i(this._ch,this._cl,16),i(this._dh,this._dl,24),i(this._eh,this._el,32),i(this._fh,this._fl,40),i(this._gh,this._gl,48),i(this._hh,this._hl,56),t},t.exports=u}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
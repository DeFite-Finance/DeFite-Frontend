(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[7010],{82131:function(t,e,r){"use strict";r.r(e),r.d(e,{getCLS:function(){return m},getFCP:function(){return g},getFID:function(){return x},getLCP:function(){return F},getTTFB:function(){return N}});var n,o,i,a,s=function(t,e){return{name:t,value:void 0===e?-1:e,delta:0,entries:[],id:"v1-".concat(Date.now(),"-").concat(Math.floor(8999999999999*Math.random())+1e12)}},c=function(t,e){try{if(PerformanceObserver.supportedEntryTypes.includes(t)){if("first-input"===t&&!("PerformanceEventTiming"in self))return;var r=new PerformanceObserver((function(t){return t.getEntries().map(e)}));return r.observe({type:t,buffered:!0}),r}}catch(t){}},u=function(t,e){var r=function r(n){"pagehide"!==n.type&&"hidden"!==document.visibilityState||(t(n),e&&(removeEventListener("visibilitychange",r,!0),removeEventListener("pagehide",r,!0)))};addEventListener("visibilitychange",r,!0),addEventListener("pagehide",r,!0)},l=function(t){addEventListener("pageshow",(function(e){e.persisted&&t(e)}),!0)},p="function"==typeof WeakSet?new WeakSet:new Set,d=function(t,e,r){var n;return function(){e.value>=0&&(r||p.has(e)||"hidden"===document.visibilityState)&&(e.delta=e.value-(n||0),(e.delta||void 0===n)&&(n=e.value,t(e)))}},m=function(t,e){var r,n=s("CLS",0),o=function(t){t.hadRecentInput||(n.value+=t.value,n.entries.push(t),r())},i=c("layout-shift",o);i&&(r=d(t,n,e),u((function(){i.takeRecords().map(o),r()})),l((function(){n=s("CLS",0),r=d(t,n,e)})))},f=-1,h=function(){return"hidden"===document.visibilityState?0:1/0},v=function(){u((function(t){var e=t.timeStamp;f=e}),!0)},b=function(){return f<0&&(f=h(),v(),l((function(){setTimeout((function(){f=h(),v()}),0)}))),{get timeStamp(){return f}}},g=function(t,e){var r,n=b(),o=s("FCP"),i=function(t){"first-contentful-paint"===t.name&&(u&&u.disconnect(),t.startTime<n.timeStamp&&(o.value=t.startTime,o.entries.push(t),p.add(o),r()))},a=performance.getEntriesByName("first-contentful-paint")[0],u=a?null:c("paint",i);(a||u)&&(r=d(t,o,e),a&&i(a),l((function(n){o=s("FCP"),r=d(t,o,e),requestAnimationFrame((function(){requestAnimationFrame((function(){o.value=performance.now()-n.timeStamp,p.add(o),r()}))}))})))},y={passive:!0,capture:!0},E=new Date,w=function(t,e){n||(n=e,o=t,i=new Date,T(removeEventListener),P())},P=function(){if(o>=0&&o<i-E){var t={entryType:"first-input",name:n.type,target:n.target,cancelable:n.cancelable,startTime:n.timeStamp,processingStart:n.timeStamp+o};a.forEach((function(e){e(t)})),a=[]}},k=function(t){if(t.cancelable){var e=(t.timeStamp>1e12?new Date:performance.now())-t.timeStamp;"pointerdown"==t.type?function(t,e){var r=function(){w(t,e),o()},n=function(){o()},o=function(){removeEventListener("pointerup",r,y),removeEventListener("pointercancel",n,y)};addEventListener("pointerup",r,y),addEventListener("pointercancel",n,y)}(e,t):w(e,t)}},T=function(t){["mousedown","keydown","touchstart","pointerdown"].forEach((function(e){return t(e,k,y)}))},x=function(t,e){var r,i=b(),m=s("FID"),f=function(t){t.startTime<i.timeStamp&&(m.value=t.processingStart-t.startTime,m.entries.push(t),p.add(m),r())},h=c("first-input",f);r=d(t,m,e),h&&u((function(){h.takeRecords().map(f),h.disconnect()}),!0),h&&l((function(){var i;m=s("FID"),r=d(t,m,e),a=[],o=-1,n=null,T(addEventListener),i=f,a.push(i),P()}))},F=function(t,e){var r,n=b(),o=s("LCP"),i=function(t){var e=t.startTime;e<n.timeStamp&&(o.value=e,o.entries.push(t)),r()},a=c("largest-contentful-paint",i);if(a){r=d(t,o,e);var m=function(){p.has(o)||(a.takeRecords().map(i),a.disconnect(),p.add(o),r())};["keydown","click"].forEach((function(t){addEventListener(t,m,{once:!0,capture:!0})})),u(m,!0),l((function(n){o=s("LCP"),r=d(t,o,e),requestAnimationFrame((function(){requestAnimationFrame((function(){o.value=performance.now()-n.timeStamp,p.add(o),r()}))}))}))}},N=function(t){var e,r=s("TTFB");e=function(){try{var e=performance.getEntriesByType("navigation")[0]||function(){var t=performance.timing,e={entryType:"navigation",startTime:0};for(var r in t)"navigationStart"!==r&&"toJSON"!==r&&(e[r]=Math.max(t[r]-t.navigationStart,0));return e}();if(r.value=r.delta=e.responseStart,r.value<0)return;r.entries=[e],t(r)}catch(t){}},"complete"===document.readyState?setTimeout(e,0):addEventListener("pageshow",e)}},63583:function(t,e,r){"use strict";var n=r(71789),o=function t(e){this.givenProvider=t.givenProvider,e&&e._requestManager&&(e=e.currentProvider),"undefined"!=typeof document&&(this.pick=n.pick),this.setProvider(e)};o.givenProvider=null,"undefined"!=typeof ethereum&&ethereum.bzz&&(o.givenProvider=ethereum.bzz),o.prototype.setProvider=function(t){if(t&&"object"==typeof t&&"string"==typeof t.bzz&&(t=t.bzz),"string"!=typeof t){this.currentProvider=null;var e=new Error("No provider set, please set one using bzz.setProvider().");return this.download=this.upload=this.isAvailable=function(){throw e},!1}return this.currentProvider=t,this.download=n.at(t).download,this.upload=n.at(t).upload,this.isAvailable=n.at(t).isAvailable,!0},t.exports=o},54928:function(t){"use strict";t.exports={ErrorResponse:function(t){var e=t&&t.error&&t.error.message?t.error.message:JSON.stringify(t),r=t.error&&t.error.data?t.error.data:null,n=new Error("Returned error: "+e);return n.data=r,n},InvalidNumberOfParams:function(t,e,r){return new Error('Invalid number of parameters for "'+r+'". Got '+t+" expected "+e+"!")},InvalidConnection:function(t,e){return this.ConnectionError("CONNECTION ERROR: Couldn't connect to node "+t+".",e)},InvalidProvider:function(){return new Error("Provider not set or invalid")},InvalidResponse:function(t){var e=t&&t.error&&t.error.message?t.error.message:"Invalid JSON RPC response: "+JSON.stringify(t);return new Error(e)},ConnectionTimeout:function(t){return new Error("CONNECTION TIMEOUT: timeout of "+t+" ms achived")},ConnectionNotOpenError:function(t){return this.ConnectionError("connection not open on send()",t)},ConnectionCloseError:function(t){return"object"==typeof t&&t.code&&t.reason?this.ConnectionError("CONNECTION ERROR: The connection got closed with the close code `"+t.code+"` and the following reason string `"+t.reason+"`",t):new Error("CONNECTION ERROR: The connection closed unexpectedly")},MaxAttemptsReachedOnReconnectingError:function(){return new Error("Maximum number of reconnect attempts reached!")},PendingRequestsOnReconnectingError:function(){return new Error("CONNECTION ERROR: Provider started to reconnect before the response got received!")},ConnectionError:function(t,e){const r=new Error(t);return e&&(r.code=e.code,r.reason=e.reason),r},RevertInstructionError:function(t,e){var r=new Error("Your request got reverted with the following reason string: "+t);return r.reason=t,r.signature=e,r},TransactionRevertInstructionError:function(t,e,r){var n=new Error("Transaction has been reverted by the EVM:\n"+JSON.stringify(r,null,2));return n.reason=t,n.signature=e,n.receipt=r,n},TransactionError:function(t,e){var r=new Error(t);return r.receipt=e,r},NoContractAddressFoundError:function(t){return this.TransactionError("The transaction receipt didn't contain a contract address.",t)},ContractCodeNotStoredError:function(t){return this.TransactionError("The contract code couldn't be stored, please check your gas limit.",t)},TransactionRevertedWithoutReasonError:function(t){return this.TransactionError("Transaction has been reverted by the EVM:\n"+JSON.stringify(t,null,2),t)},TransactionOutOfGasError:function(t){return this.TransactionError("Transaction ran out of gas. Please provide more gas:\n"+JSON.stringify(t,null,2),t)},ResolverMethodMissingError:function(t,e){return new Error("The resolver at "+t+'does not implement requested method: "'+e+'".')},ContractMissingABIError:function(){return new Error("You must provide the json interface of the contract when instantiating a contract object.")},ContractOnceRequiresCallbackError:function(){return new Error("Once requires a callback as the second parameter.")},ContractEventDoesNotExistError:function(t){return new Error('Event "'+t+"\" doesn't exist in this contract.")},ContractReservedEventError:function(t){return new Error('The event "'+t+"\" is a reserved event name, you can't use it.")},ContractMissingDeployDataError:function(){return new Error('No "data" specified in neither the given options, nor the default options.')},ContractNoAddressDefinedError:function(){return new Error("This contract object doesn't have address set yet, please set an address first.")},ContractNoFromAddressDefinedError:function(){return new Error('No "from" address specified in neither the given options, nor the default options.')}}},76267:function(t,e,r){"use strict";var n=r(18269),o=r(34751),i=function(t){return n.toBN(t).toString(10)},a=function(t){if(void 0!==t)return function(t){return"latest"===t||"pending"===t||"earliest"===t}(t)?t:"genesis"===t?"0x0":n.isHexStrict(t)?"string"==typeof t?t.toLowerCase():t:n.numberToHex(t)},s=function(t){if(t.to&&(t.to=l(t.to)),t.data&&t.input)throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');if(!t.data&&t.input&&(t.data=t.input,delete t.input),t.data&&!t.data.startsWith("0x")&&(t.data="0x"+t.data),t.data&&!n.isHex(t.data))throw new Error("The data field must be HEX encoded data.");return(t.gas||t.gasLimit)&&(t.gas=t.gas||t.gasLimit),(t.maxPriorityFeePerGas||t.maxFeePerGas)&&delete t.gasPrice,["gasPrice","gas","value","maxPriorityFeePerGas","maxFeePerGas","nonce"].filter((function(e){return void 0!==t[e]})).forEach((function(e){t[e]=n.numberToHex(t[e])})),t},c=function(t){return null!==t.blockNumber&&(t.blockNumber=n.hexToNumber(t.blockNumber)),null!==t.transactionIndex&&(t.transactionIndex=n.hexToNumber(t.transactionIndex)),t.nonce=n.hexToNumber(t.nonce),t.gas=n.hexToNumber(t.gas),t.gasPrice&&(t.gasPrice=i(t.gasPrice)),t.maxFeePerGas&&(t.maxFeePerGas=i(t.maxFeePerGas)),t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=i(t.maxPriorityFeePerGas)),t.type&&(t.type=n.hexToNumber(t.type)),t.value=i(t.value),t.to&&n.isAddress(t.to)?t.to=n.toChecksumAddress(t.to):t.to=null,t.from&&(t.from=n.toChecksumAddress(t.from)),t},u=function(t){if("string"==typeof t.blockHash&&"string"==typeof t.transactionHash&&"string"==typeof t.logIndex){var e=n.sha3(t.blockHash.replace("0x","")+t.transactionHash.replace("0x","")+t.logIndex.replace("0x",""));t.id="log_"+e.replace("0x","").substr(0,8)}else t.id||(t.id=null);return null!==t.blockNumber&&(t.blockNumber=n.hexToNumber(t.blockNumber)),null!==t.transactionIndex&&(t.transactionIndex=n.hexToNumber(t.transactionIndex)),null!==t.logIndex&&(t.logIndex=n.hexToNumber(t.logIndex)),t.address&&(t.address=n.toChecksumAddress(t.address)),t},l=function(t){var e=new o(t);if(e.isValid()&&e.isDirect())return e.toAddress().toLowerCase();if(n.isAddress(t))return"0x"+t.toLowerCase().replace("0x","");throw new Error(`Provided address ${t} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`)};t.exports={inputDefaultBlockNumberFormatter:function(t){return a(this&&null==t?this.defaultBlock:t)},inputBlockNumberFormatter:a,inputCallFormatter:function(t){var e=(t=s(t)).from||(this?this.defaultAccount:null);return e&&(t.from=l(e)),t},inputTransactionFormatter:function(t){if("number"!=typeof(t=s(t)).from&&(!t.from||"object"!=typeof t.from)){if(t.from=t.from||(this?this.defaultAccount:null),!t.from&&"number"!=typeof t.from)throw new Error('The send transactions "from" field must be defined!');t.from=l(t.from)}return t},inputAddressFormatter:l,inputPostFormatter:function(t){return t.ttl&&(t.ttl=n.numberToHex(t.ttl)),t.workToProve&&(t.workToProve=n.numberToHex(t.workToProve)),t.priority&&(t.priority=n.numberToHex(t.priority)),Array.isArray(t.topics)||(t.topics=t.topics?[t.topics]:[]),t.topics=t.topics.map((function(t){return 0===t.indexOf("0x")?t:n.fromUtf8(t)})),t},inputLogFormatter:function(t){var e=function(t){return null==t?null:0===(t=String(t)).indexOf("0x")?t:n.fromUtf8(t)};return void 0===t&&(t={}),void 0===t.fromBlock&&(t={...t,fromBlock:"latest"}),(t.fromBlock||0===t.fromBlock)&&(t.fromBlock=a(t.fromBlock)),(t.toBlock||0===t.toBlock)&&(t.toBlock=a(t.toBlock)),t.topics=t.topics||[],t.topics=t.topics.map((function(t){return Array.isArray(t)?t.map(e):e(t)})),e=null,t.address&&(t.address=Array.isArray(t.address)?t.address.map((function(t){return l(t)})):l(t.address)),t},inputSignFormatter:function(t){return n.isHexStrict(t)?t:n.utf8ToHex(t)},inputStorageKeysFormatter:function(t){return t.map(n.numberToHex)},outputProofFormatter:function(t){return t.address=n.toChecksumAddress(t.address),t.nonce=n.hexToNumberString(t.nonce),t.balance=n.hexToNumberString(t.balance),t},outputBigNumberFormatter:i,outputTransactionFormatter:c,outputTransactionReceiptFormatter:function(t){if("object"!=typeof t)throw new Error("Received receipt is invalid: "+t);return null!==t.blockNumber&&(t.blockNumber=n.hexToNumber(t.blockNumber)),null!==t.transactionIndex&&(t.transactionIndex=n.hexToNumber(t.transactionIndex)),t.cumulativeGasUsed=n.hexToNumber(t.cumulativeGasUsed),t.gasUsed=n.hexToNumber(t.gasUsed),Array.isArray(t.logs)&&(t.logs=t.logs.map(u)),t.effectiveGasPrice&&(t.effectiveGasPrice=n.hexToNumber(t.effectiveGasPrice)),t.contractAddress&&(t.contractAddress=n.toChecksumAddress(t.contractAddress)),void 0!==t.status&&null!==t.status&&(t.status=Boolean(parseInt(t.status))),t},outputBlockFormatter:function(t){return t.gasLimit=n.hexToNumber(t.gasLimit),t.gasUsed=n.hexToNumber(t.gasUsed),t.size=n.hexToNumber(t.size),t.timestamp=n.hexToNumber(t.timestamp),null!==t.number&&(t.number=n.hexToNumber(t.number)),t.difficulty&&(t.difficulty=i(t.difficulty)),t.totalDifficulty&&(t.totalDifficulty=i(t.totalDifficulty)),Array.isArray(t.transactions)&&t.transactions.forEach((function(t){if("string"!=typeof t)return c(t)})),t.miner&&(t.miner=n.toChecksumAddress(t.miner)),t.baseFeePerGas&&(t.baseFeePerGas=n.hexToNumber(t.baseFeePerGas)),t},outputLogFormatter:u,outputPostFormatter:function(t){return t.expiry=n.hexToNumber(t.expiry),t.sent=n.hexToNumber(t.sent),t.ttl=n.hexToNumber(t.ttl),t.workProved=n.hexToNumber(t.workProved),t.topics||(t.topics=[]),t.topics=t.topics.map((function(t){return n.toUtf8(t)})),t},outputSyncingFormatter:function(t){return t.startingBlock=n.hexToNumber(t.startingBlock),t.currentBlock=n.hexToNumber(t.currentBlock),t.highestBlock=n.hexToNumber(t.highestBlock),t.knownStates&&(t.knownStates=n.hexToNumber(t.knownStates),t.pulledStates=n.hexToNumber(t.pulledStates)),t}}},84390:function(t,e,r){"use strict";var n=r(54928),o=r(76267);t.exports={errors:n,formatters:o}},93952:function(t,e,r){"use strict";var n=r(84390).errors,o=r(84390).formatters,i=r(18269),a=r(4017),s=r(96602).subscriptions,c=r(75504),u=function(t){if(!t.call||!t.name)throw new Error('When creating a method you need to provide at least the "name" and "call" property.');this.name=t.name,this.call=t.call,this.params=t.params||0,this.inputFormatter=t.inputFormatter,this.outputFormatter=t.outputFormatter,this.transformPayload=t.transformPayload,this.extraFormatters=t.extraFormatters,this.abiCoder=t.abiCoder,this.requestManager=t.requestManager,this.accounts=t.accounts,this.defaultBlock=t.defaultBlock||"latest",this.defaultAccount=t.defaultAccount||null,this.transactionBlockTimeout=t.transactionBlockTimeout||50,this.transactionConfirmationBlocks=t.transactionConfirmationBlocks||24,this.transactionPollingTimeout=t.transactionPollingTimeout||750,this.transactionPollingInterval=t.transactionPollingInterval||1e3,this.blockHeaderTimeout=t.blockHeaderTimeout||10,this.defaultCommon=t.defaultCommon,this.defaultChain=t.defaultChain,this.defaultHardfork=t.defaultHardfork,this.handleRevert=t.handleRevert};u.prototype.setRequestManager=function(t,e){this.requestManager=t,e&&(this.accounts=e)},u.prototype.createFunction=function(t,e){var r=this.buildCall();return r.call=this.call,this.setRequestManager(t||this.requestManager,e||this.accounts),r},u.prototype.attachToObject=function(t){var e=this.buildCall();e.call=this.call;var r=this.name.split(".");r.length>1?(t[r[0]]=t[r[0]]||{},t[r[0]][r[1]]=e):t[r[0]]=e},u.prototype.getCall=function(t){return"function"==typeof this.call?this.call(t):this.call},u.prototype.extractCallback=function(t){if("function"==typeof t[t.length-1])return t.pop()},u.prototype.validateArgs=function(t){if(t.length!==this.params)throw n.InvalidNumberOfParams(t.length,this.params,this.name)},u.prototype.formatInput=function(t){var e=this;return this.inputFormatter?this.inputFormatter.map((function(r,n){return r?r.call(e,t[n]):t[n]})):t},u.prototype.formatOutput=function(t){var e=this;return Array.isArray(t)?t.map((function(t){return e.outputFormatter&&t?e.outputFormatter(t):t})):this.outputFormatter&&t?this.outputFormatter(t):t},u.prototype.toPayload=function(t){var e=this.getCall(t),r=this.extractCallback(t),n=this.formatInput(t);this.validateArgs(n);var o={method:e,params:n,callback:r};return this.transformPayload&&(o=this.transformPayload(o)),o},u.prototype._confirmTransaction=function(t,e,r){var l=this,p=!1,d=!0,m=0,f=0,h=null,v=null,b=null,g=r.params[0]&&"object"==typeof r.params[0]&&r.params[0].gas?r.params[0].gas:null,y=!!r.params[0]&&"object"==typeof r.params[0]&&r.params[0].data&&r.params[0].from&&!r.params[0].to,E=y&&r.params[0].data.length>2,w=[new u({name:"getBlockByNumber",call:"eth_getBlockByNumber",params:2,inputFormatter:[o.inputBlockNumberFormatter,function(t){return!!t}],outputFormatter:o.outputBlockFormatter}),new u({name:"getTransactionReceipt",call:"eth_getTransactionReceipt",params:1,inputFormatter:[null],outputFormatter:o.outputTransactionReceiptFormatter}),new u({name:"getCode",call:"eth_getCode",params:2,inputFormatter:[o.inputAddressFormatter,o.inputDefaultBlockNumberFormatter]}),new u({name:"getTransactionByHash",call:"eth_getTransactionByHash",params:1,inputFormatter:[null],outputFormatter:o.outputTransactionFormatter}),new s({name:"subscribe",type:"eth",subscriptions:{newBlockHeaders:{subscriptionName:"newHeads",params:0,outputFormatter:o.outputBlockFormatter}}})],P={};w.forEach((t=>{t.attachToObject(P),t.requestManager=l.requestManager}));var k=function(s,u,w,k,T){if(!w)return T||(T={unsubscribe:function(){clearInterval(h),clearTimeout(v)}}),(s?a.resolve(s):P.getTransactionReceipt(e)).catch((function(e){T.unsubscribe(),p=!0,i._fireError({message:"Failed to check for transaction receipt:",data:e},t.eventEmitter,t.reject)})).then((async function(e){if(!e||!e.blockHash)throw new Error("Receipt missing or blockHash null");if(l.extraFormatters&&l.extraFormatters.receiptFormatter&&(e=l.extraFormatters.receiptFormatter(e)),t.eventEmitter.listeners("confirmation").length>0){var r;if(void 0===s||0!==f){var n=await P.getBlockByNumber("latest"),o=n?n.hash:null;u?b?(r=await P.getBlockByNumber(b.number+1))&&(b=r,t.eventEmitter.emit("confirmation",f,e,o)):(r=await P.getBlockByNumber(e.blockNumber),b=r,t.eventEmitter.emit("confirmation",f,e,o)):t.eventEmitter.emit("confirmation",f,e,o)}(u&&r||!u)&&f++,d=!1,f===l.transactionConfirmationBlocks+1&&(T.unsubscribe(),t.eventEmitter.removeAllListeners())}return e})).then((async function(e){if(y&&!p){if(!e.contractAddress)return d&&(T.unsubscribe(),p=!0),void i._fireError(n.NoContractAddressFoundError(e),t.eventEmitter,t.reject,null,e);var r;try{r=await P.getCode(e.contractAddress)}catch(t){}if(!r)return;!0===e.status&&E||r.length>2?(t.eventEmitter.emit("receipt",e),l.extraFormatters&&l.extraFormatters.contractDeployFormatter?t.resolve(l.extraFormatters.contractDeployFormatter(e)):t.resolve(e),d&&t.eventEmitter.removeAllListeners()):i._fireError(n.ContractCodeNotStoredError(e),t.eventEmitter,t.reject,null,e),d&&T.unsubscribe(),p=!0}return e})).then((async function(e){if(!y&&!p){if(e.outOfGas||g&&g===e.gasUsed||!0!==e.status&&"0x1"!==e.status&&void 0!==e.status)if(JSON.stringify(e,null,2),!1===e.status||"0x0"===e.status)try{var a=null;if(!l.handleRevert||"eth_sendTransaction"!==l.call&&"eth_sendRawTransaction"!==l.call)throw!1;var s=r.params[0];if("eth_sendRawTransaction"===l.call){var u=r.params[0],m=c.parse(u);s=o.inputTransactionFormatter({data:m.data,to:m.to,from:m.from,gas:m.gasLimit.toHexString(),gasPrice:m.gasPrice.toHexString(),value:m.value.toHexString()})}if(!(a=await l.getRevertReason(s,e.blockNumber)))throw!1;i._fireError(n.TransactionRevertInstructionError(a.reason,a.signature,e),t.eventEmitter,t.reject,null,e)}catch(r){i._fireError(n.TransactionRevertedWithoutReasonError(e),t.eventEmitter,t.reject,null,e)}else i._fireError(n.TransactionOutOfGasError(e),t.eventEmitter,t.reject,null,e);else t.eventEmitter.emit("receipt",e),t.resolve(e),d&&t.eventEmitter.removeAllListeners();d&&T.unsubscribe(),p=!0}})).catch((function(){m++,u?m-1>=l.transactionPollingTimeout&&(T.unsubscribe(),p=!0,i._fireError(n.TransactionError("Transaction was not mined within "+l.transactionPollingTimeout+" seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!"),t.eventEmitter,t.reject)):m-1>=l.transactionBlockTimeout&&(T.unsubscribe(),p=!0,i._fireError(n.TransactionError("Transaction was not mined within "+l.transactionBlockTimeout+" blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!"),t.eventEmitter,t.reject))}));T.unsubscribe(),p=!0,i._fireError({message:"Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.",data:w},t.eventEmitter,t.reject)},T=function(t){let e=!1;const r=()=>{h=setInterval(k.bind(null,t,!0),l.transactionPollingInterval)};if(!this.requestManager.provider.on)return r();P.subscribe("newBlockHeaders",(function(n,o,i){if(e=!0,n||!o)return r();k(t,!1,n,0,i)})),v=setTimeout((()=>{e||r()}),1e3*this.blockHeaderTimeout)}.bind(this);P.getTransactionReceipt(e).then((function(e){e&&e.blockHash?(t.eventEmitter.listeners("confirmation").length>0&&T(e),k(e,!1)):p||T()})).catch((function(){p||T()}))};var l=function(t,e){return"number"==typeof t?e.wallet[t]:t&&"object"==typeof t&&t.address&&t.privateKey?t:e.wallet[t.toLowerCase()]};function p(t,e){return new Promise(((r,n)=>{try{var o=new u({name:"getBlockByNumber",call:"eth_getBlockByNumber",params:2,inputFormatter:[function(t){return t?i.toHex(t):"latest"},function(){return!1}]}).createFunction(t.requestManager),a=new u({name:"getGasPrice",call:"eth_gasPrice",params:0}).createFunction(t.requestManager);Promise.all([o(),a()]).then((t=>{const[n,o]=t;if(("0x2"===e.type||void 0===e.type)&&n&&n.baseFeePerGas){let t,o;e.gasPrice?(t=e.gasPrice,o=e.gasPrice,delete e.gasPrice):(t=e.maxPriorityFeePerGas||"0x9502F900",o=e.maxFeePerGas||i.toHex(i.toBN(n.baseFeePerGas).mul(i.toBN(2)).add(i.toBN(t)))),r({maxFeePerGas:o,maxPriorityFeePerGas:t})}else{if(e.maxPriorityFeePerGas||e.maxFeePerGas)throw Error("Network doesn't support eip-1559");r({gasPrice:o})}}))}catch(t){n(t)}}))}u.prototype.buildCall=function(){var t=this,e="eth_sendTransaction"===t.call||"eth_sendRawTransaction"===t.call,r="eth_call"===t.call,o=function(){var o=a(!e),s=t.toPayload(Array.prototype.slice.call(arguments)),c=function(a,c){var u;if(t.handleRevert&&r&&t.abiCoder&&(!a&&t.isRevertReasonString(c)?u=c.substring(10):a&&a.data&&(u=a.data.substring(10)),u)){var l=t.abiCoder.decodeParameter("string","0x"+u),p="Error(String)";return void i._fireError(n.RevertInstructionError(l,p),o.eventEmitter,o.reject,s.callback,{reason:l,signature:p})}try{c=t.formatOutput(c)}catch(t){a=t}if(c instanceof Error&&(a=c),a)return a.error&&(a=a.error),i._fireError(a,o.eventEmitter,o.reject,s.callback);s.callback&&s.callback(null,c),e?(o.eventEmitter.emit("transactionHash",c),t._confirmTransaction(o,c,s)):a||o.resolve(c)},u=function(e){var r={...s,method:"eth_sendRawTransaction",params:[e.rawTransaction]};t.requestManager.send(r,c)},d=function(t,e){var r;if(e&&e.accounts&&e.accounts.wallet&&e.accounts.wallet.length)if("eth_sendTransaction"===t.method){var n=t.params[0];if((r=l(n&&"object"==typeof n?n.from:null,e.accounts))&&r.privateKey)return delete(n=JSON.parse(JSON.stringify(n))).from,e.defaultChain&&!n.chain&&(n.chain=e.defaultChain),e.defaultHardfork&&!n.hardfork&&(n.hardfork=e.defaultHardfork),e.defaultCommon&&!n.common&&(n.common=e.defaultCommon),void e.accounts.signTransaction(n,r.privateKey).then(u).catch((function(t){if("function"==typeof o.eventEmitter.listeners&&o.eventEmitter.listeners("error").length){try{o.eventEmitter.emit("error",t)}catch(t){}o.eventEmitter.removeAllListeners(),o.eventEmitter.catch((function(){}))}o.reject(t)}))}else if("eth_sign"===t.method){var i=t.params[1];if((r=l(t.params[0],e.accounts))&&r.privateKey){var a=e.accounts.sign(i,r.privateKey);return t.callback&&t.callback(null,a.signature),void o.resolve(a.signature)}}return e.requestManager.send(t,c)};return e&&s.params[0]&&"object"==typeof s.params[0]&&void 0===s.params[0].gasPrice&&(void 0===s.params[0].maxPriorityFeePerGas||void 0===s.params[0].maxFeePerGas)?p(t,s.params[0]).then((r=>{void 0!==r.gasPrice?s.params[0].gasPrice=r.gasPrice:void 0!==r.maxPriorityFeePerGas&&void 0!==r.maxFeePerGas&&(s.params[0].maxPriorityFeePerGas=r.maxPriorityFeePerGas,s.params[0].maxFeePerGas=r.maxFeePerGas),e&&setTimeout((()=>{o.eventEmitter.emit("sending",s)}),0),d(s,t)})):(e&&setTimeout((()=>{o.eventEmitter.emit("sending",s)}),0),d(s,t)),e&&setTimeout((()=>{o.eventEmitter.emit("sent",s)}),0),o.eventEmitter};return o.method=t,o.request=this.request.bind(this),o},u.prototype.getRevertReason=function(t,e){var r=this;return new Promise((function(n,o){new u({name:"call",call:"eth_call",params:2,abiCoder:r.abiCoder,handleRevert:!0}).createFunction(r.requestManager)(t,i.numberToHex(e)).then((function(){n(!1)})).catch((function(t){t.reason?n({reason:t.reason,signature:t.signature}):o(t)}))}))},u.prototype.isRevertReasonString=function(t){return"string"==typeof t&&(t.length-2)/2%32==4&&"0x08c379a0"===t.substring(0,10)},u.prototype.request=function(){var t=this.toPayload(Array.prototype.slice.call(arguments));return t.format=this.formatOutput.bind(this),t},t.exports=u},4017:function(t,e,r){"use strict";var n=r(26729),o=function(t){var e,r,o=new Promise((function(){e=arguments[0],r=arguments[1]}));if(t)return{resolve:e,reject:r,eventEmitter:o};var i=new n;return o._events=i._events,o.emit=i.emit,o.on=i.on,o.once=i.once,o.off=i.off,o.listeners=i.listeners,o.addListener=i.addListener,o.removeListener=i.removeListener,o.removeAllListeners=i.removeAllListeners,{resolve:e,reject:r,eventEmitter:o}};o.resolve=function(t){var e=o(!0);return e.resolve(t),e.eventEmitter},t.exports=o},98991:function(t,e,r){"use strict";var n=r(28911),o=r(84390).errors,i=function(t){this.requestManager=t,this.requests=[]};i.prototype.add=function(t){this.requests.push(t)},i.prototype.execute=function(){var t=this.requests,e=this._sortResponses.bind(this);this.requestManager.sendBatch(t,(function(r,i){i=e(i),t.map((function(t,e){return i[e]||{}})).forEach((function(e,r){if(t[r].callback){if(e&&e.error)return t[r].callback(o.ErrorResponse(e));if(!n.isValidResponse(e))return t[r].callback(o.InvalidResponse(e));try{t[r].callback(null,t[r].format?t[r].format(e.result):e.result)}catch(e){t[r].callback(e)}}}))}))},i.prototype._sortResponses=function(t){return(t||[]).sort(((t,e)=>t.id-e.id))},t.exports=i},72319:function(t){"use strict";var e,r=null;try{e=Function("return this")()}catch(t){e=window}void 0!==e.ethereum?r=e.ethereum:void 0!==e.web3&&e.web3.currentProvider&&(e.web3.currentProvider.sendAsync&&(e.web3.currentProvider.send=e.web3.currentProvider.sendAsync,delete e.web3.currentProvider.sendAsync),!e.web3.currentProvider.on&&e.web3.currentProvider.connection&&"ipcProviderWrapper"===e.web3.currentProvider.connection.constructor.name&&(e.web3.currentProvider.on=function(t,e){if("function"!=typeof e)throw new Error("The second parameter callback must be a function.");if("data"===t)this.connection.on("data",(function(t){var r="";t=t.toString();try{r=JSON.parse(t)}catch(r){return e(new Error("Couldn't parse response data"+t))}r.id||-1===r.method.indexOf("_subscription")||e(null,r)}));else this.connection.on(t,e)}),r=e.web3.currentProvider),t.exports=r},24983:function(t,e,r){"use strict";const{callbackify:n}=r(89539);var o=r(84390).errors,i=r(28911),a=r(98991),s=r(72319),c=function t(e,r){this.provider=null,this.providers=t.providers,this.setProvider(e,r),this.subscriptions=new Map};c.givenProvider=s,c.providers={WebsocketProvider:r(69556),HttpProvider:r(34351),IpcProvider:r(73097)},c.prototype.setProvider=function(t,e){var r=this;if(t&&"string"==typeof t&&this.providers)if(/^http(s)?:\/\//i.test(t))t=new this.providers.HttpProvider(t);else if(/^ws(s)?:\/\//i.test(t))t=new this.providers.WebsocketProvider(t);else if(t&&"object"==typeof e&&"function"==typeof e.connect)t=new this.providers.IpcProvider(t,e);else if(t)throw new Error("Can't autodetect provider for \""+t+'"');if(this.provider&&this.provider.connected&&this.clearSubscriptions(),this.provider=t||null,this.provider&&this.provider.on){"function"==typeof t.request?this.provider.on("message",(function(t){if(t&&"eth_subscription"===t.type&&t.data){const e=t.data;e.subscription&&r.subscriptions.has(e.subscription)&&r.subscriptions.get(e.subscription).callback(null,e.result)}})):this.provider.on("data",(function(t,e){(t=t||e).method&&t.params&&t.params.subscription&&r.subscriptions.has(t.params.subscription)&&r.subscriptions.get(t.params.subscription).callback(null,t.params.result)})),this.provider.on("connect",(function(){r.subscriptions.forEach((function(t){t.subscription.resubscribe()}))})),this.provider.on("error",(function(t){r.subscriptions.forEach((function(e){e.callback(t)}))}));const e=function(t){r._isCleanCloseEvent(t)&&!r._isIpcCloseError(t)||(r.subscriptions.forEach((function(e){e.callback(o.ConnectionCloseError(t)),r.subscriptions.delete(e.subscription.id)})),r.provider&&r.provider.emit&&r.provider.emit("error",o.ConnectionCloseError(t))),r.provider&&r.provider.emit&&r.provider.emit("end",t)};this.provider.on("close",e),this.provider.on("disconnect",e)}},c.prototype.send=function(t,e){if(e=e||function(){},!this.provider)return e(o.InvalidProvider());const{method:r,params:a}=t,s=i.toPayload(r,a),c=this._jsonrpcResultCallback(e,s);if(this.provider.request){n(this.provider.request.bind(this.provider))({method:r,params:a},e)}else if(this.provider.sendAsync)this.provider.sendAsync(s,c);else{if(!this.provider.send)throw new Error("Provider does not have a request or send method to use.");this.provider.send(s,c)}},c.prototype.sendBatch=function(t,e){if(!this.provider)return e(o.InvalidProvider());var r=i.toBatchPayload(t);this.provider[this.provider.sendAsync?"sendAsync":"send"](r,(function(t,r){return t?e(t):Array.isArray(r)?void e(null,r):e(o.InvalidResponse(r))}))},c.prototype.addSubscription=function(t,e){if(!this.provider.on)throw new Error("The provider doesn't support subscriptions: "+this.provider.constructor.name);this.subscriptions.set(t.id,{callback:e,subscription:t})},c.prototype.removeSubscription=function(t,e){if(this.subscriptions.has(t)){var r=this.subscriptions.get(t).subscription.options.type;return this.subscriptions.delete(t),void this.send({method:r+"_unsubscribe",params:[t]},e)}"function"==typeof e&&e(null)},c.prototype.clearSubscriptions=function(t){try{var e=this;return this.subscriptions.size>0&&this.subscriptions.forEach((function(r,n){t&&"syncing"===r.name||e.removeSubscription(n)})),this.provider.reset&&this.provider.reset(),!0}catch(t){throw new Error(`Error while clearing subscriptions: ${t}`)}},c.prototype._isCleanCloseEvent=function(t){return"object"==typeof t&&([1e3].includes(t.code)||!0===t.wasClean)},c.prototype._isIpcCloseError=function(t){return"boolean"==typeof t&&t},c.prototype._jsonrpcResultCallback=function(t,e){return function(r,n){return n&&n.id&&e.id!==n.id?t(new Error(`Wrong response id ${n.id} (expected: ${e.id}) in ${JSON.stringify(e)}`)):r?t(r):n&&n.error?t(o.ErrorResponse(n)):i.isValidResponse(n)?void t(null,n.result):t(o.InvalidResponse(n))}},t.exports={Manager:c,BatchManager:a}},28911:function(t){"use strict";var e={messageId:0,toPayload:function(t,r){if(!t)throw new Error('JSONRPC method should be specified for params: "'+JSON.stringify(r)+'"!');return e.messageId++,{jsonrpc:"2.0",id:e.messageId,method:t,params:r||[]}},isValidResponse:function(t){return Array.isArray(t)?t.every(e):e(t);function e(t){return!(!t||t.error||"2.0"!==t.jsonrpc||"number"!=typeof t.id&&"string"!=typeof t.id||void 0===t.result)}},toBatchPayload:function(t){return t.map((function(t){return e.toPayload(t.method,t.params)}))}};t.exports=e},96602:function(t,e,r){"use strict";var n=r(25108),o=r(45826),i=function(t){this.name=t.name,this.type=t.type,this.subscriptions=t.subscriptions||{},this.requestManager=null};i.prototype.setRequestManager=function(t){this.requestManager=t},i.prototype.attachToObject=function(t){var e=this.buildCall(),r=this.name.split(".");r.length>1?(t[r[0]]=t[r[0]]||{},t[r[0]][r[1]]=e):t[r[0]]=e},i.prototype.buildCall=function(){var t=this;return function(){t.subscriptions[arguments[0]]||n.warn("Subscription "+JSON.stringify(arguments[0])+" doesn't exist. Subscribing anyway.");var e=new o({subscription:t.subscriptions[arguments[0]]||{},requestManager:t.requestManager,type:t.type});return e.subscribe.apply(e,arguments)}},t.exports={subscriptions:i,subscription:o}},45826:function(t,e,r){"use strict";var n=r(84390).errors,o=r(26729),i=r(84390).formatters;function a(t){return t}function s(t){o.call(this),this.id=null,this.callback=a,this.arguments=null,this.lastBlock=null,this.options={subscription:t.subscription,type:t.type,requestManager:t.requestManager}}s.prototype=Object.create(o.prototype),s.prototype.constructor=s,s.prototype._extractCallback=function(t){if("function"==typeof t[t.length-1])return t.pop()},s.prototype._validateArgs=function(t){var e=this.options.subscription;if(e||(e={}),e.params||(e.params=0),t.length!==e.params)throw n.InvalidNumberOfParams(t.length,e.params,e.subscriptionName)},s.prototype._formatInput=function(t){var e=this.options.subscription;return e&&e.inputFormatter?e.inputFormatter.map((function(e,r){return e?e(t[r]):t[r]})):t},s.prototype._formatOutput=function(t){var e=this.options.subscription;return e&&e.outputFormatter&&t?e.outputFormatter(t):t},s.prototype._toPayload=function(t){var e=[];if(this.callback=this._extractCallback(t)||a,this.subscriptionMethod||(this.subscriptionMethod=t.shift(),this.options.subscription.subscriptionName&&(this.subscriptionMethod=this.options.subscription.subscriptionName)),this.arguments||(this.arguments=this._formatInput(t),this._validateArgs(this.arguments),t=[]),e.push(this.subscriptionMethod),e=e.concat(this.arguments),t.length)throw new Error("Only a callback is allowed as parameter on an already instantiated subscription.");return{method:this.options.type+"_subscribe",params:e}},s.prototype.unsubscribe=function(t){this.options.requestManager.removeSubscription(this.id,t),this.id=null,this.lastBlock=null,this.removeAllListeners()},s.prototype.subscribe=function(){var t=this,e=Array.prototype.slice.call(arguments),r=this._toPayload(e);if(!r)return this;if(!this.options.requestManager.provider)return setTimeout((function(){var e=new Error("No provider set.");t.callback(e,null,t),t.emit("error",e)}),0),this;if(!this.options.requestManager.provider.on)return setTimeout((function(){var e=new Error("The current provider doesn't support subscriptions: "+t.options.requestManager.provider.constructor.name);t.callback(e,null,t),t.emit("error",e)}),0),this;if(this.lastBlock&&this.options.params&&"object"==typeof this.options.params&&(r.params[1]=this.options.params,r.params[1].fromBlock=i.inputBlockNumberFormatter(this.lastBlock+1)),this.id&&this.unsubscribe(),this.options.params=r.params[1],"logs"===r.params[0]&&r.params[1]&&"object"==typeof r.params[1]&&r.params[1].hasOwnProperty("fromBlock")&&isFinite(r.params[1].fromBlock)){var n=Object.assign({},r.params[1]);this.options.requestManager.send({method:"eth_getLogs",params:[n]},(function(e,r){e?setTimeout((function(){t.callback(e,null,t),t.emit("error",e)}),0):r.forEach((function(e){var r=t._formatOutput(e);t.callback(null,r,t),t.emit("data",r)}))}))}return"object"==typeof r.params[1]&&delete r.params[1].fromBlock,this.options.requestManager.send(r,(function(e,n){!e&&n?(t.id=n,t.method=r.params[0],t.options.requestManager.addSubscription(t,(function(e,r){e?(t.callback(e,!1,t),t.emit("error",e)):(Array.isArray(r)||(r=[r]),r.forEach((function(e){var r=t._formatOutput(e);if(t.lastBlock=r&&"object"==typeof r?r.blockNumber:null,"function"==typeof t.options.subscription.subscriptionHandler)return t.options.subscription.subscriptionHandler.call(t,r);t.emit("data",r),t.callback(null,r,t)})))})),t.emit("connected",n)):setTimeout((function(){t.callback(e,!1,t),t.emit("error",e)}),0)})),this},s.prototype.resubscribe=function(){this.options.requestManager.removeSubscription(this.id),this.id=null,this.subscribe(this.callback)},t.exports=s},37327:function(t,e,r){"use strict";var n=r(84390).formatters,o=r(93952),i=r(18269);t.exports=function(t){var e=function(e){var r;return e.property?(t[e.property]||(t[e.property]={}),r=t[e.property]):r=t,e.methods&&e.methods.forEach((function(e){e instanceof o||(e=new o(e)),e.attachToObject(r),e.setRequestManager(t._requestManager)})),t};return e.formatters=n,e.utils=i,e.Method=o,e}},92928:function(t,e,r){const n=r(24983),o=r(37327);t.exports={packageInit:(t,e)=>{if(e=Array.prototype.slice.call(e),!t)throw new Error('You need to instantiate using the "new" keyword.');Object.defineProperty(t,"currentProvider",{get:()=>t._provider,set:e=>t.setProvider(e),enumerable:!0,configurable:!0}),e[0]&&e[0]._requestManager?t._requestManager=e[0]._requestManager:t._requestManager=new n.Manager(e[0],e[1]),t.givenProvider=n.Manager.givenProvider,t.providers=n.Manager.providers,t._provider=t._requestManager.provider,t.setProvider||(t.setProvider=(e,r)=>(t._requestManager.setProvider(e,r),t._provider=t._requestManager.provider,!0)),t.setRequestManager=e=>{t._requestManager=e,t._provider=e.provider},t.BatchRequest=n.BatchManager.bind(null,t._requestManager),t.extend=o(t)},addProviders:t=>{t.givenProvider=n.Manager.givenProvider,t.providers=n.Manager.providers}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
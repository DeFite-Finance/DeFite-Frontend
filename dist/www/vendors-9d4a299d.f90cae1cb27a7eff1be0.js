(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[3707],{18269:function(t,r,e){var i=e(94278),n=e(90329),o=e(28668),s=e(61798),u=e(13550),h=function(t,r){var e=[];return r.forEach((function(r){if("object"==typeof r.components){if("tuple"!==r.type.substring(0,5))throw new Error("components found but type is not tuple; report on GitHub");var i="",n=r.type.indexOf("[");n>=0&&(i=r.type.substring(n));var o=h(t,r.components);Array.isArray(o)&&t?e.push("tuple("+o.join(",")+")"+i):t?e.push("("+o+")"):e.push("("+o.join(",")+")"+i)}else e.push(r.type)})),e},a=function(t){if(!n.isHexStrict(t))throw new Error("The parameter must be a valid HEX string.");var r="",e=0,i=t.length;for("0x"===t.substring(0,2)&&(e=2);e<i;e+=2){var o=parseInt(t.substr(e,2),16);r+=String.fromCharCode(o)}return r},f=function(t){if(!t)return"0x00";for(var r="",e=0;e<t.length;e++){var i=t.charCodeAt(e).toString(16);r+=i.length<2?"0"+i:i}return"0x"+r},l=function(t){if(t=t?t.toLowerCase():"ether",!i.unitMap[t])throw new Error('This unit "'+t+"\" doesn't exist, please use the one of the following units"+JSON.stringify(i.unitMap,null,2));return t};t.exports={_fireError:function(t,r,e,i,n){return!t||"object"!=typeof t||t instanceof Error||!t.data||((t.data&&"object"==typeof t.data||Array.isArray(t.data))&&(t.data=JSON.stringify(t.data,null,2)),t=t.message+"\n"+t.data),"string"==typeof t&&(t=new Error(t)),"function"==typeof i&&i(t,n),"function"==typeof e&&((r&&"function"==typeof r.listeners&&r.listeners("error").length||"function"==typeof i)&&r.catch((function(){})),setTimeout((function(){e(t)}),1)),r&&"function"==typeof r.emit&&setTimeout((function(){r.emit("error",t,n),r.removeAllListeners()}),1),r},_jsonInterfaceMethodToString:function(t){return t&&"object"==typeof t&&t.name&&-1!==t.name.indexOf("(")?t.name:t.name+"("+h(!1,t.inputs).join(",")+")"},_flattenTypes:h,randomHex:function(t){return"0x"+s(t).toString("hex")},BN:n.BN,isBN:n.isBN,isBigNumber:n.isBigNumber,isHex:n.isHex,isHexStrict:n.isHexStrict,sha3:n.sha3,sha3Raw:n.sha3Raw,keccak256:n.sha3,soliditySha3:o.soliditySha3,soliditySha3Raw:o.soliditySha3Raw,encodePacked:o.encodePacked,isAddress:n.isAddress,checkAddressChecksum:n.checkAddressChecksum,toChecksumAddress:function(t){if(void 0===t)return"";if(!/^(0x)?[0-9a-f]{40}$/i.test(t))throw new Error('Given address "'+t+'" is not a valid Ethereum address.');t=t.toLowerCase().replace(/^0x/i,"");for(var r=n.sha3(t).replace(/^0x/i,""),e="0x",i=0;i<t.length;i++)parseInt(r[i],16)>7?e+=t[i].toUpperCase():e+=t[i];return e},toHex:n.toHex,toBN:n.toBN,bytesToHex:n.bytesToHex,hexToBytes:n.hexToBytes,hexToNumberString:n.hexToNumberString,hexToNumber:n.hexToNumber,toDecimal:n.hexToNumber,numberToHex:n.numberToHex,fromDecimal:n.numberToHex,hexToUtf8:n.hexToUtf8,hexToString:n.hexToUtf8,toUtf8:n.hexToUtf8,stripHexPrefix:n.stripHexPrefix,utf8ToHex:n.utf8ToHex,stringToHex:n.utf8ToHex,fromUtf8:n.utf8ToHex,hexToAscii:a,toAscii:a,asciiToHex:f,fromAscii:f,unitMap:i.unitMap,toWei:function(t,r){if(r=l(r),!n.isBN(t)&&"string"!=typeof t)throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");return n.isBN(t)?i.toWei(t,r):i.toWei(t,r).toString(10)},fromWei:function(t,r){if(r=l(r),!n.isBN(t)&&"string"!=typeof t)throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");return n.isBN(t)?i.fromWei(t,r):i.fromWei(t,r).toString(10)},padLeft:n.leftPad,leftPad:n.leftPad,padRight:n.rightPad,rightPad:n.rightPad,toTwosComplement:n.toTwosComplement,isBloom:n.isBloom,isUserEthereumAddressInBloom:n.isUserEthereumAddressInBloom,isContractAddressInBloom:n.isContractAddressInBloom,isTopic:n.isTopic,isTopicInBloom:n.isTopicInBloom,isInBloom:n.isInBloom,compareBlockNumbers:function(t,r){if(t==r)return 0;if("genesis"!=t&&"earliest"!=t&&0!=t||"genesis"!=r&&"earliest"!=r&&0!=r){if("genesis"==t||"earliest"==t)return-1;if("genesis"==r||"earliest"==r)return 1;if("latest"==t)return"pending"==r?-1:1;if("latest"===r)return"pending"==t?1:-1;if("pending"==t)return 1;if("pending"==r)return-1;{let e=new u(t),i=new u(r);return e.lt(i)?-1:e.eq(i)?0:1}}return 0},toNumber:n.toNumber}},28668:function(t,r,e){var i=e(13550),n=e(90329),o=function(t){var r=typeof t;if("string"===r)return n.isHexStrict(t)?new i(t.replace(/0x/i,""),16):new i(t,10);if("number"===r)return new i(t);if(n.isBigNumber(t))return new i(t.toString(10));if(n.isBN(t))return t;throw new Error(t+" is not a number")},s=function(t,r,e){var s,u,h;if("bytes"===(t=(h=t).startsWith("int[")?"int256"+h.slice(3):"int"===h?"int256":h.startsWith("uint[")?"uint256"+h.slice(4):"uint"===h?"uint256":h.startsWith("fixed[")?"fixed128x128"+h.slice(5):"fixed"===h?"fixed128x128":h.startsWith("ufixed[")?"ufixed128x128"+h.slice(6):"ufixed"===h?"ufixed128x128":h)){if(r.replace(/^0x/i,"").length%2!=0)throw new Error("Invalid bytes characters "+r.length);return r}if("string"===t)return n.utf8ToHex(r);if("bool"===t)return r?"01":"00";if(t.startsWith("address")){if(s=e?64:40,!n.isAddress(r))throw new Error(r+" is not a valid address, or the checksum is invalid.");return n.leftPad(r.toLowerCase(),s)}if(s=function(t){var r=/^\D+(\d+).*$/.exec(t);return r?parseInt(r[1],10):null}(t),t.startsWith("bytes")){if(!s)throw new Error("bytes[] not yet supported in solidity");if(e&&(s=32),s<1||s>32||s<r.replace(/^0x/i,"").length/2)throw new Error("Invalid bytes"+s+" for "+r);return n.rightPad(r,2*s)}if(t.startsWith("uint")){if(s%8||s<8||s>256)throw new Error("Invalid uint"+s+" size");if((u=o(r)).bitLength()>s)throw new Error("Supplied uint exceeds width: "+s+" vs "+u.bitLength());if(u.lt(new i(0)))throw new Error("Supplied uint "+u.toString()+" is negative");return s?n.leftPad(u.toString("hex"),s/8*2):u}if(t.startsWith("int")){if(s%8||s<8||s>256)throw new Error("Invalid int"+s+" size");if((u=o(r)).bitLength()>s)throw new Error("Supplied int exceeds width: "+s+" vs "+u.bitLength());return u.lt(new i(0))?u.toTwos(s).toString("hex"):s?n.leftPad(u.toString("hex"),s/8*2):u}throw new Error("Unsupported or invalid type: "+t)},u=function(t){if(Array.isArray(t))throw new Error("Autodetection of array types is not supported.");var r,e,o="";if(t&&"object"==typeof t&&(t.hasOwnProperty("v")||t.hasOwnProperty("t")||t.hasOwnProperty("value")||t.hasOwnProperty("type"))?(r=t.hasOwnProperty("t")?t.t:t.type,o=t.hasOwnProperty("v")?t.v:t.value):(r=n.toHex(t,!0),o=n.toHex(t),r.startsWith("int")||r.startsWith("uint")||(r="bytes")),!r.startsWith("int")&&!r.startsWith("uint")||"string"!=typeof o||/^(-)?0x/i.test(o)||(o=new i(o)),Array.isArray(o)){if(e=function(t){var r=/^\D+\d*\[(\d+)\]$/.exec(t);return r?parseInt(r[1],10):null}(r),e&&o.length!==e)throw new Error(r+" is not matching the given array "+JSON.stringify(o));e=o.length}return Array.isArray(o)?o.map((function(t){return s(r,t,e).toString("hex").replace("0x","")})).join(""):s(r,o,e).toString("hex").replace("0x","")};t.exports={soliditySha3:function(){var t=Array.prototype.slice.call(arguments),r=t.map(u);return n.sha3("0x"+r.join(""))},soliditySha3Raw:function(){return n.sha3Raw("0x"+Array.prototype.slice.call(arguments).map(u).join(""))},encodePacked:function(){var t=Array.prototype.slice.call(arguments),r=t.map(u);return"0x"+r.join("").toLowerCase()}}},90329:function(t,r,e){var i=e(23085).Buffer,n=e(13550),o=e(83206),s=e(57458),u=e(79207),h=e(46877),a=function(t){return n.isBN(t)},f=function(t){return t&&t.constructor&&"BigNumber"===t.constructor.name},l=function(t){try{return o.apply(null,arguments)}catch(r){throw new Error(r+' Given value: "'+t+'"')}},d=function(t){return!!/^(0x)?[0-9a-f]{40}$/i.test(t)&&(!(!/^(0x|0X)?[0-9a-f]{40}$/.test(t)&&!/^(0x|0X)?[0-9A-F]{40}$/.test(t))||c(t))},c=function(t){t=t.replace(/^0x/i,"");for(var r=b(t.toLowerCase()).replace(/^0x/i,""),e=0;e<40;e++)if(parseInt(r[e],16)>7&&t[e].toUpperCase()!==t[e]||parseInt(r[e],16)<=7&&t[e].toLowerCase()!==t[e])return!1;return!0},m=function(t){var r="";t=(t=(t=(t=(t=s.encode(t)).replace(/^(?:\u0000)*/,"")).split("").reverse().join("")).replace(/^(?:\u0000)*/,"")).split("").reverse().join("");for(var e=0;e<t.length;e++){var i=t.charCodeAt(e).toString(16);r+=i.length<2?"0"+i:i}return"0x"+r},p=function(t){if(!t)return t;if("string"==typeof t&&!y(t))throw new Error('Given value "'+t+'" is not a valid hex string.');return l(t).toNumber()},g=function(t){if(null==t)return t;if(!isFinite(t)&&!y(t))throw new Error('Given input "'+t+'" is not a number.');var r=l(t),e=r.toString(16);return r.lt(new n(0))?"-0x"+e.substr(1):"0x"+e},v=function(t,r){if(d(t))return r?"address":"0x"+t.toLowerCase().replace(/^0x/i,"");if("boolean"==typeof t)return r?"bool":t?"0x01":"0x00";if(i.isBuffer(t))return"0x"+t.toString("hex");if("object"==typeof t&&t&&!f(t)&&!a(t))return r?"string":m(JSON.stringify(t));if("string"==typeof t){if(0===t.indexOf("-0x")||0===t.indexOf("-0X"))return r?"int256":g(t);if(0===t.indexOf("0x")||0===t.indexOf("0X"))return r?"bytes":t;if(!isFinite(t))return r?"string":m(t)}return r?t<0?"int256":"uint256":g(t)},y=function(t){return("string"==typeof t||"number"==typeof t)&&/^(-)?0x[0-9a-f]*$/i.test(t)},w=function(t){return("string"==typeof t||"number"==typeof t)&&/^(-0x|0x)?[0-9a-f]*$/i.test(t)},M="0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",b=function(t){a(t)&&(t=t.toString()),y(t)&&/^0x/i.test(t.toString())?t=u.toBuffer(t):"string"==typeof t&&(t=i.from(t,"utf-8"));var r=u.bufferToHex(u.keccak256(t));return r===M?null:r};b._Hash=u.keccak256;t.exports={BN:n,isBN:a,isBigNumber:f,toBN:l,isAddress:d,isBloom:function(t){return h.isBloom(t)},isUserEthereumAddressInBloom:function(t,r){return h.isUserEthereumAddressInBloom(t,r)},isContractAddressInBloom:function(t,r){return h.isContractAddressInBloom(t,r)},isTopic:function(t){return h.isTopic(t)},isTopicInBloom:function(t,r){return h.isTopicInBloom(t,r)},isInBloom:function(t,r){return h.isInBloom(t,r)},checkAddressChecksum:c,utf8ToHex:m,hexToUtf8:function(t){if(!y(t))throw new Error('The parameter "'+t+'" must be a valid HEX string.');for(var r="",e=0,i=(t=(t=(t=(t=(t=t.replace(/^0x/i,"")).replace(/^(?:00)*/,"")).split("").reverse().join("")).replace(/^(?:00)*/,"")).split("").reverse().join("")).length,n=0;n<i;n+=2)e=parseInt(t.substr(n,2),16),r+=String.fromCharCode(e);return s.decode(r)},hexToNumber:p,hexToNumberString:function(t){if(!t)return t;if("string"==typeof t&&!y(t))throw new Error('Given value "'+t+'" is not a valid hex string.');return l(t).toString(10)},numberToHex:g,toHex:v,hexToBytes:function(t){if(t=t.toString(16),!y(t))throw new Error('Given value "'+t+'" is not a valid hex string.');t=t.replace(/^0x/i,"");for(var r=[],e=0;e<t.length;e+=2)r.push(parseInt(t.substr(e,2),16));return r},bytesToHex:function(t){for(var r=[],e=0;e<t.length;e++)r.push((t[e]>>>4).toString(16)),r.push((15&t[e]).toString(16));return"0x"+r.join("")},isHex:w,isHexStrict:y,stripHexPrefix:function(t){return 0!==t&&w(t)?t.replace(/^(-)?0x/i,"$1"):t},leftPad:function(t,r,e){var i=/^0x/i.test(t)||"number"==typeof t,n=r-(t=t.toString(16).replace(/^0x/i,"")).length+1>=0?r-t.length+1:0;return(i?"0x":"")+new Array(n).join(e||"0")+t},rightPad:function(t,r,e){var i=/^0x/i.test(t)||"number"==typeof t,n=r-(t=t.toString(16).replace(/^0x/i,"")).length+1>=0?r-t.length+1:0;return(i?"0x":"")+t+new Array(n).join(e||"0")},toTwosComplement:function(t){return"0x"+l(t).toTwos(256).toString(16,64)},sha3:b,sha3Raw:function(t){return null===(t=b(t))?M:t},toNumber:function(t){return"number"==typeof t?t:p(v(t))}}},30985:function(t,r,e){"use strict";var i=e(23085).Buffer,n=this&&this.__read||function(t,r){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var i,n,o=e.call(t),s=[];try{for(;(void 0===r||r-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(e=o.return)&&e.call(o)}finally{if(n)throw n.error}}return s},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0}),r.isZeroAddress=r.zeroAddress=r.importPublic=r.privateToAddress=r.privateToPublic=r.publicToAddress=r.pubToAddress=r.isValidPublic=r.isValidPrivate=r.generateAddress2=r.generateAddress=r.isValidChecksumAddress=r.toChecksumAddress=r.isValidAddress=r.Account=void 0;var s=o(e(69282)),u=e(6045),h=e(95053),a=e(78722),f=e(51803),l=e(22599),d=e(5405),c=e(54586),m=e(59949),p=function(){function t(t,r,e,i){void 0===t&&(t=new u.BN(0)),void 0===r&&(r=new u.BN(0)),void 0===e&&(e=f.KECCAK256_RLP),void 0===i&&(i=f.KECCAK256_NULL),this.nonce=t,this.balance=r,this.stateRoot=e,this.codeHash=i,this._validate()}return t.fromAccountData=function(r){var e=r.nonce,i=r.balance,n=r.stateRoot,o=r.codeHash;return new t(e?new u.BN((0,l.toBuffer)(e)):void 0,i?new u.BN((0,l.toBuffer)(i)):void 0,n?(0,l.toBuffer)(n):void 0,o?(0,l.toBuffer)(o):void 0)},t.fromRlpSerializedAccount=function(t){var r=u.rlp.decode(t);if(!Array.isArray(r))throw new Error("Invalid serialized account input. Must be array");return this.fromValuesArray(r)},t.fromValuesArray=function(r){var e=n(r,4),i=e[0],o=e[1],s=e[2],h=e[3];return new t(new u.BN(i),new u.BN(o),s,h)},t.prototype._validate=function(){if(this.nonce.lt(new u.BN(0)))throw new Error("nonce must be greater than zero");if(this.balance.lt(new u.BN(0)))throw new Error("balance must be greater than zero");if(32!==this.stateRoot.length)throw new Error("stateRoot must have a length of 32");if(32!==this.codeHash.length)throw new Error("codeHash must have a length of 32")},t.prototype.raw=function(){return[(0,m.bnToUnpaddedBuffer)(this.nonce),(0,m.bnToUnpaddedBuffer)(this.balance),this.stateRoot,this.codeHash]},t.prototype.serialize=function(){return u.rlp.encode(this.raw())},t.prototype.isContract=function(){return!this.codeHash.equals(f.KECCAK256_NULL)},t.prototype.isEmpty=function(){return this.balance.isZero()&&this.nonce.isZero()&&this.codeHash.equals(f.KECCAK256_NULL)},t}();r.Account=p;r.isValidAddress=function(t){try{(0,c.assertIsString)(t)}catch(t){return!1}return/^0x[0-9a-fA-F]{40}$/.test(t)};r.toChecksumAddress=function(t,r){(0,c.assertIsHexString)(t);var e=(0,a.stripHexPrefix)(t).toLowerCase(),i="";r&&(i=(0,m.toType)(r,m.TypeOutput.BN).toString()+"0x");for(var n=(0,d.keccakFromString)(i+e).toString("hex"),o="0x",s=0;s<e.length;s++)parseInt(n[s],16)>=8?o+=e[s].toUpperCase():o+=e[s];return o};r.isValidChecksumAddress=function(t,e){return(0,r.isValidAddress)(t)&&(0,r.toChecksumAddress)(t,e)===t};r.generateAddress=function(t,r){(0,c.assertIsBuffer)(t),(0,c.assertIsBuffer)(r);var e=new u.BN(r);return e.isZero()?(0,d.rlphash)([t,null]).slice(-20):(0,d.rlphash)([t,i.from(e.toArray())]).slice(-20)};r.generateAddress2=function(t,r,e){return(0,c.assertIsBuffer)(t),(0,c.assertIsBuffer)(r),(0,c.assertIsBuffer)(e),(0,s.default)(20===t.length),(0,s.default)(32===r.length),(0,d.keccak256)(i.concat([i.from("ff","hex"),t,r,(0,d.keccak256)(e)])).slice(-20)};r.isValidPrivate=function(t){return(0,h.privateKeyVerify)(t)};r.isValidPublic=function(t,r){return void 0===r&&(r=!1),(0,c.assertIsBuffer)(t),64===t.length?(0,h.publicKeyVerify)(i.concat([i.from([4]),t])):!!r&&(0,h.publicKeyVerify)(t)};r.pubToAddress=function(t,r){return void 0===r&&(r=!1),(0,c.assertIsBuffer)(t),r&&64!==t.length&&(t=i.from((0,h.publicKeyConvert)(t,!1).slice(1))),(0,s.default)(64===t.length),(0,d.keccak)(t).slice(-20)},r.publicToAddress=r.pubToAddress;r.privateToPublic=function(t){return(0,c.assertIsBuffer)(t),i.from((0,h.publicKeyCreate)(t,!1)).slice(1)};r.privateToAddress=function(t){return(0,r.publicToAddress)((0,r.privateToPublic)(t))};r.importPublic=function(t){return(0,c.assertIsBuffer)(t),64!==t.length&&(t=i.from((0,h.publicKeyConvert)(t,!1).slice(1))),t};r.zeroAddress=function(){var t=(0,l.zeros)(20);return(0,l.bufferToHex)(t)};r.isZeroAddress=function(t){try{(0,c.assertIsString)(t)}catch(t){return!1}return(0,r.zeroAddress)()===t}},2395:function(t,r,e){"use strict";var i=e(23085).Buffer,n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0}),r.Address=void 0;var o=n(e(69282)),s=e(6045),u=e(22599),h=e(30985),a=function(){function t(t){(0,o.default)(20===t.length,"Invalid address length"),this.buf=t}return t.zero=function(){return new t((0,u.zeros)(20))},t.fromString=function(r){return(0,o.default)((0,h.isValidAddress)(r),"Invalid address"),new t((0,u.toBuffer)(r))},t.fromPublicKey=function(r){return(0,o.default)(i.isBuffer(r),"Public key should be Buffer"),new t((0,h.pubToAddress)(r))},t.fromPrivateKey=function(r){return(0,o.default)(i.isBuffer(r),"Private key should be Buffer"),new t((0,h.privateToAddress)(r))},t.generate=function(r,e){return(0,o.default)(s.BN.isBN(e)),new t((0,h.generateAddress)(r.buf,e.toArrayLike(i)))},t.generate2=function(r,e,n){return(0,o.default)(i.isBuffer(e)),(0,o.default)(i.isBuffer(n)),new t((0,h.generateAddress2)(r.buf,e,n))},t.prototype.equals=function(t){return this.buf.equals(t.buf)},t.prototype.isZero=function(){return this.equals(t.zero())},t.prototype.isPrecompileOrSystemAddress=function(){var t=new s.BN(this.buf),r=new s.BN(0),e=new s.BN("ffff","hex");return t.gte(r)&&t.lte(e)},t.prototype.toString=function(){return"0x"+this.buf.toString("hex")},t.prototype.toBuffer=function(){return i.from(this.buf)},t}();r.Address=a},22599:function(t,r,e){"use strict";var i=e(23085).Buffer,n=this&&this.__values||function(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],i=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(t,r){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var i,n,o=e.call(t),s=[];try{for(;(void 0===r||r-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(e=o.return)&&e.call(o)}finally{if(n)throw n.error}}return s};Object.defineProperty(r,"__esModule",{value:!0}),r.bufArrToArr=r.arrToBufArr=r.validateNoLeadingZeroes=r.baToJSON=r.toUtf8=r.addHexPrefix=r.toUnsigned=r.fromSigned=r.bufferToHex=r.bufferToInt=r.toBuffer=r.unpadHexString=r.unpadArray=r.unpadBuffer=r.setLengthRight=r.setLengthLeft=r.zeros=r.intToBuffer=r.intToHex=void 0;var s=e(6045),u=e(78722),h=e(54586);r.intToHex=function(t){if(!Number.isSafeInteger(t)||t<0)throw new Error("Received an invalid integer type: ".concat(t));return"0x".concat(t.toString(16))};r.intToBuffer=function(t){var e=(0,r.intToHex)(t);return i.from((0,u.padToEven)(e.slice(2)),"hex")};r.zeros=function(t){return i.allocUnsafe(t).fill(0)};var a=function(t,e,i){var n=(0,r.zeros)(e);return i?t.length<e?(t.copy(n),n):t.slice(0,e):t.length<e?(t.copy(n,e-t.length),n):t.slice(-e)};r.setLengthLeft=function(t,r){return(0,h.assertIsBuffer)(t),a(t,r,!1)};r.setLengthRight=function(t,r){return(0,h.assertIsBuffer)(t),a(t,r,!0)};var f=function(t){for(var r=t[0];t.length>0&&"0"===r.toString();)r=(t=t.slice(1))[0];return t};r.unpadBuffer=function(t){return(0,h.assertIsBuffer)(t),f(t)};r.unpadArray=function(t){return(0,h.assertIsArray)(t),f(t)};r.unpadHexString=function(t){return(0,h.assertIsHexString)(t),t=(0,u.stripHexPrefix)(t),f(t)};r.toBuffer=function(t){if(null==t)return i.allocUnsafe(0);if(i.isBuffer(t))return i.from(t);if(Array.isArray(t)||t instanceof Uint8Array)return i.from(t);if("string"==typeof t){if(!(0,u.isHexString)(t))throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(t));return i.from((0,u.padToEven)((0,u.stripHexPrefix)(t)),"hex")}if("number"==typeof t)return(0,r.intToBuffer)(t);if(s.BN.isBN(t)){if(t.isNeg())throw new Error("Cannot convert negative BN to buffer. Given: ".concat(t));return t.toArrayLike(i)}if(t.toArray)return i.from(t.toArray());if(t.toBuffer)return i.from(t.toBuffer());throw new Error("invalid type")};r.bufferToInt=function(t){return new s.BN((0,r.toBuffer)(t)).toNumber()};r.bufferToHex=function(t){return"0x"+(t=(0,r.toBuffer)(t)).toString("hex")};r.fromSigned=function(t){return new s.BN(t).fromTwos(256)};r.toUnsigned=function(t){return i.from(t.toTwos(256).toArray())};r.addHexPrefix=function(t){return"string"!=typeof t||(0,u.isHexPrefixed)(t)?t:"0x"+t};r.toUtf8=function(t){if((t=(0,u.stripHexPrefix)(t)).length%2!=0)throw new Error("Invalid non-even hex string input for toUtf8() provided");return i.from(t.replace(/^(00)+|(00)+$/g,""),"hex").toString("utf8")};r.baToJSON=function(t){if(i.isBuffer(t))return"0x".concat(t.toString("hex"));if(t instanceof Array){for(var e=[],n=0;n<t.length;n++)e.push((0,r.baToJSON)(t[n]));return e}};r.validateNoLeadingZeroes=function(t){var r,e;try{for(var i=n(Object.entries(t)),s=i.next();!s.done;s=i.next()){var u=o(s.value,2),h=u[0],a=u[1];if(void 0!==a&&a.length>0&&0===a[0])throw new Error("".concat(h," cannot have leading zeroes, received: ").concat(a.toString("hex")))}}catch(t){r={error:t}}finally{try{s&&!s.done&&(e=i.return)&&e.call(i)}finally{if(r)throw r.error}}},r.arrToBufArr=function t(r){return Array.isArray(r)?r.map((function(r){return t(r)})):i.from(r)},r.bufArrToArr=function t(r){return Array.isArray(r)?r.map((function(r){return t(r)})):Uint8Array.from(null!=r?r:[])}},51803:function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.KECCAK256_RLP=r.KECCAK256_RLP_S=r.KECCAK256_RLP_ARRAY=r.KECCAK256_RLP_ARRAY_S=r.KECCAK256_NULL=r.KECCAK256_NULL_S=r.TWO_POW256=r.MAX_INTEGER=r.MAX_UINT64=void 0;var i=e(48764),n=e(6045);r.MAX_UINT64=new n.BN("ffffffffffffffff",16),r.MAX_INTEGER=new n.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),r.TWO_POW256=new n.BN("10000000000000000000000000000000000000000000000000000000000000000",16),r.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",r.KECCAK256_NULL=i.Buffer.from(r.KECCAK256_NULL_S,"hex"),r.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",r.KECCAK256_RLP_ARRAY=i.Buffer.from(r.KECCAK256_RLP_ARRAY_S,"hex"),r.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",r.KECCAK256_RLP=i.Buffer.from(r.KECCAK256_RLP_S,"hex")},6045:function(t,r,e){"use strict";var i=this&&this.__createBinding||(Object.create?function(t,r,e,i){void 0===i&&(i=e),Object.defineProperty(t,i,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,i){void 0===i&&(i=e),t[i]=r[e]}),n=this&&this.__setModuleDefault||(Object.create?function(t,r){Object.defineProperty(t,"default",{enumerable:!0,value:r})}:function(t,r){t.default=r}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var r={};if(null!=t)for(var e in t)"default"!==e&&Object.prototype.hasOwnProperty.call(t,e)&&i(r,t,e);return n(r,t),r},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0}),r.rlp=r.BN=void 0;var u=s(e(86309));r.BN=u.default;var h=o(e(51675));r.rlp=h},5405:function(t,r,e){"use strict";var i=e(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.rlphash=r.ripemd160FromArray=r.ripemd160FromString=r.ripemd160=r.sha256FromArray=r.sha256FromString=r.sha256=r.keccakFromArray=r.keccakFromHexString=r.keccakFromString=r.keccak256=r.keccak=void 0;var n=e(82192),o=e(23482),s=e(6045),u=e(22599),h=e(54586);r.keccak=function(t,r){switch(void 0===r&&(r=256),(0,h.assertIsBuffer)(t),r){case 224:return(0,n.keccak224)(t);case 256:return(0,n.keccak256)(t);case 384:return(0,n.keccak384)(t);case 512:return(0,n.keccak512)(t);default:throw new Error("Invald algorithm: keccak".concat(r))}};r.keccak256=function(t){return(0,r.keccak)(t)};r.keccakFromString=function(t,e){void 0===e&&(e=256),(0,h.assertIsString)(t);var n=i.from(t,"utf8");return(0,r.keccak)(n,e)};r.keccakFromHexString=function(t,e){return void 0===e&&(e=256),(0,h.assertIsHexString)(t),(0,r.keccak)((0,u.toBuffer)(t),e)};r.keccakFromArray=function(t,e){return void 0===e&&(e=256),(0,h.assertIsArray)(t),(0,r.keccak)((0,u.toBuffer)(t),e)};var a=function(t){return t=(0,u.toBuffer)(t),o("sha256").update(t).digest()};r.sha256=function(t){return(0,h.assertIsBuffer)(t),a(t)};r.sha256FromString=function(t){return(0,h.assertIsString)(t),a(t)};r.sha256FromArray=function(t){return(0,h.assertIsArray)(t),a(t)};var f=function(t,r){t=(0,u.toBuffer)(t);var e=o("rmd160").update(t).digest();return!0===r?(0,u.setLengthLeft)(e,32):e};r.ripemd160=function(t,r){return(0,h.assertIsBuffer)(t),f(t,r)};r.ripemd160FromString=function(t,r){return(0,h.assertIsString)(t),f(t,r)};r.ripemd160FromArray=function(t,r){return(0,h.assertIsArray)(t),f(t,r)};r.rlphash=function(t){return(0,r.keccak)(s.rlp.encode(t))}},54586:function(t,r,e){"use strict";var i=e(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.assertIsString=r.assertIsArray=r.assertIsBuffer=r.assertIsHexString=void 0;var n=e(78722);r.assertIsHexString=function(t){if(!(0,n.isHexString)(t)){var r="This method only supports 0x-prefixed hex strings but input was: ".concat(t);throw new Error(r)}};r.assertIsBuffer=function(t){if(!i.isBuffer(t)){var r="This method only supports Buffer but input was: ".concat(t);throw new Error(r)}};r.assertIsArray=function(t){if(!Array.isArray(t)){var r="This method only supports number arrays but input was: ".concat(t);throw new Error(r)}};r.assertIsString=function(t){if("string"!=typeof t){var r="This method only supports strings but input was: ".concat(t);throw new Error(r)}}},79207:function(t,r,e){"use strict";var i=this&&this.__createBinding||(Object.create?function(t,r,e,i){void 0===i&&(i=e),Object.defineProperty(t,i,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,i){void 0===i&&(i=e),t[i]=r[e]}),n=this&&this.__exportStar||function(t,r){for(var e in t)"default"===e||Object.prototype.hasOwnProperty.call(r,e)||i(r,t,e)};Object.defineProperty(r,"__esModule",{value:!0}),r.isHexString=r.getKeys=r.fromAscii=r.fromUtf8=r.toAscii=r.arrayContainsArray=r.getBinarySize=r.padToEven=r.stripHexPrefix=r.isHexPrefixed=void 0,n(e(51803),r),n(e(30985),r),n(e(2395),r),n(e(5405),r),n(e(68486),r),n(e(22599),r),n(e(52174),r),n(e(6045),r),n(e(59949),r);var o=e(78722);Object.defineProperty(r,"isHexPrefixed",{enumerable:!0,get:function(){return o.isHexPrefixed}}),Object.defineProperty(r,"stripHexPrefix",{enumerable:!0,get:function(){return o.stripHexPrefix}}),Object.defineProperty(r,"padToEven",{enumerable:!0,get:function(){return o.padToEven}}),Object.defineProperty(r,"getBinarySize",{enumerable:!0,get:function(){return o.getBinarySize}}),Object.defineProperty(r,"arrayContainsArray",{enumerable:!0,get:function(){return o.arrayContainsArray}}),Object.defineProperty(r,"toAscii",{enumerable:!0,get:function(){return o.toAscii}}),Object.defineProperty(r,"fromUtf8",{enumerable:!0,get:function(){return o.fromUtf8}}),Object.defineProperty(r,"fromAscii",{enumerable:!0,get:function(){return o.fromAscii}}),Object.defineProperty(r,"getKeys",{enumerable:!0,get:function(){return o.getKeys}}),Object.defineProperty(r,"isHexString",{enumerable:!0,get:function(){return o.isHexString}})},78722:function(t,r,e){"use strict";var i=e(23085).Buffer;function n(t){if("string"!=typeof t)throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof t));return"0"===t[0]&&"x"===t[1]}Object.defineProperty(r,"__esModule",{value:!0}),r.isHexString=r.getKeys=r.fromAscii=r.fromUtf8=r.toAscii=r.arrayContainsArray=r.getBinarySize=r.padToEven=r.stripHexPrefix=r.isHexPrefixed=void 0,r.isHexPrefixed=n;function o(t){var r=t;if("string"!=typeof r)throw new Error("[padToEven] value must be type 'string', received ".concat(typeof r));return r.length%2&&(r="0".concat(r)),r}r.stripHexPrefix=function(t){if("string"!=typeof t)throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof t));return n(t)?t.slice(2):t},r.padToEven=o,r.getBinarySize=function(t){if("string"!=typeof t)throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof t));return i.byteLength(t,"utf8")},r.arrayContainsArray=function(t,r,e){if(!0!==Array.isArray(t))throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof t,"'"));if(!0!==Array.isArray(r))throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof r,"'"));return r[e?"some":"every"]((function(r){return t.indexOf(r)>=0}))},r.toAscii=function(t){var r="",e=0,i=t.length;for("0x"===t.substring(0,2)&&(e=2);e<i;e+=2){var n=parseInt(t.substr(e,2),16);r+=String.fromCharCode(n)}return r},r.fromUtf8=function(t){var r=i.from(t,"utf8");return"0x".concat(o(r.toString("hex")).replace(/^0+|0+$/g,""))},r.fromAscii=function(t){for(var r="",e=0;e<t.length;e++){var i=t.charCodeAt(e).toString(16);r+=i.length<2?"0".concat(i):i}return"0x".concat(r)},r.getKeys=function(t,r,e){if(!Array.isArray(t))throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof t));if("string"!=typeof r)throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof t));for(var i=[],n=0;n<t.length;n++){var o=t[n][r];if(e&&!o)o="";else if("string"!=typeof o)throw new Error("invalid abi - expected type 'string', received ".concat(typeof o));i.push(o)}return i},r.isHexString=function(t,r){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/))&&(!r||t.length===2+2*r)}},52174:function(t,r,e){"use strict";var i=e(23085).Buffer,n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0}),r.defineProperties=void 0;var o=n(e(69282)),s=e(78722),u=e(6045),h=e(22599);r.defineProperties=function(t,r,e){if(t.raw=[],t._fields=[],t.toJSON=function(r){if(void 0===r&&(r=!1),r){var e={};return t._fields.forEach((function(r){e[r]="0x".concat(t[r].toString("hex"))})),e}return(0,h.baToJSON)(t.raw)},t.serialize=function(){return u.rlp.encode(t.raw)},r.forEach((function(r,e){function n(){return t.raw[e]}function s(n){"00"!==(n=(0,h.toBuffer)(n)).toString("hex")||r.allowZero||(n=i.allocUnsafe(0)),r.allowLess&&r.length?(n=(0,h.unpadBuffer)(n),(0,o.default)(r.length>=n.length,"The field ".concat(r.name," must not have more ").concat(r.length," bytes"))):r.allowZero&&0===n.length||!r.length||(0,o.default)(r.length===n.length,"The field ".concat(r.name," must have byte length of ").concat(r.length)),t.raw[e]=n}t._fields.push(r.name),Object.defineProperty(t,r.name,{enumerable:!0,configurable:!0,get:n,set:s}),r.default&&(t[r.name]=r.default),r.alias&&Object.defineProperty(t,r.alias,{enumerable:!1,configurable:!0,set:s,get:n})})),e)if("string"==typeof e&&(e=i.from((0,s.stripHexPrefix)(e),"hex")),i.isBuffer(e)&&(e=u.rlp.decode(e)),Array.isArray(e)){if(e.length>t._fields.length)throw new Error("wrong number of fields in data");e.forEach((function(r,e){t[t._fields[e]]=(0,h.toBuffer)(r)}))}else{if("object"!=typeof e)throw new Error("invalid data");var n=Object.keys(e);r.forEach((function(r){-1!==n.indexOf(r.name)&&(t[r.name]=e[r.name]),-1!==n.indexOf(r.alias)&&(t[r.alias]=e[r.alias])}))}}},68486:function(t,r,e){"use strict";var i=e(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.hashPersonalMessage=r.isValidSignature=r.fromRpcSig=r.toCompactSig=r.toRpcSig=r.ecrecover=r.ecsign=void 0;var n=e(95053),o=e(6045),s=e(22599),u=e(5405),h=e(54586),a=e(59949);function f(t,r){var e=(0,a.toType)(t,a.TypeOutput.BN);if(!r)return e.subn(27);var i=(0,a.toType)(r,a.TypeOutput.BN);return e.sub(i.muln(2).addn(35))}function l(t){var r=new o.BN(t);return r.eqn(0)||r.eqn(1)}r.ecsign=function(t,r,e){var o=(0,n.ecdsaSign)(t,r),s=o.signature,u=o.recid,h=i.from(s.slice(0,32)),f=i.from(s.slice(32,64));if(!e||"number"==typeof e){if(e&&!Number.isSafeInteger(e))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");return{r:h,s:f,v:e?u+(2*e+35):u+27}}return{r:h,s:f,v:(0,a.toType)(e,a.TypeOutput.BN).muln(2).addn(35).addn(u).toArrayLike(i)}};r.ecrecover=function(t,r,e,o,u){var h=i.concat([(0,s.setLengthLeft)(e,32),(0,s.setLengthLeft)(o,32)],64),a=f(r,u);if(!l(a))throw new Error("Invalid signature v value");var d=(0,n.ecdsaRecover)(h,a.toNumber(),t);return i.from((0,n.publicKeyConvert)(d,!1).slice(1))};r.toRpcSig=function(t,r,e,n){if(!l(f(t,n)))throw new Error("Invalid signature v value");return(0,s.bufferToHex)(i.concat([(0,s.setLengthLeft)(r,32),(0,s.setLengthLeft)(e,32),(0,s.toBuffer)(t)]))};r.toCompactSig=function(t,r,e,n){if(!l(f(t,n)))throw new Error("Invalid signature v value");var o=(0,a.toType)(t,a.TypeOutput.Number),u=e;return(o>28&&o%2==1||1===o||28===o)&&((u=i.from(e))[0]|=128),(0,s.bufferToHex)(i.concat([(0,s.setLengthLeft)(r,32),(0,s.setLengthLeft)(u,32)]))};r.fromRpcSig=function(t){var r,e,i,n=(0,s.toBuffer)(t);if(n.length>=65)r=n.slice(0,32),e=n.slice(32,64),i=(0,s.bufferToInt)(n.slice(64));else{if(64!==n.length)throw new Error("Invalid signature length");r=n.slice(0,32),e=n.slice(32,64),i=(0,s.bufferToInt)(n.slice(32,33))>>7,e[0]&=127}return i<27&&(i+=27),{v:i,r:r,s:e}};r.isValidSignature=function(t,r,e,i,n){void 0===i&&(i=!0);var s=new o.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),u=new o.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);if(32!==r.length||32!==e.length)return!1;if(!l(f(t,n)))return!1;var h=new o.BN(r),a=new o.BN(e);return!(h.isZero()||h.gt(u)||a.isZero()||a.gt(u))&&(!i||1!==a.cmp(s))};r.hashPersonalMessage=function(t){(0,h.assertIsBuffer)(t);var r=i.from("Ethereum Signed Message:\n".concat(t.length),"utf-8");return(0,u.keccak)(i.concat([r,t]))}},59949:function(t,r,e){"use strict";var i=e(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.toType=r.TypeOutput=r.bnToRlp=r.bnToUnpaddedBuffer=r.bnToHex=void 0;var n,o=e(6045),s=e(78722),u=e(22599);function h(t){return(0,u.unpadBuffer)(t.toArrayLike(i))}r.bnToHex=function(t){return"0x".concat(t.toString(16))},r.bnToUnpaddedBuffer=h,r.bnToRlp=function(t){return h(t)},function(t){t[t.Number=0]="Number",t[t.BN=1]="BN",t[t.Buffer=2]="Buffer",t[t.PrefixedHexString=3]="PrefixedHexString"}(n=r.TypeOutput||(r.TypeOutput={})),r.toType=function(t,r){if(null===t)return null;if(void 0!==t){if("string"==typeof t&&!(0,s.isHexString)(t))throw new Error("A string must be provided with a 0x-prefix, given: ".concat(t));if("number"==typeof t&&!Number.isSafeInteger(t))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");var e=(0,u.toBuffer)(t);if(r===n.Buffer)return e;if(r===n.BN)return new o.BN(e);if(r===n.Number){var i=new o.BN(e),h=new o.BN(Number.MAX_SAFE_INTEGER.toString());if(i.gt(h))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");return i.toNumber()}return"0x".concat(e.toString("hex"))}}},86309:function(t,r,e){!function(t,r){"use strict";function i(t,r){if(!t)throw new Error(r||"Assertion failed")}function n(t,r){t.super_=r;var e=function(){};e.prototype=r.prototype,t.prototype=new e,t.prototype.constructor=t}function o(t,r,e){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==r&&"be"!==r||(e=r,r=10),this._init(t||0,r||10,e||"be"))}var s;"object"==typeof t?t.exports=o:r.BN=o,o.BN=o,o.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:e(33557).Buffer}catch(t){}function u(t,r){var e=t.charCodeAt(r);return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:void i(!1,"Invalid character in "+t)}function h(t,r,e){var i=u(t,e);return e-1>=r&&(i|=u(t,e-1)<<4),i}function a(t,r,e,n){for(var o=0,s=0,u=Math.min(t.length,e),h=r;h<u;h++){var a=t.charCodeAt(h)-48;o*=n,s=a>=49?a-49+10:a>=17?a-17+10:a,i(a>=0&&s<n,"Invalid character"),o+=s}return o}function f(t,r){t.words=r.words,t.length=r.length,t.negative=r.negative,t.red=r.red}if(o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,r){return t.cmp(r)>0?t:r},o.min=function(t,r){return t.cmp(r)<0?t:r},o.prototype._init=function(t,r,e){if("number"==typeof t)return this._initNumber(t,r,e);if("object"==typeof t)return this._initArray(t,r,e);"hex"===r&&(r=16),i(r===(0|r)&&r>=2&&r<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(n++,this.negative=1),n<t.length&&(16===r?this._parseHex(t,n,e):(this._parseBase(t,r,n),"le"===e&&this._initArray(this.toArray(),r,e)))},o.prototype._initNumber=function(t,r,e){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(i(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===e&&this._initArray(this.toArray(),r,e)},o.prototype._initArray=function(t,r,e){if(i("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,s,u=0;if("be"===e)for(n=t.length-1,o=0;n>=0;n-=3)s=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=s<<u&67108863,this.words[o+1]=s>>>26-u&67108863,(u+=24)>=26&&(u-=26,o++);else if("le"===e)for(n=0,o=0;n<t.length;n+=3)s=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=s<<u&67108863,this.words[o+1]=s>>>26-u&67108863,(u+=24)>=26&&(u-=26,o++);return this._strip()},o.prototype._parseHex=function(t,r,e){this.length=Math.ceil((t.length-r)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var n,o=0,s=0;if("be"===e)for(i=t.length-1;i>=r;i-=2)n=h(t,r,i)<<o,this.words[s]|=67108863&n,o>=18?(o-=18,s+=1,this.words[s]|=n>>>26):o+=8;else for(i=(t.length-r)%2==0?r+1:r;i<t.length;i+=2)n=h(t,r,i)<<o,this.words[s]|=67108863&n,o>=18?(o-=18,s+=1,this.words[s]|=n>>>26):o+=8;this._strip()},o.prototype._parseBase=function(t,r,e){this.words=[0],this.length=1;for(var i=0,n=1;n<=67108863;n*=r)i++;i--,n=n/r|0;for(var o=t.length-e,s=o%i,u=Math.min(o,o-s)+e,h=0,f=e;f<u;f+=i)h=a(t,f,f+i,r),this.imuln(n),this.words[0]+h<67108864?this.words[0]+=h:this._iaddn(h);if(0!==s){var l=1;for(h=a(t,f,t.length,r),f=0;f<s;f++)l*=r;this.imuln(l),this.words[0]+h<67108864?this.words[0]+=h:this._iaddn(h)}this._strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var r=0;r<this.length;r++)t.words[r]=this.words[r];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype._move=function(t){f(t,this)},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{o.prototype[Symbol.for("nodejs.util.inspect.custom")]=l}catch(t){o.prototype.inspect=l}else o.prototype.inspect=l;function l(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var d=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],m=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];o.prototype.toString=function(t,r){var e;if(r=0|r||1,16===(t=t||10)||"hex"===t){e="";for(var n=0,o=0,s=0;s<this.length;s++){var u=this.words[s],h=(16777215&(u<<n|o)).toString(16);e=0!==(o=u>>>24-n&16777215)||s!==this.length-1?d[6-h.length]+h+e:h+e,(n+=2)>=26&&(n-=26,s--)}for(0!==o&&(e=o.toString(16)+e);e.length%r!=0;)e="0"+e;return 0!==this.negative&&(e="-"+e),e}if(t===(0|t)&&t>=2&&t<=36){var a=c[t],f=m[t];e="";var l=this.clone();for(l.negative=0;!l.isZero();){var p=l.modrn(f).toString(t);e=(l=l.idivn(f)).isZero()?p+e:d[a-p.length]+p+e}for(this.isZero()&&(e="0"+e);e.length%r!=0;)e="0"+e;return 0!==this.negative&&(e="-"+e),e}i(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&i(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16,2)},s&&(o.prototype.toBuffer=function(t,r){return this.toArrayLike(s,t,r)}),o.prototype.toArray=function(t,r){return this.toArrayLike(Array,t,r)};function p(t,r,e){e.negative=r.negative^t.negative;var i=t.length+r.length|0;e.length=i,i=i-1|0;var n=0|t.words[0],o=0|r.words[0],s=n*o,u=67108863&s,h=s/67108864|0;e.words[0]=u;for(var a=1;a<i;a++){for(var f=h>>>26,l=67108863&h,d=Math.min(a,r.length-1),c=Math.max(0,a-t.length+1);c<=d;c++){var m=a-c|0;f+=(s=(n=0|t.words[m])*(o=0|r.words[c])+l)/67108864|0,l=67108863&s}e.words[a]=0|l,h=0|f}return 0!==h?e.words[a]=0|h:e.length--,e._strip()}o.prototype.toArrayLike=function(t,r,e){this._strip();var n=this.byteLength(),o=e||Math.max(1,n);i(n<=o,"byte array longer than desired length"),i(o>0,"Requested array length <= 0");var s=function(t,r){return t.allocUnsafe?t.allocUnsafe(r):new t(r)}(t,o);return this["_toArrayLike"+("le"===r?"LE":"BE")](s,n),s},o.prototype._toArrayLikeLE=function(t,r){for(var e=0,i=0,n=0,o=0;n<this.length;n++){var s=this.words[n]<<o|i;t[e++]=255&s,e<t.length&&(t[e++]=s>>8&255),e<t.length&&(t[e++]=s>>16&255),6===o?(e<t.length&&(t[e++]=s>>24&255),i=0,o=0):(i=s>>>24,o+=2)}if(e<t.length)for(t[e++]=i;e<t.length;)t[e++]=0},o.prototype._toArrayLikeBE=function(t,r){for(var e=t.length-1,i=0,n=0,o=0;n<this.length;n++){var s=this.words[n]<<o|i;t[e--]=255&s,e>=0&&(t[e--]=s>>8&255),e>=0&&(t[e--]=s>>16&255),6===o?(e>=0&&(t[e--]=s>>24&255),i=0,o=0):(i=s>>>24,o+=2)}if(e>=0)for(t[e--]=i;e>=0;)t[e--]=0},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var r=t,e=0;return r>=4096&&(e+=13,r>>>=13),r>=64&&(e+=7,r>>>=7),r>=8&&(e+=4,r>>>=4),r>=2&&(e+=2,r>>>=2),e+r},o.prototype._zeroBits=function(t){if(0===t)return 26;var r=t,e=0;return 0==(8191&r)&&(e+=13,r>>>=13),0==(127&r)&&(e+=7,r>>>=7),0==(15&r)&&(e+=4,r>>>=4),0==(3&r)&&(e+=2,r>>>=2),0==(1&r)&&e++,e},o.prototype.bitLength=function(){var t=this.words[this.length-1],r=this._countBits(t);return 26*(this.length-1)+r},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,r=0;r<this.length;r++){var e=this._zeroBits(this.words[r]);if(t+=e,26!==e)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]|t.words[r];return this._strip()},o.prototype.ior=function(t){return i(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var r;r=this.length>t.length?t:this;for(var e=0;e<r.length;e++)this.words[e]=this.words[e]&t.words[e];return this.length=r.length,this._strip()},o.prototype.iand=function(t){return i(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var r,e;this.length>t.length?(r=this,e=t):(r=t,e=this);for(var i=0;i<e.length;i++)this.words[i]=r.words[i]^e.words[i];if(this!==r)for(;i<r.length;i++)this.words[i]=r.words[i];return this.length=r.length,this._strip()},o.prototype.ixor=function(t){return i(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){i("number"==typeof t&&t>=0);var r=0|Math.ceil(t/26),e=t%26;this._expand(r),e>0&&r--;for(var n=0;n<r;n++)this.words[n]=67108863&~this.words[n];return e>0&&(this.words[n]=~this.words[n]&67108863>>26-e),this._strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,r){i("number"==typeof t&&t>=0);var e=t/26|0,n=t%26;return this._expand(e+1),this.words[e]=r?this.words[e]|1<<n:this.words[e]&~(1<<n),this._strip()},o.prototype.iadd=function(t){var r,e,i;if(0!==this.negative&&0===t.negative)return this.negative=0,r=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,r=this.isub(t),t.negative=1,r._normSign();this.length>t.length?(e=this,i=t):(e=t,i=this);for(var n=0,o=0;o<i.length;o++)r=(0|e.words[o])+(0|i.words[o])+n,this.words[o]=67108863&r,n=r>>>26;for(;0!==n&&o<e.length;o++)r=(0|e.words[o])+n,this.words[o]=67108863&r,n=r>>>26;if(this.length=e.length,0!==n)this.words[this.length]=n,this.length++;else if(e!==this)for(;o<e.length;o++)this.words[o]=e.words[o];return this},o.prototype.add=function(t){var r;return 0!==t.negative&&0===this.negative?(t.negative=0,r=this.sub(t),t.negative^=1,r):0===t.negative&&0!==this.negative?(this.negative=0,r=t.sub(this),this.negative=1,r):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var r=this.iadd(t);return t.negative=1,r._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var e,i,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(e=this,i=t):(e=t,i=this);for(var o=0,s=0;s<i.length;s++)o=(r=(0|e.words[s])-(0|i.words[s])+o)>>26,this.words[s]=67108863&r;for(;0!==o&&s<e.length;s++)o=(r=(0|e.words[s])+o)>>26,this.words[s]=67108863&r;if(0===o&&s<e.length&&e!==this)for(;s<e.length;s++)this.words[s]=e.words[s];return this.length=Math.max(this.length,s),e!==this&&(this.negative=1),this._strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var g=function(t,r,e){var i,n,o,s=t.words,u=r.words,h=e.words,a=0,f=0|s[0],l=8191&f,d=f>>>13,c=0|s[1],m=8191&c,p=c>>>13,g=0|s[2],v=8191&g,y=g>>>13,w=0|s[3],M=8191&w,b=w>>>13,x=0|s[4],A=8191&x,_=x>>>13,B=0|s[5],S=8191&B,T=B>>>13,E=0|s[6],N=8191&E,k=E>>>13,P=0|s[7],I=8191&P,H=P>>>13,C=0|s[8],L=8191&C,O=C>>>13,R=0|s[9],j=8191&R,K=R>>>13,U=0|u[0],Z=8191&U,q=U>>>13,z=0|u[1],F=8191&z,W=z>>>13,V=0|u[2],G=8191&V,X=V>>>13,$=0|u[3],D=8191&$,J=$>>>13,Y=0|u[4],Q=8191&Y,tt=Y>>>13,rt=0|u[5],et=8191&rt,it=rt>>>13,nt=0|u[6],ot=8191&nt,st=nt>>>13,ut=0|u[7],ht=8191&ut,at=ut>>>13,ft=0|u[8],lt=8191&ft,dt=ft>>>13,ct=0|u[9],mt=8191&ct,pt=ct>>>13;e.negative=t.negative^r.negative,e.length=19;var gt=(a+(i=Math.imul(l,Z))|0)+((8191&(n=(n=Math.imul(l,q))+Math.imul(d,Z)|0))<<13)|0;a=((o=Math.imul(d,q))+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,i=Math.imul(m,Z),n=(n=Math.imul(m,q))+Math.imul(p,Z)|0,o=Math.imul(p,q);var vt=(a+(i=i+Math.imul(l,F)|0)|0)+((8191&(n=(n=n+Math.imul(l,W)|0)+Math.imul(d,F)|0))<<13)|0;a=((o=o+Math.imul(d,W)|0)+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,i=Math.imul(v,Z),n=(n=Math.imul(v,q))+Math.imul(y,Z)|0,o=Math.imul(y,q),i=i+Math.imul(m,F)|0,n=(n=n+Math.imul(m,W)|0)+Math.imul(p,F)|0,o=o+Math.imul(p,W)|0;var yt=(a+(i=i+Math.imul(l,G)|0)|0)+((8191&(n=(n=n+Math.imul(l,X)|0)+Math.imul(d,G)|0))<<13)|0;a=((o=o+Math.imul(d,X)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,i=Math.imul(M,Z),n=(n=Math.imul(M,q))+Math.imul(b,Z)|0,o=Math.imul(b,q),i=i+Math.imul(v,F)|0,n=(n=n+Math.imul(v,W)|0)+Math.imul(y,F)|0,o=o+Math.imul(y,W)|0,i=i+Math.imul(m,G)|0,n=(n=n+Math.imul(m,X)|0)+Math.imul(p,G)|0,o=o+Math.imul(p,X)|0;var wt=(a+(i=i+Math.imul(l,D)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,D)|0))<<13)|0;a=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,i=Math.imul(A,Z),n=(n=Math.imul(A,q))+Math.imul(_,Z)|0,o=Math.imul(_,q),i=i+Math.imul(M,F)|0,n=(n=n+Math.imul(M,W)|0)+Math.imul(b,F)|0,o=o+Math.imul(b,W)|0,i=i+Math.imul(v,G)|0,n=(n=n+Math.imul(v,X)|0)+Math.imul(y,G)|0,o=o+Math.imul(y,X)|0,i=i+Math.imul(m,D)|0,n=(n=n+Math.imul(m,J)|0)+Math.imul(p,D)|0,o=o+Math.imul(p,J)|0;var Mt=(a+(i=i+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;a=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,i=Math.imul(S,Z),n=(n=Math.imul(S,q))+Math.imul(T,Z)|0,o=Math.imul(T,q),i=i+Math.imul(A,F)|0,n=(n=n+Math.imul(A,W)|0)+Math.imul(_,F)|0,o=o+Math.imul(_,W)|0,i=i+Math.imul(M,G)|0,n=(n=n+Math.imul(M,X)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,X)|0,i=i+Math.imul(v,D)|0,n=(n=n+Math.imul(v,J)|0)+Math.imul(y,D)|0,o=o+Math.imul(y,J)|0,i=i+Math.imul(m,Q)|0,n=(n=n+Math.imul(m,tt)|0)+Math.imul(p,Q)|0,o=o+Math.imul(p,tt)|0;var bt=(a+(i=i+Math.imul(l,et)|0)|0)+((8191&(n=(n=n+Math.imul(l,it)|0)+Math.imul(d,et)|0))<<13)|0;a=((o=o+Math.imul(d,it)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,i=Math.imul(N,Z),n=(n=Math.imul(N,q))+Math.imul(k,Z)|0,o=Math.imul(k,q),i=i+Math.imul(S,F)|0,n=(n=n+Math.imul(S,W)|0)+Math.imul(T,F)|0,o=o+Math.imul(T,W)|0,i=i+Math.imul(A,G)|0,n=(n=n+Math.imul(A,X)|0)+Math.imul(_,G)|0,o=o+Math.imul(_,X)|0,i=i+Math.imul(M,D)|0,n=(n=n+Math.imul(M,J)|0)+Math.imul(b,D)|0,o=o+Math.imul(b,J)|0,i=i+Math.imul(v,Q)|0,n=(n=n+Math.imul(v,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,i=i+Math.imul(m,et)|0,n=(n=n+Math.imul(m,it)|0)+Math.imul(p,et)|0,o=o+Math.imul(p,it)|0;var xt=(a+(i=i+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,st)|0)+Math.imul(d,ot)|0))<<13)|0;a=((o=o+Math.imul(d,st)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,i=Math.imul(I,Z),n=(n=Math.imul(I,q))+Math.imul(H,Z)|0,o=Math.imul(H,q),i=i+Math.imul(N,F)|0,n=(n=n+Math.imul(N,W)|0)+Math.imul(k,F)|0,o=o+Math.imul(k,W)|0,i=i+Math.imul(S,G)|0,n=(n=n+Math.imul(S,X)|0)+Math.imul(T,G)|0,o=o+Math.imul(T,X)|0,i=i+Math.imul(A,D)|0,n=(n=n+Math.imul(A,J)|0)+Math.imul(_,D)|0,o=o+Math.imul(_,J)|0,i=i+Math.imul(M,Q)|0,n=(n=n+Math.imul(M,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,i=i+Math.imul(v,et)|0,n=(n=n+Math.imul(v,it)|0)+Math.imul(y,et)|0,o=o+Math.imul(y,it)|0,i=i+Math.imul(m,ot)|0,n=(n=n+Math.imul(m,st)|0)+Math.imul(p,ot)|0,o=o+Math.imul(p,st)|0;var At=(a+(i=i+Math.imul(l,ht)|0)|0)+((8191&(n=(n=n+Math.imul(l,at)|0)+Math.imul(d,ht)|0))<<13)|0;a=((o=o+Math.imul(d,at)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,i=Math.imul(L,Z),n=(n=Math.imul(L,q))+Math.imul(O,Z)|0,o=Math.imul(O,q),i=i+Math.imul(I,F)|0,n=(n=n+Math.imul(I,W)|0)+Math.imul(H,F)|0,o=o+Math.imul(H,W)|0,i=i+Math.imul(N,G)|0,n=(n=n+Math.imul(N,X)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,X)|0,i=i+Math.imul(S,D)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(T,D)|0,o=o+Math.imul(T,J)|0,i=i+Math.imul(A,Q)|0,n=(n=n+Math.imul(A,tt)|0)+Math.imul(_,Q)|0,o=o+Math.imul(_,tt)|0,i=i+Math.imul(M,et)|0,n=(n=n+Math.imul(M,it)|0)+Math.imul(b,et)|0,o=o+Math.imul(b,it)|0,i=i+Math.imul(v,ot)|0,n=(n=n+Math.imul(v,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,i=i+Math.imul(m,ht)|0,n=(n=n+Math.imul(m,at)|0)+Math.imul(p,ht)|0,o=o+Math.imul(p,at)|0;var _t=(a+(i=i+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;a=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,i=Math.imul(j,Z),n=(n=Math.imul(j,q))+Math.imul(K,Z)|0,o=Math.imul(K,q),i=i+Math.imul(L,F)|0,n=(n=n+Math.imul(L,W)|0)+Math.imul(O,F)|0,o=o+Math.imul(O,W)|0,i=i+Math.imul(I,G)|0,n=(n=n+Math.imul(I,X)|0)+Math.imul(H,G)|0,o=o+Math.imul(H,X)|0,i=i+Math.imul(N,D)|0,n=(n=n+Math.imul(N,J)|0)+Math.imul(k,D)|0,o=o+Math.imul(k,J)|0,i=i+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(T,Q)|0,o=o+Math.imul(T,tt)|0,i=i+Math.imul(A,et)|0,n=(n=n+Math.imul(A,it)|0)+Math.imul(_,et)|0,o=o+Math.imul(_,it)|0,i=i+Math.imul(M,ot)|0,n=(n=n+Math.imul(M,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,i=i+Math.imul(v,ht)|0,n=(n=n+Math.imul(v,at)|0)+Math.imul(y,ht)|0,o=o+Math.imul(y,at)|0,i=i+Math.imul(m,lt)|0,n=(n=n+Math.imul(m,dt)|0)+Math.imul(p,lt)|0,o=o+Math.imul(p,dt)|0;var Bt=(a+(i=i+Math.imul(l,mt)|0)|0)+((8191&(n=(n=n+Math.imul(l,pt)|0)+Math.imul(d,mt)|0))<<13)|0;a=((o=o+Math.imul(d,pt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,i=Math.imul(j,F),n=(n=Math.imul(j,W))+Math.imul(K,F)|0,o=Math.imul(K,W),i=i+Math.imul(L,G)|0,n=(n=n+Math.imul(L,X)|0)+Math.imul(O,G)|0,o=o+Math.imul(O,X)|0,i=i+Math.imul(I,D)|0,n=(n=n+Math.imul(I,J)|0)+Math.imul(H,D)|0,o=o+Math.imul(H,J)|0,i=i+Math.imul(N,Q)|0,n=(n=n+Math.imul(N,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,i=i+Math.imul(S,et)|0,n=(n=n+Math.imul(S,it)|0)+Math.imul(T,et)|0,o=o+Math.imul(T,it)|0,i=i+Math.imul(A,ot)|0,n=(n=n+Math.imul(A,st)|0)+Math.imul(_,ot)|0,o=o+Math.imul(_,st)|0,i=i+Math.imul(M,ht)|0,n=(n=n+Math.imul(M,at)|0)+Math.imul(b,ht)|0,o=o+Math.imul(b,at)|0,i=i+Math.imul(v,lt)|0,n=(n=n+Math.imul(v,dt)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,dt)|0;var St=(a+(i=i+Math.imul(m,mt)|0)|0)+((8191&(n=(n=n+Math.imul(m,pt)|0)+Math.imul(p,mt)|0))<<13)|0;a=((o=o+Math.imul(p,pt)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,i=Math.imul(j,G),n=(n=Math.imul(j,X))+Math.imul(K,G)|0,o=Math.imul(K,X),i=i+Math.imul(L,D)|0,n=(n=n+Math.imul(L,J)|0)+Math.imul(O,D)|0,o=o+Math.imul(O,J)|0,i=i+Math.imul(I,Q)|0,n=(n=n+Math.imul(I,tt)|0)+Math.imul(H,Q)|0,o=o+Math.imul(H,tt)|0,i=i+Math.imul(N,et)|0,n=(n=n+Math.imul(N,it)|0)+Math.imul(k,et)|0,o=o+Math.imul(k,it)|0,i=i+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,st)|0)+Math.imul(T,ot)|0,o=o+Math.imul(T,st)|0,i=i+Math.imul(A,ht)|0,n=(n=n+Math.imul(A,at)|0)+Math.imul(_,ht)|0,o=o+Math.imul(_,at)|0,i=i+Math.imul(M,lt)|0,n=(n=n+Math.imul(M,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Tt=(a+(i=i+Math.imul(v,mt)|0)|0)+((8191&(n=(n=n+Math.imul(v,pt)|0)+Math.imul(y,mt)|0))<<13)|0;a=((o=o+Math.imul(y,pt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,i=Math.imul(j,D),n=(n=Math.imul(j,J))+Math.imul(K,D)|0,o=Math.imul(K,J),i=i+Math.imul(L,Q)|0,n=(n=n+Math.imul(L,tt)|0)+Math.imul(O,Q)|0,o=o+Math.imul(O,tt)|0,i=i+Math.imul(I,et)|0,n=(n=n+Math.imul(I,it)|0)+Math.imul(H,et)|0,o=o+Math.imul(H,it)|0,i=i+Math.imul(N,ot)|0,n=(n=n+Math.imul(N,st)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,st)|0,i=i+Math.imul(S,ht)|0,n=(n=n+Math.imul(S,at)|0)+Math.imul(T,ht)|0,o=o+Math.imul(T,at)|0,i=i+Math.imul(A,lt)|0,n=(n=n+Math.imul(A,dt)|0)+Math.imul(_,lt)|0,o=o+Math.imul(_,dt)|0;var Et=(a+(i=i+Math.imul(M,mt)|0)|0)+((8191&(n=(n=n+Math.imul(M,pt)|0)+Math.imul(b,mt)|0))<<13)|0;a=((o=o+Math.imul(b,pt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,i=Math.imul(j,Q),n=(n=Math.imul(j,tt))+Math.imul(K,Q)|0,o=Math.imul(K,tt),i=i+Math.imul(L,et)|0,n=(n=n+Math.imul(L,it)|0)+Math.imul(O,et)|0,o=o+Math.imul(O,it)|0,i=i+Math.imul(I,ot)|0,n=(n=n+Math.imul(I,st)|0)+Math.imul(H,ot)|0,o=o+Math.imul(H,st)|0,i=i+Math.imul(N,ht)|0,n=(n=n+Math.imul(N,at)|0)+Math.imul(k,ht)|0,o=o+Math.imul(k,at)|0,i=i+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(T,lt)|0,o=o+Math.imul(T,dt)|0;var Nt=(a+(i=i+Math.imul(A,mt)|0)|0)+((8191&(n=(n=n+Math.imul(A,pt)|0)+Math.imul(_,mt)|0))<<13)|0;a=((o=o+Math.imul(_,pt)|0)+(n>>>13)|0)+(Nt>>>26)|0,Nt&=67108863,i=Math.imul(j,et),n=(n=Math.imul(j,it))+Math.imul(K,et)|0,o=Math.imul(K,it),i=i+Math.imul(L,ot)|0,n=(n=n+Math.imul(L,st)|0)+Math.imul(O,ot)|0,o=o+Math.imul(O,st)|0,i=i+Math.imul(I,ht)|0,n=(n=n+Math.imul(I,at)|0)+Math.imul(H,ht)|0,o=o+Math.imul(H,at)|0,i=i+Math.imul(N,lt)|0,n=(n=n+Math.imul(N,dt)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,dt)|0;var kt=(a+(i=i+Math.imul(S,mt)|0)|0)+((8191&(n=(n=n+Math.imul(S,pt)|0)+Math.imul(T,mt)|0))<<13)|0;a=((o=o+Math.imul(T,pt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,i=Math.imul(j,ot),n=(n=Math.imul(j,st))+Math.imul(K,ot)|0,o=Math.imul(K,st),i=i+Math.imul(L,ht)|0,n=(n=n+Math.imul(L,at)|0)+Math.imul(O,ht)|0,o=o+Math.imul(O,at)|0,i=i+Math.imul(I,lt)|0,n=(n=n+Math.imul(I,dt)|0)+Math.imul(H,lt)|0,o=o+Math.imul(H,dt)|0;var Pt=(a+(i=i+Math.imul(N,mt)|0)|0)+((8191&(n=(n=n+Math.imul(N,pt)|0)+Math.imul(k,mt)|0))<<13)|0;a=((o=o+Math.imul(k,pt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,i=Math.imul(j,ht),n=(n=Math.imul(j,at))+Math.imul(K,ht)|0,o=Math.imul(K,at),i=i+Math.imul(L,lt)|0,n=(n=n+Math.imul(L,dt)|0)+Math.imul(O,lt)|0,o=o+Math.imul(O,dt)|0;var It=(a+(i=i+Math.imul(I,mt)|0)|0)+((8191&(n=(n=n+Math.imul(I,pt)|0)+Math.imul(H,mt)|0))<<13)|0;a=((o=o+Math.imul(H,pt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,i=Math.imul(j,lt),n=(n=Math.imul(j,dt))+Math.imul(K,lt)|0,o=Math.imul(K,dt);var Ht=(a+(i=i+Math.imul(L,mt)|0)|0)+((8191&(n=(n=n+Math.imul(L,pt)|0)+Math.imul(O,mt)|0))<<13)|0;a=((o=o+Math.imul(O,pt)|0)+(n>>>13)|0)+(Ht>>>26)|0,Ht&=67108863;var Ct=(a+(i=Math.imul(j,mt))|0)+((8191&(n=(n=Math.imul(j,pt))+Math.imul(K,mt)|0))<<13)|0;return a=((o=Math.imul(K,pt))+(n>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,h[0]=gt,h[1]=vt,h[2]=yt,h[3]=wt,h[4]=Mt,h[5]=bt,h[6]=xt,h[7]=At,h[8]=_t,h[9]=Bt,h[10]=St,h[11]=Tt,h[12]=Et,h[13]=Nt,h[14]=kt,h[15]=Pt,h[16]=It,h[17]=Ht,h[18]=Ct,0!==a&&(h[19]=a,e.length++),e};function v(t,r,e){e.negative=r.negative^t.negative,e.length=t.length+r.length;for(var i=0,n=0,o=0;o<e.length-1;o++){var s=n;n=0;for(var u=67108863&i,h=Math.min(o,r.length-1),a=Math.max(0,o-t.length+1);a<=h;a++){var f=o-a,l=(0|t.words[f])*(0|r.words[a]),d=67108863&l;u=67108863&(d=d+u|0),n+=(s=(s=s+(l/67108864|0)|0)+(d>>>26)|0)>>>26,s&=67108863}e.words[o]=u,i=s,s=n}return 0!==i?e.words[o]=i:e.length--,e._strip()}function y(t,r,e){return v(t,r,e)}function w(t,r){this.x=t,this.y=r}Math.imul||(g=p),o.prototype.mulTo=function(t,r){var e=this.length+t.length;return 10===this.length&&10===t.length?g(this,t,r):e<63?p(this,t,r):e<1024?v(this,t,r):y(this,t,r)},w.prototype.makeRBT=function(t){for(var r=new Array(t),e=o.prototype._countBits(t)-1,i=0;i<t;i++)r[i]=this.revBin(i,e,t);return r},w.prototype.revBin=function(t,r,e){if(0===t||t===e-1)return t;for(var i=0,n=0;n<r;n++)i|=(1&t)<<r-n-1,t>>=1;return i},w.prototype.permute=function(t,r,e,i,n,o){for(var s=0;s<o;s++)i[s]=r[t[s]],n[s]=e[t[s]]},w.prototype.transform=function(t,r,e,i,n,o){this.permute(o,t,r,e,i,n);for(var s=1;s<n;s<<=1)for(var u=s<<1,h=Math.cos(2*Math.PI/u),a=Math.sin(2*Math.PI/u),f=0;f<n;f+=u)for(var l=h,d=a,c=0;c<s;c++){var m=e[f+c],p=i[f+c],g=e[f+c+s],v=i[f+c+s],y=l*g-d*v;v=l*v+d*g,g=y,e[f+c]=m+g,i[f+c]=p+v,e[f+c+s]=m-g,i[f+c+s]=p-v,c!==u&&(y=h*l-a*d,d=h*d+a*l,l=y)}},w.prototype.guessLen13b=function(t,r){var e=1|Math.max(r,t),i=1&e,n=0;for(e=e/2|0;e;e>>>=1)n++;return 1<<n+1+i},w.prototype.conjugate=function(t,r,e){if(!(e<=1))for(var i=0;i<e/2;i++){var n=t[i];t[i]=t[e-i-1],t[e-i-1]=n,n=r[i],r[i]=-r[e-i-1],r[e-i-1]=-n}},w.prototype.normalize13b=function(t,r){for(var e=0,i=0;i<r/2;i++){var n=8192*Math.round(t[2*i+1]/r)+Math.round(t[2*i]/r)+e;t[i]=67108863&n,e=n<67108864?0:n/67108864|0}return t},w.prototype.convert13b=function(t,r,e,n){for(var o=0,s=0;s<r;s++)o+=0|t[s],e[2*s]=8191&o,o>>>=13,e[2*s+1]=8191&o,o>>>=13;for(s=2*r;s<n;++s)e[s]=0;i(0===o),i(0==(-8192&o))},w.prototype.stub=function(t){for(var r=new Array(t),e=0;e<t;e++)r[e]=0;return r},w.prototype.mulp=function(t,r,e){var i=2*this.guessLen13b(t.length,r.length),n=this.makeRBT(i),o=this.stub(i),s=new Array(i),u=new Array(i),h=new Array(i),a=new Array(i),f=new Array(i),l=new Array(i),d=e.words;d.length=i,this.convert13b(t.words,t.length,s,i),this.convert13b(r.words,r.length,a,i),this.transform(s,o,u,h,i,n),this.transform(a,o,f,l,i,n);for(var c=0;c<i;c++){var m=u[c]*f[c]-h[c]*l[c];h[c]=u[c]*l[c]+h[c]*f[c],u[c]=m}return this.conjugate(u,h,i),this.transform(u,h,d,o,i,n),this.conjugate(d,o,i),this.normalize13b(d,i),e.negative=t.negative^r.negative,e.length=t.length+r.length,e._strip()},o.prototype.mul=function(t){var r=new o(null);return r.words=new Array(this.length+t.length),this.mulTo(t,r)},o.prototype.mulf=function(t){var r=new o(null);return r.words=new Array(this.length+t.length),y(this,t,r)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){var r=t<0;r&&(t=-t),i("number"==typeof t),i(t<67108864);for(var e=0,n=0;n<this.length;n++){var o=(0|this.words[n])*t,s=(67108863&o)+(67108863&e);e>>=26,e+=o/67108864|0,e+=s>>>26,this.words[n]=67108863&s}return 0!==e&&(this.words[n]=e,this.length++),r?this.ineg():this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var r=function(t){for(var r=new Array(t.bitLength()),e=0;e<r.length;e++){var i=e/26|0,n=e%26;r[e]=t.words[i]>>>n&1}return r}(t);if(0===r.length)return new o(1);for(var e=this,i=0;i<r.length&&0===r[i];i++,e=e.sqr());if(++i<r.length)for(var n=e.sqr();i<r.length;i++,n=n.sqr())0!==r[i]&&(e=e.mul(n));return e},o.prototype.iushln=function(t){i("number"==typeof t&&t>=0);var r,e=t%26,n=(t-e)/26,o=67108863>>>26-e<<26-e;if(0!==e){var s=0;for(r=0;r<this.length;r++){var u=this.words[r]&o,h=(0|this.words[r])-u<<e;this.words[r]=h|s,s=u>>>26-e}s&&(this.words[r]=s,this.length++)}if(0!==n){for(r=this.length-1;r>=0;r--)this.words[r+n]=this.words[r];for(r=0;r<n;r++)this.words[r]=0;this.length+=n}return this._strip()},o.prototype.ishln=function(t){return i(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,r,e){var n;i("number"==typeof t&&t>=0),n=r?(r-r%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),u=67108863^67108863>>>o<<o,h=e;if(n-=s,n=Math.max(0,n),h){for(var a=0;a<s;a++)h.words[a]=this.words[a];h.length=s}if(0===s);else if(this.length>s)for(this.length-=s,a=0;a<this.length;a++)this.words[a]=this.words[a+s];else this.words[0]=0,this.length=1;var f=0;for(a=this.length-1;a>=0&&(0!==f||a>=n);a--){var l=0|this.words[a];this.words[a]=f<<26-o|l>>>o,f=l&u}return h&&0!==f&&(h.words[h.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},o.prototype.ishrn=function(t,r,e){return i(0===this.negative),this.iushrn(t,r,e)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){i("number"==typeof t&&t>=0);var r=t%26,e=(t-r)/26,n=1<<r;return!(this.length<=e)&&!!(this.words[e]&n)},o.prototype.imaskn=function(t){i("number"==typeof t&&t>=0);var r=t%26,e=(t-r)/26;if(i(0===this.negative,"imaskn works only with positive numbers"),this.length<=e)return this;if(0!==r&&e++,this.length=Math.min(e,this.length),0!==r){var n=67108863^67108863>>>r<<r;this.words[this.length-1]&=n}return this._strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return i("number"==typeof t),i(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<=t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var r=0;r<this.length&&this.words[r]>=67108864;r++)this.words[r]-=67108864,r===this.length-1?this.words[r+1]=1:this.words[r+1]++;return this.length=Math.max(this.length,r+1),this},o.prototype.isubn=function(t){if(i("number"==typeof t),i(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var r=0;r<this.length&&this.words[r]<0;r++)this.words[r]+=67108864,this.words[r+1]-=1;return this._strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,r,e){var n,o,s=t.length+e;this._expand(s);var u=0;for(n=0;n<t.length;n++){o=(0|this.words[n+e])+u;var h=(0|t.words[n])*r;u=((o-=67108863&h)>>26)-(h/67108864|0),this.words[n+e]=67108863&o}for(;n<this.length-e;n++)u=(o=(0|this.words[n+e])+u)>>26,this.words[n+e]=67108863&o;if(0===u)return this._strip();for(i(-1===u),u=0,n=0;n<this.length;n++)u=(o=-(0|this.words[n])+u)>>26,this.words[n]=67108863&o;return this.negative=1,this._strip()},o.prototype._wordDiv=function(t,r){var e=(this.length,t.length),i=this.clone(),n=t,s=0|n.words[n.length-1];0!==(e=26-this._countBits(s))&&(n=n.ushln(e),i.iushln(e),s=0|n.words[n.length-1]);var u,h=i.length-n.length;if("mod"!==r){(u=new o(null)).length=h+1,u.words=new Array(u.length);for(var a=0;a<u.length;a++)u.words[a]=0}var f=i.clone()._ishlnsubmul(n,1,h);0===f.negative&&(i=f,u&&(u.words[h]=1));for(var l=h-1;l>=0;l--){var d=67108864*(0|i.words[n.length+l])+(0|i.words[n.length+l-1]);for(d=Math.min(d/s|0,67108863),i._ishlnsubmul(n,d,l);0!==i.negative;)d--,i.negative=0,i._ishlnsubmul(n,1,l),i.isZero()||(i.negative^=1);u&&(u.words[l]=d)}return u&&u._strip(),i._strip(),"div"!==r&&0!==e&&i.iushrn(e),{div:u||null,mod:i}},o.prototype.divmod=function(t,r,e){return i(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(u=this.neg().divmod(t,r),"mod"!==r&&(n=u.div.neg()),"div"!==r&&(s=u.mod.neg(),e&&0!==s.negative&&s.iadd(t)),{div:n,mod:s}):0===this.negative&&0!==t.negative?(u=this.divmod(t.neg(),r),"mod"!==r&&(n=u.div.neg()),{div:n,mod:u.mod}):0!=(this.negative&t.negative)?(u=this.neg().divmod(t.neg(),r),"div"!==r&&(s=u.mod.neg(),e&&0!==s.negative&&s.isub(t)),{div:u.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===r?{div:this.divn(t.words[0]),mod:null}:"mod"===r?{div:null,mod:new o(this.modrn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modrn(t.words[0]))}:this._wordDiv(t,r);var n,s,u},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var r=this.divmod(t);if(r.mod.isZero())return r.div;var e=0!==r.div.negative?r.mod.isub(t):r.mod,i=t.ushrn(1),n=t.andln(1),o=e.cmp(i);return o<0||1===n&&0===o?r.div:0!==r.div.negative?r.div.isubn(1):r.div.iaddn(1)},o.prototype.modrn=function(t){var r=t<0;r&&(t=-t),i(t<=67108863);for(var e=(1<<26)%t,n=0,o=this.length-1;o>=0;o--)n=(e*n+(0|this.words[o]))%t;return r?-n:n},o.prototype.modn=function(t){return this.modrn(t)},o.prototype.idivn=function(t){var r=t<0;r&&(t=-t),i(t<=67108863);for(var e=0,n=this.length-1;n>=0;n--){var o=(0|this.words[n])+67108864*e;this.words[n]=o/t|0,e=o%t}return this._strip(),r?this.ineg():this},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){i(0===t.negative),i(!t.isZero());var r=this,e=t.clone();r=0!==r.negative?r.umod(t):r.clone();for(var n=new o(1),s=new o(0),u=new o(0),h=new o(1),a=0;r.isEven()&&e.isEven();)r.iushrn(1),e.iushrn(1),++a;for(var f=e.clone(),l=r.clone();!r.isZero();){for(var d=0,c=1;0==(r.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(r.iushrn(d);d-- >0;)(n.isOdd()||s.isOdd())&&(n.iadd(f),s.isub(l)),n.iushrn(1),s.iushrn(1);for(var m=0,p=1;0==(e.words[0]&p)&&m<26;++m,p<<=1);if(m>0)for(e.iushrn(m);m-- >0;)(u.isOdd()||h.isOdd())&&(u.iadd(f),h.isub(l)),u.iushrn(1),h.iushrn(1);r.cmp(e)>=0?(r.isub(e),n.isub(u),s.isub(h)):(e.isub(r),u.isub(n),h.isub(s))}return{a:u,b:h,gcd:e.iushln(a)}},o.prototype._invmp=function(t){i(0===t.negative),i(!t.isZero());var r=this,e=t.clone();r=0!==r.negative?r.umod(t):r.clone();for(var n,s=new o(1),u=new o(0),h=e.clone();r.cmpn(1)>0&&e.cmpn(1)>0;){for(var a=0,f=1;0==(r.words[0]&f)&&a<26;++a,f<<=1);if(a>0)for(r.iushrn(a);a-- >0;)s.isOdd()&&s.iadd(h),s.iushrn(1);for(var l=0,d=1;0==(e.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(e.iushrn(l);l-- >0;)u.isOdd()&&u.iadd(h),u.iushrn(1);r.cmp(e)>=0?(r.isub(e),s.isub(u)):(e.isub(r),u.isub(s))}return(n=0===r.cmpn(1)?s:u).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var r=this.clone(),e=t.clone();r.negative=0,e.negative=0;for(var i=0;r.isEven()&&e.isEven();i++)r.iushrn(1),e.iushrn(1);for(;;){for(;r.isEven();)r.iushrn(1);for(;e.isEven();)e.iushrn(1);var n=r.cmp(e);if(n<0){var o=r;r=e,e=o}else if(0===n||0===e.cmpn(1))break;r.isub(e)}return e.iushln(i)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){i("number"==typeof t);var r=t%26,e=(t-r)/26,n=1<<r;if(this.length<=e)return this._expand(e+1),this.words[e]|=n,this;for(var o=n,s=e;0!==o&&s<this.length;s++){var u=0|this.words[s];o=(u+=o)>>>26,u&=67108863,this.words[s]=u}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var r,e=t<0;if(0!==this.negative&&!e)return-1;if(0===this.negative&&e)return 1;if(this._strip(),this.length>1)r=1;else{e&&(t=-t),i(t<=67108863,"Number is too big");var n=0|this.words[0];r=n===t?0:n<t?-1:1}return 0!==this.negative?0|-r:r},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var r=this.ucmp(t);return 0!==this.negative?0|-r:r},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var r=0,e=this.length-1;e>=0;e--){var i=0|this.words[e],n=0|t.words[e];if(i!==n){i<n?r=-1:i>n&&(r=1);break}}return r},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new S(t)},o.prototype.toRed=function(t){return i(!this.red,"Already a number in reduction context"),i(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return i(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return i(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return i(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return i(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return i(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return i(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return i(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return i(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return i(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return i(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return i(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return i(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return i(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var M={k256:null,p224:null,p192:null,p25519:null};function b(t,r){this.name=t,this.p=new o(r,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function x(){b.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function A(){b.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function _(){b.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function B(){b.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function S(t){if("string"==typeof t){var r=o._prime(t);this.m=r.p,this.prime=r}else i(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function T(t){S.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}b.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},b.prototype.ireduce=function(t){var r,e=t;do{this.split(e,this.tmp),r=(e=(e=this.imulK(e)).iadd(this.tmp)).bitLength()}while(r>this.n);var i=r<this.n?-1:e.ucmp(this.p);return 0===i?(e.words[0]=0,e.length=1):i>0?e.isub(this.p):void 0!==e.strip?e.strip():e._strip(),e},b.prototype.split=function(t,r){t.iushrn(this.n,0,r)},b.prototype.imulK=function(t){return t.imul(this.k)},n(x,b),x.prototype.split=function(t,r){for(var e=4194303,i=Math.min(t.length,9),n=0;n<i;n++)r.words[n]=t.words[n];if(r.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(r.words[r.length++]=o&e,n=10;n<t.length;n++){var s=0|t.words[n];t.words[n-10]=(s&e)<<4|o>>>22,o=s}o>>>=22,t.words[n-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},x.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var r=0,e=0;e<t.length;e++){var i=0|t.words[e];r+=977*i,t.words[e]=67108863&r,r=64*i+(r/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(A,b),n(_,b),n(B,b),B.prototype.imulK=function(t){for(var r=0,e=0;e<t.length;e++){var i=19*(0|t.words[e])+r,n=67108863&i;i>>>=26,t.words[e]=n,r=i}return 0!==r&&(t.words[t.length++]=r),t},o._prime=function(t){if(M[t])return M[t];var r;if("k256"===t)r=new x;else if("p224"===t)r=new A;else if("p192"===t)r=new _;else{if("p25519"!==t)throw new Error("Unknown prime "+t);r=new B}return M[t]=r,r},S.prototype._verify1=function(t){i(0===t.negative,"red works only with positives"),i(t.red,"red works only with red numbers")},S.prototype._verify2=function(t,r){i(0==(t.negative|r.negative),"red works only with positives"),i(t.red&&t.red===r.red,"red works only with red numbers")},S.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):(f(t,t.umod(this.m)._forceRed(this)),t)},S.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},S.prototype.add=function(t,r){this._verify2(t,r);var e=t.add(r);return e.cmp(this.m)>=0&&e.isub(this.m),e._forceRed(this)},S.prototype.iadd=function(t,r){this._verify2(t,r);var e=t.iadd(r);return e.cmp(this.m)>=0&&e.isub(this.m),e},S.prototype.sub=function(t,r){this._verify2(t,r);var e=t.sub(r);return e.cmpn(0)<0&&e.iadd(this.m),e._forceRed(this)},S.prototype.isub=function(t,r){this._verify2(t,r);var e=t.isub(r);return e.cmpn(0)<0&&e.iadd(this.m),e},S.prototype.shl=function(t,r){return this._verify1(t),this.imod(t.ushln(r))},S.prototype.imul=function(t,r){return this._verify2(t,r),this.imod(t.imul(r))},S.prototype.mul=function(t,r){return this._verify2(t,r),this.imod(t.mul(r))},S.prototype.isqr=function(t){return this.imul(t,t.clone())},S.prototype.sqr=function(t){return this.mul(t,t)},S.prototype.sqrt=function(t){if(t.isZero())return t.clone();var r=this.m.andln(3);if(i(r%2==1),3===r){var e=this.m.add(new o(1)).iushrn(2);return this.pow(t,e)}for(var n=this.m.subn(1),s=0;!n.isZero()&&0===n.andln(1);)s++,n.iushrn(1);i(!n.isZero());var u=new o(1).toRed(this),h=u.redNeg(),a=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,a).cmp(h);)f.redIAdd(h);for(var l=this.pow(f,n),d=this.pow(t,n.addn(1).iushrn(1)),c=this.pow(t,n),m=s;0!==c.cmp(u);){for(var p=c,g=0;0!==p.cmp(u);g++)p=p.redSqr();i(g<m);var v=this.pow(l,new o(1).iushln(m-g-1));d=d.redMul(v),l=v.redSqr(),c=c.redMul(l),m=g}return d},S.prototype.invm=function(t){var r=t._invmp(this.m);return 0!==r.negative?(r.negative=0,this.imod(r).redNeg()):this.imod(r)},S.prototype.pow=function(t,r){if(r.isZero())return new o(1).toRed(this);if(0===r.cmpn(1))return t.clone();var e=new Array(16);e[0]=new o(1).toRed(this),e[1]=t;for(var i=2;i<e.length;i++)e[i]=this.mul(e[i-1],t);var n=e[0],s=0,u=0,h=r.bitLength()%26;for(0===h&&(h=26),i=r.length-1;i>=0;i--){for(var a=r.words[i],f=h-1;f>=0;f--){var l=a>>f&1;n!==e[0]&&(n=this.sqr(n)),0!==l||0!==s?(s<<=1,s|=l,(4===++u||0===i&&0===f)&&(n=this.mul(n,e[s]),u=0,s=0)):u=0}h=26}return n},S.prototype.convertTo=function(t){var r=t.umod(this.m);return r===t?r.clone():r},S.prototype.convertFrom=function(t){var r=t.clone();return r.red=null,r},o.mont=function(t){return new T(t)},n(T,S),T.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},T.prototype.convertFrom=function(t){var r=this.imod(t.mul(this.rinv));return r.red=null,r},T.prototype.imul=function(t,r){if(t.isZero()||r.isZero())return t.words[0]=0,t.length=1,t;var e=t.imul(r),i=e.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=e.isub(i).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},T.prototype.mul=function(t,r){if(t.isZero()||r.isZero())return new o(0)._forceRed(this);var e=t.mul(r),i=e.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=e.isub(i).iushrn(this.shift),s=n;return n.cmp(this.m)>=0?s=n.isub(this.m):n.cmpn(0)<0&&(s=n.iadd(this.m)),s._forceRed(this)},T.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=e.nmd(t),this)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[9920],{57458:function(e,r){!function(e){var r,t,n,i=String.fromCharCode;function o(e){for(var r,t,n=[],i=0,o=e.length;i<o;)(r=e.charCodeAt(i++))>=55296&&r<=56319&&i<o?56320==(64512&(t=e.charCodeAt(i++)))?n.push(((1023&r)<<10)+(1023&t)+65536):(n.push(r),i--):n.push(r);return n}function u(e){if(e>=55296&&e<=57343)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value")}function f(e,r){return i(e>>r&63|128)}function a(e){if(0==(4294967168&e))return i(e);var r="";return 0==(4294965248&e)?r=i(e>>6&31|192):0==(4294901760&e)?(u(e),r=i(e>>12&15|224),r+=f(e,6)):0==(4292870144&e)&&(r=i(e>>18&7|240),r+=f(e,12),r+=f(e,6)),r+=i(63&e|128)}function c(){if(n>=t)throw Error("Invalid byte index");var e=255&r[n];if(n++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function s(){var e,i;if(n>t)throw Error("Invalid byte index");if(n==t)return!1;if(e=255&r[n],n++,0==(128&e))return e;if(192==(224&e)){if((i=(31&e)<<6|c())>=128)return i;throw Error("Invalid continuation byte")}if(224==(240&e)){if((i=(15&e)<<12|c()<<6|c())>=2048)return u(i),i;throw Error("Invalid continuation byte")}if(240==(248&e)&&(i=(7&e)<<18|c()<<12|c()<<6|c())>=65536&&i<=1114111)return i;throw Error("Invalid UTF-8 detected")}e.version="3.0.0",e.encode=function(e){for(var r=o(e),t=r.length,n=-1,i="";++n<t;)i+=a(r[n]);return i},e.decode=function(e){r=o(e),t=r.length,n=0;for(var u,f=[];!1!==(u=s());)f.push(u);return function(e){for(var r,t=e.length,n=-1,o="";++n<t;)(r=e[n])>65535&&(o+=i((r-=65536)>>>10&1023|55296),r=56320|1023&r),o+=i(r);return o}(f)}}(r)},94927:function(e,r,t){var n=t(25108);function i(e){try{if(!t.g.localStorage)return!1}catch(e){return!1}var r=t.g.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(e,r){if(i("noDeprecation"))return e;var t=!1;return function(){if(!t){if(i("throwDeprecation"))throw new Error(r);i("traceDeprecation")?n.trace(r):n.warn(r),t=!0}return e.apply(this,arguments)}}},20384:function(e){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},55955:function(e,r,t){"use strict";var n=t(82584),i=t(48662),o=t(86430),u=t(85692);function f(e){return e.call.bind(e)}var a="undefined"!=typeof BigInt,c="undefined"!=typeof Symbol,s=f(Object.prototype.toString),p=f(Number.prototype.valueOf),l=f(String.prototype.valueOf),y=f(Boolean.prototype.valueOf);if(a)var d=f(BigInt.prototype.valueOf);if(c)var g=f(Symbol.prototype.valueOf);function b(e,r){if("object"!=typeof e)return!1;try{return r(e),!0}catch(e){return!1}}function h(e){return"[object Map]"===s(e)}function v(e){return"[object Set]"===s(e)}function w(e){return"[object WeakMap]"===s(e)}function m(e){return"[object WeakSet]"===s(e)}function j(e){return"[object ArrayBuffer]"===s(e)}function A(e){return"undefined"!=typeof ArrayBuffer&&(j.working?j(e):e instanceof ArrayBuffer)}function O(e){return"[object DataView]"===s(e)}function S(e){return"undefined"!=typeof DataView&&(O.working?O(e):e instanceof DataView)}r.isArgumentsObject=n,r.isGeneratorFunction=i,r.isTypedArray=u,r.isPromise=function(e){return"undefined"!=typeof Promise&&e instanceof Promise||null!==e&&"object"==typeof e&&"function"==typeof e.then&&"function"==typeof e.catch},r.isArrayBufferView=function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):u(e)||S(e)},r.isUint8Array=function(e){return"Uint8Array"===o(e)},r.isUint8ClampedArray=function(e){return"Uint8ClampedArray"===o(e)},r.isUint16Array=function(e){return"Uint16Array"===o(e)},r.isUint32Array=function(e){return"Uint32Array"===o(e)},r.isInt8Array=function(e){return"Int8Array"===o(e)},r.isInt16Array=function(e){return"Int16Array"===o(e)},r.isInt32Array=function(e){return"Int32Array"===o(e)},r.isFloat32Array=function(e){return"Float32Array"===o(e)},r.isFloat64Array=function(e){return"Float64Array"===o(e)},r.isBigInt64Array=function(e){return"BigInt64Array"===o(e)},r.isBigUint64Array=function(e){return"BigUint64Array"===o(e)},h.working="undefined"!=typeof Map&&h(new Map),r.isMap=function(e){return"undefined"!=typeof Map&&(h.working?h(e):e instanceof Map)},v.working="undefined"!=typeof Set&&v(new Set),r.isSet=function(e){return"undefined"!=typeof Set&&(v.working?v(e):e instanceof Set)},w.working="undefined"!=typeof WeakMap&&w(new WeakMap),r.isWeakMap=function(e){return"undefined"!=typeof WeakMap&&(w.working?w(e):e instanceof WeakMap)},m.working="undefined"!=typeof WeakSet&&m(new WeakSet),r.isWeakSet=function(e){return m(e)},j.working="undefined"!=typeof ArrayBuffer&&j(new ArrayBuffer),r.isArrayBuffer=A,O.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&O(new DataView(new ArrayBuffer(1),0,1)),r.isDataView=S;var E="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function k(e){return"[object SharedArrayBuffer]"===s(e)}function B(e){return void 0!==E&&(void 0===k.working&&(k.working=k(new E)),k.working?k(e):e instanceof E)}function I(e){return b(e,p)}function D(e){return b(e,l)}function x(e){return b(e,y)}function M(e){return a&&b(e,d)}function P(e){return c&&b(e,g)}r.isSharedArrayBuffer=B,r.isAsyncFunction=function(e){return"[object AsyncFunction]"===s(e)},r.isMapIterator=function(e){return"[object Map Iterator]"===s(e)},r.isSetIterator=function(e){return"[object Set Iterator]"===s(e)},r.isGeneratorObject=function(e){return"[object Generator]"===s(e)},r.isWebAssemblyCompiledModule=function(e){return"[object WebAssembly.Module]"===s(e)},r.isNumberObject=I,r.isStringObject=D,r.isBooleanObject=x,r.isBigIntObject=M,r.isSymbolObject=P,r.isBoxedPrimitive=function(e){return I(e)||D(e)||x(e)||M(e)||P(e)},r.isAnyArrayBuffer=function(e){return"undefined"!=typeof Uint8Array&&(A(e)||B(e))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(e){Object.defineProperty(r,e,{enumerable:!1,value:function(){throw new Error(e+" is not supported in userland")}})}))},89539:function(e,r,t){var n=t(34155),i=t(25108),o=Object.getOwnPropertyDescriptors||function(e){for(var r=Object.keys(e),t={},n=0;n<r.length;n++)t[r[n]]=Object.getOwnPropertyDescriptor(e,r[n]);return t},u=/%[sdj%]/g;r.format=function(e){if(!m(e)){for(var r=[],t=0;t<arguments.length;t++)r.push(s(arguments[t]));return r.join(" ")}t=1;for(var n=arguments,i=n.length,o=String(e).replace(u,(function(e){if("%%"===e)return"%";if(t>=i)return e;switch(e){case"%s":return String(n[t++]);case"%d":return Number(n[t++]);case"%j":try{return JSON.stringify(n[t++])}catch(e){return"[Circular]"}default:return e}})),f=n[t];t<i;f=n[++t])v(f)||!O(f)?o+=" "+f:o+=" "+s(f);return o},r.deprecate=function(e,t){if(void 0!==n&&!0===n.noDeprecation)return e;if(void 0===n)return function(){return r.deprecate(e,t).apply(this,arguments)};var o=!1;return function(){if(!o){if(n.throwDeprecation)throw new Error(t);n.traceDeprecation?i.trace(t):i.error(t),o=!0}return e.apply(this,arguments)}};var f={},a=/^$/;if("MISSING_ENV_VAR".NODE_DEBUG){var c="MISSING_ENV_VAR".NODE_DEBUG;c=c.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),a=new RegExp("^"+c+"$","i")}function s(e,t){var n={seen:[],stylize:l};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),h(t)?n.showHidden=t:t&&r._extend(n,t),j(n.showHidden)&&(n.showHidden=!1),j(n.depth)&&(n.depth=2),j(n.colors)&&(n.colors=!1),j(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=p),y(n,e,n.depth)}function p(e,r){var t=s.styles[r];return t?"["+s.colors[t][0]+"m"+e+"["+s.colors[t][1]+"m":e}function l(e,r){return e}function y(e,t,n){if(e.customInspect&&t&&k(t.inspect)&&t.inspect!==r.inspect&&(!t.constructor||t.constructor.prototype!==t)){var i=t.inspect(n,e);return m(i)||(i=y(e,i,n)),i}var o=function(e,r){if(j(r))return e.stylize("undefined","undefined");if(m(r)){var t="'"+JSON.stringify(r).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(t,"string")}if(w(r))return e.stylize(""+r,"number");if(h(r))return e.stylize(""+r,"boolean");if(v(r))return e.stylize("null","null")}(e,t);if(o)return o;var u=Object.keys(t),f=function(e){var r={};return e.forEach((function(e,t){r[e]=!0})),r}(u);if(e.showHidden&&(u=Object.getOwnPropertyNames(t)),E(t)&&(u.indexOf("message")>=0||u.indexOf("description")>=0))return d(t);if(0===u.length){if(k(t)){var a=t.name?": "+t.name:"";return e.stylize("[Function"+a+"]","special")}if(A(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(S(t))return e.stylize(Date.prototype.toString.call(t),"date");if(E(t))return d(t)}var c,s="",p=!1,l=["{","}"];(b(t)&&(p=!0,l=["[","]"]),k(t))&&(s=" [Function"+(t.name?": "+t.name:"")+"]");return A(t)&&(s=" "+RegExp.prototype.toString.call(t)),S(t)&&(s=" "+Date.prototype.toUTCString.call(t)),E(t)&&(s=" "+d(t)),0!==u.length||p&&0!=t.length?n<0?A(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),c=p?function(e,r,t,n,i){for(var o=[],u=0,f=r.length;u<f;++u)M(r,String(u))?o.push(g(e,r,t,n,String(u),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(g(e,r,t,n,i,!0))})),o}(e,t,n,f,u):u.map((function(r){return g(e,t,n,f,r,p)})),e.seen.pop(),function(e,r,t){if(e.reduce((function(e,r){return r.indexOf("\n")>=0&&0,e+r.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return t[0]+(""===r?"":r+"\n ")+" "+e.join(",\n  ")+" "+t[1];return t[0]+r+" "+e.join(", ")+" "+t[1]}(c,s,l)):l[0]+s+l[1]}function d(e){return"["+Error.prototype.toString.call(e)+"]"}function g(e,r,t,n,i,o){var u,f,a;if((a=Object.getOwnPropertyDescriptor(r,i)||{value:r[i]}).get?f=a.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):a.set&&(f=e.stylize("[Setter]","special")),M(n,i)||(u="["+i+"]"),f||(e.seen.indexOf(a.value)<0?(f=v(t)?y(e,a.value,null):y(e,a.value,t-1)).indexOf("\n")>-1&&(f=o?f.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+f.split("\n").map((function(e){return"   "+e})).join("\n")):f=e.stylize("[Circular]","special")),j(u)){if(o&&i.match(/^\d+$/))return f;(u=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(u=u.substr(1,u.length-2),u=e.stylize(u,"name")):(u=u.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),u=e.stylize(u,"string"))}return u+": "+f}function b(e){return Array.isArray(e)}function h(e){return"boolean"==typeof e}function v(e){return null===e}function w(e){return"number"==typeof e}function m(e){return"string"==typeof e}function j(e){return void 0===e}function A(e){return O(e)&&"[object RegExp]"===B(e)}function O(e){return"object"==typeof e&&null!==e}function S(e){return O(e)&&"[object Date]"===B(e)}function E(e){return O(e)&&("[object Error]"===B(e)||e instanceof Error)}function k(e){return"function"==typeof e}function B(e){return Object.prototype.toString.call(e)}function I(e){return e<10?"0"+e.toString(10):e.toString(10)}r.debuglog=function(e){if(e=e.toUpperCase(),!f[e])if(a.test(e)){var t=n.pid;f[e]=function(){var n=r.format.apply(r,arguments);i.error("%s %d: %s",e,t,n)}}else f[e]=function(){};return f[e]},r.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},r.types=t(55955),r.isArray=b,r.isBoolean=h,r.isNull=v,r.isNullOrUndefined=function(e){return null==e},r.isNumber=w,r.isString=m,r.isSymbol=function(e){return"symbol"==typeof e},r.isUndefined=j,r.isRegExp=A,r.types.isRegExp=A,r.isObject=O,r.isDate=S,r.types.isDate=S,r.isError=E,r.types.isNativeError=E,r.isFunction=k,r.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},r.isBuffer=t(20384);var D=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function x(){var e=new Date,r=[I(e.getHours()),I(e.getMinutes()),I(e.getSeconds())].join(":");return[e.getDate(),D[e.getMonth()],r].join(" ")}function M(e,r){return Object.prototype.hasOwnProperty.call(e,r)}r.log=function(){i.log("%s - %s",x(),r.format.apply(r,arguments))},r.inherits=t(35717),r._extend=function(e,r){if(!r||!O(r))return e;for(var t=Object.keys(r),n=t.length;n--;)e[t[n]]=r[t[n]];return e};var P="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function U(e,r){if(!e){var t=new Error("Promise was rejected with a falsy value");t.reason=e,e=t}return r(e)}r.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(P&&e[P]){var r;if("function"!=typeof(r=e[P]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(r,P,{value:r,enumerable:!1,writable:!1,configurable:!0}),r}function r(){for(var r,t,n=new Promise((function(e,n){r=e,t=n})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(e,n){e?t(e):r(n)}));try{e.apply(this,i)}catch(e){t(e)}return n}return Object.setPrototypeOf(r,Object.getPrototypeOf(e)),P&&Object.defineProperty(r,P,{value:r,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(r,o(e))},r.promisify.custom=P,r.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function r(){for(var r=[],t=0;t<arguments.length;t++)r.push(arguments[t]);var i=r.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,u=function(){return i.apply(o,arguments)};e.apply(this,r).then((function(e){n.nextTick(u.bind(null,null,e))}),(function(e){n.nextTick(U.bind(null,e,u))}))}return Object.setPrototypeOf(r,Object.getPrototypeOf(e)),Object.defineProperties(r,o(e)),r}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
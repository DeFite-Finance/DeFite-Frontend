(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[5457],{9293:function(t,e,n){"use strict";n.r(e),n.d(e,{detectEnv:function(){return s},detectOS:function(){return a},formatIOSMobile:function(){return O},formatMobileRegistry:function(){return z},formatMobileRegistryEntry:function(){return W},getAppLogoUrl:function(){return U},getClientMeta:function(){return S},getCrypto:function(){return M},getCryptoOrThrow:function(){return b},getDappRegistryUrl:function(){return P},getDocument:function(){return g},getDocumentOrThrow:function(){return m},getFromWindow:function(){return p},getFromWindowOrThrow:function(){return f},getLocal:function(){return E},getLocalStorage:function(){return k},getLocalStorageOrThrow:function(){return x},getLocation:function(){return y},getLocationOrThrow:function(){return v},getMobileLinkRegistry:function(){return N},getMobileRegistryEntry:function(){return A},getNavigator:function(){return w},getNavigatorOrThrow:function(){return _},getWalletRegistryUrl:function(){return j},isAndroid:function(){return h},isBrowser:function(){return d},isIOS:function(){return c},isMobile:function(){return l},isNode:function(){return u},mobileLinkChoiceKey:function(){return R},removeLocal:function(){return q},safeJsonParse:function(){return C},safeJsonStringify:function(){return I},saveMobileLinkInfo:function(){return L},setLocal:function(){return T}});var r=n(65755),i=n(62873),o=n(43631);function s(t){return(0,o.qY)(t)}function a(){const t=s();return t&&t.os?t.os:void 0}function h(){const t=a();return!!t&&t.toLowerCase().includes("android")}function c(){const t=a();return!!t&&(t.toLowerCase().includes("ios")||t.toLowerCase().includes("mac")&&navigator.maxTouchPoints>1)}function l(){return!!a()&&(h()||c())}function u(){const t=s();return!(!t||!t.name)&&"node"===t.name.toLowerCase()}function d(){return!u()&&!!w()}const p=i.getFromWindow,f=i.getFromWindowOrThrow,m=i.getDocumentOrThrow,g=i.getDocument,_=i.getNavigatorOrThrow,w=i.getNavigator,v=i.getLocationOrThrow,y=i.getLocation,b=i.getCryptoOrThrow,M=i.getCrypto,x=i.getLocalStorageOrThrow,k=i.getLocalStorage;function S(){return r.D()}const C=function(t){if("string"!=typeof t)throw new Error("Cannot safe json parse value of type "+typeof t);try{return JSON.parse(t)}catch(e){return t}},I=function(t){return"string"==typeof t?t:JSON.stringify(t)};function T(t,e){const n=I(e),r=k();r&&r.setItem(t,n)}function E(t){let e=null,n=null;const r=k();return r&&(n=r.getItem(t)),e=n?C(n):n,e}function q(t){const e=k();e&&e.removeItem(t)}const R="WALLETCONNECT_DEEPLINK_CHOICE";function O(t,e){const n=encodeURIComponent(t);return e.universalLink?`${e.universalLink}/wc?uri=${n}`:e.deepLink?`${e.deepLink}${e.deepLink.endsWith(":")?"//":"/"}wc?uri=${n}`:""}function L(t){const e=t.href.split("?")[0];T(R,Object.assign(Object.assign({},t),{href:e}))}function A(t,e){return t.filter((t=>t.name.toLowerCase().includes(e.toLowerCase())))[0]}function N(t,e){let n=t;return e&&(n=e.map((e=>A(t,e))).filter(Boolean)),n}const B="https://registry.walletconnect.org";function j(){return B+"/data/wallets.json"}function P(){return B+"/data/dapps.json"}function U(t){return B+"/logo/sm/"+t+".jpeg"}function W(t,e="mobile"){return{name:t.name||"",shortName:t.metadata.shortName||"",color:t.metadata.colors.primary||"",logo:t.id?U(t.id):"",universalLink:t[e].universal||"",deepLink:t[e].native||""}}function z(t,e="mobile"){return Object.values(t).filter((t=>!!t[e].universal||!!t[e].native)).map((t=>W(t,e)))}},23087:function(t,e,n){"use strict";var r=n(23085).Buffer,i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.removeHexLeadingZeros=e.sanitizeHex=e.addHexPrefix=e.removeHexPrefix=e.padRight=e.padLeft=e.sanitizeBytes=e.swapHex=e.swapBytes=e.splitBytes=e.calcByteLength=e.trimRight=e.trimLeft=e.concatArrays=e.concatBuffers=e.getEncoding=e.getType=e.isArrayBuffer=e.isTypedArray=e.isBuffer=e.isHexString=e.isBinaryString=e.binaryToNumber=e.binaryToUtf8=e.binaryToHex=e.binaryToArray=e.binaryToBuffer=e.numberToBinary=e.numberToUtf8=e.numberToHex=e.numberToArray=e.numberToBuffer=e.utf8ToBinary=e.utf8ToNumber=e.utf8ToHex=e.utf8ToArray=e.utf8ToBuffer=e.hexToBinary=e.hexToNumber=e.hexToUtf8=e.hexToArray=e.hexToBuffer=e.arrayToBinary=e.arrayToNumber=e.arrayToUtf8=e.arrayToHex=e.arrayToBuffer=e.bufferToBinary=e.bufferToNumber=e.bufferToUtf8=e.bufferToHex=e.bufferToArray=void 0;const o=i(n(4501)),s=i(n(65054)),a="hex",h="utf8",c="0";function l(t){return new Uint8Array(t)}function u(t,e=!1){const n=t.toString(a);return e?U(n):n}function d(t){return t.toString(h)}function p(t){return t.readUIntBE(0,t.length)}function f(t){return s.default(t)}function m(t,e=!1){return u(f(t),e)}function g(t){return d(f(t))}function _(t){return p(f(t))}function w(t){return Array.from(t).map(k).join("")}function v(t){return r.from(P(t),a)}function y(t){return l(v(t))}function b(t){return w(y(t))}function M(t){return r.from(t,h)}function x(t){return l(M(t))}function k(t){return B((t>>>0).toString(2))}function S(t){return f(C(t))}function C(t){return new Uint8Array(A(t).map((t=>parseInt(t,2))))}function I(t,e){return m(C(t),e)}function T(t){return!("string"!=typeof t||!new RegExp(/^[01]+$/).test(t))&&t.length%8==0}function E(t,e){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/))&&(!e||t.length===2+2*e)}function q(t){return r.isBuffer(t)}function R(t){return o.default.strict(t)&&!q(t)}function O(t){return!R(t)&&!q(t)&&void 0!==t.byteLength}function L(t,e=8){const n=t%e;return n?(t-n)/e*e+e:t}function A(t,e=8){const n=B(t).match(new RegExp(`.{${e}}`,"gi"));return Array.from(n||[])}function N(t){return A(t).map(W).join("")}function B(t,e=8,n="0"){return j(t,L(t.length,e),n)}function j(t,e,n="0"){return z(t,e,!0,n)}function P(t){return t.replace(/^0x/,"")}function U(t){return t.startsWith("0x")?t:`0x${t}`}function W(t){return t.split("").reverse().join("")}function z(t,e,n,r="0"){const i=e-t.length;let o=t;if(i>0){const e=r.repeat(i);o=n?e+t:t+e}return o}e.bufferToArray=l,e.bufferToHex=u,e.bufferToUtf8=d,e.bufferToNumber=p,e.bufferToBinary=function(t){return w(l(t))},e.arrayToBuffer=f,e.arrayToHex=m,e.arrayToUtf8=g,e.arrayToNumber=_,e.arrayToBinary=w,e.hexToBuffer=v,e.hexToArray=y,e.hexToUtf8=function(t){return d(v(t))},e.hexToNumber=function(t){return _(y(t))},e.hexToBinary=b,e.utf8ToBuffer=M,e.utf8ToArray=x,e.utf8ToHex=function(t,e=!1){return u(M(t),e)},e.utf8ToNumber=function(t){const e=parseInt(t,10);return function(t,e){if(!t)throw new Error(e)}(!function(t){return void 0===t}(e),"Number can only safely store up to 53 bits"),e},e.utf8ToBinary=function(t){return w(x(t))},e.numberToBuffer=function(t){return S(k(t))},e.numberToArray=function(t){return C(k(t))},e.numberToHex=function(t,e){return I(k(t),e)},e.numberToUtf8=function(t){return`${t}`},e.numberToBinary=k,e.binaryToBuffer=S,e.binaryToArray=C,e.binaryToHex=I,e.binaryToUtf8=function(t){return g(C(t))},e.binaryToNumber=function(t){return _(C(t))},e.isBinaryString=T,e.isHexString=E,e.isBuffer=q,e.isTypedArray=R,e.isArrayBuffer=O,e.getType=function(t){return q(t)?"buffer":R(t)?"typed-array":O(t)?"array-buffer":Array.isArray(t)?"array":typeof t},e.getEncoding=function(t){return T(t)?"binary":E(t)?a:h},e.concatBuffers=function(...t){return r.concat(t)},e.concatArrays=function(...t){let e=[];return t.forEach((t=>e=e.concat(Array.from(t)))),new Uint8Array([...e])},e.trimLeft=function(t,e){const n=t.length-e;return n>0&&(t=t.slice(n)),t},e.trimRight=function(t,e){return t.slice(0,e)},e.calcByteLength=L,e.splitBytes=A,e.swapBytes=N,e.swapHex=function(t){return I(N(b(t)))},e.sanitizeBytes=B,e.padLeft=j,e.padRight=function(t,e,n="0"){return z(t,e,!1,n)},e.removeHexPrefix=P,e.addHexPrefix=U,e.sanitizeHex=function(t){return(t=B(t=P(t),2))&&(t=U(t)),t},e.removeHexLeadingZeros=function(t){const e=t.startsWith("0x");return t=(t=P(t)).startsWith(c)?t.substring(1):t,e?U(t):t}},40926:function(t,e,n){"use strict";function r(){return(null===n.g||void 0===n.g?void 0:n.g.crypto)||(null===n.g||void 0===n.g?void 0:n.g.msCrypto)||{}}function i(){const t=r();return t.subtle||t.webkitSubtle}Object.defineProperty(e,"__esModule",{value:!0}),e.isBrowserCryptoAvailable=e.getSubtleCrypto=e.getBrowerCrypto=void 0,e.getBrowerCrypto=r,e.getSubtleCrypto=i,e.isBrowserCryptoAvailable=function(){return!!r()&&!!i()}},88618:function(t,e,n){"use strict";var r=n(34155);function i(){return"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product}function o(){return void 0!==r&&void 0!==r.versions&&void 0!==r.versions.node}Object.defineProperty(e,"__esModule",{value:!0}),e.isBrowser=e.isNode=e.isReactNative=void 0,e.isReactNative=i,e.isNode=o,e.isBrowser=function(){return!i()&&!o()}},1468:function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),i=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||e.hasOwnProperty(n)||r(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),i(n(40926),e),i(n(88618),e)},71578:function(t){"use strict";var e=Object.prototype.hasOwnProperty,n="~";function r(){}function i(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function o(t,e,r,o,s){if("function"!=typeof r)throw new TypeError("The listener must be a function");var a=new i(r,o||t,s),h=n?n+e:e;return t._events[h]?t._events[h].fn?t._events[h]=[t._events[h],a]:t._events[h].push(a):(t._events[h]=a,t._eventsCount++),t}function s(t,e){0==--t._eventsCount?t._events=new r:delete t._events[e]}function a(){this._events=new r,this._eventsCount=0}Object.create&&(r.prototype=Object.create(null),(new r).__proto__||(n=!1)),a.prototype.eventNames=function(){var t,r,i=[];if(0===this._eventsCount)return i;for(r in t=this._events)e.call(t,r)&&i.push(n?r.slice(1):r);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(t)):i},a.prototype.listeners=function(t){var e=n?n+t:t,r=this._events[e];if(!r)return[];if(r.fn)return[r.fn];for(var i=0,o=r.length,s=new Array(o);i<o;i++)s[i]=r[i].fn;return s},a.prototype.listenerCount=function(t){var e=n?n+t:t,r=this._events[e];return r?r.fn?1:r.length:0},a.prototype.emit=function(t,e,r,i,o,s){var a=n?n+t:t;if(!this._events[a])return!1;var h,c,l=this._events[a],u=arguments.length;if(l.fn){switch(l.once&&this.removeListener(t,l.fn,void 0,!0),u){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,e),!0;case 3:return l.fn.call(l.context,e,r),!0;case 4:return l.fn.call(l.context,e,r,i),!0;case 5:return l.fn.call(l.context,e,r,i,o),!0;case 6:return l.fn.call(l.context,e,r,i,o,s),!0}for(c=1,h=new Array(u-1);c<u;c++)h[c-1]=arguments[c];l.fn.apply(l.context,h)}else{var d,p=l.length;for(c=0;c<p;c++)switch(l[c].once&&this.removeListener(t,l[c].fn,void 0,!0),u){case 1:l[c].fn.call(l[c].context);break;case 2:l[c].fn.call(l[c].context,e);break;case 3:l[c].fn.call(l[c].context,e,r);break;case 4:l[c].fn.call(l[c].context,e,r,i);break;default:if(!h)for(d=1,h=new Array(u-1);d<u;d++)h[d-1]=arguments[d];l[c].fn.apply(l[c].context,h)}}return!0},a.prototype.on=function(t,e,n){return o(this,t,e,n,!1)},a.prototype.once=function(t,e,n){return o(this,t,e,n,!0)},a.prototype.removeListener=function(t,e,r,i){var o=n?n+t:t;if(!this._events[o])return this;if(!e)return s(this,o),this;var a=this._events[o];if(a.fn)a.fn!==e||i&&!a.once||r&&a.context!==r||s(this,o);else{for(var h=0,c=[],l=a.length;h<l;h++)(a[h].fn!==e||i&&!a[h].once||r&&a[h].context!==r)&&c.push(a[h]);c.length?this._events[o]=1===c.length?c[0]:c:s(this,o)}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=n?n+t:t,this._events[e]&&s(this,e)):(this._events=new r,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=n,a.EventEmitter=a,t.exports=a},4337:function(t,e,n){var r=n(25108),i=n(34155);function o(t){return t&&"object"==typeof t&&"default"in t?t.default:t}var s=n(9293),a=o(n(92592)),h=o(n(20640)),c=n(35776);"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var l="walletconnect-wrapper",u="walletconnect-style-sheet",d="walletconnect-qrcode-modal",p="walletconnect-qrcode-text";function f(t){return c.createElement("div",{className:"walletconnect-modal__header"},c.createElement("img",{src:"data:image/svg+xml,%3C?xml version='1.0' encoding='UTF-8'?%3E %3Csvg width='300px' height='185px' viewBox='0 0 300 185' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E %3C!-- Generator: Sketch 49.3 (51167) - http://www.bohemiancoding.com/sketch --%3E %3Ctitle%3EWalletConnect%3C/title%3E %3Cdesc%3ECreated with Sketch.%3C/desc%3E %3Cdefs%3E%3C/defs%3E %3Cg id='Page-1' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E %3Cg id='walletconnect-logo-alt' fill='%233B99FC' fill-rule='nonzero'%3E %3Cpath d='M61.4385429,36.2562612 C110.349767,-11.6319051 189.65053,-11.6319051 238.561752,36.2562612 L244.448297,42.0196786 C246.893858,44.4140867 246.893858,48.2961898 244.448297,50.690599 L224.311602,70.406102 C223.088821,71.6033071 221.106302,71.6033071 219.883521,70.406102 L211.782937,62.4749541 C177.661245,29.0669724 122.339051,29.0669724 88.2173582,62.4749541 L79.542302,70.9685592 C78.3195204,72.1657633 76.337001,72.1657633 75.1142214,70.9685592 L54.9775265,51.2530561 C52.5319653,48.8586469 52.5319653,44.9765439 54.9775265,42.5821357 L61.4385429,36.2562612 Z M280.206339,77.0300061 L298.128036,94.5769031 C300.573585,96.9713 300.573599,100.85338 298.128067,103.247793 L217.317896,182.368927 C214.872352,184.763353 210.907314,184.76338 208.461736,182.368989 C208.461726,182.368979 208.461714,182.368967 208.461704,182.368957 L151.107561,126.214385 C150.496171,125.615783 149.504911,125.615783 148.893521,126.214385 C148.893517,126.214389 148.893514,126.214393 148.89351,126.214396 L91.5405888,182.368927 C89.095052,184.763359 85.1300133,184.763399 82.6844276,182.369014 C82.6844133,182.369 82.684398,182.368986 82.6843827,182.36897 L1.87196327,103.246785 C-0.573596939,100.852377 -0.573596939,96.9702735 1.87196327,94.5758653 L19.7936929,77.028998 C22.2392531,74.6345898 26.2042918,74.6345898 28.6498531,77.028998 L86.0048306,133.184355 C86.6162214,133.782957 87.6074796,133.782957 88.2188704,133.184355 C88.2188796,133.184346 88.2188878,133.184338 88.2188969,133.184331 L145.571,77.028998 C148.016505,74.6345347 151.981544,74.6344449 154.427161,77.028798 C154.427195,77.0288316 154.427229,77.0288653 154.427262,77.028899 L211.782164,133.184331 C212.393554,133.782932 213.384814,133.782932 213.996204,133.184331 L271.350179,77.0300061 C273.79574,74.6355969 277.760778,74.6355969 280.206339,77.0300061 Z' id='WalletConnect'%3E%3C/path%3E %3C/g%3E %3C/g%3E %3C/svg%3E",className:"walletconnect-modal__headerLogo"}),c.createElement("p",null,"WalletConnect"),c.createElement("div",{className:"walletconnect-modal__close__wrapper",onClick:t.onClose},c.createElement("div",{id:"walletconnect-qrcode-close",className:"walletconnect-modal__close__icon"},c.createElement("div",{className:"walletconnect-modal__close__line1"}),c.createElement("div",{className:"walletconnect-modal__close__line2"}))))}function m(t){return c.createElement("a",{className:"walletconnect-connect__button",href:t.href,id:"walletconnect-connect-button-"+t.name,onClick:t.onClick,rel:"noopener noreferrer",style:{backgroundColor:t.color},target:"_blank"},t.name)}function g(t){var e=t.color,n=t.href,r=t.name,i=t.logo,o=t.onClick;return c.createElement("a",{className:"walletconnect-modal__base__row",href:n,onClick:o,rel:"noopener noreferrer",target:"_blank"},c.createElement("h3",{className:"walletconnect-modal__base__row__h3"},r),c.createElement("div",{className:"walletconnect-modal__base__row__right"},c.createElement("div",{className:"walletconnect-modal__base__row__right__app-icon",style:{background:"url('"+i+"') "+e,backgroundSize:"100%"}}),c.createElement("img",{src:"data:image/svg+xml,%3Csvg width='8' height='18' viewBox='0 0 8 18' fill='none' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M0.586301 0.213898C0.150354 0.552968 0.0718197 1.18124 0.41089 1.61719L5.2892 7.88931C5.57007 8.25042 5.57007 8.75608 5.2892 9.11719L0.410889 15.3893C0.071819 15.8253 0.150353 16.4535 0.586301 16.7926C1.02225 17.1317 1.65052 17.0531 1.98959 16.6172L6.86791 10.3451C7.7105 9.26174 7.7105 7.74476 6.86791 6.66143L1.98959 0.38931C1.65052 -0.0466374 1.02225 -0.125172 0.586301 0.213898Z' fill='%233C4252'/%3E %3C/svg%3E",className:"walletconnect-modal__base__row__right__caret"})))}function _(t){var e=t.color,n=t.href,r=t.name,i=t.logo,o=t.onClick,s=window.innerWidth<768?(r.length>8?2.5:2.7)+"vw":"inherit";return c.createElement("a",{className:"walletconnect-connect__button__icon_anchor",href:n,onClick:o,rel:"noopener noreferrer",target:"_blank"},c.createElement("div",{className:"walletconnect-connect__button__icon",style:{background:"url('"+i+"') "+e,backgroundSize:"100%"}}),c.createElement("div",{style:{fontSize:s},className:"walletconnect-connect__button__text"},r))}function w(t){var e=s.isAndroid(),n=c.useState(""),r=n[0],i=n[1],o=c.useState(""),a=o[0],h=o[1],l=c.useState(1),u=l[0],d=l[1],f=a?t.links.filter((function(t){return t.name.toLowerCase().includes(a.toLowerCase())})):t.links,w=t.errorMessage,v=a||f.length>5,y=Math.ceil(f.length/12),b=[12*(u-1)+1,12*u],M=f.length?f.filter((function(t,e){return e+1>=b[0]&&e+1<=b[1]})):[],x=!(e||!(y>1)),k=void 0;return c.createElement("div",null,c.createElement("p",{id:p,className:"walletconnect-qrcode__text"},e?t.text.connect_mobile_wallet:t.text.choose_preferred_wallet),!e&&c.createElement("input",{className:"walletconnect-search__input",placeholder:"Search",value:r,onChange:function(t){i(t.target.value),clearTimeout(k),t.target.value?k=setTimeout((function(){h(t.target.value),d(1)}),1e3):(i(""),h(""),d(1))}}),c.createElement("div",{className:"walletconnect-connect__buttons__wrapper"+(e?"__android":v&&f.length?"__wrap":"")},e?c.createElement(m,{name:t.text.connect,color:"rgb(64, 153, 255)",href:t.uri,onClick:c.useCallback((function(){s.saveMobileLinkInfo({name:"Unknown",href:t.uri})}),[])}):M.length?M.map((function(e){var n=e.color,r=e.name,i=e.shortName,o=e.logo,a=s.formatIOSMobile(t.uri,e),h=c.useCallback((function(){s.saveMobileLinkInfo({name:r,href:a})}),[M]);return v?c.createElement(_,{color:n,href:a,name:i,logo:o,onClick:h}):c.createElement(g,{color:n,href:a,name:r,logo:o,onClick:h})})):c.createElement(c.Fragment,null,c.createElement("p",null,w.length?t.errorMessage:t.links.length&&!f.length?t.text.no_wallets_found:t.text.loading))),x&&c.createElement("div",{className:"walletconnect-modal__footer"},Array(y).fill(0).map((function(t,e){var n=e+1,r=u===n;return c.createElement("a",{style:{margin:"auto 10px",fontWeight:r?"bold":"normal"},onClick:function(){return d(n)}},n)}))))}function v(t){var e=!!t.message.trim();return c.createElement("div",{className:"walletconnect-qrcode__notification"+(e?" notification__show":"")},t.message)}function y(t){var e=c.useState(""),n=e[0],r=e[1],i=c.useState(""),o=i[0],s=i[1];c.useEffect((function(){try{return Promise.resolve(function(t){try{var e="";return Promise.resolve(a.toString(t,{margin:0,type:"svg"})).then((function(t){return"string"==typeof t&&(e=t.replace("<svg",'<svg class="walletconnect-qrcode__image"')),e}))}catch(t){return Promise.reject(t)}}(t.uri)).then((function(t){s(t)}))}catch(t){Promise.reject(t)}}),[]);return c.createElement("div",null,c.createElement("p",{id:p,className:"walletconnect-qrcode__text"},t.text.scan_qrcode_with_wallet),c.createElement("div",{dangerouslySetInnerHTML:{__html:o}}),c.createElement("div",{className:"walletconnect-modal__footer"},c.createElement("a",{onClick:function(){h(t.uri)?(r(t.text.copied_to_clipboard),setInterval((function(){return r("")}),1200)):(r("Error"),setInterval((function(){return r("")}),1200))}},t.text.copy_to_clipboard)),c.createElement(v,{message:n}))}function b(t){var e=s.isAndroid(),n=s.isMobile(),i=n?t.qrcodeModalOptions&&t.qrcodeModalOptions.mobileLinks?t.qrcodeModalOptions.mobileLinks:void 0:t.qrcodeModalOptions&&t.qrcodeModalOptions.desktopLinks?t.qrcodeModalOptions.desktopLinks:void 0,o=c.useState(!1),a=o[0],h=o[1],l=c.useState(!1),u=l[0],p=l[1],m=c.useState(!n),g=m[0],_=m[1],v={mobile:n,text:t.text,uri:t.uri,qrcodeModalOptions:t.qrcodeModalOptions},b=c.useState(""),M=b[0],x=b[1],k=c.useState(!1),S=k[0],C=k[1],I=c.useState([]),T=I[0],E=I[1],q=c.useState(""),R=q[0],O=q[1],L=function(){u||a||i&&!i.length||T.length>0||c.useEffect((function(){!function(){try{if(e)return Promise.resolve();h(!0);var o=function(t,e){try{var n=t()}catch(t){return e(t)}return n&&n.then?n.then(void 0,e):n}((function(){var e=t.qrcodeModalOptions&&t.qrcodeModalOptions.registryUrl?t.qrcodeModalOptions.registryUrl:s.getWalletRegistryUrl();return Promise.resolve(fetch(e).then((function(t){return t.json()}))).then((function(e){var r=n?"mobile":"desktop",o=s.getMobileLinkRegistry(s.formatMobileRegistry(e,r),i);h(!1),p(!0),O(o.length?"":t.text.no_supported_wallets),E(o);var a=1===o.length;a&&(x(s.formatIOSMobile(t.uri,o[0])),_(!0)),C(a)}))}),(function(e){h(!1),p(!0),O(t.text.something_went_wrong),r.error(e)}));Promise.resolve(o&&o.then?o.then((function(){})):void 0)}catch(t){return Promise.reject(t)}}()}))};L();var A=n?g:!g;return c.createElement("div",{id:d,className:"walletconnect-qrcode__base animated fadeIn"},c.createElement("div",{className:"walletconnect-modal__base"},c.createElement(f,{onClose:t.onClose}),S&&g?c.createElement("div",{className:"walletconnect-modal__single_wallet"},c.createElement("a",{onClick:function(){return s.saveMobileLinkInfo({name:T[0].name,href:M})},href:M,rel:"noopener noreferrer",target:"_blank"},t.text.connect_with+" "+(S?T[0].name:"")+" ›")):e||a||!a&&T.length?c.createElement("div",{className:"walletconnect-modal__mobile__toggle"+(A?" right__selected":"")},c.createElement("div",{className:"walletconnect-modal__mobile__toggle_selector"}),n?c.createElement(c.Fragment,null,c.createElement("a",{onClick:function(){return _(!1),L()}},t.text.mobile),c.createElement("a",{onClick:function(){return _(!0)}},t.text.qrcode)):c.createElement(c.Fragment,null,c.createElement("a",{onClick:function(){return _(!0)}},t.text.qrcode),c.createElement("a",{onClick:function(){return _(!1),L()}},t.text.desktop))):null,c.createElement("div",null,g||!e&&!a&&!T.length?c.createElement(y,Object.assign({},v)):c.createElement(w,Object.assign({},v,{links:T,errorMessage:R})))))}var M={de:{choose_preferred_wallet:"Wähle bevorzugte Wallet",connect_mobile_wallet:"Verbinde mit Mobile Wallet",scan_qrcode_with_wallet:"Scanne den QR-code mit einer WalletConnect kompatiblen Wallet",connect:"Verbinden",qrcode:"QR-Code",mobile:"Mobile",desktop:"Desktop",copy_to_clipboard:"In die Zwischenablage kopieren",copied_to_clipboard:"In die Zwischenablage kopiert!",connect_with:"Verbinden mit Hilfe von",loading:"Laden...",something_went_wrong:"Etwas ist schief gelaufen",no_supported_wallets:"Es gibt noch keine unterstützten Wallet",no_wallets_found:"keine Wallet gefunden"},en:{choose_preferred_wallet:"Choose your preferred wallet",connect_mobile_wallet:"Connect to Mobile Wallet",scan_qrcode_with_wallet:"Scan QR code with a WalletConnect-compatible wallet",connect:"Connect",qrcode:"QR Code",mobile:"Mobile",desktop:"Desktop",copy_to_clipboard:"Copy to clipboard",copied_to_clipboard:"Copied to clipboard!",connect_with:"Connect with",loading:"Loading...",something_went_wrong:"Something went wrong",no_supported_wallets:"There are no supported wallets yet",no_wallets_found:"No wallets found"},es:{choose_preferred_wallet:"Elige tu billetera preferida",connect_mobile_wallet:"Conectar a billetera móvil",scan_qrcode_with_wallet:"Escanea el código QR con una billetera compatible con WalletConnect",connect:"Conectar",qrcode:"Código QR",mobile:"Móvil",desktop:"Desktop",copy_to_clipboard:"Copiar",copied_to_clipboard:"Copiado!",connect_with:"Conectar mediante",loading:"Cargando...",something_went_wrong:"Algo salió mal",no_supported_wallets:"Todavía no hay billeteras compatibles",no_wallets_found:"No se encontraron billeteras"},fr:{choose_preferred_wallet:"Choisissez votre portefeuille préféré",connect_mobile_wallet:"Se connecter au portefeuille mobile",scan_qrcode_with_wallet:"Scannez le QR code avec un portefeuille compatible WalletConnect",connect:"Se connecter",qrcode:"QR Code",mobile:"Mobile",desktop:"Desktop",copy_to_clipboard:"Copier",copied_to_clipboard:"Copié!",connect_with:"Connectez-vous à l'aide de",loading:"Chargement...",something_went_wrong:"Quelque chose a mal tourné",no_supported_wallets:"Il n'y a pas encore de portefeuilles pris en charge",no_wallets_found:"Aucun portefeuille trouvé"},ko:{choose_preferred_wallet:"원하는 지갑을 선택하세요",connect_mobile_wallet:"모바일 지갑과 연결",scan_qrcode_with_wallet:"WalletConnect 지원 지갑에서 QR코드를 스캔하세요",connect:"연결",qrcode:"QR 코드",mobile:"모바일",desktop:"데스크탑",copy_to_clipboard:"클립보드에 복사",copied_to_clipboard:"클립보드에 복사되었습니다!",connect_with:"와 연결하다",loading:"로드 중...",something_went_wrong:"문제가 발생했습니다.",no_supported_wallets:"아직 지원되는 지갑이 없습니다",no_wallets_found:"지갑을 찾을 수 없습니다"},pt:{choose_preferred_wallet:"Escolha sua carteira preferida",connect_mobile_wallet:"Conectar-se à carteira móvel",scan_qrcode_with_wallet:"Ler o código QR com uma carteira compatível com WalletConnect",connect:"Conectar",qrcode:"Código QR",mobile:"Móvel",desktop:"Desktop",copy_to_clipboard:"Copiar",copied_to_clipboard:"Copiado!",connect_with:"Ligar por meio de",loading:"Carregamento...",something_went_wrong:"Algo correu mal",no_supported_wallets:"Ainda não há carteiras suportadas",no_wallets_found:"Nenhuma carteira encontrada"},zh:{choose_preferred_wallet:"选择你的钱包",connect_mobile_wallet:"连接至移动端钱包",scan_qrcode_with_wallet:"使用兼容 WalletConnect 的钱包扫描二维码",connect:"连接",qrcode:"二维码",mobile:"移动",desktop:"桌面",copy_to_clipboard:"复制到剪贴板",copied_to_clipboard:"复制到剪贴板成功！",connect_with:"通过以下方式连接",loading:"正在加载...",something_went_wrong:"出了问题",no_supported_wallets:"目前还没有支持的钱包",no_wallets_found:"没有找到钱包"},fa:{choose_preferred_wallet:"کیف پول مورد نظر خود را انتخاب کنید",connect_mobile_wallet:"به کیف پول موبایل وصل شوید",scan_qrcode_with_wallet:"کد QR را با یک کیف پول سازگار با WalletConnect اسکن کنید",connect:"اتصال",qrcode:"کد QR",mobile:"سیار",desktop:"دسکتاپ",copy_to_clipboard:"کپی به کلیپ بورد",copied_to_clipboard:"در کلیپ بورد کپی شد!",connect_with:"ارتباط با",loading:"...بارگذاری",something_went_wrong:"مشکلی پیش آمد",no_supported_wallets:"هنوز هیچ کیف پول پشتیبانی شده ای وجود ندارد",no_wallets_found:"هیچ کیف پولی پیدا نشد"}};function x(){var t=s.getDocumentOrThrow(),e=t.getElementById(d);e&&(e.className=e.className.replace("fadeIn","fadeOut"),setTimeout((function(){var e=t.getElementById(l);e&&t.body.removeChild(e)}),300))}function k(t){return function(){x(),t&&t()}}function S(t,e,n){!function(){var t=s.getDocumentOrThrow(),e=t.getElementById(u);e&&t.head.removeChild(e);var n=t.createElement("style");n.setAttribute("id",u),n.innerText=':root {\n  --animation-duration: 300ms;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.animated {\n  animation-duration: var(--animation-duration);\n  animation-fill-mode: both;\n}\n\n.fadeIn {\n  animation-name: fadeIn;\n}\n\n.fadeOut {\n  animation-name: fadeOut;\n}\n\n#walletconnect-wrapper {\n  -webkit-user-select: none;\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  user-select: none;\n  width: 100%;\n  z-index: 99999999999999;\n}\n\n.walletconnect-modal__headerLogo {\n  height: 21px;\n}\n\n.walletconnect-modal__header p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n  align-items: flex-start;\n  display: flex;\n  flex: 1;\n  margin-left: 5px;\n}\n\n.walletconnect-modal__close__wrapper {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  z-index: 10000;\n  background: white;\n  border-radius: 26px;\n  padding: 6px;\n  box-sizing: border-box;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n}\n\n.walletconnect-modal__close__icon {\n  position: relative;\n  top: 7px;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: rotate(45deg);\n}\n\n.walletconnect-modal__close__line1 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n}\n\n.walletconnect-modal__close__line2 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n  transform: rotate(90deg);\n}\n\n.walletconnect-qrcode__base {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  background: rgba(37, 41, 46, 0.95);\n  height: 100%;\n  left: 0;\n  pointer-events: auto;\n  position: fixed;\n  top: 0;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  width: 100%;\n  will-change: opacity;\n  padding: 40px;\n  box-sizing: border-box;\n}\n\n.walletconnect-qrcode__text {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 10px 0 20px 0;\n  text-align: center;\n  width: 100%;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-qrcode__text {\n    font-size: 4vw;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-qrcode__text {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-qrcode__image {\n  width: calc(100% - 30px);\n  box-sizing: border-box;\n  cursor: none;\n  margin: 0 auto;\n}\n\n.walletconnect-qrcode__notification {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  font-size: 16px;\n  padding: 16px 20px;\n  border-radius: 16px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n  background: white;\n  color: black;\n  margin-bottom: -60px;\n  opacity: 0;\n}\n\n.walletconnect-qrcode__notification.notification__show {\n  opacity: 1;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__header {\n    height: 130px;\n  }\n  .walletconnect-modal__base {\n    overflow: auto;\n  }\n}\n\n@media only screen and (min-device-width: 415px) and (max-width: 768px) {\n  #content {\n    max-width: 768px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 375px) and (max-width: 415px) {\n  #content {\n    max-width: 414px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 320px) and (max-width: 375px) {\n  #content {\n    max-width: 375px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  #content {\n    max-width: 320px;\n    box-sizing: border-box;\n  }\n}\n\n.walletconnect-modal__base {\n  -webkit-font-smoothing: antialiased;\n  background: #ffffff;\n  border-radius: 24px;\n  box-shadow: 0 10px 50px 5px rgba(0, 0, 0, 0.4);\n  font-family: ui-rounded, "SF Pro Rounded", "SF Pro Text", medium-content-sans-serif-font,\n    -apple-system, BlinkMacSystemFont, ui-sans-serif, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell,\n    "Open Sans", "Helvetica Neue", sans-serif;\n  margin-top: 41px;\n  padding: 24px 24px 22px;\n  pointer-events: auto;\n  position: relative;\n  text-align: center;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  will-change: transform;\n  overflow: visible;\n  transform: translateY(-50%);\n  top: 50%;\n  max-width: 500px;\n  margin: auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__base {\n    padding: 24px 12px;\n  }\n}\n\n.walletconnect-modal__base .hidden {\n  transform: translateY(150%);\n  transition: 0.125s cubic-bezier(0.4, 0, 1, 1);\n}\n\n.walletconnect-modal__header {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  left: 0;\n  justify-content: space-between;\n  position: absolute;\n  top: -42px;\n  width: 100%;\n}\n\n.walletconnect-modal__base .wc-logo {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  margin-top: 15px;\n  padding-bottom: 15px;\n  pointer-events: auto;\n}\n\n.walletconnect-modal__base .wc-logo div {\n  background-color: #3399ff;\n  height: 21px;\n  margin-right: 5px;\n  mask-image: url("images/wc-logo.svg") center no-repeat;\n  width: 32px;\n}\n\n.walletconnect-modal__base .wc-logo p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.walletconnect-modal__base h2 {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 0 0 19px 0;\n  text-align: center;\n  width: 100%;\n}\n\n.walletconnect-modal__base__row {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  align-items: center;\n  border-radius: 20px;\n  cursor: pointer;\n  display: flex;\n  height: 56px;\n  justify-content: space-between;\n  padding: 0 15px;\n  position: relative;\n  margin: 0px 0px 8px;\n  text-align: left;\n  transition: 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  will-change: transform;\n  text-decoration: none;\n}\n\n.walletconnect-modal__base__row:hover {\n  background: rgba(60, 66, 82, 0.06);\n}\n\n.walletconnect-modal__base__row:active {\n  background: rgba(60, 66, 82, 0.06);\n  transform: scale(0.975);\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.walletconnect-modal__base__row__h3 {\n  color: #25292e;\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0;\n  padding-bottom: 3px;\n}\n\n.walletconnect-modal__base__row__right {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.walletconnect-modal__base__row__right__app-icon {\n  border-radius: 8px;\n  height: 34px;\n  margin: 0 11px 2px 0;\n  width: 34px;\n  background-size: 100%;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-modal__base__row__right__caret {\n  height: 18px;\n  opacity: 0.3;\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  width: 8px;\n  will-change: opacity;\n}\n\n.walletconnect-modal__base__row:hover .caret,\n.walletconnect-modal__base__row:active .caret {\n  opacity: 0.6;\n}\n\n.walletconnect-modal__mobile__toggle {\n  width: 80%;\n  display: flex;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  margin-bottom: 18px;\n  background: #d4d5d9;\n}\n\n.walletconnect-modal__single_wallet {\n  display: flex;\n  justify-content: center;\n  margin-top: 7px;\n  margin-bottom: 18px;\n}\n\n.walletconnect-modal__single_wallet a {\n  cursor: pointer;\n  color: rgb(64, 153, 255);\n  font-size: 21px;\n  font-weight: 800;\n  text-decoration: none !important;\n  margin: 0 auto;\n}\n\n.walletconnect-modal__mobile__toggle_selector {\n  width: calc(50% - 8px);\n  background: white;\n  position: absolute;\n  border-radius: 5px;\n  height: calc(100% - 8px);\n  top: 4px;\n  transition: all 0.2s ease-in-out;\n  transform: translate3d(4px, 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle.right__selected .walletconnect-modal__mobile__toggle_selector {\n  transform: translate3d(calc(100% + 12px), 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle a {\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  padding: 8px;\n  margin: 0;\n  font-weight: 600;\n  z-index: 1;\n}\n\n.walletconnect-modal__footer {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__footer {\n    margin-top: 5vw;\n  }\n}\n\n.walletconnect-modal__footer a {\n  cursor: pointer;\n  color: #898d97;\n  font-size: 15px;\n  margin: 0 auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__footer a {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-connect__buttons__wrapper {\n  max-height: 44vh;\n}\n\n.walletconnect-connect__buttons__wrapper__android {\n  margin: 50% 0;\n}\n\n.walletconnect-connect__buttons__wrapper__wrap {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  margin: 10px 0;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__buttons__wrapper__wrap {\n    margin-top: 40px;\n  }\n}\n\n.walletconnect-connect__button {\n  background-color: rgb(64, 153, 255);\n  padding: 12px;\n  border-radius: 8px;\n  text-decoration: none;\n  color: rgb(255, 255, 255);\n  font-weight: 500;\n}\n\n.walletconnect-connect__button__icon_anchor {\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 8px;\n  width: 42px;\n  justify-self: center;\n  flex-direction: column;\n  text-decoration: none !important;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-connect__button__icon_anchor {\n    margin: 4px;\n  }\n}\n\n.walletconnect-connect__button__icon {\n  border-radius: 10px;\n  height: 42px;\n  margin: 0;\n  width: 42px;\n  background-size: cover !important;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-connect__button__text {\n  color: #424952;\n  font-size: 2.7vw;\n  text-decoration: none !important;\n  padding: 0;\n  margin-top: 1.8vw;\n  font-weight: 600;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__button__text {\n    font-size: 16px;\n    margin-top: 12px;\n  }\n}\n\n.walletconnect-search__input {\n  border: none;\n  background: #d4d5d9;\n  border-style: none;\n  padding: 8px 16px;\n  outline: none;\n  font-style: normal;\n  font-stretch: normal;\n  font-size: 16px;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: left;\n  border-radius: 8px;\n  width: calc(100% - 16px);\n  margin: 0;\n  margin-bottom: 8px;\n}\n',t.head.appendChild(n)}();var r,i=function(){var t=s.getDocumentOrThrow(),e=t.createElement("div");return e.setAttribute("id",l),t.body.appendChild(e),e}();c.render(c.createElement(b,{text:(r=s.getNavigatorOrThrow().language.split("-")[0]||"en",M[r]||M.en),uri:t,onClose:k(e),qrcodeModalOptions:n}),i)}var C=function(){return void 0!==i&&void 0!==i.versions&&void 0!==i.versions.node};var I={open:function(t,e,n){r.log(t),C()?function(t){a.toString(t,{type:"terminal"}).then(r.log)}(t):S(t,e,n)},close:function(){C()||x()}};t.exports=I},68007:function(t){"use strict";t.exports=function(){throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object")}},11460:function(t,e,n){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}function o(t,e,n){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(n=e,e=10),this._init(t||0,e||10,n||"be"))}var s;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{s=n(36563).Buffer}catch(t){}function a(t,e,n){for(var r=0,i=Math.min(t.length,n),o=e;o<i;o++){var s=t.charCodeAt(o)-48;r<<=4,r|=s>=49&&s<=54?s-49+10:s>=17&&s<=22?s-17+10:15&s}return r}function h(t,e,n,r){for(var i=0,o=Math.min(t.length,n),s=e;s<o;s++){var a=t.charCodeAt(s)-48;i*=r,i+=a>=49?a-49+10:a>=17?a-17+10:a}return i}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,n){if("number"==typeof t)return this._initNumber(t,e,n);if("object"==typeof t)return this._initArray(t,e,n);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&i++,16===e?this._parseHex(t,i):this._parseBase(t,e,i),"-"===t[0]&&(this.negative=1),this.strip(),"le"===n&&this._initArray(this.toArray(),e,n)},o.prototype._initNumber=function(t,e,n){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===n&&this._initArray(this.toArray(),e,n)},o.prototype._initArray=function(t,e,n){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===n)for(i=t.length-1,o=0;i>=0;i-=3)s=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===n)for(i=0,o=0;i<t.length;i+=3)s=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var r,i,o=0;for(n=t.length-6,r=0;n>=e;n-=6)i=a(t,n,n+6),this.words[r]|=i<<o&67108863,this.words[r+1]|=i>>>26-o&4194303,(o+=24)>=26&&(o-=26,r++);n+6!==e&&(i=a(t,e,n+6),this.words[r]|=i<<o&67108863,this.words[r+1]|=i>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,e,n){this.words=[0],this.length=1;for(var r=0,i=1;i<=67108863;i*=e)r++;r--,i=i/e|0;for(var o=t.length-n,s=o%r,a=Math.min(o,o-s)+n,c=0,l=n;l<a;l+=r)c=h(t,l,l+r,e),this.imuln(i),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c);if(0!==s){var u=1;for(c=h(t,l,t.length,e),l=0;l<s;l++)u*=e;this.imuln(u),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var c=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],l=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],u=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,n){n.negative=e.negative^t.negative;var r=t.length+e.length|0;n.length=r,r=r-1|0;var i=0|t.words[0],o=0|e.words[0],s=i*o,a=67108863&s,h=s/67108864|0;n.words[0]=a;for(var c=1;c<r;c++){for(var l=h>>>26,u=67108863&h,d=Math.min(c,e.length-1),p=Math.max(0,c-t.length+1);p<=d;p++){var f=c-p|0;l+=(s=(i=0|t.words[f])*(o=0|e.words[p])+u)/67108864|0,u=67108863&s}n.words[c]=0|u,h=0|l}return 0!==h?n.words[c]=0|h:n.length--,n.strip()}o.prototype.toString=function(t,e){var n;if(e=0|e||1,16===(t=t||10)||"hex"===t){n="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],h=(16777215&(a<<i|o)).toString(16);n=0!==(o=a>>>24-i&16777215)||s!==this.length-1?c[6-h.length]+h+n:h+n,(i+=2)>=26&&(i-=26,s--)}for(0!==o&&(n=o.toString(16)+n);n.length%e!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}if(t===(0|t)&&t>=2&&t<=36){var d=l[t],p=u[t];n="";var f=this.clone();for(f.negative=0;!f.isZero();){var m=f.modn(p).toString(t);n=(f=f.idivn(p)).isZero()?m+n:c[d-m.length]+m+n}for(this.isZero()&&(n="0"+n);n.length%e!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}r(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return r(void 0!==s),this.toArrayLike(s,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,n){var i=this.byteLength(),o=n||Math.max(1,i);r(i<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var s,a,h="le"===e,c=new t(o),l=this.clone();if(h){for(a=0;!l.isZero();a++)s=l.andln(255),l.iushrn(8),c[a]=s;for(;a<o;a++)c[a]=0}else{for(a=0;a<o-i;a++)c[a]=0;for(a=0;!l.isZero();a++)s=l.andln(255),l.iushrn(8),c[o-a-1]=s}return c},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,n=0;return e>=4096&&(n+=13,e>>>=13),e>=64&&(n+=7,e>>>=7),e>=8&&(n+=4,e>>>=4),e>=2&&(n+=2,e>>>=2),n+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,n=0;return 0==(8191&e)&&(n+=13,e>>>=13),0==(127&e)&&(n+=7,e>>>=7),0==(15&e)&&(n+=4,e>>>=4),0==(3&e)&&(n+=2,e>>>=2),0==(1&e)&&n++,n},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var n=this._zeroBits(this.words[e]);if(t+=n,26!==n)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var n=0;n<e.length;n++)this.words[n]=this.words[n]&t.words[n];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,n;this.length>t.length?(e=this,n=t):(e=t,n=this);for(var r=0;r<n.length;r++)this.words[r]=e.words[r]^n.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),n=t%26;this._expand(e),n>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return n>0&&(this.words[i]=~this.words[i]&67108863>>26-n),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var n=t/26|0,i=t%26;return this._expand(n+1),this.words[n]=e?this.words[n]|1<<i:this.words[n]&~(1<<i),this.strip()},o.prototype.iadd=function(t){var e,n,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(n=this,r=t):(n=t,r=this);for(var i=0,o=0;o<r.length;o++)e=(0|n.words[o])+(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<n.length;o++)e=(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=n.length,0!==i)this.words[this.length]=i,this.length++;else if(n!==this)for(;o<n.length;o++)this.words[o]=n.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var n,r,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(n=this,r=t):(n=t,r=this);for(var o=0,s=0;s<r.length;s++)o=(e=(0|n.words[s])-(0|r.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<n.length;s++)o=(e=(0|n.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<n.length&&n!==this)for(;s<n.length;s++)this.words[s]=n.words[s];return this.length=Math.max(this.length,s),n!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,e,n){var r,i,o,s=t.words,a=e.words,h=n.words,c=0,l=0|s[0],u=8191&l,d=l>>>13,p=0|s[1],f=8191&p,m=p>>>13,g=0|s[2],_=8191&g,w=g>>>13,v=0|s[3],y=8191&v,b=v>>>13,M=0|s[4],x=8191&M,k=M>>>13,S=0|s[5],C=8191&S,I=S>>>13,T=0|s[6],E=8191&T,q=T>>>13,R=0|s[7],O=8191&R,L=R>>>13,A=0|s[8],N=8191&A,B=A>>>13,j=0|s[9],P=8191&j,U=j>>>13,W=0|a[0],z=8191&W,H=W>>>13,D=0|a[1],Z=8191&D,F=D>>>13,$=0|a[2],Q=8191&$,J=$>>>13,K=0|a[3],V=8191&K,Y=K>>>13,X=0|a[4],G=8191&X,tt=X>>>13,et=0|a[5],nt=8191&et,rt=et>>>13,it=0|a[6],ot=8191&it,st=it>>>13,at=0|a[7],ht=8191&at,ct=at>>>13,lt=0|a[8],ut=8191&lt,dt=lt>>>13,pt=0|a[9],ft=8191&pt,mt=pt>>>13;n.negative=t.negative^e.negative,n.length=19;var gt=(c+(r=Math.imul(u,z))|0)+((8191&(i=(i=Math.imul(u,H))+Math.imul(d,z)|0))<<13)|0;c=((o=Math.imul(d,H))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(f,z),i=(i=Math.imul(f,H))+Math.imul(m,z)|0,o=Math.imul(m,H);var _t=(c+(r=r+Math.imul(u,Z)|0)|0)+((8191&(i=(i=i+Math.imul(u,F)|0)+Math.imul(d,Z)|0))<<13)|0;c=((o=o+Math.imul(d,F)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(_,z),i=(i=Math.imul(_,H))+Math.imul(w,z)|0,o=Math.imul(w,H),r=r+Math.imul(f,Z)|0,i=(i=i+Math.imul(f,F)|0)+Math.imul(m,Z)|0,o=o+Math.imul(m,F)|0;var wt=(c+(r=r+Math.imul(u,Q)|0)|0)+((8191&(i=(i=i+Math.imul(u,J)|0)+Math.imul(d,Q)|0))<<13)|0;c=((o=o+Math.imul(d,J)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(y,z),i=(i=Math.imul(y,H))+Math.imul(b,z)|0,o=Math.imul(b,H),r=r+Math.imul(_,Z)|0,i=(i=i+Math.imul(_,F)|0)+Math.imul(w,Z)|0,o=o+Math.imul(w,F)|0,r=r+Math.imul(f,Q)|0,i=(i=i+Math.imul(f,J)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,J)|0;var vt=(c+(r=r+Math.imul(u,V)|0)|0)+((8191&(i=(i=i+Math.imul(u,Y)|0)+Math.imul(d,V)|0))<<13)|0;c=((o=o+Math.imul(d,Y)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(x,z),i=(i=Math.imul(x,H))+Math.imul(k,z)|0,o=Math.imul(k,H),r=r+Math.imul(y,Z)|0,i=(i=i+Math.imul(y,F)|0)+Math.imul(b,Z)|0,o=o+Math.imul(b,F)|0,r=r+Math.imul(_,Q)|0,i=(i=i+Math.imul(_,J)|0)+Math.imul(w,Q)|0,o=o+Math.imul(w,J)|0,r=r+Math.imul(f,V)|0,i=(i=i+Math.imul(f,Y)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,Y)|0;var yt=(c+(r=r+Math.imul(u,G)|0)|0)+((8191&(i=(i=i+Math.imul(u,tt)|0)+Math.imul(d,G)|0))<<13)|0;c=((o=o+Math.imul(d,tt)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(C,z),i=(i=Math.imul(C,H))+Math.imul(I,z)|0,o=Math.imul(I,H),r=r+Math.imul(x,Z)|0,i=(i=i+Math.imul(x,F)|0)+Math.imul(k,Z)|0,o=o+Math.imul(k,F)|0,r=r+Math.imul(y,Q)|0,i=(i=i+Math.imul(y,J)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,J)|0,r=r+Math.imul(_,V)|0,i=(i=i+Math.imul(_,Y)|0)+Math.imul(w,V)|0,o=o+Math.imul(w,Y)|0,r=r+Math.imul(f,G)|0,i=(i=i+Math.imul(f,tt)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,tt)|0;var bt=(c+(r=r+Math.imul(u,nt)|0)|0)+((8191&(i=(i=i+Math.imul(u,rt)|0)+Math.imul(d,nt)|0))<<13)|0;c=((o=o+Math.imul(d,rt)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(E,z),i=(i=Math.imul(E,H))+Math.imul(q,z)|0,o=Math.imul(q,H),r=r+Math.imul(C,Z)|0,i=(i=i+Math.imul(C,F)|0)+Math.imul(I,Z)|0,o=o+Math.imul(I,F)|0,r=r+Math.imul(x,Q)|0,i=(i=i+Math.imul(x,J)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,J)|0,r=r+Math.imul(y,V)|0,i=(i=i+Math.imul(y,Y)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,Y)|0,r=r+Math.imul(_,G)|0,i=(i=i+Math.imul(_,tt)|0)+Math.imul(w,G)|0,o=o+Math.imul(w,tt)|0,r=r+Math.imul(f,nt)|0,i=(i=i+Math.imul(f,rt)|0)+Math.imul(m,nt)|0,o=o+Math.imul(m,rt)|0;var Mt=(c+(r=r+Math.imul(u,ot)|0)|0)+((8191&(i=(i=i+Math.imul(u,st)|0)+Math.imul(d,ot)|0))<<13)|0;c=((o=o+Math.imul(d,st)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,r=Math.imul(O,z),i=(i=Math.imul(O,H))+Math.imul(L,z)|0,o=Math.imul(L,H),r=r+Math.imul(E,Z)|0,i=(i=i+Math.imul(E,F)|0)+Math.imul(q,Z)|0,o=o+Math.imul(q,F)|0,r=r+Math.imul(C,Q)|0,i=(i=i+Math.imul(C,J)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,J)|0,r=r+Math.imul(x,V)|0,i=(i=i+Math.imul(x,Y)|0)+Math.imul(k,V)|0,o=o+Math.imul(k,Y)|0,r=r+Math.imul(y,G)|0,i=(i=i+Math.imul(y,tt)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,tt)|0,r=r+Math.imul(_,nt)|0,i=(i=i+Math.imul(_,rt)|0)+Math.imul(w,nt)|0,o=o+Math.imul(w,rt)|0,r=r+Math.imul(f,ot)|0,i=(i=i+Math.imul(f,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var xt=(c+(r=r+Math.imul(u,ht)|0)|0)+((8191&(i=(i=i+Math.imul(u,ct)|0)+Math.imul(d,ht)|0))<<13)|0;c=((o=o+Math.imul(d,ct)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(N,z),i=(i=Math.imul(N,H))+Math.imul(B,z)|0,o=Math.imul(B,H),r=r+Math.imul(O,Z)|0,i=(i=i+Math.imul(O,F)|0)+Math.imul(L,Z)|0,o=o+Math.imul(L,F)|0,r=r+Math.imul(E,Q)|0,i=(i=i+Math.imul(E,J)|0)+Math.imul(q,Q)|0,o=o+Math.imul(q,J)|0,r=r+Math.imul(C,V)|0,i=(i=i+Math.imul(C,Y)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,Y)|0,r=r+Math.imul(x,G)|0,i=(i=i+Math.imul(x,tt)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,tt)|0,r=r+Math.imul(y,nt)|0,i=(i=i+Math.imul(y,rt)|0)+Math.imul(b,nt)|0,o=o+Math.imul(b,rt)|0,r=r+Math.imul(_,ot)|0,i=(i=i+Math.imul(_,st)|0)+Math.imul(w,ot)|0,o=o+Math.imul(w,st)|0,r=r+Math.imul(f,ht)|0,i=(i=i+Math.imul(f,ct)|0)+Math.imul(m,ht)|0,o=o+Math.imul(m,ct)|0;var kt=(c+(r=r+Math.imul(u,ut)|0)|0)+((8191&(i=(i=i+Math.imul(u,dt)|0)+Math.imul(d,ut)|0))<<13)|0;c=((o=o+Math.imul(d,dt)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(P,z),i=(i=Math.imul(P,H))+Math.imul(U,z)|0,o=Math.imul(U,H),r=r+Math.imul(N,Z)|0,i=(i=i+Math.imul(N,F)|0)+Math.imul(B,Z)|0,o=o+Math.imul(B,F)|0,r=r+Math.imul(O,Q)|0,i=(i=i+Math.imul(O,J)|0)+Math.imul(L,Q)|0,o=o+Math.imul(L,J)|0,r=r+Math.imul(E,V)|0,i=(i=i+Math.imul(E,Y)|0)+Math.imul(q,V)|0,o=o+Math.imul(q,Y)|0,r=r+Math.imul(C,G)|0,i=(i=i+Math.imul(C,tt)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,tt)|0,r=r+Math.imul(x,nt)|0,i=(i=i+Math.imul(x,rt)|0)+Math.imul(k,nt)|0,o=o+Math.imul(k,rt)|0,r=r+Math.imul(y,ot)|0,i=(i=i+Math.imul(y,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,r=r+Math.imul(_,ht)|0,i=(i=i+Math.imul(_,ct)|0)+Math.imul(w,ht)|0,o=o+Math.imul(w,ct)|0,r=r+Math.imul(f,ut)|0,i=(i=i+Math.imul(f,dt)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,dt)|0;var St=(c+(r=r+Math.imul(u,ft)|0)|0)+((8191&(i=(i=i+Math.imul(u,mt)|0)+Math.imul(d,ft)|0))<<13)|0;c=((o=o+Math.imul(d,mt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(P,Z),i=(i=Math.imul(P,F))+Math.imul(U,Z)|0,o=Math.imul(U,F),r=r+Math.imul(N,Q)|0,i=(i=i+Math.imul(N,J)|0)+Math.imul(B,Q)|0,o=o+Math.imul(B,J)|0,r=r+Math.imul(O,V)|0,i=(i=i+Math.imul(O,Y)|0)+Math.imul(L,V)|0,o=o+Math.imul(L,Y)|0,r=r+Math.imul(E,G)|0,i=(i=i+Math.imul(E,tt)|0)+Math.imul(q,G)|0,o=o+Math.imul(q,tt)|0,r=r+Math.imul(C,nt)|0,i=(i=i+Math.imul(C,rt)|0)+Math.imul(I,nt)|0,o=o+Math.imul(I,rt)|0,r=r+Math.imul(x,ot)|0,i=(i=i+Math.imul(x,st)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,st)|0,r=r+Math.imul(y,ht)|0,i=(i=i+Math.imul(y,ct)|0)+Math.imul(b,ht)|0,o=o+Math.imul(b,ct)|0,r=r+Math.imul(_,ut)|0,i=(i=i+Math.imul(_,dt)|0)+Math.imul(w,ut)|0,o=o+Math.imul(w,dt)|0;var Ct=(c+(r=r+Math.imul(f,ft)|0)|0)+((8191&(i=(i=i+Math.imul(f,mt)|0)+Math.imul(m,ft)|0))<<13)|0;c=((o=o+Math.imul(m,mt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,r=Math.imul(P,Q),i=(i=Math.imul(P,J))+Math.imul(U,Q)|0,o=Math.imul(U,J),r=r+Math.imul(N,V)|0,i=(i=i+Math.imul(N,Y)|0)+Math.imul(B,V)|0,o=o+Math.imul(B,Y)|0,r=r+Math.imul(O,G)|0,i=(i=i+Math.imul(O,tt)|0)+Math.imul(L,G)|0,o=o+Math.imul(L,tt)|0,r=r+Math.imul(E,nt)|0,i=(i=i+Math.imul(E,rt)|0)+Math.imul(q,nt)|0,o=o+Math.imul(q,rt)|0,r=r+Math.imul(C,ot)|0,i=(i=i+Math.imul(C,st)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,st)|0,r=r+Math.imul(x,ht)|0,i=(i=i+Math.imul(x,ct)|0)+Math.imul(k,ht)|0,o=o+Math.imul(k,ct)|0,r=r+Math.imul(y,ut)|0,i=(i=i+Math.imul(y,dt)|0)+Math.imul(b,ut)|0,o=o+Math.imul(b,dt)|0;var It=(c+(r=r+Math.imul(_,ft)|0)|0)+((8191&(i=(i=i+Math.imul(_,mt)|0)+Math.imul(w,ft)|0))<<13)|0;c=((o=o+Math.imul(w,mt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863,r=Math.imul(P,V),i=(i=Math.imul(P,Y))+Math.imul(U,V)|0,o=Math.imul(U,Y),r=r+Math.imul(N,G)|0,i=(i=i+Math.imul(N,tt)|0)+Math.imul(B,G)|0,o=o+Math.imul(B,tt)|0,r=r+Math.imul(O,nt)|0,i=(i=i+Math.imul(O,rt)|0)+Math.imul(L,nt)|0,o=o+Math.imul(L,rt)|0,r=r+Math.imul(E,ot)|0,i=(i=i+Math.imul(E,st)|0)+Math.imul(q,ot)|0,o=o+Math.imul(q,st)|0,r=r+Math.imul(C,ht)|0,i=(i=i+Math.imul(C,ct)|0)+Math.imul(I,ht)|0,o=o+Math.imul(I,ct)|0,r=r+Math.imul(x,ut)|0,i=(i=i+Math.imul(x,dt)|0)+Math.imul(k,ut)|0,o=o+Math.imul(k,dt)|0;var Tt=(c+(r=r+Math.imul(y,ft)|0)|0)+((8191&(i=(i=i+Math.imul(y,mt)|0)+Math.imul(b,ft)|0))<<13)|0;c=((o=o+Math.imul(b,mt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(P,G),i=(i=Math.imul(P,tt))+Math.imul(U,G)|0,o=Math.imul(U,tt),r=r+Math.imul(N,nt)|0,i=(i=i+Math.imul(N,rt)|0)+Math.imul(B,nt)|0,o=o+Math.imul(B,rt)|0,r=r+Math.imul(O,ot)|0,i=(i=i+Math.imul(O,st)|0)+Math.imul(L,ot)|0,o=o+Math.imul(L,st)|0,r=r+Math.imul(E,ht)|0,i=(i=i+Math.imul(E,ct)|0)+Math.imul(q,ht)|0,o=o+Math.imul(q,ct)|0,r=r+Math.imul(C,ut)|0,i=(i=i+Math.imul(C,dt)|0)+Math.imul(I,ut)|0,o=o+Math.imul(I,dt)|0;var Et=(c+(r=r+Math.imul(x,ft)|0)|0)+((8191&(i=(i=i+Math.imul(x,mt)|0)+Math.imul(k,ft)|0))<<13)|0;c=((o=o+Math.imul(k,mt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(P,nt),i=(i=Math.imul(P,rt))+Math.imul(U,nt)|0,o=Math.imul(U,rt),r=r+Math.imul(N,ot)|0,i=(i=i+Math.imul(N,st)|0)+Math.imul(B,ot)|0,o=o+Math.imul(B,st)|0,r=r+Math.imul(O,ht)|0,i=(i=i+Math.imul(O,ct)|0)+Math.imul(L,ht)|0,o=o+Math.imul(L,ct)|0,r=r+Math.imul(E,ut)|0,i=(i=i+Math.imul(E,dt)|0)+Math.imul(q,ut)|0,o=o+Math.imul(q,dt)|0;var qt=(c+(r=r+Math.imul(C,ft)|0)|0)+((8191&(i=(i=i+Math.imul(C,mt)|0)+Math.imul(I,ft)|0))<<13)|0;c=((o=o+Math.imul(I,mt)|0)+(i>>>13)|0)+(qt>>>26)|0,qt&=67108863,r=Math.imul(P,ot),i=(i=Math.imul(P,st))+Math.imul(U,ot)|0,o=Math.imul(U,st),r=r+Math.imul(N,ht)|0,i=(i=i+Math.imul(N,ct)|0)+Math.imul(B,ht)|0,o=o+Math.imul(B,ct)|0,r=r+Math.imul(O,ut)|0,i=(i=i+Math.imul(O,dt)|0)+Math.imul(L,ut)|0,o=o+Math.imul(L,dt)|0;var Rt=(c+(r=r+Math.imul(E,ft)|0)|0)+((8191&(i=(i=i+Math.imul(E,mt)|0)+Math.imul(q,ft)|0))<<13)|0;c=((o=o+Math.imul(q,mt)|0)+(i>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,r=Math.imul(P,ht),i=(i=Math.imul(P,ct))+Math.imul(U,ht)|0,o=Math.imul(U,ct),r=r+Math.imul(N,ut)|0,i=(i=i+Math.imul(N,dt)|0)+Math.imul(B,ut)|0,o=o+Math.imul(B,dt)|0;var Ot=(c+(r=r+Math.imul(O,ft)|0)|0)+((8191&(i=(i=i+Math.imul(O,mt)|0)+Math.imul(L,ft)|0))<<13)|0;c=((o=o+Math.imul(L,mt)|0)+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,r=Math.imul(P,ut),i=(i=Math.imul(P,dt))+Math.imul(U,ut)|0,o=Math.imul(U,dt);var Lt=(c+(r=r+Math.imul(N,ft)|0)|0)+((8191&(i=(i=i+Math.imul(N,mt)|0)+Math.imul(B,ft)|0))<<13)|0;c=((o=o+Math.imul(B,mt)|0)+(i>>>13)|0)+(Lt>>>26)|0,Lt&=67108863;var At=(c+(r=Math.imul(P,ft))|0)+((8191&(i=(i=Math.imul(P,mt))+Math.imul(U,ft)|0))<<13)|0;return c=((o=Math.imul(U,mt))+(i>>>13)|0)+(At>>>26)|0,At&=67108863,h[0]=gt,h[1]=_t,h[2]=wt,h[3]=vt,h[4]=yt,h[5]=bt,h[6]=Mt,h[7]=xt,h[8]=kt,h[9]=St,h[10]=Ct,h[11]=It,h[12]=Tt,h[13]=Et,h[14]=qt,h[15]=Rt,h[16]=Ot,h[17]=Lt,h[18]=At,0!==c&&(h[19]=c,n.length++),n};function f(t,e,n){return(new m).mulp(t,e,n)}function m(t,e){this.x=t,this.y=e}Math.imul||(p=d),o.prototype.mulTo=function(t,e){var n,r=this.length+t.length;return n=10===this.length&&10===t.length?p(this,t,e):r<63?d(this,t,e):r<1024?function(t,e,n){n.negative=e.negative^t.negative,n.length=t.length+e.length;for(var r=0,i=0,o=0;o<n.length-1;o++){var s=i;i=0;for(var a=67108863&r,h=Math.min(o,e.length-1),c=Math.max(0,o-t.length+1);c<=h;c++){var l=o-c,u=(0|t.words[l])*(0|e.words[c]),d=67108863&u;a=67108863&(d=d+a|0),i+=(s=(s=s+(u/67108864|0)|0)+(d>>>26)|0)>>>26,s&=67108863}n.words[o]=a,r=s,s=i}return 0!==r?n.words[o]=r:n.length--,n.strip()}(this,t,e):f(this,t,e),n},m.prototype.makeRBT=function(t){for(var e=new Array(t),n=o.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,n,t);return e},m.prototype.revBin=function(t,e,n){if(0===t||t===n-1)return t;for(var r=0,i=0;i<e;i++)r|=(1&t)<<e-i-1,t>>=1;return r},m.prototype.permute=function(t,e,n,r,i,o){for(var s=0;s<o;s++)r[s]=e[t[s]],i[s]=n[t[s]]},m.prototype.transform=function(t,e,n,r,i,o){this.permute(o,t,e,n,r,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,h=Math.cos(2*Math.PI/a),c=Math.sin(2*Math.PI/a),l=0;l<i;l+=a)for(var u=h,d=c,p=0;p<s;p++){var f=n[l+p],m=r[l+p],g=n[l+p+s],_=r[l+p+s],w=u*g-d*_;_=u*_+d*g,g=w,n[l+p]=f+g,r[l+p]=m+_,n[l+p+s]=f-g,r[l+p+s]=m-_,p!==a&&(w=h*u-c*d,d=h*d+c*u,u=w)}},m.prototype.guessLen13b=function(t,e){var n=1|Math.max(e,t),r=1&n,i=0;for(n=n/2|0;n;n>>>=1)i++;return 1<<i+1+r},m.prototype.conjugate=function(t,e,n){if(!(n<=1))for(var r=0;r<n/2;r++){var i=t[r];t[r]=t[n-r-1],t[n-r-1]=i,i=e[r],e[r]=-e[n-r-1],e[n-r-1]=-i}},m.prototype.normalize13b=function(t,e){for(var n=0,r=0;r<e/2;r++){var i=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+n;t[r]=67108863&i,n=i<67108864?0:i/67108864|0}return t},m.prototype.convert13b=function(t,e,n,i){for(var o=0,s=0;s<e;s++)o+=0|t[s],n[2*s]=8191&o,o>>>=13,n[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<i;++s)n[s]=0;r(0===o),r(0==(-8192&o))},m.prototype.stub=function(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=0;return e},m.prototype.mulp=function(t,e,n){var r=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(r),o=this.stub(r),s=new Array(r),a=new Array(r),h=new Array(r),c=new Array(r),l=new Array(r),u=new Array(r),d=n.words;d.length=r,this.convert13b(t.words,t.length,s,r),this.convert13b(e.words,e.length,c,r),this.transform(s,o,a,h,r,i),this.transform(c,o,l,u,r,i);for(var p=0;p<r;p++){var f=a[p]*l[p]-h[p]*u[p];h[p]=a[p]*u[p]+h[p]*l[p],a[p]=f}return this.conjugate(a,h,r),this.transform(a,h,d,o,r,i),this.conjugate(d,o,r),this.normalize13b(d,r),n.negative=t.negative^e.negative,n.length=t.length+e.length,n.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),f(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,n=0;n<this.length;n++){var i=(0|this.words[n])*t,o=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=o>>>26,this.words[n]=67108863&o}return 0!==e&&(this.words[n]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),n=0;n<e.length;n++){var r=n/26|0,i=n%26;e[n]=(t.words[r]&1<<i)>>>i}return e}(t);if(0===e.length)return new o(1);for(var n=this,r=0;r<e.length&&0===e[r];r++,n=n.sqr());if(++r<e.length)for(var i=n.sqr();r<e.length;r++,i=i.sqr())0!==e[r]&&(n=n.mul(i));return n},o.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,n=t%26,i=(t-n)/26,o=67108863>>>26-n<<26-n;if(0!==n){var s=0;for(e=0;e<this.length;e++){var a=this.words[e]&o,h=(0|this.words[e])-a<<n;this.words[e]=h|s,s=a>>>26-n}s&&(this.words[e]=s,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,n){var i;r("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),a=67108863^67108863>>>o<<o,h=n;if(i-=s,i=Math.max(0,i),h){for(var c=0;c<s;c++)h.words[c]=this.words[c];h.length=s}if(0===s);else if(this.length>s)for(this.length-=s,c=0;c<this.length;c++)this.words[c]=this.words[c+s];else this.words[0]=0,this.length=1;var l=0;for(c=this.length-1;c>=0&&(0!==l||c>=i);c--){var u=0|this.words[c];this.words[c]=l<<26-o|u>>>o,l=u&a}return h&&0!==l&&(h.words[h.length++]=l),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,n){return r(0===this.negative),this.iushrn(t,e,n)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,n=(t-e)/26,i=1<<e;return!(this.length<=n)&&!!(this.words[n]&i)},o.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,n=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=n)return this;if(0!==e&&n++,this.length=Math.min(n,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,n){var i,o,s=t.length+n;this._expand(s);var a=0;for(i=0;i<t.length;i++){o=(0|this.words[i+n])+a;var h=(0|t.words[i])*e;a=((o-=67108863&h)>>26)-(h/67108864|0),this.words[i+n]=67108863&o}for(;i<this.length-n;i++)a=(o=(0|this.words[i+n])+a)>>26,this.words[i+n]=67108863&o;if(0===a)return this.strip();for(r(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var n=(this.length,t.length),r=this.clone(),i=t,s=0|i.words[i.length-1];0!==(n=26-this._countBits(s))&&(i=i.ushln(n),r.iushln(n),s=0|i.words[i.length-1]);var a,h=r.length-i.length;if("mod"!==e){(a=new o(null)).length=h+1,a.words=new Array(a.length);for(var c=0;c<a.length;c++)a.words[c]=0}var l=r.clone()._ishlnsubmul(i,1,h);0===l.negative&&(r=l,a&&(a.words[h]=1));for(var u=h-1;u>=0;u--){var d=67108864*(0|r.words[i.length+u])+(0|r.words[i.length+u-1]);for(d=Math.min(d/s|0,67108863),r._ishlnsubmul(i,d,u);0!==r.negative;)d--,r.negative=0,r._ishlnsubmul(i,1,u),r.isZero()||(r.negative^=1);a&&(a.words[u]=d)}return a&&a.strip(),r.strip(),"div"!==e&&0!==n&&r.iushrn(n),{div:a||null,mod:r}},o.prototype.divmod=function(t,e,n){return r(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(a=this.neg().divmod(t,e),"mod"!==e&&(i=a.div.neg()),"div"!==e&&(s=a.mod.neg(),n&&0!==s.negative&&s.iadd(t)),{div:i,mod:s}):0===this.negative&&0!==t.negative?(a=this.divmod(t.neg(),e),"mod"!==e&&(i=a.div.neg()),{div:i,mod:a.mod}):0!=(this.negative&t.negative)?(a=this.neg().divmod(t.neg(),e),"div"!==e&&(s=a.mod.neg(),n&&0!==s.negative&&s.isub(t)),{div:a.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,s,a},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var n=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),i=t.andln(1),o=n.cmp(r);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,n=0,i=this.length-1;i>=0;i--)n=(e*n+(0|this.words[i]))%t;return n},o.prototype.idivn=function(t){r(t<=67108863);for(var e=0,n=this.length-1;n>=0;n--){var i=(0|this.words[n])+67108864*e;this.words[n]=i/t|0,e=i%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,n=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),s=new o(0),a=new o(0),h=new o(1),c=0;e.isEven()&&n.isEven();)e.iushrn(1),n.iushrn(1),++c;for(var l=n.clone(),u=e.clone();!e.isZero();){for(var d=0,p=1;0==(e.words[0]&p)&&d<26;++d,p<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(i.isOdd()||s.isOdd())&&(i.iadd(l),s.isub(u)),i.iushrn(1),s.iushrn(1);for(var f=0,m=1;0==(n.words[0]&m)&&f<26;++f,m<<=1);if(f>0)for(n.iushrn(f);f-- >0;)(a.isOdd()||h.isOdd())&&(a.iadd(l),h.isub(u)),a.iushrn(1),h.iushrn(1);e.cmp(n)>=0?(e.isub(n),i.isub(a),s.isub(h)):(n.isub(e),a.isub(i),h.isub(s))}return{a:a,b:h,gcd:n.iushln(c)}},o.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,n=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,s=new o(1),a=new o(0),h=n.clone();e.cmpn(1)>0&&n.cmpn(1)>0;){for(var c=0,l=1;0==(e.words[0]&l)&&c<26;++c,l<<=1);if(c>0)for(e.iushrn(c);c-- >0;)s.isOdd()&&s.iadd(h),s.iushrn(1);for(var u=0,d=1;0==(n.words[0]&d)&&u<26;++u,d<<=1);if(u>0)for(n.iushrn(u);u-- >0;)a.isOdd()&&a.iadd(h),a.iushrn(1);e.cmp(n)>=0?(e.isub(n),s.isub(a)):(n.isub(e),a.isub(s))}return(i=0===e.cmpn(1)?s:a).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),n=t.clone();e.negative=0,n.negative=0;for(var r=0;e.isEven()&&n.isEven();r++)e.iushrn(1),n.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;n.isEven();)n.iushrn(1);var i=e.cmp(n);if(i<0){var o=e;e=n,n=o}else if(0===i||0===n.cmpn(1))break;e.isub(n)}return n.iushln(r)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,n=(t-e)/26,i=1<<e;if(this.length<=n)return this._expand(n+1),this.words[n]|=i,this;for(var o=i,s=n;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,n=t<0;if(0!==this.negative&&!n)return-1;if(0===this.negative&&n)return 1;if(this.strip(),this.length>1)e=1;else{n&&(t=-t),r(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,n=this.length-1;n>=0;n--){var r=0|this.words[n],i=0|t.words[n];if(r!==i){r<i?e=-1:r>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new M(t)},o.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function _(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function w(){_.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function v(){_.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function y(){_.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function b(){_.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function M(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function x(t){M.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}_.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},_.prototype.ireduce=function(t){var e,n=t;do{this.split(n,this.tmp),e=(n=(n=this.imulK(n)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:n.ucmp(this.p);return 0===r?(n.words[0]=0,n.length=1):r>0?n.isub(this.p):n.strip(),n},_.prototype.split=function(t,e){t.iushrn(this.n,0,e)},_.prototype.imulK=function(t){return t.imul(this.k)},i(w,_),w.prototype.split=function(t,e){for(var n=4194303,r=Math.min(t.length,9),i=0;i<r;i++)e.words[i]=t.words[i];if(e.length=r,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&n,i=10;i<t.length;i++){var s=0|t.words[i];t.words[i-10]=(s&n)<<4|o>>>22,o=s}o>>>=22,t.words[i-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},w.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,n=0;n<t.length;n++){var r=0|t.words[n];e+=977*r,t.words[n]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(v,_),i(y,_),i(b,_),b.prototype.imulK=function(t){for(var e=0,n=0;n<t.length;n++){var r=19*(0|t.words[n])+e,i=67108863&r;r>>>=26,t.words[n]=i,e=r}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(g[t])return g[t];var e;if("k256"===t)e=new w;else if("p224"===t)e=new v;else if("p192"===t)e=new y;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new b}return g[t]=e,e},M.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},M.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},M.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},M.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},M.prototype.add=function(t,e){this._verify2(t,e);var n=t.add(e);return n.cmp(this.m)>=0&&n.isub(this.m),n._forceRed(this)},M.prototype.iadd=function(t,e){this._verify2(t,e);var n=t.iadd(e);return n.cmp(this.m)>=0&&n.isub(this.m),n},M.prototype.sub=function(t,e){this._verify2(t,e);var n=t.sub(e);return n.cmpn(0)<0&&n.iadd(this.m),n._forceRed(this)},M.prototype.isub=function(t,e){this._verify2(t,e);var n=t.isub(e);return n.cmpn(0)<0&&n.iadd(this.m),n},M.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},M.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},M.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},M.prototype.isqr=function(t){return this.imul(t,t.clone())},M.prototype.sqr=function(t){return this.mul(t,t)},M.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var n=this.m.add(new o(1)).iushrn(2);return this.pow(t,n)}for(var i=this.m.subn(1),s=0;!i.isZero()&&0===i.andln(1);)s++,i.iushrn(1);r(!i.isZero());var a=new o(1).toRed(this),h=a.redNeg(),c=this.m.subn(1).iushrn(1),l=this.m.bitLength();for(l=new o(2*l*l).toRed(this);0!==this.pow(l,c).cmp(h);)l.redIAdd(h);for(var u=this.pow(l,i),d=this.pow(t,i.addn(1).iushrn(1)),p=this.pow(t,i),f=s;0!==p.cmp(a);){for(var m=p,g=0;0!==m.cmp(a);g++)m=m.redSqr();r(g<f);var _=this.pow(u,new o(1).iushln(f-g-1));d=d.redMul(_),u=_.redSqr(),p=p.redMul(u),f=g}return d},M.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},M.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var n=new Array(16);n[0]=new o(1).toRed(this),n[1]=t;for(var r=2;r<n.length;r++)n[r]=this.mul(n[r-1],t);var i=n[0],s=0,a=0,h=e.bitLength()%26;for(0===h&&(h=26),r=e.length-1;r>=0;r--){for(var c=e.words[r],l=h-1;l>=0;l--){var u=c>>l&1;i!==n[0]&&(i=this.sqr(i)),0!==u||0!==s?(s<<=1,s|=u,(4===++a||0===r&&0===l)&&(i=this.mul(i,n[s]),a=0,s=0)):a=0}h=26}return i},M.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},M.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new x(t)},i(x,M),x.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},x.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},x.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var n=t.imul(e),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=n.isub(r).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},x.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var n=t.mul(e),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=n.isub(r).iushrn(this.shift),s=i;return i.cmp(this.m)>=0?s=i.isub(this.m):i.cmpn(0)<0&&(s=i.iadd(this.m)),s._forceRed(this)},x.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=n.nmd(t),this)},72485:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return ft}});var r={};n.r(r),n.d(r,{decrypt:function(){return Y},encrypt:function(){return V},generateKey:function(){return J},verifyHmac:function(){return K}});var i=n(9293);const o=["session_request","session_update","exchange_key","connect","disconnect","display_uri","modal_closed","transport_open","transport_close","transport_error"],s=["eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v1","eth_signTypedData_v2","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","wallet_addEthereumChain","wallet_switchEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_registerOnboarding","wallet_watchAsset","wallet_scanQRCode"],a={1:"mainnet",3:"ropsten",4:"rinkeby",5:"goerli",42:"kovan"};var h=n(11460),c=n.n(h),l=n(23087);function u(t){return l.arrayToBuffer(new Uint8Array(t))}function d(t,e){const n=l.removeHexPrefix(l.sanitizeHex(new(c())(t).toString(16)));return e?n:l.addHexPrefix(n)}var p=n(91094);var f=n(1468);function m(){return Date.now()*Math.pow(10,3)+Math.floor(Math.random()*Math.pow(10,3))}n(25108);function g(t){return l.sanitizeHex(t)}const _=m;function w(){return((t,e)=>{for(e=t="";t++<36;e+=51*t&52?(15^t?8^Math.random()*(20^t?16:4):4).toString(16):"-");return e})()}function v(t,e){let n;const r=function(t,e){let n;const r=a[t];return r&&(n=`https://${r}.infura.io/v3/${e}`),n}(t,e.infuraId);return e.custom&&e.custom[t]?n=e.custom[t]:r&&(n=r),n}function y(t,e){return l.isHexString(t,e)}function b(t){return void 0!==t.result}function M(t){return void 0!==t.error}function x(t){return void 0!==t.event}function k(t){t=(0,l.removeHexPrefix)(t.toLowerCase());const e=(0,l.removeHexPrefix)((0,p.keccak_256)((n=t,l.utf8ToBuffer(n))));var n;let r="";for(let n=0;n<t.length;n++)parseInt(e[n],16)>7?r+=t[n].toUpperCase():r+=t[n];return(0,l.addHexPrefix)(r)}function S(t){var e,n,r;return(r=t)&&r.length&&!y(t[0])&&(t[0]=(e=t[0],l.utf8ToHex(e,!n))),t}function C(t){if(void 0!==t.type&&"0"!==t.type)return t;if(void 0===t.from||(!(e=t.from)||"0x"!==e.toLowerCase().substring(0,2)||!/^(0x)?[0-9a-f]{40}$/i.test(e)||!/^(0x)?[0-9a-f]{40}$/.test(e)&&!/^(0x)?[0-9A-F]{40}$/.test(e)&&e!==k(e)))throw new Error("Transaction object must include a valid 'from' value.");var e;function n(t){let e=t;var n;return("number"==typeof t||"string"==typeof t&&!function(t){return""===t||"string"==typeof t&&""===t.trim()}(t))&&(y(t)?"string"==typeof t&&(e=g(t)):e=d(t)),"string"==typeof e&&(n=e,e=l.removeHexLeadingZeros(l.addHexPrefix(n))),e}const r={from:g(t.from),to:void 0===t.to?"":g(t.to),gasPrice:void 0===t.gasPrice?"":n(t.gasPrice),gas:void 0===t.gas?void 0===t.gasLimit?"":n(t.gasLimit):n(t.gas),value:void 0===t.value?"":n(t.value),nonce:void 0===t.nonce?"":n(t.nonce),data:void 0===t.data?"":g(t.data)||"0x"},i=["gasPrice","gas","value","nonce"];return Object.keys(r).forEach((t=>{!r[t].trim().length&&i.includes(t)&&delete r[t]})),r}var I=n(17563);function T(t,e){let n=E(t);return n=Object.assign(Object.assign({},n),e),t=function(t){return I.stringify(t)}(n),t}function E(t){return I.parse(t)}var q=class{constructor(){this._eventEmitters=[],"undefined"!=typeof window&&void 0!==window.addEventListener&&(window.addEventListener("online",(()=>this.trigger("online"))),window.addEventListener("offline",(()=>this.trigger("offline"))))}on(t,e){this._eventEmitters.push({event:t,callback:e})}trigger(t){let e=[];t&&(e=this._eventEmitters.filter((e=>e.event===t))),e.forEach((t=>{t.callback()}))}};const R=void 0!==n.g.WebSocket?n.g.WebSocket:n(68007);var O=class{constructor(t){if(this.opts=t,this._queue=[],this._events=[],this._subscriptions=[],this._protocol=t.protocol,this._version=t.version,this._url="",this._netMonitor=null,this._socket=null,this._nextSocket=null,this._subscriptions=t.subscriptions||[],this._netMonitor=t.netMonitor||new q,!t.url||"string"!=typeof t.url)throw new Error("Missing or invalid WebSocket url");this._url=t.url,this._netMonitor.on("online",(()=>this._socketCreate()))}set readyState(t){}get readyState(){return this._socket?this._socket.readyState:-1}set connecting(t){}get connecting(){return 0===this.readyState}set connected(t){}get connected(){return 1===this.readyState}set closing(t){}get closing(){return 2===this.readyState}set closed(t){}get closed(){return 3===this.readyState}open(){this._socketCreate()}close(){this._socketClose()}send(t,e,n){if(!e||"string"!=typeof e)throw new Error("Missing or invalid topic field");this._socketSend({topic:e,type:"pub",payload:t,silent:!!n})}subscribe(t){this._socketSend({topic:t,type:"sub",payload:"",silent:!0})}on(t,e){this._events.push({event:t,callback:e})}_socketCreate(){if(this._nextSocket)return;const t=function(t,e,n){var r,o;const s=(t.startsWith("https")?t.replace("https","wss"):t.startsWith("http")?t.replace("http","ws"):t).split("?"),a=(0,i.isBrowser)()?{protocol:e,version:n,env:"browser",host:(null===(r=(0,i.getLocation)())||void 0===r?void 0:r.host)||""}:{protocol:e,version:n,env:(null===(o=(0,i.detectEnv)())||void 0===o?void 0:o.name)||""},h=T(function(t){const e=-1!==t.indexOf("?")?t.indexOf("?"):void 0;return void 0!==e?t.substr(e):""}(s[1]||""),a);return s[0]+"?"+h}(this._url,this._protocol,this._version);if(this._nextSocket=new R(t),!this._nextSocket)throw new Error("Failed to create socket");this._nextSocket.onmessage=t=>this._socketReceive(t),this._nextSocket.onopen=()=>this._socketOpen(),this._nextSocket.onerror=t=>this._socketError(t),this._nextSocket.onclose=()=>{setTimeout((()=>{this._nextSocket=null,this._socketCreate()}),1e3)}}_socketOpen(){this._socketClose(),this._socket=this._nextSocket,this._nextSocket=null,this._queueSubscriptions(),this._pushQueue()}_socketClose(){this._socket&&(this._socket.onclose=()=>{},this._socket.close())}_socketSend(t){const e=JSON.stringify(t);this._socket&&1===this._socket.readyState?this._socket.send(e):(this._setToQueue(t),this._socketCreate())}async _socketReceive(t){let e;try{e=JSON.parse(t.data)}catch(t){return}if(this._socketSend({topic:e.topic,type:"ack",payload:"",silent:!0}),this._socket&&1===this._socket.readyState){const t=this._events.filter((t=>"message"===t.event));t&&t.length&&t.forEach((t=>t.callback(e)))}}_socketError(t){const e=this._events.filter((t=>"error"===t.event));e&&e.length&&e.forEach((e=>e.callback(t)))}_queueSubscriptions(){this._subscriptions.forEach((t=>this._queue.push({topic:t,type:"sub",payload:"",silent:!0}))),this._subscriptions=this.opts.subscriptions||[]}_setToQueue(t){this._queue.push(t)}_pushQueue(){this._queue.forEach((t=>this._socketSend(t))),this._queue=[]}};const L="Session currently connected",A="Session currently disconnected",N="JSON RPC response format is invalid",B="User close QRCode Modal";var j=class{constructor(){this._eventEmitters=[]}subscribe(t){this._eventEmitters.push(t)}unsubscribe(t){this._eventEmitters=this._eventEmitters.filter((e=>e.event!==t))}trigger(t){let e,n=[];e=void 0!==t.method?t.method:b(t)||M(t)?`response:${t.id}`:x(t)?t.event:"",e&&(n=this._eventEmitters.filter((t=>t.event===e))),n&&n.length||function(t){return o.includes(t)||t.startsWith("wc_")}(e)||x(e)||(n=this._eventEmitters.filter((t=>"call_request"===t.event))),n.forEach((e=>{if(M(t)){const n=new Error(t.error.message);e.callback(n,null)}else e.callback(null,t)}))}};var P=class{constructor(t="walletconnect"){this.storageId=t}getSession(){let t=null;const e=(0,i.getLocal)(this.storageId);return e&&void 0!==e.bridge&&(t=e),t}setSession(t){return(0,i.setLocal)(this.storageId,t),t}removeSession(){(0,i.removeLocal)(this.storageId)}};const U="abcdefghijklmnopqrstuvwxyz0123456789".split("").map((t=>`https://${t}.bridge.walletconnect.org`));function W(){return U[Math.floor(Math.random()*U.length)]}var z=class{constructor(t){if(this.protocol="wc",this.version=1,this._bridge="",this._key=null,this._clientId="",this._clientMeta=null,this._peerId="",this._peerMeta=null,this._handshakeId=0,this._handshakeTopic="",this._connected=!1,this._accounts=[],this._chainId=0,this._networkId=0,this._rpcUrl="",this._eventManager=new j,this._clientMeta=(0,i.getClientMeta)()||t.connectorOpts.clientMeta||null,this._cryptoLib=t.cryptoLib,this._sessionStorage=t.sessionStorage||new P(t.connectorOpts.storageId),this._qrcodeModal=t.connectorOpts.qrcodeModal,this._qrcodeModalOptions=t.connectorOpts.qrcodeModalOptions,this._signingMethods=[...s,...t.connectorOpts.signingMethods||[]],!t.connectorOpts.bridge&&!t.connectorOpts.uri&&!t.connectorOpts.session)throw new Error("Missing one of the required parameters: bridge / uri / session");var e;t.connectorOpts.bridge&&(this.bridge=function(t){return"walletconnect.org"===function(t){return function(t){let e=t.indexOf("//")>-1?t.split("/")[2]:t.split("/")[0];return e=e.split(":")[0],e=e.split("?")[0],e}(t).split(".").slice(-2).join(".")}(t)}(e=t.connectorOpts.bridge)?W():e),t.connectorOpts.uri&&(this.uri=t.connectorOpts.uri);const n=t.connectorOpts.session||this._getStorageSession();n&&(this.session=n),this.handshakeId&&this._subscribeToSessionResponse(this.handshakeId,"Session request rejected"),this._transport=t.transport||new O({protocol:this.protocol,version:this.version,url:this.bridge,subscriptions:[this.clientId]}),this._subscribeToInternalEvents(),this._initTransport(),t.connectorOpts.uri&&this._subscribeToSessionRequest(),t.pushServerOpts&&this._registerPushServer(t.pushServerOpts)}set bridge(t){t&&(this._bridge=t)}get bridge(){return this._bridge}set key(t){if(!t)return;const e=(n=t,l.hexToArray(n).buffer);var n;this._key=e}get key(){if(this._key){return t=this._key,e=!0,l.arrayToHex(new Uint8Array(t),!e)}var t,e;return""}set clientId(t){t&&(this._clientId=t)}get clientId(){let t=this._clientId;return t||(t=this._clientId=w()),this._clientId}set peerId(t){t&&(this._peerId=t)}get peerId(){return this._peerId}set clientMeta(t){}get clientMeta(){let t=this._clientMeta;return t||(t=this._clientMeta=(0,i.getClientMeta)()),t}set peerMeta(t){this._peerMeta=t}get peerMeta(){return this._peerMeta}set handshakeTopic(t){t&&(this._handshakeTopic=t)}get handshakeTopic(){return this._handshakeTopic}set handshakeId(t){t&&(this._handshakeId=t)}get handshakeId(){return this._handshakeId}get uri(){return this._formatUri()}set uri(t){if(!t)return;const{handshakeTopic:e,bridge:n,key:r}=this._parseUri(t);this.handshakeTopic=e,this.bridge=n,this.key=r}set chainId(t){this._chainId=t}get chainId(){return this._chainId}set networkId(t){this._networkId=t}get networkId(){return this._networkId}set accounts(t){this._accounts=t}get accounts(){return this._accounts}set rpcUrl(t){this._rpcUrl=t}get rpcUrl(){return this._rpcUrl}set connected(t){}get connected(){return this._connected}set pending(t){}get pending(){return!!this._handshakeTopic}get session(){return{connected:this.connected,accounts:this.accounts,chainId:this.chainId,bridge:this.bridge,key:this.key,clientId:this.clientId,clientMeta:this.clientMeta,peerId:this.peerId,peerMeta:this.peerMeta,handshakeId:this.handshakeId,handshakeTopic:this.handshakeTopic}}set session(t){t&&(this._connected=t.connected,this.accounts=t.accounts,this.chainId=t.chainId,this.bridge=t.bridge,this.key=t.key,this.clientId=t.clientId,this.clientMeta=t.clientMeta,this.peerId=t.peerId,this.peerMeta=t.peerMeta,this.handshakeId=t.handshakeId,this.handshakeTopic=t.handshakeTopic)}on(t,e){const n={event:t,callback:e};this._eventManager.subscribe(n)}off(t){this._eventManager.unsubscribe(t)}async createInstantRequest(t){this._key=await this._generateKey();const e=this._formatRequest({method:"wc_instantRequest",params:[{peerId:this.clientId,peerMeta:this.clientMeta,request:this._formatRequest(t)}]});this.handshakeId=e.id,this.handshakeTopic=w(),this._eventManager.trigger({event:"display_uri",params:[this.uri]}),this.on("modal_closed",(()=>{throw new Error(B)}));const n=()=>{this.killSession()};try{const t=await this._sendCallRequest(e);return t&&n(),t}catch(t){throw n(),t}}async connect(t){if(!this._qrcodeModal)throw new Error("QRCode Modal not provided");return this.connected?{chainId:this.chainId,accounts:this.accounts}:(await this.createSession(t),new Promise((async(t,e)=>{this.on("modal_closed",(()=>e(new Error(B)))),this.on("connect",((n,r)=>{if(n)return e(n);t(r.params[0])}))})))}async createSession(t){if(this._connected)throw new Error(L);if(this.pending)return;this._key=await this._generateKey();const e=this._formatRequest({method:"wc_sessionRequest",params:[{peerId:this.clientId,peerMeta:this.clientMeta,chainId:t&&t.chainId?t.chainId:null}]});this.handshakeId=e.id,this.handshakeTopic=w(),this._sendSessionRequest(e,"Session update rejected",{topic:this.handshakeTopic}),this._eventManager.trigger({event:"display_uri",params:[this.uri]})}approveSession(t){if(this._connected)throw new Error(L);this.chainId=t.chainId,this.accounts=t.accounts,this.networkId=t.networkId||0,this.rpcUrl=t.rpcUrl||"";const e={approved:!0,chainId:this.chainId,networkId:this.networkId,accounts:this.accounts,rpcUrl:this.rpcUrl,peerId:this.clientId,peerMeta:this.clientMeta},n={id:this.handshakeId,jsonrpc:"2.0",result:e};this._sendResponse(n),this._connected=!0,this._setStorageSession(),this._eventManager.trigger({event:"connect",params:[{peerId:this.peerId,peerMeta:this.peerMeta,chainId:this.chainId,accounts:this.accounts}]})}rejectSession(t){if(this._connected)throw new Error(L);const e=t&&t.message?t.message:"Session Rejected",n=this._formatResponse({id:this.handshakeId,error:{message:e}});this._sendResponse(n),this._connected=!1,this._eventManager.trigger({event:"disconnect",params:[{message:e}]}),this._removeStorageSession()}updateSession(t){if(!this._connected)throw new Error(A);this.chainId=t.chainId,this.accounts=t.accounts,this.networkId=t.networkId||0,this.rpcUrl=t.rpcUrl||"";const e={approved:!0,chainId:this.chainId,networkId:this.networkId,accounts:this.accounts,rpcUrl:this.rpcUrl},n=this._formatRequest({method:"wc_sessionUpdate",params:[e]});this._sendSessionRequest(n,"Session update rejected"),this._eventManager.trigger({event:"session_update",params:[{chainId:this.chainId,accounts:this.accounts}]}),this._manageStorageSession()}async killSession(t){const e=t?t.message:"Session Disconnected",n=this._formatRequest({method:"wc_sessionUpdate",params:[{approved:!1,chainId:null,networkId:null,accounts:null}]});await this._sendRequest(n),this._handleSessionDisconnect(e)}async sendTransaction(t){if(!this._connected)throw new Error(A);const e=C(t),n=this._formatRequest({method:"eth_sendTransaction",params:[e]});return await this._sendCallRequest(n)}async signTransaction(t){if(!this._connected)throw new Error(A);const e=C(t),n=this._formatRequest({method:"eth_signTransaction",params:[e]});return await this._sendCallRequest(n)}async signMessage(t){if(!this._connected)throw new Error(A);const e=this._formatRequest({method:"eth_sign",params:t});return await this._sendCallRequest(e)}async signPersonalMessage(t){if(!this._connected)throw new Error(A);t=S(t);const e=this._formatRequest({method:"personal_sign",params:t});return await this._sendCallRequest(e)}async signTypedData(t){if(!this._connected)throw new Error(A);const e=this._formatRequest({method:"eth_signTypedData",params:t});return await this._sendCallRequest(e)}async updateChain(t){if(!this._connected)throw new Error("Session currently disconnected");const e=this._formatRequest({method:"wallet_updateChain",params:[t]});return await this._sendCallRequest(e)}unsafeSend(t,e){return this._sendRequest(t,e),this._eventManager.trigger({event:"call_request_sent",params:[{request:t,options:e}]}),new Promise(((e,n)=>{this._subscribeToResponse(t.id,((t,r)=>{if(t)n(t);else{if(!r)throw new Error("Missing JSON RPC response");e(r)}}))}))}async sendCustomRequest(t,e){if(!this._connected)throw new Error(A);switch(t.method){case"eth_accounts":return this.accounts;case"eth_chainId":return d(this.chainId);case"eth_sendTransaction":case"eth_signTransaction":t.params&&(t.params[0]=C(t.params[0]));break;case"personal_sign":t.params&&(t.params=S(t.params))}const n=this._formatRequest(t);return await this._sendCallRequest(n,e)}approveRequest(t){if(!b(t))throw new Error('JSON-RPC success response must include "result" field');{const e=this._formatResponse(t);this._sendResponse(e)}}rejectRequest(t){if(!M(t))throw new Error('JSON-RPC error response must include "error" field');{const e=this._formatResponse(t);this._sendResponse(e)}}transportClose(){this._transport.close()}async _sendRequest(t,e){const n=this._formatRequest(t),r=await this._encrypt(n),i=void 0!==(null==e?void 0:e.topic)?e.topic:this.peerId,o=JSON.stringify(r),a=void 0!==(null==e?void 0:e.forcePushNotification)?!e.forcePushNotification:function(t){return!!t.method.startsWith("wc_")||!s.includes(t.method)}(n);this._transport.send(o,i,a)}async _sendResponse(t){const e=await this._encrypt(t),n=this.peerId,r=JSON.stringify(e);this._transport.send(r,n,!0)}async _sendSessionRequest(t,e,n){this._sendRequest(t,n),this._subscribeToSessionResponse(t.id,e)}_sendCallRequest(t,e){return this._sendRequest(t,e),this._eventManager.trigger({event:"call_request_sent",params:[{request:t,options:e}]}),this._subscribeToCallResponse(t.id)}_formatRequest(t){if(void 0===t.method)throw new Error('JSON RPC request must have valid "method" value');return{id:void 0===t.id?_():t.id,jsonrpc:"2.0",method:t.method,params:void 0===t.params?[]:t.params}}_formatResponse(t){if(void 0===t.id)throw new Error('JSON RPC request must have valid "id" value');const e={id:t.id,jsonrpc:"2.0"};if(M(t)){const n=function(t){const e=t.message||"Failed or Rejected Request";let n=-32e3;if(t&&!t.code)switch(e){case"Parse error":n=-32700;break;case"Invalid request":n=-32600;break;case"Method not found":n=-32601;break;case"Invalid params":n=-32602;break;case"Internal error":n=-32603;break;default:n=-32e3}return{code:n,message:e}}(t.error);return Object.assign(Object.assign(Object.assign({},e),t),{error:n})}if(b(t)){return Object.assign(Object.assign({},e),t)}throw new Error(N)}_handleSessionDisconnect(t){const e=t||"Session Disconnected";this._connected||(this._qrcodeModal&&this._qrcodeModal.close(),(0,i.removeLocal)(i.mobileLinkChoiceKey)),this._connected&&(this._connected=!1),this._handshakeId&&(this._handshakeId=0),this._handshakeTopic&&(this._handshakeTopic=""),this._peerId&&(this._peerId=""),this._eventManager.trigger({event:"disconnect",params:[{message:e}]}),this._removeStorageSession(),this.transportClose()}_handleSessionResponse(t,e){e&&e.approved?(this._connected?(e.chainId&&(this.chainId=e.chainId),e.accounts&&(this.accounts=e.accounts),this._eventManager.trigger({event:"session_update",params:[{chainId:this.chainId,accounts:this.accounts}]})):(this._connected=!0,e.chainId&&(this.chainId=e.chainId),e.accounts&&(this.accounts=e.accounts),e.peerId&&!this.peerId&&(this.peerId=e.peerId),e.peerMeta&&!this.peerMeta&&(this.peerMeta=e.peerMeta),this._eventManager.trigger({event:"connect",params:[{peerId:this.peerId,peerMeta:this.peerMeta,chainId:this.chainId,accounts:this.accounts}]})),this._manageStorageSession()):this._handleSessionDisconnect(t)}async _handleIncomingMessages(t){if(![this.clientId,this.handshakeTopic].includes(t.topic))return;let e;try{e=JSON.parse(t.payload)}catch(t){return}const n=await this._decrypt(e);n&&this._eventManager.trigger(n)}_subscribeToSessionRequest(){this._transport.subscribe(this.handshakeTopic)}_subscribeToResponse(t,e){this.on(`response:${t}`,e)}_subscribeToSessionResponse(t,e){this._subscribeToResponse(t,((t,n)=>{t?this._handleSessionResponse(t.message):n.result?this._handleSessionResponse(e,n.result):n.error&&n.error.message?this._handleSessionResponse(n.error.message):this._handleSessionResponse(e)}))}_subscribeToCallResponse(t){return new Promise(((e,n)=>{this._subscribeToResponse(t,((t,r)=>{t?n(t):r.result?e(r.result):r.error&&r.error.message?n(new Error(r.error.message)):n(new Error(N))}))}))}_subscribeToInternalEvents(){this.on("display_uri",(()=>{this._qrcodeModal&&this._qrcodeModal.open(this.uri,(()=>{this._eventManager.trigger({event:"modal_closed",params:[]})}),this._qrcodeModalOptions)})),this.on("connect",(()=>{this._qrcodeModal&&this._qrcodeModal.close()})),this.on("call_request_sent",((t,e)=>{const{request:n}=e.params[0];if((0,i.isMobile)()&&this._signingMethods.includes(n.method)){const t=(0,i.getLocal)(i.mobileLinkChoiceKey);t&&(window.location.href=t.href)}})),this.on("wc_sessionRequest",((t,e)=>{t&&this._eventManager.trigger({event:"error",params:[{code:"SESSION_REQUEST_ERROR",message:t.toString()}]}),this.handshakeId=e.id,this.peerId=e.params[0].peerId,this.peerMeta=e.params[0].peerMeta;const n=Object.assign(Object.assign({},e),{method:"session_request"});this._eventManager.trigger(n)})),this.on("wc_sessionUpdate",((t,e)=>{t&&this._handleSessionResponse(t.message),this._handleSessionResponse("Session disconnected",e.params[0])}))}_initTransport(){this._transport.on("message",(t=>this._handleIncomingMessages(t))),this._transport.on("open",(()=>this._eventManager.trigger({event:"transport_open",params:[]}))),this._transport.on("close",(()=>this._eventManager.trigger({event:"transport_close",params:[]}))),this._transport.on("error",(()=>this._eventManager.trigger({event:"transport_error",params:["Websocket connection failed"]}))),this._transport.open()}_formatUri(){return`${this.protocol}:${this.handshakeTopic}@${this.version}?bridge=${encodeURIComponent(this.bridge)}&key=${this.key}`}_parseUri(t){const e=function(t){const e=t.indexOf(":"),n=-1!==t.indexOf("?")?t.indexOf("?"):void 0,r=t.substring(0,e),i=function(t){const e=t.split("@");return{handshakeTopic:e[0],version:parseInt(e[1],10)}}(t.substring(e+1,n)),o=function(t){const e=E(t);return{key:e.key||"",bridge:e.bridge||""}}(void 0!==n?t.substr(n):"");return Object.assign(Object.assign({protocol:r},i),o)}(t);if(e.protocol===this.protocol){if(!e.handshakeTopic)throw Error("Invalid or missing handshakeTopic parameter value");const t=e.handshakeTopic;if(!e.bridge)throw Error("Invalid or missing bridge url parameter value");const n=decodeURIComponent(e.bridge);if(!e.key)throw Error("Invalid or missing key parameter value");return{handshakeTopic:t,bridge:n,key:e.key}}throw new Error("URI format is invalid")}async _generateKey(){if(this._cryptoLib){return await this._cryptoLib.generateKey()}return null}async _encrypt(t){const e=this._key;if(this._cryptoLib&&e){return await this._cryptoLib.encrypt(t,e)}return null}async _decrypt(t){const e=this._key;if(this._cryptoLib&&e){return await this._cryptoLib.decrypt(t,e)}return null}_getStorageSession(){let t=null;return this._sessionStorage&&(t=this._sessionStorage.getSession()),t}_setStorageSession(){this._sessionStorage&&this._sessionStorage.setSession(this.session)}_removeStorageSession(){this._sessionStorage&&this._sessionStorage.removeSession()}_manageStorageSession(){this._connected?this._setStorageSession():this._removeStorageSession()}_registerPushServer(t){if(!t.url||"string"!=typeof t.url)throw Error("Invalid or missing pushServerOpts.url parameter value");if(!t.type||"string"!=typeof t.type)throw Error("Invalid or missing pushServerOpts.type parameter value");if(!t.token||"string"!=typeof t.token)throw Error("Invalid or missing pushServerOpts.token parameter value");const e={bridge:this.bridge,topic:this.clientId,type:t.type,token:t.token,peerName:"",language:t.language||""};this.on("connect",(async(n,r)=>{if(n)throw n;if(t.peerMeta){const t=r.params[0].peerMeta.name;e.peerName=t}try{const n=await fetch(`${t.url}/new`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)});if(!(await n.json()).success)throw Error("Failed to register in Push Server")}catch(n){throw Error("Failed to register in Push Server")}}))}};const H="AES-CBC",D="HMAC";async function Z(t,e="AES-CBC"){return f.getSubtleCrypto().importKey("raw",t,function(t){return t===H?{length:256,name:H}:{hash:{name:"SHA-256"},name:D}}(e),!0,function(t){return t===H?["encrypt","decrypt"]:["sign","verify"]}(e))}function F(t,e,n){return async function(t,e,n){const r=f.getSubtleCrypto(),i=await Z(e,H),o=await r.encrypt({iv:t,name:H},i,n);return new Uint8Array(o)}(t,e,n)}function $(t,e,n){return async function(t,e,n){const r=f.getSubtleCrypto(),i=await Z(e,H),o=await r.decrypt({iv:t,name:H},i,n);return new Uint8Array(o)}(t,e,n)}async function Q(t,e){const n=await async function(t,e){const n=f.getSubtleCrypto(),r=await Z(t,D),i=await n.sign({length:256,name:D},r,e);return new Uint8Array(i)}(t,e);return n}async function J(t){const e=function(t){return f.getBrowerCrypto().getRandomValues(new Uint8Array(t))}((t||256)/8);var n;return n=l.arrayToBuffer(e),l.bufferToArray(n).buffer}async function K(t,e){const n=l.hexToArray(t.data),r=l.hexToArray(t.iv),i=l.hexToArray(t.hmac),o=l.arrayToHex(i,!1),s=l.concatArrays(n,r),a=await Q(e,s),h=l.arrayToHex(a,!1);return l.removeHexPrefix(o)===l.removeHexPrefix(h)}async function V(t,e,n){const r=l.bufferToArray(u(e)),i=n||await J(128),o=l.bufferToArray(u(i)),s=l.arrayToHex(o,!1),a=JSON.stringify(t),h=l.utf8ToArray(a),c=await F(o,r,h),d=l.arrayToHex(c,!1),p=l.concatArrays(c,o),f=await Q(r,p);return{data:d,hmac:l.arrayToHex(f,!1),iv:s}}async function Y(t,e){const n=l.bufferToArray(u(e));if(!n)throw new Error("Missing key: required for decryption");if(!await K(t,n))return null;const r=l.hexToArray(t.data),i=l.hexToArray(t.iv),o=await $(i,n,r),s=l.arrayToUtf8(o);let a;try{a=JSON.parse(s)}catch(t){return null}return a}var X=class extends z{constructor(t,e){super({cryptoLib:r,connectorOpts:t,pushServerOpts:e})}},G=n(4337),tt=n.n(G),et=n(71578),nt=n.n(et),rt=n(59536);const it=(0,i.getFromWindow)("XMLHttpRequest")||rt.XMLHttpRequest;class ot extends(nt()){constructor(t){super(),this.url=t}formatError(t,e,n=-1){return{error:{message:e,code:n},id:t.id,jsonrpc:t.jsonrpc}}send(t,e){return new Promise((n=>{if("eth_subscribe"===t.method){const e=this.formatError(t,"Subscriptions are not supported by this HTTP endpoint");return this.emit("error",e),n(e)}const r=new it;let i=!1;const o=(o,s)=>{if(!i)if(r.abort(),i=!0,e)e(o,s);else{const{id:e,jsonrpc:r}=t,i=o?{id:e,jsonrpc:r,error:{message:o.message,code:o.code}}:{id:e,jsonrpc:r,result:s};this.emit("payload",i),n(i)}};r.open("POST",this.url,!0),r.setRequestHeader("Content-Type","application/json"),r.timeout=6e4,r.onerror=o,r.ontimeout=o,r.onreadystatechange=()=>{if(4===r.readyState)try{const t=JSON.parse(r.responseText);o(t.error,t.result)}catch(t){o(t)}},r.send(JSON.stringify(t))}))}}var st=ot;const at=n(12906),ht=n(41955),ct=n(2110),lt=n(28260),ut=n(78747),dt=n(3621),pt=n(78191);var ft=class extends at{constructor(t){if(super({pollingInterval:t.pollingInterval||8e3}),this.bridge="https://bridge.walletconnect.org",this.qrcode=!0,this.qrcodeModal=tt(),this.qrcodeModalOptions=void 0,this.rpc=null,this.infuraId="",this.http=null,this.isConnecting=!1,this.connected=!1,this.connectCallbacks=[],this.accounts=[],this.chainId=1,this.rpcUrl="",this.enable=async()=>{const t=await this.getWalletConnector();if(t)return this.start(),this.subscribeWalletConnector(),t.accounts;throw new Error("Failed to connect to WalleConnect")},this.request=async t=>this.send(t),this.send=async(t,e)=>{if("string"==typeof t){const n=t;let r=e;return"personal_sign"===n&&(r=S(r)),this.sendAsyncPromise(n,r)}if("personal_sign"===(t=Object.assign({id:_(),jsonrpc:"2.0"},t)).method&&(t.params=S(t.params)),!e)return this.sendAsyncPromise(t.method,t.params);this.sendAsync(t,e)},this.onConnect=t=>{this.connectCallbacks.push(t)},this.triggerConnect=t=>{this.connectCallbacks&&this.connectCallbacks.length&&this.connectCallbacks.forEach((e=>e(t)))},this.bridge=t.connector?t.connector.bridge:t.bridge||"https://bridge.walletconnect.org",this.qrcode=void 0===t.qrcode||!1!==t.qrcode,this.qrcodeModal=t.qrcodeModal||this.qrcodeModal,this.qrcodeModalOptions=t.qrcodeModalOptions,this.wc=t.connector||new X({bridge:this.bridge,qrcodeModal:this.qrcode?this.qrcodeModal:void 0,qrcodeModalOptions:this.qrcodeModalOptions,storageId:null==t?void 0:t.storageId,signingMethods:null==t?void 0:t.signingMethods,clientMeta:null==t?void 0:t.clientMeta}),this.rpc=t.rpc||null,!(this.rpc||t.infuraId&&"string"==typeof t.infuraId&&t.infuraId.trim()))throw new Error("Missing one of the required parameters: rpc or infuraId");this.infuraId=t.infuraId||"",this.chainId=(null==t?void 0:t.chainId)||this.chainId,this.initialize()}get isWalletConnect(){return!0}get connector(){return this.wc}get walletMeta(){return this.wc.peerMeta}async disconnect(){this.close()}async close(){const t=await this.getWalletConnector({disableSessionCreation:!0});await t.killSession(),await this.onDisconnect()}async handleRequest(t){try{let e,n=null;const r=await this.getWalletConnector();switch(t.method){case"wc_killSession":await this.close(),n=null;break;case"eth_accounts":n=r.accounts;break;case"eth_coinbase":n=r.accounts[0];break;case"eth_chainId":case"net_version":n=r.chainId;break;case"eth_uninstallFilter":this.sendAsync(t,(t=>t)),n=!0;break;default:e=await this.handleOtherRequests(t)}return e||this.formatResponse(t,n)}catch(t){throw this.emit("error",t),t}}async handleOtherRequests(t){if(!s.includes(t.method)&&t.method.startsWith("eth_"))return this.handleReadRequests(t);const e=await this.getWalletConnector(),n=await e.sendCustomRequest(t);return this.formatResponse(t,n)}async handleReadRequests(t){if(!this.http){const t=new Error("HTTP Connection not available");throw this.emit("error",t),t}return this.http.send(t)}formatResponse(t,e){return{id:t.id,jsonrpc:t.jsonrpc,result:e}}getWalletConnector(t={}){const{disableSessionCreation:e=!1}=t;return new Promise(((t,n)=>{const r=this.wc;this.isConnecting?this.onConnect((e=>t(e))):r.connected||e?(this.connected||(this.connected=!0,this.updateState(r.session)),t(r)):(this.isConnecting=!0,r.on("modal_closed",(()=>{n(new Error("User closed modal"))})),r.createSession({chainId:this.chainId}).then((()=>{r.on("connect",((e,i)=>{if(e)return this.isConnecting=!1,n(e);this.isConnecting=!1,this.connected=!0,i&&this.updateState(i.params[0]),this.emit("connect"),this.triggerConnect(r),t(r)}))})).catch((t=>{this.isConnecting=!1,n(t)})))}))}async subscribeWalletConnector(){const t=await this.getWalletConnector();t.on("disconnect",(t=>{t?this.emit("error",t):this.onDisconnect()})),t.on("session_update",((t,e)=>{t?this.emit("error",t):this.updateState(e.params[0])}))}async onDisconnect(){await this.stop(),this.emit("close",1e3,"Connection closed"),this.emit("disconnect",1e3,"Connection disconnected"),this.connected=!1}async updateState(t){const{accounts:e,chainId:n,networkId:r,rpcUrl:i}=t;(!this.accounts||e&&this.accounts!==e)&&(this.accounts=e,this.emit("accountsChanged",e)),(!this.chainId||n&&this.chainId!==n)&&(this.chainId=n,this.emit("chainChanged",n)),(!this.networkId||r&&this.networkId!==r)&&(this.networkId=r,this.emit("networkChanged",r)),this.updateRpcUrl(this.chainId,i||"")}updateRpcUrl(t,e=""){const n={infuraId:this.infuraId,custom:this.rpc||void 0};(e=e||v(t,n))?(this.rpcUrl=e,this.updateHttpConnection()):this.emit("error",new Error(`No RPC Url available for chainId: ${t}`))}updateHttpConnection(){this.rpcUrl&&(this.http=new st(this.rpcUrl),this.http.on("payload",(t=>this.emit("payload",t))),this.http.on("error",(t=>this.emit("error",t))))}sendAsyncPromise(t,e){return new Promise(((n,r)=>{this.sendAsync({id:_(),jsonrpc:"2.0",method:t,params:e||[]},((t,e)=>{t?r(t):n(e.result)}))}))}initialize(){this.updateRpcUrl(this.chainId),this.addProvider(new ct({eth_hashrate:"0x00",eth_mining:!1,eth_syncing:!0,net_listening:!0,web3_clientVersion:"WalletConnect/v1.x.x/javascript"})),this.addProvider(new ht),this.addProvider(new pt),this.addProvider(new lt),this.addProvider(new dt),this.addProvider(new ut(this.configWallet())),this.addProvider({handleRequest:async(t,e,n)=>{try{const{error:e,result:r}=await this.handleRequest(t);n(e,r)}catch(t){n(t)}},setEngine:t=>t})}configWallet(){return{getAccounts:async t=>{try{const e=(await this.getWalletConnector()).accounts;e&&e.length?t(null,e):t(new Error("Failed to get accounts"))}catch(e){t(e)}},processMessage:async(t,e)=>{try{const n=await this.getWalletConnector();e(null,await n.signMessage([t.from,t.data]))}catch(t){e(t)}},processPersonalMessage:async(t,e)=>{try{const n=await this.getWalletConnector();e(null,await n.signPersonalMessage([t.data,t.from]))}catch(t){e(t)}},processSignTransaction:async(t,e)=>{try{const n=await this.getWalletConnector();e(null,await n.signTransaction(t))}catch(t){e(t)}},processTransaction:async(t,e)=>{try{const n=await this.getWalletConnector();e(null,await n.sendTransaction(t))}catch(t){e(t)}},processTypedMessage:async(t,e)=>{try{const n=await this.getWalletConnector();e(null,await n.signTypedData([t.from,t.data]))}catch(t){e(t)}}}}}},62873:function(t,e){"use strict";function n(t){let e;return"undefined"!=typeof window&&void 0!==window[t]&&(e=window[t]),e}function r(t){const e=n(t);if(!e)throw new Error(`${t} is not defined in Window`);return e}Object.defineProperty(e,"__esModule",{value:!0}),e.getLocalStorage=e.getLocalStorageOrThrow=e.getCrypto=e.getCryptoOrThrow=e.getLocation=e.getLocationOrThrow=e.getNavigator=e.getNavigatorOrThrow=e.getDocument=e.getDocumentOrThrow=e.getFromWindowOrThrow=e.getFromWindow=void 0,e.getFromWindow=n,e.getFromWindowOrThrow=r,e.getDocumentOrThrow=function(){return r("document")},e.getDocument=function(){return n("document")},e.getNavigatorOrThrow=function(){return r("navigator")},e.getNavigator=function(){return n("navigator")},e.getLocationOrThrow=function(){return r("location")},e.getLocation=function(){return n("location")},e.getCryptoOrThrow=function(){return r("crypto")},e.getCrypto=function(){return n("crypto")},e.getLocalStorageOrThrow=function(){return r("localStorage")},e.getLocalStorage=function(){return n("localStorage")}},65755:function(t,e,n){"use strict";e.D=void 0;const r=n(62873);e.D=function(){let t,e;try{t=r.getDocumentOrThrow(),e=r.getLocationOrThrow()}catch(t){return null}function n(...e){const n=t.getElementsByTagName("meta");for(let t=0;t<n.length;t++){const r=n[t],i=["itemprop","property","name"].map((t=>r.getAttribute(t))).filter((t=>!!t&&e.includes(t)));if(i.length&&i){const t=r.getAttribute("content");if(t)return t}}return""}const i=function(){let e=n("name","og:site_name","og:title","twitter:title");return e||(e=t.title),e}();return{description:n("description","og:description","twitter:description","keywords"),url:e.origin,icons:function(){const n=t.getElementsByTagName("link"),r=[];for(let t=0;t<n.length;t++){const i=n[t],o=i.getAttribute("rel");if(o&&o.toLowerCase().indexOf("icon")>-1){const t=i.getAttribute("href");if(t)if(-1===t.toLowerCase().indexOf("https:")&&-1===t.toLowerCase().indexOf("http:")&&0!==t.indexOf("//")){let n=e.protocol+"//"+e.host;if(0===t.indexOf("/"))n+=t;else{const r=e.pathname.split("/");r.pop();n+=r.join("/")+"/"+t}r.push(n)}else if(0===t.indexOf("//")){const n=e.protocol+t;r.push(n)}else r.push(t)}}return r}(),name:i}}},26988:function(t){t.exports=function t(e,n){var r,i=0,o=0,s=n=n||0,a=e.length;do{if(s>=a)throw t.bytes=0,new RangeError("Could not decode varint");r=e[s++],i+=o<28?(127&r)<<o:(127&r)*Math.pow(2,o),o+=7}while(r>=128);return t.bytes=s-n,i}},1312:function(t){t.exports=function t(n,r,i){r=r||[];var o=i=i||0;for(;n>=e;)r[i++]=255&n|128,n/=128;for(;-128&n;)r[i++]=255&n|128,n>>>=7;return r[i]=0|n,t.bytes=i-o+1,r};var e=Math.pow(2,31)},94676:function(t,e,n){t.exports={encode:n(1312),decode:n(26988),encodingLength:n(10082)}},10082:function(t){var e=Math.pow(2,7),n=Math.pow(2,14),r=Math.pow(2,21),i=Math.pow(2,28),o=Math.pow(2,35),s=Math.pow(2,42),a=Math.pow(2,49),h=Math.pow(2,56),c=Math.pow(2,63);t.exports=function(t){return t<e?1:t<n?2:t<r?3:t<i?4:t<o?5:t<s?6:t<a?7:t<h?8:t<c?9:10}},42473:function(t,e,n){"use strict";n(25108);var r=function(){};t.exports=r}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy04MzZkMTkyYy45OTIzMmRkMmU2NGZhNjI2YjFhOS5qcyIsIm1hcHBpbmdzIjoiMDVDQUdPLFNBQVNBLEVBQVVDLEdBQ3RCLE9BQU8sUUFBT0EsR0FFWCxTQUFTQyxJQUNaLE1BQU1DLEVBQU1ILElBQ1osT0FBT0csR0FBT0EsRUFBSUMsR0FBS0QsRUFBSUMsUUFBS0MsRUFFN0IsU0FBU0MsSUFDWixNQUFNRixFQUFLRixJQUNYLFFBQU9FLEdBQUtBLEVBQUdHLGNBQWNDLFNBQVMsV0FFbkMsU0FBU0MsSUFDWixNQUFNTCxFQUFLRixJQUNYLFFBQU9FLElBQ0RBLEVBQUdHLGNBQWNDLFNBQVMsUUFDdkJKLEVBQUdHLGNBQWNDLFNBQVMsUUFBVUUsVUFBVUMsZUFBaUIsR0FHckUsU0FBU0MsSUFFWixRQURXVixNQUNDSSxLQUFlRyxLQUV4QixTQUFTSSxJQUNaLE1BQU1WLEVBQU1ILElBRVosU0FEZUcsSUFBT0EsRUFBSVcsT0FBa0MsU0FBM0JYLEVBQUlXLEtBQUtQLGNBR3ZDLFNBQVNRLElBRVosT0FEZ0JGLE9BQWNHLElBRzNCLE1BQU1DLEVBQWdCLGdCQUNoQkMsRUFBdUIsdUJBQ3ZCQyxFQUFxQixxQkFDckJDLEVBQWMsY0FDZEMsRUFBc0Isc0JBQ3RCTCxFQUFlLGVBQ2ZNLEVBQXFCLHFCQUNyQkMsRUFBYyxjQUNkQyxFQUFtQixtQkFDbkJDLEVBQVksWUFDWkMsRUFBeUIseUJBQ3pCQyxFQUFrQixrQkFDeEIsU0FBU0MsSUFDWixPQUFPLE1DOUNKLE1BQU0sRUNETixTQUF1QkMsR0FDMUIsR0FBcUIsaUJBQVZBLEVBQ1AsTUFBTSxJQUFJQyxNQUFNLCtDQUErQ0QsR0FFbkUsSUFDSSxPQUFPRSxLQUFLQyxNQUFNSCxHQUV0QixNQUFPSSxHQUNILE9BQU9KLElETkYsRUNTTixTQUEyQkEsR0FDOUIsTUFBd0IsaUJBQVZBLEVBQXFCQSxFQUFRRSxLQUFLRyxVQUFVTCxJQ1Z2RCxTQUFTTSxFQUFTQyxFQUFLQyxHQUMxQixNQUFNQyxFQUFNLEVB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S0FBS29LLElBQUksRUFBRyxLLHNCQ0x0QnBOLEVBQU9uTCxRQUFVLENBQ2IyakMsT0FBUSxFQUFRLE1BQ2hCRyxPQUFRLEVBQVEsT0FDaEJDLGVBQWdCLEVBQVEsUyxrQkNGNUIsSUFBSUMsRUFBSzcxQixLQUFLb0ssSUFBSSxFQUFJLEdBQ2xCMHJCLEVBQUs5MUIsS0FBS29LLElBQUksRUFBRyxJQUNqQjJyQixFQUFLLzFCLEtBQUtvSyxJQUFJLEVBQUcsSUFDakI0ckIsRUFBS2gyQixLQUFLb0ssSUFBSSxFQUFHLElBQ2pCNnJCLEVBQUtqMkIsS0FBS29LLElBQUksRUFBRyxJQUNqQjhyQixFQUFLbDJCLEtBQUtvSyxJQUFJLEVBQUcsSUFDakIrckIsRUFBS24yQixLQUFLb0ssSUFBSSxFQUFHLElBQ2pCZ3NCLEVBQUtwMkIsS0FBS29LLElBQUksRUFBRyxJQUNqQmlzQixFQUFLcjJCLEtBQUtvSyxJQUFJLEVBQUcsSUFFckJwTixFQUFPbkwsUUFBVSxTQUFVN0QsR0FDekIsT0FDRUEsRUFBUTZuQyxFQUFLLEVBQ2I3bkMsRUFBUThuQyxFQUFLLEVBQ2I5bkMsRUFBUStuQyxFQUFLLEVBQ2IvbkMsRUFBUWdvQyxFQUFLLEVBQ2Job0MsRUFBUWlvQyxFQUFLLEVBQ2Jqb0MsRUFBUWtvQyxFQUFLLEVBQ2Jsb0MsRUFBUW1vQyxFQUFLLEVBQ2Jub0MsRUFBUW9vQyxFQUFLLEVBQ2Jwb0MsRUFBUXFvQyxFQUFLLEVBQ0EsSyxnRENKYkMsRUFBVSxhQTJDZHQ1QixFQUFPbkwsUUFBVXlrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Jyb3dzZXItdXRpbHMvZGlzdC9lc20vYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9icm93c2VyLXV0aWxzL2Rpc3QvZXNtL2pzb24uanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvc2FmZS1qc29uL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Jyb3dzZXItdXRpbHMvZGlzdC9lc20vbG9jYWwuanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvYnJvd3Nlci11dGlscy9kaXN0L2VzbS9tb2JpbGUuanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvYnJvd3Nlci11dGlscy9kaXN0L2VzbS9yZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbmNvZGluZy9kaXN0L2Nqcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudC9kaXN0L2Nqcy9jcnlwdG8uanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvZW52LmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50L2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2h0dHAtY29ubmVjdGlvbi9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMy9pbmRleC5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9xcmNvZGUtbW9kYWwvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvc29ja2V0LXRyYW5zcG9ydC9ub2RlX21vZHVsZXMvd3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL2Rpc3QvZXNtL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9kaXN0L2VzbS9lbmNvZGluZy5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2Zvcm1hdC5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9kaXN0L2VzbS9taXNjLmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL2Rpc3QvZXNtL3ZhbGlkYXRvcnMuanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvZGlzdC9lc20vZXRoZXJldW0uanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvZGlzdC9lc20vdXJsLmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3NvY2tldC10cmFuc3BvcnQvZGlzdC9lc20vbmV0d29yay5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zb2NrZXQtdHJhbnNwb3J0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2NvcmUvZGlzdC9lc20vZXJyb3JzLmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2NvcmUvZGlzdC9lc20vZXZlbnRzLmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2NvcmUvZGlzdC9lc20vc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9kaXN0L2VzbS9zZXNzaW9uLmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2NvcmUvZGlzdC9lc20vdXJsLmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2NvcmUvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvZGlzdC9lc20vcGF5bG9hZC5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9jcnlwdG8vZGlzdC9lc20vY29uc3RhbnRzL2xlbmd0aC5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9jcnlwdG8vZGlzdC9lc20vY29uc3RhbnRzL2RlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY3J5cHRvL2Rpc3QvZXNtL2xpYi9icm93c2VyLmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2NyeXB0by9kaXN0L2VzbS9jb25zdGFudHMvb3BlcmF0aW9ucy5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9jcnlwdG8vZGlzdC9lc20vYnJvd3Nlci9hZXMuanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY3J5cHRvL2Rpc3QvZXNtL2Jyb3dzZXIvaG1hYy5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9pc28tY3J5cHRvL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3JhbmRvbWJ5dGVzL2Rpc3QvZXNtL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY2xpZW50L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2h0dHAtY29ubmVjdGlvbi9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93ZWIzLXByb3ZpZGVyL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dpbmRvdy1nZXR0ZXJzL2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dpbmRvdy1tZXRhZGF0YS9kaXN0L2Nqcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy92YXJpbnQvZGVjb2RlLmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL3ZhcmludC9lbmNvZGUuanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvdmFyaW50L2luZGV4LmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL3ZhcmludC9sZW5ndGguanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHdpbmRvd01ldGFkYXRhIGZyb20gXCJAd2FsbGV0Y29ubmVjdC93aW5kb3ctbWV0YWRhdGFcIjtcbmltcG9ydCAqIGFzIHdpbmRvd0dldHRlcnMgZnJvbSBcIkB3YWxsZXRjb25uZWN0L3dpbmRvdy1nZXR0ZXJzXCI7XG5pbXBvcnQgeyBkZXRlY3QsIH0gZnJvbSBcImRldGVjdC1icm93c2VyXCI7XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0RW52KHVzZXJBZ2VudCkge1xuICAgIHJldHVybiBkZXRlY3QodXNlckFnZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RPUygpIHtcbiAgICBjb25zdCBlbnYgPSBkZXRlY3RFbnYoKTtcbiAgICByZXR1cm4gZW52ICYmIGVudi5vcyA/IGVudi5vcyA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0FuZHJvaWQoKSB7XG4gICAgY29uc3Qgb3MgPSBkZXRlY3RPUygpO1xuICAgIHJldHVybiBvcyA/IG9zLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJhbmRyb2lkXCIpIDogZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNJT1MoKSB7XG4gICAgY29uc3Qgb3MgPSBkZXRlY3RPUygpO1xuICAgIHJldHVybiBvc1xuICAgICAgICA/IG9zLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJpb3NcIikgfHxcbiAgICAgICAgICAgIChvcy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwibWFjXCIpICYmIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDEpXG4gICAgICAgIDogZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNNb2JpbGUoKSB7XG4gICAgY29uc3Qgb3MgPSBkZXRlY3RPUygpO1xuICAgIHJldHVybiBvcyA/IGlzQW5kcm9pZCgpIHx8IGlzSU9TKCkgOiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGUoKSB7XG4gICAgY29uc3QgZW52ID0gZGV0ZWN0RW52KCk7XG4gICAgY29uc3QgcmVzdWx0ID0gZW52ICYmIGVudi5uYW1lID8gZW52Lm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJub2RlXCIgOiBmYWxzZTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgICBjb25zdCByZXN1bHQgPSAhaXNOb2RlKCkgJiYgISFnZXROYXZpZ2F0b3IoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGNvbnN0IGdldEZyb21XaW5kb3cgPSB3aW5kb3dHZXR0ZXJzLmdldEZyb21XaW5kb3c7XG5leHBvcnQgY29uc3QgZ2V0RnJvbVdpbmRvd09yVGhyb3cgPSB3aW5kb3dHZXR0ZXJzLmdldEZyb21XaW5kb3dPclRocm93O1xuZXhwb3J0IGNvbnN0IGdldERvY3VtZW50T3JUaHJvdyA9IHdpbmRvd0dldHRlcnMuZ2V0RG9jdW1lbnRPclRocm93O1xuZXhwb3J0IGNvbnN0IGdldERvY3VtZW50ID0gd2luZG93R2V0dGVycy5nZXREb2N1bWVudDtcbmV4cG9ydCBjb25zdCBnZXROYXZpZ2F0b3JPclRocm93ID0gd2luZG93R2V0dGVycy5nZXROYXZpZ2F0b3JPclRocm93O1xuZXhwb3J0IGNvbnN0IGdldE5hdmlnYXRvciA9IHdpbmRvd0dldHRlcnMuZ2V0TmF2aWdhdG9yO1xuZXhwb3J0IGNvbnN0IGdldExvY2F0aW9uT3JUaHJvdyA9IHdpbmRvd0dldHRlcnMuZ2V0TG9jYXRpb25PclRocm93O1xuZXhwb3J0IGNvbnN0IGdldExvY2F0aW9uID0gd2luZG93R2V0dGVycy5nZXRMb2NhdGlvbjtcbmV4cG9ydCBjb25zdCBnZXRDcnlwdG9PclRocm93ID0gd2luZG93R2V0dGVycy5nZXRDcnlwdG9PclRocm93O1xuZXhwb3J0IGNvbnN0IGdldENyeXB0byA9IHdpbmRvd0dldHRlcnMuZ2V0Q3J5cHRvO1xuZXhwb3J0IGNvbnN0IGdldExvY2FsU3RvcmFnZU9yVGhyb3cgPSB3aW5kb3dHZXR0ZXJzLmdldExvY2FsU3RvcmFnZU9yVGhyb3c7XG5leHBvcnQgY29uc3QgZ2V0TG9jYWxTdG9yYWdlID0gd2luZG93R2V0dGVycy5nZXRMb2NhbFN0b3JhZ2U7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xpZW50TWV0YSgpIHtcbiAgICByZXR1cm4gd2luZG93TWV0YWRhdGEuZ2V0V2luZG93TWV0YWRhdGEoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyb3dzZXIuanMubWFwIiwiaW1wb3J0ICogYXMgc2FmZUpzb24gZnJvbSBcIkB3YWxsZXRjb25uZWN0L3NhZmUtanNvblwiO1xuZXhwb3J0IGNvbnN0IHNhZmVKc29uUGFyc2UgPSBzYWZlSnNvbi5zYWZlSnNvblBhcnNlO1xuZXhwb3J0IGNvbnN0IHNhZmVKc29uU3RyaW5naWZ5ID0gc2FmZUpzb24uc2FmZUpzb25TdHJpbmdpZnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29uLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBzYWZlSnNvblBhcnNlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBzYWZlIGpzb24gcGFyc2UgdmFsdWUgb2YgdHlwZSAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBzYWZlSnNvblN0cmluZ2lmeSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZSA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCB7IHNhZmVKc29uUGFyc2UsIHNhZmVKc29uU3RyaW5naWZ5IH0gZnJvbSBcIi4vanNvblwiO1xuaW1wb3J0IHsgZ2V0TG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4vYnJvd3NlclwiO1xuZXhwb3J0IGZ1bmN0aW9uIHNldExvY2FsKGtleSwgZGF0YSkge1xuICAgIGNvbnN0IHJhdyA9IHNhZmVKc29uU3RyaW5naWZ5KGRhdGEpO1xuICAgIGNvbnN0IGxvY2FsID0gZ2V0TG9jYWxTdG9yYWdlKCk7XG4gICAgaWYgKGxvY2FsKSB7XG4gICAgICAgIGxvY2FsLnNldEl0ZW0oa2V5LCByYXcpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbChrZXkpIHtcbiAgICBsZXQgZGF0YSA9IG51bGw7XG4gICAgbGV0IHJhdyA9IG51bGw7XG4gICAgY29uc3QgbG9jYWwgPSBnZXRMb2NhbFN0b3JhZ2UoKTtcbiAgICBpZiAobG9jYWwpIHtcbiAgICAgICAgcmF3ID0gbG9jYWwuZ2V0SXRlbShrZXkpO1xuICAgIH1cbiAgICBkYXRhID0gcmF3ID8gc2FmZUpzb25QYXJzZShyYXcpIDogcmF3O1xuICAgIHJldHVybiBkYXRhO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUxvY2FsKGtleSkge1xuICAgIGNvbnN0IGxvY2FsID0gZ2V0TG9jYWxTdG9yYWdlKCk7XG4gICAgaWYgKGxvY2FsKSB7XG4gICAgICAgIGxvY2FsLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2NhbC5qcy5tYXAiLCJpbXBvcnQgeyBzZXRMb2NhbCB9IGZyb20gXCIuL2xvY2FsXCI7XG5leHBvcnQgY29uc3QgbW9iaWxlTGlua0Nob2ljZUtleSA9IFwiV0FMTEVUQ09OTkVDVF9ERUVQTElOS19DSE9JQ0VcIjtcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRJT1NNb2JpbGUodXJpLCBlbnRyeSkge1xuICAgIGNvbnN0IGVuY29kZWRVcmkgPSBlbmNvZGVVUklDb21wb25lbnQodXJpKTtcbiAgICByZXR1cm4gZW50cnkudW5pdmVyc2FsTGlua1xuICAgICAgICA/IGAke2VudHJ5LnVuaXZlcnNhbExpbmt9L3djP3VyaT0ke2VuY29kZWRVcml9YFxuICAgICAgICA6IGVudHJ5LmRlZXBMaW5rXG4gICAgICAgICAgICA/IGAke2VudHJ5LmRlZXBMaW5rfSR7ZW50cnkuZGVlcExpbmsuZW5kc1dpdGgoXCI6XCIpID8gXCIvL1wiIDogXCIvXCJ9d2M/dXJpPSR7ZW5jb2RlZFVyaX1gXG4gICAgICAgICAgICA6IFwiXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gc2F2ZU1vYmlsZUxpbmtJbmZvKGRhdGEpIHtcbiAgICBjb25zdCBmb2N1c1VyaSA9IGRhdGEuaHJlZi5zcGxpdChcIj9cIilbMF07XG4gICAgc2V0TG9jYWwobW9iaWxlTGlua0Nob2ljZUtleSwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkYXRhKSwgeyBocmVmOiBmb2N1c1VyaSB9KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9iaWxlUmVnaXN0cnlFbnRyeShyZWdpc3RyeSwgbmFtZSkge1xuICAgIHJldHVybiByZWdpc3RyeS5maWx0ZXIoKGVudHJ5KSA9PiBlbnRyeS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMobmFtZS50b0xvd2VyQ2FzZSgpKSlbMF07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9iaWxlTGlua1JlZ2lzdHJ5KHJlZ2lzdHJ5LCB3aGl0ZWxpc3QpIHtcbiAgICBsZXQgbGlua3MgPSByZWdpc3RyeTtcbiAgICBpZiAod2hpdGVsaXN0KSB7XG4gICAgICAgIGxpbmtzID0gd2hpdGVsaXN0Lm1hcCgobmFtZSkgPT4gZ2V0TW9iaWxlUmVnaXN0cnlFbnRyeShyZWdpc3RyeSwgbmFtZSkpLmZpbHRlcihCb29sZWFuKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmtzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9iaWxlLmpzLm1hcCIsImNvbnN0IEFQSV9VUkwgPSBcImh0dHBzOi8vcmVnaXN0cnkud2FsbGV0Y29ubmVjdC5vcmdcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRXYWxsZXRSZWdpc3RyeVVybCgpIHtcbiAgICByZXR1cm4gQVBJX1VSTCArIFwiL2RhdGEvd2FsbGV0cy5qc29uXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGFwcFJlZ2lzdHJ5VXJsKCkge1xuICAgIHJldHVybiBBUElfVVJMICsgXCIvZGF0YS9kYXBwcy5qc29uXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBwTG9nb1VybChpZCkge1xuICAgIHJldHVybiBBUElfVVJMICsgXCIvbG9nby9zbS9cIiArIGlkICsgXCIuanBlZ1wiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE1vYmlsZVJlZ2lzdHJ5RW50cnkoZW50cnksIHBsYXRmb3JtID0gXCJtb2JpbGVcIikge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGVudHJ5Lm5hbWUgfHwgXCJcIixcbiAgICAgICAgc2hvcnROYW1lOiBlbnRyeS5tZXRhZGF0YS5zaG9ydE5hbWUgfHwgXCJcIixcbiAgICAgICAgY29sb3I6IGVudHJ5Lm1ldGFkYXRhLmNvbG9ycy5wcmltYXJ5IHx8IFwiXCIsXG4gICAgICAgIGxvZ286IGVudHJ5LmlkID8gZ2V0QXBwTG9nb1VybChlbnRyeS5pZCkgOiBcIlwiLFxuICAgICAgICB1bml2ZXJzYWxMaW5rOiBlbnRyeVtwbGF0Zm9ybV0udW5pdmVyc2FsIHx8IFwiXCIsXG4gICAgICAgIGRlZXBMaW5rOiBlbnRyeVtwbGF0Zm9ybV0ubmF0aXZlIHx8IFwiXCIsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRNb2JpbGVSZWdpc3RyeShyZWdpc3RyeSwgcGxhdGZvcm0gPSBcIm1vYmlsZVwiKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMocmVnaXN0cnkpXG4gICAgICAgIC5maWx0ZXIoZW50cnkgPT4gISFlbnRyeVtwbGF0Zm9ybV0udW5pdmVyc2FsIHx8ICEhZW50cnlbcGxhdGZvcm1dLm5hdGl2ZSlcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IGZvcm1hdE1vYmlsZVJlZ2lzdHJ5RW50cnkoZW50cnksIHBsYXRmb3JtKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWdpc3RyeS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVtb3ZlSGV4TGVhZGluZ1plcm9zID0gZXhwb3J0cy5zYW5pdGl6ZUhleCA9IGV4cG9ydHMuYWRkSGV4UHJlZml4ID0gZXhwb3J0cy5yZW1vdmVIZXhQcmVmaXggPSBleHBvcnRzLnBhZFJpZ2h0ID0gZXhwb3J0cy5wYWRMZWZ0ID0gZXhwb3J0cy5zYW5pdGl6ZUJ5dGVzID0gZXhwb3J0cy5zd2FwSGV4ID0gZXhwb3J0cy5zd2FwQnl0ZXMgPSBleHBvcnRzLnNwbGl0Qnl0ZXMgPSBleHBvcnRzLmNhbGNCeXRlTGVuZ3RoID0gZXhwb3J0cy50cmltUmlnaHQgPSBleHBvcnRzLnRyaW1MZWZ0ID0gZXhwb3J0cy5jb25jYXRBcnJheXMgPSBleHBvcnRzLmNvbmNhdEJ1ZmZlcnMgPSBleHBvcnRzLmdldEVuY29kaW5nID0gZXhwb3J0cy5nZXRUeXBlID0gZXhwb3J0cy5pc0FycmF5QnVmZmVyID0gZXhwb3J0cy5pc1R5cGVkQXJyYXkgPSBleHBvcnRzLmlzQnVmZmVyID0gZXhwb3J0cy5pc0hleFN0cmluZyA9IGV4cG9ydHMuaXNCaW5hcnlTdHJpbmcgPSBleHBvcnRzLmJpbmFyeVRvTnVtYmVyID0gZXhwb3J0cy5iaW5hcnlUb1V0ZjggPSBleHBvcnRzLmJpbmFyeVRvSGV4ID0gZXhwb3J0cy5iaW5hcnlUb0FycmF5ID0gZXhwb3J0cy5iaW5hcnlUb0J1ZmZlciA9IGV4cG9ydHMubnVtYmVyVG9CaW5hcnkgPSBleHBvcnRzLm51bWJlclRvVXRmOCA9IGV4cG9ydHMubnVtYmVyVG9IZXggPSBleHBvcnRzLm51bWJlclRvQXJyYXkgPSBleHBvcnRzLm51bWJlclRvQnVmZmVyID0gZXhwb3J0cy51dGY4VG9CaW5hcnkgPSBleHBvcnRzLnV0ZjhUb051bWJlciA9IGV4cG9ydHMudXRmOFRvSGV4ID0gZXhwb3J0cy51dGY4VG9BcnJheSA9IGV4cG9ydHMudXRmOFRvQnVmZmVyID0gZXhwb3J0cy5oZXhUb0JpbmFyeSA9IGV4cG9ydHMuaGV4VG9OdW1iZXIgPSBleHBvcnRzLmhleFRvVXRmOCA9IGV4cG9ydHMuaGV4VG9BcnJheSA9IGV4cG9ydHMuaGV4VG9CdWZmZXIgPSBleHBvcnRzLmFycmF5VG9CaW5hcnkgPSBleHBvcnRzLmFycmF5VG9OdW1iZXIgPSBleHBvcnRzLmFycmF5VG9VdGY4ID0gZXhwb3J0cy5hcnJheVRvSGV4ID0gZXhwb3J0cy5hcnJheVRvQnVmZmVyID0gZXhwb3J0cy5idWZmZXJUb0JpbmFyeSA9IGV4cG9ydHMuYnVmZmVyVG9OdW1iZXIgPSBleHBvcnRzLmJ1ZmZlclRvVXRmOCA9IGV4cG9ydHMuYnVmZmVyVG9IZXggPSBleHBvcnRzLmJ1ZmZlclRvQXJyYXkgPSB2b2lkIDA7XG5jb25zdCBpc190eXBlZGFycmF5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImlzLXR5cGVkYXJyYXlcIikpO1xuY29uc3QgdHlwZWRhcnJheV90b19idWZmZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwidHlwZWRhcnJheS10by1idWZmZXJcIikpO1xuY29uc3QgRU5DX0hFWCA9IFwiaGV4XCI7XG5jb25zdCBFTkNfVVRGOCA9IFwidXRmOFwiO1xuY29uc3QgRU5DX0JJTiA9IFwiYmluYXJ5XCI7XG5jb25zdCBUWVBFX0JVRkZFUiA9IFwiYnVmZmVyXCI7XG5jb25zdCBUWVBFX0FSUkFZID0gXCJhcnJheVwiO1xuY29uc3QgVFlQRV9UWVBFRF9BUlJBWSA9IFwidHlwZWQtYXJyYXlcIjtcbmNvbnN0IFRZUEVfQVJSQVlfQlVGRkVSID0gXCJhcnJheS1idWZmZXJcIjtcbmNvbnN0IFNUUklOR19aRVJPID0gXCIwXCI7XG5mdW5jdGlvbiBidWZmZXJUb0FycmF5KGJ1Zikge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWYpO1xufVxuZXhwb3J0cy5idWZmZXJUb0FycmF5ID0gYnVmZmVyVG9BcnJheTtcbmZ1bmN0aW9uIGJ1ZmZlclRvSGV4KGJ1ZiwgcHJlZml4ZWQgPSBmYWxzZSkge1xuICAgIGNvbnN0IGhleCA9IGJ1Zi50b1N0cmluZyhFTkNfSEVYKTtcbiAgICByZXR1cm4gcHJlZml4ZWQgPyBhZGRIZXhQcmVmaXgoaGV4KSA6IGhleDtcbn1cbmV4cG9ydHMuYnVmZmVyVG9IZXggPSBidWZmZXJUb0hleDtcbmZ1bmN0aW9uIGJ1ZmZlclRvVXRmOChidWYpIHtcbiAgICByZXR1cm4gYnVmLnRvU3RyaW5nKEVOQ19VVEY4KTtcbn1cbmV4cG9ydHMuYnVmZmVyVG9VdGY4ID0gYnVmZmVyVG9VdGY4O1xuZnVuY3Rpb24gYnVmZmVyVG9OdW1iZXIoYnVmKSB7XG4gICAgcmV0dXJuIGJ1Zi5yZWFkVUludEJFKDAsIGJ1Zi5sZW5ndGgpO1xufVxuZXhwb3J0cy5idWZmZXJUb051bWJlciA9IGJ1ZmZlclRvTnVtYmVyO1xuZnVuY3Rpb24gYnVmZmVyVG9CaW5hcnkoYnVmKSB7XG4gICAgcmV0dXJuIGFycmF5VG9CaW5hcnkoYnVmZmVyVG9BcnJheShidWYpKTtcbn1cbmV4cG9ydHMuYnVmZmVyVG9CaW5hcnkgPSBidWZmZXJUb0JpbmFyeTtcbmZ1bmN0aW9uIGFycmF5VG9CdWZmZXIoYXJyKSB7XG4gICAgcmV0dXJuIHR5cGVkYXJyYXlfdG9fYnVmZmVyXzEuZGVmYXVsdChhcnIpO1xufVxuZXhwb3J0cy5hcnJheVRvQnVmZmVyID0gYXJyYXlUb0J1ZmZlcjtcbmZ1bmN0aW9uIGFycmF5VG9IZXgoYXJyLCBwcmVmaXhlZCA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIGJ1ZmZlclRvSGV4KGFycmF5VG9CdWZmZXIoYXJyKSwgcHJlZml4ZWQpO1xufVxuZXhwb3J0cy5hcnJheVRvSGV4ID0gYXJyYXlUb0hleDtcbmZ1bmN0aW9uIGFycmF5VG9VdGY4KGFycikge1xuICAgIHJldHVybiBidWZmZXJUb1V0ZjgoYXJyYXlUb0J1ZmZlcihhcnIpKTtcbn1cbmV4cG9ydHMuYXJyYXlUb1V0ZjggPSBhcnJheVRvVXRmODtcbmZ1bmN0aW9uIGFycmF5VG9OdW1iZXIoYXJyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlclRvTnVtYmVyKGFycmF5VG9CdWZmZXIoYXJyKSk7XG59XG5leHBvcnRzLmFycmF5VG9OdW1iZXIgPSBhcnJheVRvTnVtYmVyO1xuZnVuY3Rpb24gYXJyYXlUb0JpbmFyeShhcnIpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShhcnIpXG4gICAgICAgIC5tYXAobnVtYmVyVG9CaW5hcnkpXG4gICAgICAgIC5qb2luKFwiXCIpO1xufVxuZXhwb3J0cy5hcnJheVRvQmluYXJ5ID0gYXJyYXlUb0JpbmFyeTtcbmZ1bmN0aW9uIGhleFRvQnVmZmVyKGhleCkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShyZW1vdmVIZXhQcmVmaXgoaGV4KSwgRU5DX0hFWCk7XG59XG5leHBvcnRzLmhleFRvQnVmZmVyID0gaGV4VG9CdWZmZXI7XG5mdW5jdGlvbiBoZXhUb0FycmF5KGhleCkge1xuICAgIHJldHVybiBidWZmZXJUb0FycmF5KGhleFRvQnVmZmVyKGhleCkpO1xufVxuZXhwb3J0cy5oZXhUb0FycmF5ID0gaGV4VG9BcnJheTtcbmZ1bmN0aW9uIGhleFRvVXRmOChoZXgpIHtcbiAgICByZXR1cm4gYnVmZmVyVG9VdGY4KGhleFRvQnVmZmVyKGhleCkpO1xufVxuZXhwb3J0cy5oZXhUb1V0ZjggPSBoZXhUb1V0Zjg7XG5mdW5jdGlvbiBoZXhUb051bWJlcihoZXgpIHtcbiAgICByZXR1cm4gYXJyYXlUb051bWJlcihoZXhUb0FycmF5KGhleCkpO1xufVxuZXhwb3J0cy5oZXhUb051bWJlciA9IGhleFRvTnVtYmVyO1xuZnVuY3Rpb24gaGV4VG9CaW5hcnkoaGV4KSB7XG4gICAgcmV0dXJuIGFycmF5VG9CaW5hcnkoaGV4VG9BcnJheShoZXgpKTtcbn1cbmV4cG9ydHMuaGV4VG9CaW5hcnkgPSBoZXhUb0JpbmFyeTtcbmZ1bmN0aW9uIHV0ZjhUb0J1ZmZlcih1dGY4KSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHV0ZjgsIEVOQ19VVEY4KTtcbn1cbmV4cG9ydHMudXRmOFRvQnVmZmVyID0gdXRmOFRvQnVmZmVyO1xuZnVuY3Rpb24gdXRmOFRvQXJyYXkodXRmOCkge1xuICAgIHJldHVybiBidWZmZXJUb0FycmF5KHV0ZjhUb0J1ZmZlcih1dGY4KSk7XG59XG5leHBvcnRzLnV0ZjhUb0FycmF5ID0gdXRmOFRvQXJyYXk7XG5mdW5jdGlvbiB1dGY4VG9IZXgodXRmOCwgcHJlZml4ZWQgPSBmYWxzZSkge1xuICAgIHJldHVybiBidWZmZXJUb0hleCh1dGY4VG9CdWZmZXIodXRmOCksIHByZWZpeGVkKTtcbn1cbmV4cG9ydHMudXRmOFRvSGV4ID0gdXRmOFRvSGV4O1xuZnVuY3Rpb24gdXRmOFRvTnVtYmVyKHV0ZjgpIHtcbiAgICBjb25zdCBudW0gPSBwYXJzZUludCh1dGY4LCAxMCk7XG4gICAgYXNzZXJ0KGlzRGVmaW5lZChudW0pLCBcIk51bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0c1wiKTtcbiAgICByZXR1cm4gbnVtO1xufVxuZXhwb3J0cy51dGY4VG9OdW1iZXIgPSB1dGY4VG9OdW1iZXI7XG5mdW5jdGlvbiB1dGY4VG9CaW5hcnkodXRmOCkge1xuICAgIHJldHVybiBhcnJheVRvQmluYXJ5KHV0ZjhUb0FycmF5KHV0ZjgpKTtcbn1cbmV4cG9ydHMudXRmOFRvQmluYXJ5ID0gdXRmOFRvQmluYXJ5O1xuZnVuY3Rpb24gbnVtYmVyVG9CdWZmZXIobnVtKSB7XG4gICAgcmV0dXJuIGJpbmFyeVRvQnVmZmVyKG51bWJlclRvQmluYXJ5KG51bSkpO1xufVxuZXhwb3J0cy5udW1iZXJUb0J1ZmZlciA9IG51bWJlclRvQnVmZmVyO1xuZnVuY3Rpb24gbnVtYmVyVG9BcnJheShudW0pIHtcbiAgICByZXR1cm4gYmluYXJ5VG9BcnJheShudW1iZXJUb0JpbmFyeShudW0pKTtcbn1cbmV4cG9ydHMubnVtYmVyVG9BcnJheSA9IG51bWJlclRvQXJyYXk7XG5mdW5jdGlvbiBudW1iZXJUb0hleChudW0sIHByZWZpeGVkKSB7XG4gICAgcmV0dXJuIGJpbmFyeVRvSGV4KG51bWJlclRvQmluYXJ5KG51bSksIHByZWZpeGVkKTtcbn1cbmV4cG9ydHMubnVtYmVyVG9IZXggPSBudW1iZXJUb0hleDtcbmZ1bmN0aW9uIG51bWJlclRvVXRmOChudW0pIHtcbiAgICByZXR1cm4gYCR7bnVtfWA7XG59XG5leHBvcnRzLm51bWJlclRvVXRmOCA9IG51bWJlclRvVXRmODtcbmZ1bmN0aW9uIG51bWJlclRvQmluYXJ5KG51bSkge1xuICAgIGNvbnN0IGJpbiA9IChudW0gPj4+IDApLnRvU3RyaW5nKDIpO1xuICAgIHJldHVybiBzYW5pdGl6ZUJ5dGVzKGJpbik7XG59XG5leHBvcnRzLm51bWJlclRvQmluYXJ5ID0gbnVtYmVyVG9CaW5hcnk7XG5mdW5jdGlvbiBiaW5hcnlUb0J1ZmZlcihiaW4pIHtcbiAgICByZXR1cm4gYXJyYXlUb0J1ZmZlcihiaW5hcnlUb0FycmF5KGJpbikpO1xufVxuZXhwb3J0cy5iaW5hcnlUb0J1ZmZlciA9IGJpbmFyeVRvQnVmZmVyO1xuZnVuY3Rpb24gYmluYXJ5VG9BcnJheShiaW4pIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc3BsaXRCeXRlcyhiaW4pLm1hcCh4ID0+IHBhcnNlSW50KHgsIDIpKSk7XG59XG5leHBvcnRzLmJpbmFyeVRvQXJyYXkgPSBiaW5hcnlUb0FycmF5O1xuZnVuY3Rpb24gYmluYXJ5VG9IZXgoYmluLCBwcmVmaXhlZCkge1xuICAgIHJldHVybiBhcnJheVRvSGV4KGJpbmFyeVRvQXJyYXkoYmluKSwgcHJlZml4ZWQpO1xufVxuZXhwb3J0cy5iaW5hcnlUb0hleCA9IGJpbmFyeVRvSGV4O1xuZnVuY3Rpb24gYmluYXJ5VG9VdGY4KGJpbikge1xuICAgIHJldHVybiBhcnJheVRvVXRmOChiaW5hcnlUb0FycmF5KGJpbikpO1xufVxuZXhwb3J0cy5iaW5hcnlUb1V0ZjggPSBiaW5hcnlUb1V0Zjg7XG5mdW5jdGlvbiBiaW5hcnlUb051bWJlcihiaW4pIHtcbiAgICByZXR1cm4gYXJyYXlUb051bWJlcihiaW5hcnlUb0FycmF5KGJpbikpO1xufVxuZXhwb3J0cy5iaW5hcnlUb051bWJlciA9IGJpbmFyeVRvTnVtYmVyO1xuZnVuY3Rpb24gaXNCaW5hcnlTdHJpbmcoc3RyKSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIgfHwgIW5ldyBSZWdFeHAoL15bMDFdKyQvKS50ZXN0KHN0cikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoc3RyLmxlbmd0aCAlIDggIT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuaXNCaW5hcnlTdHJpbmcgPSBpc0JpbmFyeVN0cmluZztcbmZ1bmN0aW9uIGlzSGV4U3RyaW5nKHN0ciwgbGVuZ3RoKSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIgfHwgIXN0ci5tYXRjaCgvXjB4WzAtOUEtRmEtZl0qJC8pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGxlbmd0aCAmJiBzdHIubGVuZ3RoICE9PSAyICsgMiAqIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5pc0hleFN0cmluZyA9IGlzSGV4U3RyaW5nO1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcih2YWwpO1xufVxuZXhwb3J0cy5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuZnVuY3Rpb24gaXNUeXBlZEFycmF5KHZhbCkge1xuICAgIHJldHVybiBpc190eXBlZGFycmF5XzEuZGVmYXVsdC5zdHJpY3QodmFsKSAmJiAhaXNCdWZmZXIodmFsKTtcbn1cbmV4cG9ydHMuaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgICByZXR1cm4gKCFpc1R5cGVkQXJyYXkodmFsKSAmJlxuICAgICAgICAhaXNCdWZmZXIodmFsKSAmJlxuICAgICAgICB0eXBlb2YgdmFsLmJ5dGVMZW5ndGggIT09IFwidW5kZWZpbmVkXCIpO1xufVxuZXhwb3J0cy5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbmZ1bmN0aW9uIGdldFR5cGUodmFsKSB7XG4gICAgaWYgKGlzQnVmZmVyKHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIFRZUEVfQlVGRkVSO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1R5cGVkQXJyYXkodmFsKSkge1xuICAgICAgICByZXR1cm4gVFlQRV9UWVBFRF9BUlJBWTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheUJ1ZmZlcih2YWwpKSB7XG4gICAgICAgIHJldHVybiBUWVBFX0FSUkFZX0JVRkZFUjtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHJldHVybiBUWVBFX0FSUkFZO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWw7XG4gICAgfVxufVxuZXhwb3J0cy5nZXRUeXBlID0gZ2V0VHlwZTtcbmZ1bmN0aW9uIGdldEVuY29kaW5nKHN0cikge1xuICAgIGlmIChpc0JpbmFyeVN0cmluZyhzdHIpKSB7XG4gICAgICAgIHJldHVybiBFTkNfQklOO1xuICAgIH1cbiAgICBpZiAoaXNIZXhTdHJpbmcoc3RyKSkge1xuICAgICAgICByZXR1cm4gRU5DX0hFWDtcbiAgICB9XG4gICAgcmV0dXJuIEVOQ19VVEY4O1xufVxuZXhwb3J0cy5nZXRFbmNvZGluZyA9IGdldEVuY29kaW5nO1xuZnVuY3Rpb24gY29uY2F0QnVmZmVycyguLi5hcmdzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gQnVmZmVyLmNvbmNhdChhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5jb25jYXRCdWZmZXJzID0gY29uY2F0QnVmZmVycztcbmZ1bmN0aW9uIGNvbmNhdEFycmF5cyguLi5hcmdzKSB7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGFyZ3MuZm9yRWFjaChhcmcgPT4gKHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoQXJyYXkuZnJvbShhcmcpKSkpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbLi4ucmVzdWx0XSk7XG59XG5leHBvcnRzLmNvbmNhdEFycmF5cyA9IGNvbmNhdEFycmF5cztcbmZ1bmN0aW9uIHRyaW1MZWZ0KGRhdGEsIGxlbmd0aCkge1xuICAgIGNvbnN0IGRpZmYgPSBkYXRhLmxlbmd0aCAtIGxlbmd0aDtcbiAgICBpZiAoZGlmZiA+IDApIHtcbiAgICAgICAgZGF0YSA9IGRhdGEuc2xpY2UoZGlmZik7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuZXhwb3J0cy50cmltTGVmdCA9IHRyaW1MZWZ0O1xuZnVuY3Rpb24gdHJpbVJpZ2h0KGRhdGEsIGxlbmd0aCkge1xuICAgIHJldHVybiBkYXRhLnNsaWNlKDAsIGxlbmd0aCk7XG59XG5leHBvcnRzLnRyaW1SaWdodCA9IHRyaW1SaWdodDtcbmZ1bmN0aW9uIGNhbGNCeXRlTGVuZ3RoKGxlbmd0aCwgYnl0ZVNpemUgPSA4KSB7XG4gICAgY29uc3QgcmVtYWluZGVyID0gbGVuZ3RoICUgYnl0ZVNpemU7XG4gICAgcmV0dXJuIHJlbWFpbmRlclxuICAgICAgICA/ICgobGVuZ3RoIC0gcmVtYWluZGVyKSAvIGJ5dGVTaXplKSAqIGJ5dGVTaXplICsgYnl0ZVNpemVcbiAgICAgICAgOiBsZW5ndGg7XG59XG5leHBvcnRzLmNhbGNCeXRlTGVuZ3RoID0gY2FsY0J5dGVMZW5ndGg7XG5mdW5jdGlvbiBzcGxpdEJ5dGVzKHN0ciwgYnl0ZVNpemUgPSA4KSB7XG4gICAgY29uc3QgYnl0ZXMgPSBzYW5pdGl6ZUJ5dGVzKHN0cikubWF0Y2gobmV3IFJlZ0V4cChgLnske2J5dGVTaXplfX1gLCBcImdpXCIpKTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShieXRlcyB8fCBbXSk7XG59XG5leHBvcnRzLnNwbGl0Qnl0ZXMgPSBzcGxpdEJ5dGVzO1xuZnVuY3Rpb24gc3dhcEJ5dGVzKHN0cikge1xuICAgIHJldHVybiBzcGxpdEJ5dGVzKHN0cilcbiAgICAgICAgLm1hcChyZXZlcnNlU3RyaW5nKVxuICAgICAgICAuam9pbihcIlwiKTtcbn1cbmV4cG9ydHMuc3dhcEJ5dGVzID0gc3dhcEJ5dGVzO1xuZnVuY3Rpb24gc3dhcEhleChzdHIpIHtcbiAgICByZXR1cm4gYmluYXJ5VG9IZXgoc3dhcEJ5dGVzKGhleFRvQmluYXJ5KHN0cikpKTtcbn1cbmV4cG9ydHMuc3dhcEhleCA9IHN3YXBIZXg7XG5mdW5jdGlvbiBzYW5pdGl6ZUJ5dGVzKHN0ciwgYnl0ZVNpemUgPSA4LCBwYWRkaW5nID0gU1RSSU5HX1pFUk8pIHtcbiAgICByZXR1cm4gcGFkTGVmdChzdHIsIGNhbGNCeXRlTGVuZ3RoKHN0ci5sZW5ndGgsIGJ5dGVTaXplKSwgcGFkZGluZyk7XG59XG5leHBvcnRzLnNhbml0aXplQnl0ZXMgPSBzYW5pdGl6ZUJ5dGVzO1xuZnVuY3Rpb24gcGFkTGVmdChzdHIsIGxlbmd0aCwgcGFkZGluZyA9IFNUUklOR19aRVJPKSB7XG4gICAgcmV0dXJuIHBhZFN0cmluZyhzdHIsIGxlbmd0aCwgdHJ1ZSwgcGFkZGluZyk7XG59XG5leHBvcnRzLnBhZExlZnQgPSBwYWRMZWZ0O1xuZnVuY3Rpb24gcGFkUmlnaHQoc3RyLCBsZW5ndGgsIHBhZGRpbmcgPSBTVFJJTkdfWkVSTykge1xuICAgIHJldHVybiBwYWRTdHJpbmcoc3RyLCBsZW5ndGgsIGZhbHNlLCBwYWRkaW5nKTtcbn1cbmV4cG9ydHMucGFkUmlnaHQgPSBwYWRSaWdodDtcbmZ1bmN0aW9uIHJlbW92ZUhleFByZWZpeChoZXgpIHtcbiAgICByZXR1cm4gaGV4LnJlcGxhY2UoL14weC8sIFwiXCIpO1xufVxuZXhwb3J0cy5yZW1vdmVIZXhQcmVmaXggPSByZW1vdmVIZXhQcmVmaXg7XG5mdW5jdGlvbiBhZGRIZXhQcmVmaXgoaGV4KSB7XG4gICAgcmV0dXJuIGhleC5zdGFydHNXaXRoKFwiMHhcIikgPyBoZXggOiBgMHgke2hleH1gO1xufVxuZXhwb3J0cy5hZGRIZXhQcmVmaXggPSBhZGRIZXhQcmVmaXg7XG5mdW5jdGlvbiBzYW5pdGl6ZUhleChoZXgpIHtcbiAgICBoZXggPSByZW1vdmVIZXhQcmVmaXgoaGV4KTtcbiAgICBoZXggPSBzYW5pdGl6ZUJ5dGVzKGhleCwgMik7XG4gICAgaWYgKGhleCkge1xuICAgICAgICBoZXggPSBhZGRIZXhQcmVmaXgoaGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIGhleDtcbn1cbmV4cG9ydHMuc2FuaXRpemVIZXggPSBzYW5pdGl6ZUhleDtcbmZ1bmN0aW9uIHJlbW92ZUhleExlYWRpbmdaZXJvcyhoZXgpIHtcbiAgICBjb25zdCBwcmVmaXhlZCA9IGhleC5zdGFydHNXaXRoKFwiMHhcIik7XG4gICAgaGV4ID0gcmVtb3ZlSGV4UHJlZml4KGhleCk7XG4gICAgaGV4ID0gaGV4LnN0YXJ0c1dpdGgoU1RSSU5HX1pFUk8pID8gaGV4LnN1YnN0cmluZygxKSA6IGhleDtcbiAgICByZXR1cm4gcHJlZml4ZWQgPyBhZGRIZXhQcmVmaXgoaGV4KSA6IGhleDtcbn1cbmV4cG9ydHMucmVtb3ZlSGV4TGVhZGluZ1plcm9zID0gcmVtb3ZlSGV4TGVhZGluZ1plcm9zO1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuICFpc1VuZGVmaW5lZCh2YWx1ZSk7XG59XG5mdW5jdGlvbiBhc3NlcnQoYXNzZXJ0aW9uLCBlcnJvck1lc3NhZ2UpIHtcbiAgICBpZiAoIWFzc2VydGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXZlcnNlU3RyaW5nKHN0cikge1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnNwbGl0KFwiXCIpXG4gICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiBwYWRTdHJpbmcoc3RyLCBsZW5ndGgsIGxlZnQsIHBhZGRpbmcgPSBTVFJJTkdfWkVSTykge1xuICAgIGNvbnN0IGRpZmYgPSBsZW5ndGggLSBzdHIubGVuZ3RoO1xuICAgIGxldCByZXN1bHQgPSBzdHI7XG4gICAgaWYgKGRpZmYgPiAwKSB7XG4gICAgICAgIGNvbnN0IHBhZCA9IHBhZGRpbmcucmVwZWF0KGRpZmYpO1xuICAgICAgICByZXN1bHQgPSBsZWZ0ID8gcGFkICsgc3RyIDogc3RyICsgcGFkO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSA9IGV4cG9ydHMuZ2V0U3VidGxlQ3J5cHRvID0gZXhwb3J0cy5nZXRCcm93ZXJDcnlwdG8gPSB2b2lkIDA7XG5mdW5jdGlvbiBnZXRCcm93ZXJDcnlwdG8oKSB7XG4gICAgcmV0dXJuIChnbG9iYWwgPT09IG51bGwgfHwgZ2xvYmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbG9iYWwuY3J5cHRvKSB8fCAoZ2xvYmFsID09PSBudWxsIHx8IGdsb2JhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ2xvYmFsLm1zQ3J5cHRvKSB8fCB7fTtcbn1cbmV4cG9ydHMuZ2V0QnJvd2VyQ3J5cHRvID0gZ2V0QnJvd2VyQ3J5cHRvO1xuZnVuY3Rpb24gZ2V0U3VidGxlQ3J5cHRvKCkge1xuICAgIGNvbnN0IGJyb3dzZXJDcnlwdG8gPSBnZXRCcm93ZXJDcnlwdG8oKTtcbiAgICByZXR1cm4gYnJvd3NlckNyeXB0by5zdWJ0bGUgfHwgYnJvd3NlckNyeXB0by53ZWJraXRTdWJ0bGU7XG59XG5leHBvcnRzLmdldFN1YnRsZUNyeXB0byA9IGdldFN1YnRsZUNyeXB0bztcbmZ1bmN0aW9uIGlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSgpIHtcbiAgICByZXR1cm4gISFnZXRCcm93ZXJDcnlwdG8oKSAmJiAhIWdldFN1YnRsZUNyeXB0bygpO1xufVxuZXhwb3J0cy5pc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGUgPSBpc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG8uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQnJvd3NlciA9IGV4cG9ydHMuaXNOb2RlID0gZXhwb3J0cy5pc1JlYWN0TmF0aXZlID0gdm9pZCAwO1xuZnVuY3Rpb24gaXNSZWFjdE5hdGl2ZSgpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSBcIlJlYWN0TmF0aXZlXCIpO1xufVxuZXhwb3J0cy5pc1JlYWN0TmF0aXZlID0gaXNSZWFjdE5hdGl2ZTtcbmZ1bmN0aW9uIGlzTm9kZSgpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT09IFwidW5kZWZpbmVkXCIpO1xufVxuZXhwb3J0cy5pc05vZGUgPSBpc05vZGU7XG5mdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XG4gICAgcmV0dXJuICFpc1JlYWN0TmF0aXZlKCkgJiYgIWlzTm9kZSgpO1xufVxuZXhwb3J0cy5pc0Jyb3dzZXIgPSBpc0Jyb3dzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnYuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY3J5cHRvXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lbnZcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHByZWZpeCA9ICd+JztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBzdG9yYWdlIGZvciBvdXIgYEVFYCBvYmplY3RzLlxuICogQW4gYEV2ZW50c2AgaW5zdGFuY2UgaXMgYSBwbGFpbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBhcmUgZXZlbnQgbmFtZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFdmVudHMoKSB7fVxuXG4vL1xuLy8gV2UgdHJ5IHRvIG5vdCBpbmhlcml0IGZyb20gYE9iamVjdC5wcm90b3R5cGVgLiBJbiBzb21lIGVuZ2luZXMgY3JlYXRpbmcgYW5cbi8vIGluc3RhbmNlIGluIHRoaXMgd2F5IGlzIGZhc3RlciB0aGFuIGNhbGxpbmcgYE9iamVjdC5jcmVhdGUobnVsbClgIGRpcmVjdGx5LlxuLy8gSWYgYE9iamVjdC5jcmVhdGUobnVsbClgIGlzIG5vdCBzdXBwb3J0ZWQgd2UgcHJlZml4IHRoZSBldmVudCBuYW1lcyB3aXRoIGFcbi8vIGNoYXJhY3RlciB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYnVpbHQtaW4gb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdFxuLy8gb3ZlcnJpZGRlbiBvciB1c2VkIGFzIGFuIGF0dGFjayB2ZWN0b3IuXG4vL1xuaWYgKE9iamVjdC5jcmVhdGUpIHtcbiAgRXZlbnRzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy9cbiAgLy8gVGhpcyBoYWNrIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBgX19wcm90b19fYCBwcm9wZXJ0eSBpcyBzdGlsbCBpbmhlcml0ZWQgaW5cbiAgLy8gc29tZSBvbGQgYnJvd3NlcnMgbGlrZSBBbmRyb2lkIDQsIGlQaG9uZSA1LjEsIE9wZXJhIDExIGFuZCBTYWZhcmkgNS5cbiAgLy9cbiAgaWYgKCFuZXcgRXZlbnRzKCkuX19wcm90b19fKSBwcmVmaXggPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBldmVudCBsaXN0ZW5lci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBbb25jZT1mYWxzZV0gU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRUUoZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdGhpcy5mbiA9IGZuO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLm9uY2UgPSBvbmNlIHx8IGZhbHNlO1xufVxuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgZW1pdHRlciwgb25jZSlcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XSkgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lciwgZW1pdHRlci5fZXZlbnRzQ291bnQrKztcbiAgZWxzZSBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdLmZuKSBlbWl0dGVyLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IFtlbWl0dGVyLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJdO1xuXG4gIHJldHVybiBlbWl0dGVyO1xufVxuXG4vKipcbiAqIENsZWFyIGV2ZW50IGJ5IG5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldnQgVGhlIEV2ZW50IG5hbWUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjbGVhckV2ZW50KGVtaXR0ZXIsIGV2dCkge1xuICBpZiAoLS1lbWl0dGVyLl9ldmVudHNDb3VudCA9PT0gMCkgZW1pdHRlci5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICBlbHNlIGRlbGV0ZSBlbWl0dGVyLl9ldmVudHNbZXZ0XTtcbn1cblxuLyoqXG4gKiBNaW5pbWFsIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZSB0aGF0IGlzIG1vbGRlZCBhZ2FpbnN0IHRoZSBOb2RlLmpzXG4gKiBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IGxpc3RpbmcgdGhlIGV2ZW50cyBmb3Igd2hpY2ggdGhlIGVtaXR0ZXIgaGFzIHJlZ2lzdGVyZWRcbiAqIGxpc3RlbmVycy5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHZhciBuYW1lcyA9IFtdXG4gICAgLCBldmVudHNcbiAgICAsIG5hbWU7XG5cbiAgaWYgKHRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSByZXR1cm4gbmFtZXM7XG5cbiAgZm9yIChuYW1lIGluIChldmVudHMgPSB0aGlzLl9ldmVudHMpKSB7XG4gICAgaWYgKGhhcy5jYWxsKGV2ZW50cywgbmFtZSkpIG5hbWVzLnB1c2gocHJlZml4ID8gbmFtZS5zbGljZSgxKSA6IG5hbWUpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICByZXR1cm4gbmFtZXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZXZlbnRzKSk7XG4gIH1cblxuICByZXR1cm4gbmFtZXM7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBoYW5kbGVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghaGFuZGxlcnMpIHJldHVybiBbXTtcbiAgaWYgKGhhbmRsZXJzLmZuKSByZXR1cm4gW2hhbmRsZXJzLmZuXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGhhbmRsZXJzLmxlbmd0aCwgZWUgPSBuZXcgQXJyYXkobCk7IGkgPCBsOyBpKyspIHtcbiAgICBlZVtpXSA9IGhhbmRsZXJzW2ldLmZuO1xuICB9XG5cbiAgcmV0dXJuIGVlO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIG51bWJlciBvZiBsaXN0ZW5lcnMgbGlzdGVuaW5nIHRvIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWJlciBvZiBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIGxpc3RlbmVyQ291bnQoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghbGlzdGVuZXJzKSByZXR1cm4gMDtcbiAgaWYgKGxpc3RlbmVycy5mbikgcmV0dXJuIDE7XG4gIHJldHVybiBsaXN0ZW5lcnMubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBDYWxscyBlYWNoIG9mIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBldmVudCBoYWQgbGlzdGVuZXJzLCBlbHNlIGBmYWxzZWAuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdXG4gICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBhcmdzXG4gICAgLCBpO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVycy5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMTogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgNDogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMiwgYTMpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWFyZ3MpIGZvciAoaiA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBhcmdzW2ogLSAxXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2ldLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIEFkZCBhIG9uZS10aW1lIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCB0cnVlKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBsaXN0ZW5lcnMgb2YgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgbWF0Y2ggdGhpcyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgaGF2ZSB0aGlzIGNvbnRleHQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgT25seSByZW1vdmUgb25lLXRpbWUgbGlzdGVuZXJzLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiB0aGlzO1xuICBpZiAoIWZuKSB7XG4gICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAoXG4gICAgICBsaXN0ZW5lcnMuZm4gPT09IGZuICYmXG4gICAgICAoIW9uY2UgfHwgbGlzdGVuZXJzLm9uY2UpICYmXG4gICAgICAoIWNvbnRleHQgfHwgbGlzdGVuZXJzLmNvbnRleHQgPT09IGNvbnRleHQpXG4gICAgKSB7XG4gICAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwLCBldmVudHMgPSBbXSwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGxpc3RlbmVyc1tpXS5mbiAhPT0gZm4gfHxcbiAgICAgICAgKG9uY2UgJiYgIWxpc3RlbmVyc1tpXS5vbmNlKSB8fFxuICAgICAgICAoY29udGV4dCAmJiBsaXN0ZW5lcnNbaV0uY29udGV4dCAhPT0gY29udGV4dClcbiAgICAgICkge1xuICAgICAgICBldmVudHMucHVzaChsaXN0ZW5lcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gUmVzZXQgdGhlIGFycmF5LCBvciByZW1vdmUgaXQgY29tcGxldGVseSBpZiB3ZSBoYXZlIG5vIG1vcmUgbGlzdGVuZXJzLlxuICAgIC8vXG4gICAgaWYgKGV2ZW50cy5sZW5ndGgpIHRoaXMuX2V2ZW50c1tldnRdID0gZXZlbnRzLmxlbmd0aCA9PT0gMSA/IGV2ZW50c1swXSA6IGV2ZW50cztcbiAgICBlbHNlIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYWxsIGxpc3RlbmVycywgb3IgdGhvc2Ugb2YgdGhlIHNwZWNpZmllZCBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gW2V2ZW50XSBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dDtcblxuICBpZiAoZXZlbnQpIHtcbiAgICBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuICAgIGlmICh0aGlzLl9ldmVudHNbZXZ0XSkgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBBbGlhcyBtZXRob2RzIG5hbWVzIGJlY2F1c2UgcGVvcGxlIHJvbGwgbGlrZSB0aGF0LlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBwcmVmaXguXG4vL1xuRXZlbnRFbWl0dGVyLnByZWZpeGVkID0gcHJlZml4O1xuXG4vL1xuLy8gQWxsb3cgYEV2ZW50RW1pdHRlcmAgdG8gYmUgaW1wb3J0ZWQgYXMgbW9kdWxlIG5hbWVzcGFjZS5cbi8vXG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbW9kdWxlKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xufVxuIiwiZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnZhciBicm93c2VyVXRpbHMgPSByZXF1aXJlKCdAd2FsbGV0Y29ubmVjdC9icm93c2VyLXV0aWxzJyk7XG52YXIgUVJDb2RlID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3FyY29kZScpKTtcbnZhciBjb3B5ID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ2NvcHktdG8tY2xpcGJvYXJkJykpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncHJlYWN0L2NvbXBhdCcpO1xuXG5mdW5jdGlvbiBvcGVuKHVyaSkge1xuICBRUkNvZGUudG9TdHJpbmcodXJpLCB7XG4gICAgdHlwZTogXCJ0ZXJtaW5hbFwiXG4gIH0pLnRoZW4oY29uc29sZS5sb2cpO1xufVxuXG52YXIgV0FMTEVUQ09OTkVDVF9TVFlMRV9TSEVFVCA9IFwiOnJvb3Qge1xcbiAgLS1hbmltYXRpb24tZHVyYXRpb246IDMwMG1zO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIGZhZGVJbiB7XFxuICBmcm9tIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gIH1cXG4gIHRvIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gIH1cXG59XFxuXFxuQGtleWZyYW1lcyBmYWRlT3V0IHtcXG4gIGZyb20ge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgfVxcbiAgdG8ge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgfVxcbn1cXG5cXG4uYW5pbWF0ZWQge1xcbiAgYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1hbmltYXRpb24tZHVyYXRpb24pO1xcbiAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcXG59XFxuXFxuLmZhZGVJbiB7XFxuICBhbmltYXRpb24tbmFtZTogZmFkZUluO1xcbn1cXG5cXG4uZmFkZU91dCB7XFxuICBhbmltYXRpb24tbmFtZTogZmFkZU91dDtcXG59XFxuXFxuI3dhbGxldGNvbm5lY3Qtd3JhcHBlciB7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGxlZnQ6IDA7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbiAgd2lkdGg6IDEwMCU7XFxuICB6LWluZGV4OiA5OTk5OTk5OTk5OTk5OTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2hlYWRlckxvZ28ge1xcbiAgaGVpZ2h0OiAyMXB4O1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9faGVhZGVyIHAge1xcbiAgY29sb3I6ICNmZmZmZmY7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleDogMTtcXG4gIG1hcmdpbi1sZWZ0OiA1cHg7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19jbG9zZV9fd3JhcHBlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDBweDtcXG4gIHJpZ2h0OiAwcHg7XFxuICB6LWluZGV4OiAxMDAwMDtcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcbiAgYm9yZGVyLXJhZGl1czogMjZweDtcXG4gIHBhZGRpbmc6IDZweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB3aWR0aDogMjZweDtcXG4gIGhlaWdodDogMjZweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Nsb3NlX19pY29uIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRvcDogN3B4O1xcbiAgcmlnaHQ6IDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fY2xvc2VfX2xpbmUxIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiKDQ4LCA1MiwgNTkpO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fY2xvc2VfX2xpbmUyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiKDQ4LCA1MiwgNTkpO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1xcmNvZGVfX2Jhc2Uge1xcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xcbiAgYmFja2dyb3VuZDogcmdiYSgzNywgNDEsIDQ2LCAwLjk1KTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGxlZnQ6IDA7XFxuICBwb2ludGVyLWV2ZW50czogYXV0bztcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIHRyYW5zaXRpb246IDAuNHMgY3ViaWMtYmV6aWVyKDAuMTksIDEsIDAuMjIsIDEpO1xcbiAgd2lkdGg6IDEwMCU7XFxuICB3aWxsLWNoYW5nZTogb3BhY2l0eTtcXG4gIHBhZGRpbmc6IDQwcHg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1xcmNvZGVfX3RleHQge1xcbiAgY29sb3I6IHJnYmEoNjAsIDY2LCA4MiwgMC42KTtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBsZXR0ZXItc3BhY2luZzogMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjE4NzVlbTtcXG4gIG1hcmdpbjogMTBweCAwIDIwcHggMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAud2FsbGV0Y29ubmVjdC1xcmNvZGVfX3RleHQge1xcbiAgICBmb250LXNpemU6IDR2dztcXG4gIH1cXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkge1xcbiAgLndhbGxldGNvbm5lY3QtcXJjb2RlX190ZXh0IHtcXG4gICAgZm9udC1zaXplOiAxNHB4O1xcbiAgfVxcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1xcmNvZGVfX2ltYWdlIHtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAzMHB4KTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBjdXJzb3I6IG5vbmU7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtcXJjb2RlX19ub3RpZmljYXRpb24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgcGFkZGluZzogMTZweCAyMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMTZweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xcbiAgYmFja2dyb3VuZDogd2hpdGU7XFxuICBjb2xvcjogYmxhY2s7XFxuICBtYXJnaW4tYm90dG9tOiAtNjBweDtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LXFyY29kZV9fbm90aWZpY2F0aW9uLm5vdGlmaWNhdGlvbl9fc2hvdyB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAud2FsbGV0Y29ubmVjdC1tb2RhbF9faGVhZGVyIHtcXG4gICAgaGVpZ2h0OiAxMzBweDtcXG4gIH1cXG4gIC53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlIHtcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxuICB9XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2Utd2lkdGg6IDQxNXB4KSBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gICNjb250ZW50IHtcXG4gICAgbWF4LXdpZHRoOiA3NjhweDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzNzVweCkgYW5kIChtYXgtd2lkdGg6IDQxNXB4KSB7XFxuICAjY29udGVudCB7XFxuICAgIG1heC13aWR0aDogNDE0cHg7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB9XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzIwcHgpIGFuZCAobWF4LXdpZHRoOiAzNzVweCkge1xcbiAgI2NvbnRlbnQge1xcbiAgICBtYXgtd2lkdGg6IDM3NXB4O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDMyMHB4KSB7XFxuICAjY29udGVudCB7XFxuICAgIG1heC13aWR0aDogMzIwcHg7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB9XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlIHtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgYmFja2dyb3VuZDogI2ZmZmZmZjtcXG4gIGJvcmRlci1yYWRpdXM6IDI0cHg7XFxuICBib3gtc2hhZG93OiAwIDEwcHggNTBweCA1cHggcmdiYSgwLCAwLCAwLCAwLjQpO1xcbiAgZm9udC1mYW1pbHk6IHVpLXJvdW5kZWQsIFxcXCJTRiBQcm8gUm91bmRlZFxcXCIsIFxcXCJTRiBQcm8gVGV4dFxcXCIsIG1lZGl1bS1jb250ZW50LXNhbnMtc2VyaWYtZm9udCxcXG4gICAgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCB1aS1zYW5zLXNlcmlmLCBcXFwiU2Vnb2UgVUlcXFwiLCBSb2JvdG8sIE94eWdlbiwgVWJ1bnR1LCBDYW50YXJlbGwsXFxuICAgIFxcXCJPcGVuIFNhbnNcXFwiLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBzYW5zLXNlcmlmO1xcbiAgbWFyZ2luLXRvcDogNDFweDtcXG4gIHBhZGRpbmc6IDI0cHggMjRweCAyMnB4O1xcbiAgcG9pbnRlci1ldmVudHM6IGF1dG87XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0cmFuc2l0aW9uOiAwLjRzIGN1YmljLWJlemllcigwLjE5LCAxLCAwLjIyLCAxKTtcXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XFxuICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcXG4gIHRvcDogNTAlO1xcbiAgbWF4LXdpZHRoOiA1MDBweDtcXG4gIG1hcmdpbjogYXV0bztcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkge1xcbiAgLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2Uge1xcbiAgICBwYWRkaW5nOiAyNHB4IDEycHg7XFxuICB9XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlIC5oaWRkZW4ge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDE1MCUpO1xcbiAgdHJhbnNpdGlvbjogMC4xMjVzIGN1YmljLWJlemllcigwLjQsIDAsIDEsIDEpO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9faGVhZGVyIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAyNnB4O1xcbiAgbGVmdDogMDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogLTQycHg7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2UgLndjLWxvZ28ge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDI2cHg7XFxuICBtYXJnaW4tdG9wOiAxNXB4O1xcbiAgcGFkZGluZy1ib3R0b206IDE1cHg7XFxuICBwb2ludGVyLWV2ZW50czogYXV0bztcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2UgLndjLWxvZ28gZGl2IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzMzk5ZmY7XFxuICBoZWlnaHQ6IDIxcHg7XFxuICBtYXJnaW4tcmlnaHQ6IDVweDtcXG4gIG1hc2staW1hZ2U6IHVybChcXFwiaW1hZ2VzL3djLWxvZ28uc3ZnXFxcIikgY2VudGVyIG5vLXJlcGVhdDtcXG4gIHdpZHRoOiAzMnB4O1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZSAud2MtbG9nbyBwIHtcXG4gIGNvbG9yOiAjZmZmZmZmO1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2UgaDIge1xcbiAgY29sb3I6IHJnYmEoNjAsIDY2LCA4MiwgMC42KTtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBsZXR0ZXItc3BhY2luZzogMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjE4NzVlbTtcXG4gIG1hcmdpbjogMCAwIDE5cHggMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93IHtcXG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiAyMHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogNTZweDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIHBhZGRpbmc6IDAgMTVweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG1hcmdpbjogMHB4IDBweCA4cHg7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgdHJhbnNpdGlvbjogMC4xNXMgY3ViaWMtYmV6aWVyKDAuMjUsIDAuNDYsIDAuNDUsIDAuOTQpO1xcbiAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3Jvdzpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDYwLCA2NiwgODIsIDAuMDYpO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93OmFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDYwLCA2NiwgODIsIDAuMDYpO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgwLjk3NSk7XFxuICB0cmFuc2l0aW9uOiAwLjFzIGN1YmljLWJlemllcigwLjI1LCAwLjQ2LCAwLjQ1LCAwLjk0KTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3Jvd19faDMge1xcbiAgY29sb3I6ICMyNTI5MmU7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZy1ib3R0b206IDNweDtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3Jvd19fcmlnaHQge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3Jvd19fcmlnaHRfX2FwcC1pY29uIHtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGhlaWdodDogMzRweDtcXG4gIG1hcmdpbjogMCAxMXB4IDJweCAwO1xcbiAgd2lkdGg6IDM0cHg7XFxuICBiYWNrZ3JvdW5kLXNpemU6IDEwMCU7XFxuICBib3gtc2hhZG93OiAwIDRweCAxMnB4IDAgcmdiYSgzNywgNDEsIDQ2LCAwLjI1KTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3Jvd19fcmlnaHRfX2NhcmV0IHtcXG4gIGhlaWdodDogMThweDtcXG4gIG9wYWNpdHk6IDAuMztcXG4gIHRyYW5zaXRpb246IDAuMXMgY3ViaWMtYmV6aWVyKDAuMjUsIDAuNDYsIDAuNDUsIDAuOTQpO1xcbiAgd2lkdGg6IDhweDtcXG4gIHdpbGwtY2hhbmdlOiBvcGFjaXR5O1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93OmhvdmVyIC5jYXJldCxcXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93OmFjdGl2ZSAuY2FyZXQge1xcbiAgb3BhY2l0eTogMC42O1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fbW9iaWxlX190b2dnbGUge1xcbiAgd2lkdGg6IDgwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBtYXJnaW4tYm90dG9tOiAxOHB4O1xcbiAgYmFja2dyb3VuZDogI2Q0ZDVkOTtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX3NpbmdsZV93YWxsZXQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgbWFyZ2luLXRvcDogN3B4O1xcbiAgbWFyZ2luLWJvdHRvbTogMThweDtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX3NpbmdsZV93YWxsZXQgYSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogcmdiKDY0LCAxNTMsIDI1NSk7XFxuICBmb250LXNpemU6IDIxcHg7XFxuICBmb250LXdlaWdodDogODAwO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lICFpbXBvcnRhbnQ7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX21vYmlsZV9fdG9nZ2xlX3NlbGVjdG9yIHtcXG4gIHdpZHRoOiBjYWxjKDUwJSAtIDhweCk7XFxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGhlaWdodDogY2FsYygxMDAlIC0gOHB4KTtcXG4gIHRvcDogNHB4O1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDRweCwgMCwgMCk7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19tb2JpbGVfX3RvZ2dsZS5yaWdodF9fc2VsZWN0ZWQgLndhbGxldGNvbm5lY3QtbW9kYWxfX21vYmlsZV9fdG9nZ2xlX3NlbGVjdG9yIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoY2FsYygxMDAlICsgMTJweCksIDAsIDApO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1tb2RhbF9fbW9iaWxlX190b2dnbGUgYSB7XFxuICBmb250LXNpemU6IDEycHg7XFxuICB3aWR0aDogNTAlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgcGFkZGluZzogOHB4O1xcbiAgbWFyZ2luOiAwO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LW1vZGFsX19mb290ZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgbWFyZ2luLXRvcDogMjBweDtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLndhbGxldGNvbm5lY3QtbW9kYWxfX2Zvb3RlciB7XFxuICAgIG1hcmdpbi10b3A6IDV2dztcXG4gIH1cXG59XFxuXFxuLndhbGxldGNvbm5lY3QtbW9kYWxfX2Zvb3RlciBhIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiAjODk4ZDk3O1xcbiAgZm9udC1zaXplOiAxNXB4O1xcbiAgbWFyZ2luOiAwIGF1dG87XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzIwcHgpIHtcXG4gIC53YWxsZXRjb25uZWN0LW1vZGFsX19mb290ZXIgYSB7XFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gIH1cXG59XFxuXFxuLndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uc19fd3JhcHBlciB7XFxuICBtYXgtaGVpZ2h0OiA0NHZoO1xcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25zX193cmFwcGVyX19hbmRyb2lkIHtcXG4gIG1hcmdpbjogNTAlIDA7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbnNfX3dyYXBwZXJfX3dyYXAge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDQsIDFmcik7XFxuICBtYXJnaW46IDEwcHggMDtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkge1xcbiAgLndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uc19fd3JhcHBlcl9fd3JhcCB7XFxuICAgIG1hcmdpbi10b3A6IDQwcHg7XFxuICB9XFxufVxcblxcbi53YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNjQsIDE1MywgMjU1KTtcXG4gIHBhZGRpbmc6IDEycHg7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBjb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG59XFxuXFxuLndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uX19pY29uX2FuY2hvciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIG1hcmdpbjogOHB4O1xcbiAgd2lkdGg6IDQycHg7XFxuICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkge1xcbiAgLndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uX19pY29uX2FuY2hvciB7XFxuICAgIG1hcmdpbjogNHB4O1xcbiAgfVxcbn1cXG5cXG4ud2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25fX2ljb24ge1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIGhlaWdodDogNDJweDtcXG4gIG1hcmdpbjogMDtcXG4gIHdpZHRoOiA0MnB4O1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlciAhaW1wb3J0YW50O1xcbiAgYm94LXNoYWRvdzogMCA0cHggMTJweCAwIHJnYmEoMzcsIDQxLCA0NiwgMC4yNSk7XFxufVxcblxcbi53YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbl9fdGV4dCB7XFxuICBjb2xvcjogIzQyNDk1MjtcXG4gIGZvbnQtc2l6ZTogMi43dnc7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmUgIWltcG9ydGFudDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW4tdG9wOiAxLjh2dztcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC53YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbl9fdGV4dCB7XFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXG4gICAgbWFyZ2luLXRvcDogMTJweDtcXG4gIH1cXG59XFxuXFxuLndhbGxldGNvbm5lY3Qtc2VhcmNoX19pbnB1dCB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBiYWNrZ3JvdW5kOiAjZDRkNWQ5O1xcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xcbiAgcGFkZGluZzogOHB4IDE2cHg7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC1zdHJldGNoOiBub3JtYWw7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXN0cmV0Y2g6IG5vcm1hbDtcXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XFxuICBsZXR0ZXItc3BhY2luZzogbm9ybWFsO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAxNnB4KTtcXG4gIG1hcmdpbjogMDtcXG4gIG1hcmdpbi1ib3R0b206IDhweDtcXG59XFxuXCI7XG5cbi8vIEEgdHlwZSBvZiBwcm9taXNlLWxpa2UgdGhhdCByZXNvbHZlcyBzeW5jaHJvbm91c2x5IGFuZCBzdXBwb3J0cyBvbmx5IG9uZSBvYnNlcnZlclxudmFyIF9pdGVyYXRvclN5bWJvbCA9IC8qI19fUFVSRV9fKi90eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sLml0ZXJhdG9yIHx8IChTeW1ib2wuaXRlcmF0b3IgPSBTeW1ib2woXCJTeW1ib2wuaXRlcmF0b3JcIikpIDogXCJAQGl0ZXJhdG9yXCI7IC8vIEFzeW5jaHJvbm91c2x5IGl0ZXJhdGUgdGhyb3VnaCBhbiBvYmplY3QncyB2YWx1ZXNcbnZhciBfYXN5bmNJdGVyYXRvclN5bWJvbCA9IC8qI19fUFVSRV9fKi90eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgKFN5bWJvbC5hc3luY0l0ZXJhdG9yID0gU3ltYm9sKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3JcIikpIDogXCJAQGFzeW5jSXRlcmF0b3JcIjsgLy8gQXN5bmNocm9ub3VzbHkgaXRlcmF0ZSBvbiBhIHZhbHVlIHVzaW5nIGl0J3MgYXN5bmMgaXRlcmF0b3IgaWYgcHJlc2VudCwgb3IgaXRzIHN5bmNocm9ub3VzIGl0ZXJhdG9yIGlmIG1pc3NpbmdcblxuZnVuY3Rpb24gX2NhdGNoKGJvZHksIHJlY292ZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcmVzdWx0ID0gYm9keSgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHJlY292ZXIoZSk7XG4gIH1cblxuICBpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuKSB7XG4gICAgcmV0dXJuIHJlc3VsdC50aGVuKHZvaWQgMCwgcmVjb3Zlcik7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSAvLyBBc3luY2hyb25vdXNseSBhd2FpdCBhIHByb21pc2UgYW5kIHBhc3MgdGhlIHJlc3VsdCB0byBhIGZpbmFsbHkgY29udGludWF0aW9uXG5cbnZhciBXQUxMRVRDT05ORUNUX0xPR09fU1ZHX1VSTCA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQz94bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0nVVRGLTgnPyUzRSAlM0Nzdmcgd2lkdGg9JzMwMHB4JyBoZWlnaHQ9JzE4NXB4JyB2aWV3Qm94PScwIDAgMzAwIDE4NScgdmVyc2lvbj0nMS4xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyUzRSAlM0MhLS0gR2VuZXJhdG9yOiBTa2V0Y2ggNDkuMyAoNTExNjcpIC0gaHR0cDovL3d3dy5ib2hlbWlhbmNvZGluZy5jb20vc2tldGNoIC0tJTNFICUzQ3RpdGxlJTNFV2FsbGV0Q29ubmVjdCUzQy90aXRsZSUzRSAlM0NkZXNjJTNFQ3JlYXRlZCB3aXRoIFNrZXRjaC4lM0MvZGVzYyUzRSAlM0NkZWZzJTNFJTNDL2RlZnMlM0UgJTNDZyBpZD0nUGFnZS0xJyBzdHJva2U9J25vbmUnIHN0cm9rZS13aWR0aD0nMScgZmlsbD0nbm9uZScgZmlsbC1ydWxlPSdldmVub2RkJyUzRSAlM0NnIGlkPSd3YWxsZXRjb25uZWN0LWxvZ28tYWx0JyBmaWxsPSclMjMzQjk5RkMnIGZpbGwtcnVsZT0nbm9uemVybyclM0UgJTNDcGF0aCBkPSdNNjEuNDM4NTQyOSwzNi4yNTYyNjEyIEMxMTAuMzQ5NzY3LC0xMS42MzE5MDUxIDE4OS42NTA1MywtMTEuNjMxOTA1MSAyMzguNTYxNzUyLDM2LjI1NjI2MTIgTDI0NC40NDgyOTcsNDIuMDE5Njc4NiBDMjQ2Ljg5Mzg1OCw0NC40MTQwODY3IDI0Ni44OTM4NTgsNDguMjk2MTg5OCAyNDQuNDQ4Mjk3LDUwLjY5MDU5OSBMMjI0LjMxMTYwMiw3MC40MDYxMDIgQzIyMy4wODg4MjEsNzEuNjAzMzA3MSAyMjEuMTA2MzAyLDcxLjYwMzMwNzEgMjE5Ljg4MzUyMSw3MC40MDYxMDIgTDIxMS43ODI5MzcsNjIuNDc0OTU0MSBDMTc3LjY2MTI0NSwyOS4wNjY5NzI0IDEyMi4zMzkwNTEsMjkuMDY2OTcyNCA4OC4yMTczNTgyLDYyLjQ3NDk1NDEgTDc5LjU0MjMwMiw3MC45Njg1NTkyIEM3OC4zMTk1MjA0LDcyLjE2NTc2MzMgNzYuMzM3MDAxLDcyLjE2NTc2MzMgNzUuMTE0MjIxNCw3MC45Njg1NTkyIEw1NC45Nzc1MjY1LDUxLjI1MzA1NjEgQzUyLjUzMTk2NTMsNDguODU4NjQ2OSA1Mi41MzE5NjUzLDQ0Ljk3NjU0MzkgNTQuOTc3NTI2NSw0Mi41ODIxMzU3IEw2MS40Mzg1NDI5LDM2LjI1NjI2MTIgWiBNMjgwLjIwNjMzOSw3Ny4wMzAwMDYxIEwyOTguMTI4MDM2LDk0LjU3NjkwMzEgQzMwMC41NzM1ODUsOTYuOTcxMyAzMDAuNTczNTk5LDEwMC44NTMzOCAyOTguMTI4MDY3LDEwMy4yNDc3OTMgTDIxNy4zMTc4OTYsMTgyLjM2ODkyNyBDMjE0Ljg3MjM1MiwxODQuNzYzMzUzIDIxMC45MDczMTQsMTg0Ljc2MzM4IDIwOC40NjE3MzYsMTgyLjM2ODk4OSBDMjA4LjQ2MTcyNiwxODIuMzY4OTc5IDIwOC40NjE3MTQsMTgyLjM2ODk2NyAyMDguNDYxNzA0LDE4Mi4zNjg5NTcgTDE1MS4xMDc1NjEsMTI2LjIxNDM4NSBDMTUwLjQ5NjE3MSwxMjUuNjE1NzgzIDE0OS41MDQ5MTEsMTI1LjYxNTc4MyAxNDguODkzNTIxLDEyNi4yMTQzODUgQzE0OC44OTM1MTcsMTI2LjIxNDM4OSAxNDguODkzNTE0LDEyNi4yMTQzOTMgMTQ4Ljg5MzUxLDEyNi4yMTQzOTYgTDkxLjU0MDU4ODgsMTgyLjM2ODkyNyBDODkuMDk1MDUyLDE4NC43NjMzNTkgODUuMTMwMDEzMywxODQuNzYzMzk5IDgyLjY4NDQyNzYsMTgyLjM2OTAxNCBDODIuNjg0NDEzMywxODIuMzY5IDgyLjY4NDM5OCwxODIuMzY4OTg2IDgyLjY4NDM4MjcsMTgyLjM2ODk3IEwxLjg3MTk2MzI3LDEwMy4yNDY3ODUgQy0wLjU3MzU5NjkzOSwxMDAuODUyMzc3IC0wLjU3MzU5NjkzOSw5Ni45NzAyNzM1IDEuODcxOTYzMjcsOTQuNTc1ODY1MyBMMTkuNzkzNjkyOSw3Ny4wMjg5OTggQzIyLjIzOTI1MzEsNzQuNjM0NTg5OCAyNi4yMDQyOTE4LDc0LjYzNDU4OTggMjguNjQ5ODUzMSw3Ny4wMjg5OTggTDg2LjAwNDgzMDYsMTMzLjE4NDM1NSBDODYuNjE2MjIxNCwxMzMuNzgyOTU3IDg3LjYwNzQ3OTYsMTMzLjc4Mjk1NyA4OC4yMTg4NzA0LDEzMy4xODQzNTUgQzg4LjIxODg3OTYsMTMzLjE4NDM0NiA4OC4yMTg4ODc4LDEzMy4xODQzMzggODguMjE4ODk2OSwxMzMuMTg0MzMxIEwxNDUuNTcxLDc3LjAyODk5OCBDMTQ4LjAxNjUwNSw3NC42MzQ1MzQ3IDE1MS45ODE1NDQsNzQuNjM0NDQ0OSAxNTQuNDI3MTYxLDc3LjAyODc5OCBDMTU0LjQyNzE5NSw3Ny4wMjg4MzE2IDE1NC40MjcyMjksNzcuMDI4ODY1MyAxNTQuNDI3MjYyLDc3LjAyODg5OSBMMjExLjc4MjE2NCwxMzMuMTg0MzMxIEMyMTIuMzkzNTU0LDEzMy43ODI5MzIgMjEzLjM4NDgxNCwxMzMuNzgyOTMyIDIxMy45OTYyMDQsMTMzLjE4NDMzMSBMMjcxLjM1MDE3OSw3Ny4wMzAwMDYxIEMyNzMuNzk1NzQsNzQuNjM1NTk2OSAyNzcuNzYwNzc4LDc0LjYzNTU5NjkgMjgwLjIwNjMzOSw3Ny4wMzAwMDYxIFonIGlkPSdXYWxsZXRDb25uZWN0JyUzRSUzQy9wYXRoJTNFICUzQy9nJTNFICUzQy9nJTNFICUzQy9zdmclM0VcIjtcblxudmFyIFdBTExFVENPTk5FQ1RfSEVBREVSX1RFWFQgPSBcIldhbGxldENvbm5lY3RcIjtcbnZhciBBTklNQVRJT05fRFVSQVRJT04gPSAzMDA7XG52YXIgREVGQVVMVF9CVVRUT05fQ09MT1IgPSBcInJnYig2NCwgMTUzLCAyNTUpXCI7XG52YXIgV0FMTEVUQ09OTkVDVF9XUkFQUEVSX0lEID0gXCJ3YWxsZXRjb25uZWN0LXdyYXBwZXJcIjtcbnZhciBXQUxMRVRDT05ORUNUX1NUWUxFX0lEID0gXCJ3YWxsZXRjb25uZWN0LXN0eWxlLXNoZWV0XCI7XG52YXIgV0FMTEVUQ09OTkVDVF9NT0RBTF9JRCA9IFwid2FsbGV0Y29ubmVjdC1xcmNvZGUtbW9kYWxcIjtcbnZhciBXQUxMRVRDT05ORUNUX0NMT1NFX0JVVFRPTl9JRCA9IFwid2FsbGV0Y29ubmVjdC1xcmNvZGUtY2xvc2VcIjtcbnZhciBXQUxMRVRDT05ORUNUX0NUQV9URVhUX0lEID0gXCJ3YWxsZXRjb25uZWN0LXFyY29kZS10ZXh0XCI7XG52YXIgV0FMTEVUQ09OTkVDVF9DT05ORUNUX0JVVFRPTl9JRCA9IFwid2FsbGV0Y29ubmVjdC1jb25uZWN0LWJ1dHRvblwiO1xuXG5mdW5jdGlvbiBIZWFkZXIocHJvcHMpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19oZWFkZXJcIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW1nXCIsIHtcbiAgICBzcmM6IFdBTExFVENPTk5FQ1RfTE9HT19TVkdfVVJMLFxuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19oZWFkZXJMb2dvXCJcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFdBTExFVENPTk5FQ1RfSEVBREVSX1RFWFQpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fY2xvc2VfX3dyYXBwZXJcIixcbiAgICBvbkNsaWNrOiBwcm9wcy5vbkNsb3NlXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGlkOiBXQUxMRVRDT05ORUNUX0NMT1NFX0JVVFRPTl9JRCxcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fY2xvc2VfX2ljb25cIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fY2xvc2VfX2xpbmUxXCJcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19jbG9zZV9fbGluZTJcIlxuICB9KSkpKTtcbn1cblxuZnVuY3Rpb24gQ29ubmVjdEJ1dHRvbihwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvblwiLFxuICAgIGhyZWY6IHByb3BzLmhyZWYsXG4gICAgaWQ6IChXQUxMRVRDT05ORUNUX0NPTk5FQ1RfQlVUVE9OX0lEICsgXCItXCIgKyAocHJvcHMubmFtZSkpLFxuICAgIG9uQ2xpY2s6IHByb3BzLm9uQ2xpY2ssXG4gICAgcmVsOiBcIm5vb3BlbmVyIG5vcmVmZXJyZXJcIixcbiAgICBzdHlsZToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBwcm9wcy5jb2xvclxuICAgIH0sXG4gICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gIH0sIHByb3BzLm5hbWUpO1xufVxuXG52YXIgQ0FSRVRfU1ZHX1VSTCA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB3aWR0aD0nOCcgaGVpZ2h0PScxOCcgdmlld0JveD0nMCAwIDggMTgnIGZpbGw9J25vbmUnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM0UgJTNDcGF0aCBmaWxsLXJ1bGU9J2V2ZW5vZGQnIGNsaXAtcnVsZT0nZXZlbm9kZCcgZD0nTTAuNTg2MzAxIDAuMjEzODk4QzAuMTUwMzU0IDAuNTUyOTY4IDAuMDcxODE5NyAxLjE4MTI0IDAuNDEwODkgMS42MTcxOUw1LjI4OTIgNy44ODkzMUM1LjU3MDA3IDguMjUwNDIgNS41NzAwNyA4Ljc1NjA4IDUuMjg5MiA5LjExNzE5TDAuNDEwODg5IDE1LjM4OTNDMC4wNzE4MTkgMTUuODI1MyAwLjE1MDM1MyAxNi40NTM1IDAuNTg2MzAxIDE2Ljc5MjZDMS4wMjIyNSAxNy4xMzE3IDEuNjUwNTIgMTcuMDUzMSAxLjk4OTU5IDE2LjYxNzJMNi44Njc5MSAxMC4zNDUxQzcuNzEwNSA5LjI2MTc0IDcuNzEwNSA3Ljc0NDc2IDYuODY3OTEgNi42NjE0M0wxLjk4OTU5IDAuMzg5MzFDMS42NTA1MiAtMC4wNDY2Mzc0IDEuMDIyMjUgLTAuMTI1MTcyIDAuNTg2MzAxIDAuMjEzODk4WicgZmlsbD0nJTIzM0M0MjUyJy8lM0UgJTNDL3N2ZyUzRVwiO1xuXG5mdW5jdGlvbiBXYWxsZXRCdXR0b24ocHJvcHMpIHtcbiAgdmFyIGNvbG9yID0gcHJvcHMuY29sb3I7XG4gIHZhciBocmVmID0gcHJvcHMuaHJlZjtcbiAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICB2YXIgbG9nbyA9IHByb3BzLmxvZ287XG4gIHZhciBvbkNsaWNrID0gcHJvcHMub25DbGljaztcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93XCIsXG4gICAgaHJlZjogaHJlZixcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIHJlbDogXCJub29wZW5lciBub3JlZmVycmVyXCIsXG4gICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoM1wiLCB7XG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3Jvd19faDNcIlxuICB9LCBuYW1lKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VfX3Jvd19fcmlnaHRcIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1tb2RhbF9fYmFzZV9fcm93X19yaWdodF9fYXBwLWljb25cIixcbiAgICBzdHlsZToge1xuICAgICAgYmFja2dyb3VuZDogKFwidXJsKCdcIiArIGxvZ28gKyBcIicpIFwiICsgY29sb3IpLFxuICAgICAgYmFja2dyb3VuZFNpemU6IFwiMTAwJVwiXG4gICAgfVxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7XG4gICAgc3JjOiBDQVJFVF9TVkdfVVJMLFxuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19iYXNlX19yb3dfX3JpZ2h0X19jYXJldFwiXG4gIH0pKSk7XG59XG5cbmZ1bmN0aW9uIFdhbGxldEljb24ocHJvcHMpIHtcbiAgdmFyIGNvbG9yID0gcHJvcHMuY29sb3I7XG4gIHZhciBocmVmID0gcHJvcHMuaHJlZjtcbiAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICB2YXIgbG9nbyA9IHByb3BzLmxvZ287XG4gIHZhciBvbkNsaWNrID0gcHJvcHMub25DbGljaztcbiAgdmFyIGZvbnRTaXplID0gd2luZG93LmlubmVyV2lkdGggPCA3NjggPyAoKG5hbWUubGVuZ3RoID4gOCA/IDIuNSA6IDIuNykgKyBcInZ3XCIpIDogXCJpbmhlcml0XCI7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uX19pY29uX2FuY2hvclwiLFxuICAgIGhyZWY6IGhyZWYsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICByZWw6IFwibm9vcGVuZXIgbm9yZWZlcnJlclwiLFxuICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1jb25uZWN0X19idXR0b25fX2ljb25cIixcbiAgICBzdHlsZToge1xuICAgICAgYmFja2dyb3VuZDogKFwidXJsKCdcIiArIGxvZ28gKyBcIicpIFwiICsgY29sb3IpLFxuICAgICAgYmFja2dyb3VuZFNpemU6IFwiMTAwJVwiXG4gICAgfVxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRTaXplOiBmb250U2l6ZVxuICAgIH0sXG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtY29ubmVjdF9fYnV0dG9uX190ZXh0XCJcbiAgfSwgbmFtZSkpO1xufVxuXG52YXIgR1JJRF9NSU5fQ09VTlQgPSA1O1xudmFyIExJTktTX1BFUl9QQUdFID0gMTI7XG5cbmZ1bmN0aW9uIExpbmtEaXNwbGF5KHByb3BzKSB7XG4gIHZhciBhbmRyb2lkID0gYnJvd3NlclV0aWxzLmlzQW5kcm9pZCgpO1xuICB2YXIgcmVmID0gUmVhY3QudXNlU3RhdGUoXCJcIik7XG4gIHZhciBpbnB1dCA9IHJlZlswXTtcbiAgdmFyIHNldElucHV0ID0gcmVmWzFdO1xuICB2YXIgcmVmJDEgPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcbiAgdmFyIGZpbHRlciA9IHJlZiQxWzBdO1xuICB2YXIgc2V0RmlsdGVyID0gcmVmJDFbMV07XG4gIHZhciByZWYkMiA9IFJlYWN0LnVzZVN0YXRlKDEpO1xuICB2YXIgcGFnZSA9IHJlZiQyWzBdO1xuICB2YXIgc2V0UGFnZSA9IHJlZiQyWzFdO1xuICB2YXIgbGlua3MgPSBmaWx0ZXIgPyBwcm9wcy5saW5rcy5maWx0ZXIoZnVuY3Rpb24gKGxpbmspIHsgcmV0dXJuIGxpbmsubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlci50b0xvd2VyQ2FzZSgpKTsgfSkgOiBwcm9wcy5saW5rcztcbiAgdmFyIGVycm9yTWVzc2FnZSA9IHByb3BzLmVycm9yTWVzc2FnZTtcbiAgdmFyIGdyaWQgPSBmaWx0ZXIgfHwgbGlua3MubGVuZ3RoID4gR1JJRF9NSU5fQ09VTlQ7XG4gIHZhciBwYWdlcyA9IE1hdGguY2VpbChsaW5rcy5sZW5ndGggLyBMSU5LU19QRVJfUEFHRSk7XG4gIHZhciByYW5nZSA9IFsocGFnZSAtIDEpICogTElOS1NfUEVSX1BBR0UgKyAxLCBwYWdlICogTElOS1NfUEVSX1BBR0VdO1xuICB2YXIgcGFnZUxpbmtzID0gbGlua3MubGVuZ3RoID8gbGlua3MuZmlsdGVyKGZ1bmN0aW9uIChfLCBpbmRleCkgeyByZXR1cm4gaW5kZXggKyAxID49IHJhbmdlWzBdICYmIGluZGV4ICsgMSA8PSByYW5nZVsxXTsgfSkgOiBbXTtcbiAgdmFyIGhhc1BhZ2luZyA9ICEhKCFhbmRyb2lkICYmIHBhZ2VzID4gMSk7XG4gIHZhciBmaWx0ZXJUaW1lb3V0ID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUlucHV0KGUpIHtcbiAgICBzZXRJbnB1dChlLnRhcmdldC52YWx1ZSk7XG4gICAgY2xlYXJUaW1lb3V0KGZpbHRlclRpbWVvdXQpO1xuXG4gICAgaWYgKGUudGFyZ2V0LnZhbHVlKSB7XG4gICAgICBmaWx0ZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldEZpbHRlcihlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgIHNldFBhZ2UoMSk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0SW5wdXQoXCJcIik7XG4gICAgICBzZXRGaWx0ZXIoXCJcIik7XG4gICAgICBzZXRQYWdlKDEpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHtcbiAgICBpZDogV0FMTEVUQ09OTkVDVF9DVEFfVEVYVF9JRCxcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1xcmNvZGVfX3RleHRcIlxuICB9LCBhbmRyb2lkID8gcHJvcHMudGV4dC5jb25uZWN0X21vYmlsZV93YWxsZXQgOiBwcm9wcy50ZXh0LmNob29zZV9wcmVmZXJyZWRfd2FsbGV0KSwgIWFuZHJvaWQgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1zZWFyY2hfX2lucHV0XCIsXG4gICAgcGxhY2Vob2xkZXI6IFwiU2VhcmNoXCIsXG4gICAgdmFsdWU6IGlucHV0LFxuICAgIG9uQ2hhbmdlOiBoYW5kbGVJbnB1dFxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiAoXCJ3YWxsZXRjb25uZWN0LWNvbm5lY3RfX2J1dHRvbnNfX3dyYXBwZXJcIiArIChhbmRyb2lkID8gXCJfX2FuZHJvaWRcIiA6IGdyaWQgJiYgbGlua3MubGVuZ3RoID8gXCJfX3dyYXBcIiA6IFwiXCIpKVxuICB9LCAhYW5kcm9pZCA/IHBhZ2VMaW5rcy5sZW5ndGggPyBwYWdlTGlua3MubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHZhciBjb2xvciA9IGVudHJ5LmNvbG9yO1xuICAgIHZhciBuYW1lID0gZW50cnkubmFtZTtcbiAgICB2YXIgc2hvcnROYW1lID0gZW50cnkuc2hvcnROYW1lO1xuICAgIHZhciBsb2dvID0gZW50cnkubG9nbztcbiAgICB2YXIgaHJlZiA9IGJyb3dzZXJVdGlscy5mb3JtYXRJT1NNb2JpbGUocHJvcHMudXJpLCBlbnRyeSk7XG4gICAgdmFyIGhhbmRsZUNsaWNrSU9TID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgYnJvd3NlclV0aWxzLnNhdmVNb2JpbGVMaW5rSW5mbyh7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGhyZWY6IGhyZWZcbiAgICAgIH0pO1xuICAgIH0sIFtwYWdlTGlua3NdKTtcbiAgICByZXR1cm4gIWdyaWQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFdhbGxldEJ1dHRvbiwge1xuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBsb2dvOiBsb2dvLFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2tJT1NcbiAgICB9KSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoV2FsbGV0SWNvbiwge1xuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG5hbWU6IHNob3J0TmFtZSxcbiAgICAgIGxvZ286IGxvZ28sXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja0lPU1xuICAgIH0pO1xuICB9KSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIGVycm9yTWVzc2FnZS5sZW5ndGggPyBwcm9wcy5lcnJvck1lc3NhZ2UgOiAhIXByb3BzLmxpbmtzLmxlbmd0aCAmJiAhbGlua3MubGVuZ3RoID8gcHJvcHMudGV4dC5ub193YWxsZXRzX2ZvdW5kIDogcHJvcHMudGV4dC5sb2FkaW5nKSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3RCdXR0b24sIHtcbiAgICBuYW1lOiBwcm9wcy50ZXh0LmNvbm5lY3QsXG4gICAgY29sb3I6IERFRkFVTFRfQlVUVE9OX0NPTE9SLFxuICAgIGhyZWY6IHByb3BzLnVyaSxcbiAgICBvbkNsaWNrOiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICBicm93c2VyVXRpbHMuc2F2ZU1vYmlsZUxpbmtJbmZvKHtcbiAgICAgICAgbmFtZTogXCJVbmtub3duXCIsXG4gICAgICAgIGhyZWY6IHByb3BzLnVyaVxuICAgICAgfSk7XG4gICAgfSwgW10pXG4gIH0pKSwgaGFzUGFnaW5nICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19mb290ZXJcIlxuICB9LCBBcnJheShwYWdlcykuZmlsbCgwKS5tYXAoZnVuY3Rpb24gKF8sIGluZGV4KSB7XG4gICAgdmFyIHBhZ2VOdW1iZXIgPSBpbmRleCArIDE7XG4gICAgdmFyIHNlbGVjdGVkID0gcGFnZSA9PT0gcGFnZU51bWJlcjtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAgc3R5bGU6IHtcbiAgICAgICAgbWFyZ2luOiBcImF1dG8gMTBweFwiLFxuICAgICAgICBmb250V2VpZ2h0OiBzZWxlY3RlZCA/IFwiYm9sZFwiIDogXCJub3JtYWxcIlxuICAgICAgfSxcbiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFBhZ2UocGFnZU51bWJlcik7IH1cbiAgICB9LCBwYWdlTnVtYmVyKTtcbiAgfSkpKTtcbn1cblxuZnVuY3Rpb24gTm90aWZpY2F0aW9uKHByb3BzKSB7XG4gIHZhciBzaG93ID0gISFwcm9wcy5tZXNzYWdlLnRyaW0oKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogKFwid2FsbGV0Y29ubmVjdC1xcmNvZGVfX25vdGlmaWNhdGlvblwiICsgKHNob3cgPyBcIiBub3RpZmljYXRpb25fX3Nob3dcIiA6IFwiXCIpKVxuICB9LCBwcm9wcy5tZXNzYWdlKTtcbn1cblxudmFyIGZvcm1hdFFSQ29kZUltYWdlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFFSQ29kZS50b1N0cmluZyhkYXRhLCB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICB0eXBlOiBcInN2Z1wiXG4gICAgfSkpLnRoZW4oZnVuY3Rpb24gKGRhdGFTdHJpbmcpIHtcbiAgICAgIGlmICh0eXBlb2YgZGF0YVN0cmluZyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXN1bHQgPSBkYXRhU3RyaW5nLnJlcGxhY2UoXCI8c3ZnXCIsIFwiPHN2ZyBjbGFzcz1cXFwid2FsbGV0Y29ubmVjdC1xcmNvZGVfX2ltYWdlXFxcIlwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gUVJDb2RlRGlzcGxheShwcm9wcykge1xuICB2YXIgcmVmID0gUmVhY3QudXNlU3RhdGUoXCJcIik7XG4gIHZhciBub3RpZmljYXRpb24gPSByZWZbMF07XG4gIHZhciBzZXROb3RpZmljYXRpb24gPSByZWZbMV07XG4gIHZhciByZWYkMSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICB2YXIgc3ZnID0gcmVmJDFbMF07XG4gIHZhciBzZXRTdmcgPSByZWYkMVsxXTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmb3JtYXRRUkNvZGVJbWFnZShwcm9wcy51cmkpKS50aGVuKGZ1bmN0aW9uIChfZm9ybWF0UVJDb2RlSW1hZ2UpIHtcbiAgICAgICAgc2V0U3ZnKF9mb3JtYXRRUkNvZGVJbWFnZSk7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBQcm9taXNlLnJlamVjdChlKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICB2YXIgY29weVRvQ2xpcGJvYXJkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWNjZXNzID0gY29weShwcm9wcy51cmkpO1xuXG4gICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgIHNldE5vdGlmaWNhdGlvbihwcm9wcy50ZXh0LmNvcGllZF90b19jbGlwYm9hcmQpO1xuICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0Tm90aWZpY2F0aW9uKFwiXCIpOyB9LCAxMjAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Tm90aWZpY2F0aW9uKFwiRXJyb3JcIik7XG4gICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7IHJldHVybiBzZXROb3RpZmljYXRpb24oXCJcIik7IH0sIDEyMDApO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCB7XG4gICAgaWQ6IFdBTExFVENPTk5FQ1RfQ1RBX1RFWFRfSUQsXG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtcXJjb2RlX190ZXh0XCJcbiAgfSwgcHJvcHMudGV4dC5zY2FuX3FyY29kZV93aXRoX3dhbGxldCksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6IHN2Z1xuICAgIH1cbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19mb290ZXJcIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgb25DbGljazogY29weVRvQ2xpcGJvYXJkXG4gIH0sIHByb3BzLnRleHQuY29weV90b19jbGlwYm9hcmQpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChOb3RpZmljYXRpb24sIHtcbiAgICBtZXNzYWdlOiBub3RpZmljYXRpb25cbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBNb2RhbChwcm9wcykge1xuICB2YXIgYW5kcm9pZCA9IGJyb3dzZXJVdGlscy5pc0FuZHJvaWQoKTtcbiAgdmFyIG1vYmlsZSA9IGJyb3dzZXJVdGlscy5pc01vYmlsZSgpO1xuICB2YXIgd2hpdGVsaXN0ID0gbW9iaWxlID8gcHJvcHMucXJjb2RlTW9kYWxPcHRpb25zICYmIHByb3BzLnFyY29kZU1vZGFsT3B0aW9ucy5tb2JpbGVMaW5rcyA/IHByb3BzLnFyY29kZU1vZGFsT3B0aW9ucy5tb2JpbGVMaW5rcyA6IHVuZGVmaW5lZCA6IHByb3BzLnFyY29kZU1vZGFsT3B0aW9ucyAmJiBwcm9wcy5xcmNvZGVNb2RhbE9wdGlvbnMuZGVza3RvcExpbmtzID8gcHJvcHMucXJjb2RlTW9kYWxPcHRpb25zLmRlc2t0b3BMaW5rcyA6IHVuZGVmaW5lZDtcbiAgdmFyIHJlZiA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgdmFyIGxvYWRpbmcgPSByZWZbMF07XG4gIHZhciBzZXRMb2FkaW5nID0gcmVmWzFdO1xuICB2YXIgcmVmJDEgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIHZhciBmZXRjaGVkID0gcmVmJDFbMF07XG4gIHZhciBzZXRGZXRjaGVkID0gcmVmJDFbMV07XG4gIHZhciByZWYkMiA9IFJlYWN0LnVzZVN0YXRlKCFtb2JpbGUpO1xuICB2YXIgZGlzcGxheVFSQ29kZSA9IHJlZiQyWzBdO1xuICB2YXIgc2V0RGlzcGxheVFSQ29kZSA9IHJlZiQyWzFdO1xuICB2YXIgZGlzcGxheVByb3BzID0ge1xuICAgIG1vYmlsZTogbW9iaWxlLFxuICAgIHRleHQ6IHByb3BzLnRleHQsXG4gICAgdXJpOiBwcm9wcy51cmksXG4gICAgcXJjb2RlTW9kYWxPcHRpb25zOiBwcm9wcy5xcmNvZGVNb2RhbE9wdGlvbnNcbiAgfTtcbiAgdmFyIHJlZiQzID0gUmVhY3QudXNlU3RhdGUoXCJcIik7XG4gIHZhciBzaW5nbGVMaW5rSHJlZiA9IHJlZiQzWzBdO1xuICB2YXIgc2V0U2luZ2xlTGlua0hyZWYgPSByZWYkM1sxXTtcbiAgdmFyIHJlZiQ0ID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICB2YXIgaGFzU2luZ2xlTGluayA9IHJlZiQ0WzBdO1xuICB2YXIgc2V0SGFzU2luZ2xlTGluayA9IHJlZiQ0WzFdO1xuICB2YXIgcmVmJDUgPSBSZWFjdC51c2VTdGF0ZShbXSk7XG4gIHZhciBsaW5rcyA9IHJlZiQ1WzBdO1xuICB2YXIgc2V0TGlua3MgPSByZWYkNVsxXTtcbiAgdmFyIHJlZiQ2ID0gUmVhY3QudXNlU3RhdGUoXCJcIik7XG4gIHZhciBlcnJvck1lc3NhZ2UgPSByZWYkNlswXTtcbiAgdmFyIHNldEVycm9yTWVzc2FnZSA9IHJlZiQ2WzFdO1xuXG4gIHZhciBnZXRMaW5rc0lmTmVlZGVkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChmZXRjaGVkIHx8IGxvYWRpbmcgfHwgd2hpdGVsaXN0ICYmICF3aGl0ZWxpc3QubGVuZ3RoIHx8IGxpbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGluaXRMaW5rcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoYW5kcm9pZCkgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7IH1cbiAgICAgICAgICBzZXRMb2FkaW5nKHRydWUpO1xuXG4gICAgICAgICAgdmFyIF90ZW1wID0gX2NhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBwcm9wcy5xcmNvZGVNb2RhbE9wdGlvbnMgJiYgcHJvcHMucXJjb2RlTW9kYWxPcHRpb25zLnJlZ2lzdHJ5VXJsID8gcHJvcHMucXJjb2RlTW9kYWxPcHRpb25zLnJlZ2lzdHJ5VXJsIDogYnJvd3NlclV0aWxzLmdldFdhbGxldFJlZ2lzdHJ5VXJsKCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZldGNoKHVybCkudGhlbihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5qc29uKCk7IH0pKS50aGVuKGZ1bmN0aW9uIChyZWdpc3RyeSkge1xuICAgICAgICAgICAgICB2YXIgcGxhdGZvcm0gPSBtb2JpbGUgPyBcIm1vYmlsZVwiIDogXCJkZXNrdG9wXCI7XG5cbiAgICAgICAgICAgICAgdmFyIF9saW5rcyA9IGJyb3dzZXJVdGlscy5nZXRNb2JpbGVMaW5rUmVnaXN0cnkoYnJvd3NlclV0aWxzLmZvcm1hdE1vYmlsZVJlZ2lzdHJ5KHJlZ2lzdHJ5LCBwbGF0Zm9ybSksIHdoaXRlbGlzdCk7XG5cbiAgICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgIHNldEZldGNoZWQodHJ1ZSk7XG4gICAgICAgICAgICAgIHNldEVycm9yTWVzc2FnZSghX2xpbmtzLmxlbmd0aCA/IHByb3BzLnRleHQubm9fc3VwcG9ydGVkX3dhbGxldHMgOiBcIlwiKTtcbiAgICAgICAgICAgICAgc2V0TGlua3MoX2xpbmtzKTtcbiAgICAgICAgICAgICAgdmFyIGhhc1NpbmdsZUxpbmsgPSBfbGlua3MubGVuZ3RoID09PSAxO1xuXG4gICAgICAgICAgICAgIGlmIChoYXNTaW5nbGVMaW5rKSB7XG4gICAgICAgICAgICAgICAgc2V0U2luZ2xlTGlua0hyZWYoYnJvd3NlclV0aWxzLmZvcm1hdElPU01vYmlsZShwcm9wcy51cmksIF9saW5rc1swXSkpO1xuICAgICAgICAgICAgICAgIHNldERpc3BsYXlRUkNvZGUodHJ1ZSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzZXRIYXNTaW5nbGVMaW5rKGhhc1NpbmdsZUxpbmspO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgc2V0RmV0Y2hlZCh0cnVlKTtcbiAgICAgICAgICAgIHNldEVycm9yTWVzc2FnZShwcm9wcy50ZXh0LnNvbWV0aGluZ193ZW50X3dyb25nKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKF90ZW1wICYmIF90ZW1wLnRoZW4gPyBfdGVtcC50aGVuKGZ1bmN0aW9uICgpIHt9KSA6IHZvaWQgMCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGluaXRMaW5rcygpO1xuICAgIH0pO1xuICB9O1xuXG4gIGdldExpbmtzSWZOZWVkZWQoKTtcbiAgdmFyIHJpZ2h0U2VsZWN0ZWQgPSBtb2JpbGUgPyBkaXNwbGF5UVJDb2RlIDogIWRpc3BsYXlRUkNvZGU7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBpZDogV0FMTEVUQ09OTkVDVF9NT0RBTF9JRCxcbiAgICBjbGFzc05hbWU6IFwid2FsbGV0Y29ubmVjdC1xcmNvZGVfX2Jhc2UgYW5pbWF0ZWQgZmFkZUluXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIndhbGxldGNvbm5lY3QtbW9kYWxfX2Jhc2VcIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEhlYWRlciwge1xuICAgIG9uQ2xvc2U6IHByb3BzLm9uQ2xvc2VcbiAgfSksIGhhc1NpbmdsZUxpbmsgJiYgZGlzcGxheVFSQ29kZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19zaW5nbGVfd2FsbGV0XCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJyb3dzZXJVdGlscy5zYXZlTW9iaWxlTGlua0luZm8oe1xuICAgICAgbmFtZTogbGlua3NbMF0ubmFtZSxcbiAgICAgIGhyZWY6IHNpbmdsZUxpbmtIcmVmXG4gICAgfSk7IH0sXG4gICAgaHJlZjogc2luZ2xlTGlua0hyZWYsXG4gICAgcmVsOiBcIm5vb3BlbmVyIG5vcmVmZXJyZXJcIixcbiAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgfSwgcHJvcHMudGV4dC5jb25uZWN0X3dpdGggKyBcIiBcIiArIChoYXNTaW5nbGVMaW5rID8gbGlua3NbMF0ubmFtZSA6IFwiXCIpICsgXCIg4oC6XCIpKSA6IGFuZHJvaWQgfHwgbG9hZGluZyB8fCAhbG9hZGluZyAmJiBsaW5rcy5sZW5ndGggPyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IChcIndhbGxldGNvbm5lY3QtbW9kYWxfX21vYmlsZV9fdG9nZ2xlXCIgKyAocmlnaHRTZWxlY3RlZCA/IFwiIHJpZ2h0X19zZWxlY3RlZFwiIDogXCJcIikpXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ3YWxsZXRjb25uZWN0LW1vZGFsX19tb2JpbGVfX3RvZ2dsZV9zZWxlY3RvclwiXG4gIH0pLCBtb2JpbGUgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHNldERpc3BsYXlRUkNvZGUoZmFsc2UpLCBnZXRMaW5rc0lmTmVlZGVkKCkpOyB9XG4gIH0sIHByb3BzLnRleHQubW9iaWxlKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldERpc3BsYXlRUkNvZGUodHJ1ZSk7IH1cbiAgfSwgcHJvcHMudGV4dC5xcmNvZGUpKSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXREaXNwbGF5UVJDb2RlKHRydWUpOyB9XG4gIH0sIHByb3BzLnRleHQucXJjb2RlKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIChzZXREaXNwbGF5UVJDb2RlKGZhbHNlKSwgZ2V0TGlua3NJZk5lZWRlZCgpKTsgfVxuICB9LCBwcm9wcy50ZXh0LmRlc2t0b3ApKSkgOiBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIGRpc3BsYXlRUkNvZGUgfHwgIWFuZHJvaWQgJiYgIWxvYWRpbmcgJiYgIWxpbmtzLmxlbmd0aCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUVJDb2RlRGlzcGxheSwgT2JqZWN0LmFzc2lnbih7fSwgZGlzcGxheVByb3BzKSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmtEaXNwbGF5LCBPYmplY3QuYXNzaWduKHt9LCBkaXNwbGF5UHJvcHMsXG4gICAge2xpbmtzOiBsaW5rcyxcbiAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZX0pKSkpKTtcbn1cblxudmFyIGRlID0ge1xuICBjaG9vc2VfcHJlZmVycmVkX3dhbGxldDogXCJXw6RobGUgYmV2b3J6dWd0ZSBXYWxsZXRcIixcbiAgY29ubmVjdF9tb2JpbGVfd2FsbGV0OiBcIlZlcmJpbmRlIG1pdCBNb2JpbGUgV2FsbGV0XCIsXG4gIHNjYW5fcXJjb2RlX3dpdGhfd2FsbGV0OiBcIlNjYW5uZSBkZW4gUVItY29kZSBtaXQgZWluZXIgV2FsbGV0Q29ubmVjdCBrb21wYXRpYmxlbiBXYWxsZXRcIixcbiAgY29ubmVjdDogXCJWZXJiaW5kZW5cIixcbiAgcXJjb2RlOiBcIlFSLUNvZGVcIixcbiAgbW9iaWxlOiBcIk1vYmlsZVwiLFxuICBkZXNrdG9wOiBcIkRlc2t0b3BcIixcbiAgY29weV90b19jbGlwYm9hcmQ6IFwiSW4gZGllIFp3aXNjaGVuYWJsYWdlIGtvcGllcmVuXCIsXG4gIGNvcGllZF90b19jbGlwYm9hcmQ6IFwiSW4gZGllIFp3aXNjaGVuYWJsYWdlIGtvcGllcnQhXCIsXG4gIGNvbm5lY3Rfd2l0aDogXCJWZXJiaW5kZW4gbWl0IEhpbGZlIHZvblwiLFxuICBsb2FkaW5nOiBcIkxhZGVuLi4uXCIsXG4gIHNvbWV0aGluZ193ZW50X3dyb25nOiBcIkV0d2FzIGlzdCBzY2hpZWYgZ2VsYXVmZW5cIixcbiAgbm9fc3VwcG9ydGVkX3dhbGxldHM6IFwiRXMgZ2lidCBub2NoIGtlaW5lIHVudGVyc3TDvHR6dGVuIFdhbGxldFwiLFxuICBub193YWxsZXRzX2ZvdW5kOiBcImtlaW5lIFdhbGxldCBnZWZ1bmRlblwiXG59O1xuXG52YXIgZW4gPSB7XG4gIGNob29zZV9wcmVmZXJyZWRfd2FsbGV0OiBcIkNob29zZSB5b3VyIHByZWZlcnJlZCB3YWxsZXRcIixcbiAgY29ubmVjdF9tb2JpbGVfd2FsbGV0OiBcIkNvbm5lY3QgdG8gTW9iaWxlIFdhbGxldFwiLFxuICBzY2FuX3FyY29kZV93aXRoX3dhbGxldDogXCJTY2FuIFFSIGNvZGUgd2l0aCBhIFdhbGxldENvbm5lY3QtY29tcGF0aWJsZSB3YWxsZXRcIixcbiAgY29ubmVjdDogXCJDb25uZWN0XCIsXG4gIHFyY29kZTogXCJRUiBDb2RlXCIsXG4gIG1vYmlsZTogXCJNb2JpbGVcIixcbiAgZGVza3RvcDogXCJEZXNrdG9wXCIsXG4gIGNvcHlfdG9fY2xpcGJvYXJkOiBcIkNvcHkgdG8gY2xpcGJvYXJkXCIsXG4gIGNvcGllZF90b19jbGlwYm9hcmQ6IFwiQ29waWVkIHRvIGNsaXBib2FyZCFcIixcbiAgY29ubmVjdF93aXRoOiBcIkNvbm5lY3Qgd2l0aFwiLFxuICBsb2FkaW5nOiBcIkxvYWRpbmcuLi5cIixcbiAgc29tZXRoaW5nX3dlbnRfd3Jvbmc6IFwiU29tZXRoaW5nIHdlbnQgd3JvbmdcIixcbiAgbm9fc3VwcG9ydGVkX3dhbGxldHM6IFwiVGhlcmUgYXJlIG5vIHN1cHBvcnRlZCB3YWxsZXRzIHlldFwiLFxuICBub193YWxsZXRzX2ZvdW5kOiBcIk5vIHdhbGxldHMgZm91bmRcIlxufTtcblxudmFyIGVzID0ge1xuICBjaG9vc2VfcHJlZmVycmVkX3dhbGxldDogXCJFbGlnZSB0dSBiaWxsZXRlcmEgcHJlZmVyaWRhXCIsXG4gIGNvbm5lY3RfbW9iaWxlX3dhbGxldDogXCJDb25lY3RhciBhIGJpbGxldGVyYSBtw7N2aWxcIixcbiAgc2Nhbl9xcmNvZGVfd2l0aF93YWxsZXQ6IFwiRXNjYW5lYSBlbCBjw7NkaWdvIFFSIGNvbiB1bmEgYmlsbGV0ZXJhIGNvbXBhdGlibGUgY29uIFdhbGxldENvbm5lY3RcIixcbiAgY29ubmVjdDogXCJDb25lY3RhclwiLFxuICBxcmNvZGU6IFwiQ8OzZGlnbyBRUlwiLFxuICBtb2JpbGU6IFwiTcOzdmlsXCIsXG4gIGRlc2t0b3A6IFwiRGVza3RvcFwiLFxuICBjb3B5X3RvX2NsaXBib2FyZDogXCJDb3BpYXJcIixcbiAgY29waWVkX3RvX2NsaXBib2FyZDogXCJDb3BpYWRvIVwiLFxuICBjb25uZWN0X3dpdGg6IFwiQ29uZWN0YXIgbWVkaWFudGVcIixcbiAgbG9hZGluZzogXCJDYXJnYW5kby4uLlwiLFxuICBzb21ldGhpbmdfd2VudF93cm9uZzogXCJBbGdvIHNhbGnDsyBtYWxcIixcbiAgbm9fc3VwcG9ydGVkX3dhbGxldHM6IFwiVG9kYXbDrWEgbm8gaGF5IGJpbGxldGVyYXMgY29tcGF0aWJsZXNcIixcbiAgbm9fd2FsbGV0c19mb3VuZDogXCJObyBzZSBlbmNvbnRyYXJvbiBiaWxsZXRlcmFzXCJcbn07XG5cbnZhciBmciA9IHtcbiAgY2hvb3NlX3ByZWZlcnJlZF93YWxsZXQ6IFwiQ2hvaXNpc3NleiB2b3RyZSBwb3J0ZWZldWlsbGUgcHLDqWbDqXLDqVwiLFxuICBjb25uZWN0X21vYmlsZV93YWxsZXQ6IFwiU2UgY29ubmVjdGVyIGF1IHBvcnRlZmV1aWxsZSBtb2JpbGVcIixcbiAgc2Nhbl9xcmNvZGVfd2l0aF93YWxsZXQ6IFwiU2Nhbm5leiBsZSBRUiBjb2RlIGF2ZWMgdW4gcG9ydGVmZXVpbGxlIGNvbXBhdGlibGUgV2FsbGV0Q29ubmVjdFwiLFxuICBjb25uZWN0OiBcIlNlIGNvbm5lY3RlclwiLFxuICBxcmNvZGU6IFwiUVIgQ29kZVwiLFxuICBtb2JpbGU6IFwiTW9iaWxlXCIsXG4gIGRlc2t0b3A6IFwiRGVza3RvcFwiLFxuICBjb3B5X3RvX2NsaXBib2FyZDogXCJDb3BpZXJcIixcbiAgY29waWVkX3RvX2NsaXBib2FyZDogXCJDb3Bpw6khXCIsXG4gIGNvbm5lY3Rfd2l0aDogXCJDb25uZWN0ZXotdm91cyDDoCBsJ2FpZGUgZGVcIixcbiAgbG9hZGluZzogXCJDaGFyZ2VtZW50Li4uXCIsXG4gIHNvbWV0aGluZ193ZW50X3dyb25nOiBcIlF1ZWxxdWUgY2hvc2UgYSBtYWwgdG91cm7DqVwiLFxuICBub19zdXBwb3J0ZWRfd2FsbGV0czogXCJJbCBuJ3kgYSBwYXMgZW5jb3JlIGRlIHBvcnRlZmV1aWxsZXMgcHJpcyBlbiBjaGFyZ2VcIixcbiAgbm9fd2FsbGV0c19mb3VuZDogXCJBdWN1biBwb3J0ZWZldWlsbGUgdHJvdXbDqVwiXG59O1xuXG52YXIga28gPSB7XG4gIGNob29zZV9wcmVmZXJyZWRfd2FsbGV0OiBcIuybkO2VmOuKlCDsp4DqsJHsnYQg7ISg7YOd7ZWY7IS47JqUXCIsXG4gIGNvbm5lY3RfbW9iaWxlX3dhbGxldDogXCLrqqjrsJTsnbwg7KeA6rCR6rO8IOyXsOqysFwiLFxuICBzY2FuX3FyY29kZV93aXRoX3dhbGxldDogXCJXYWxsZXRDb25uZWN0IOyngOybkCDsp4DqsJHsl5DshJwgUVLsvZTrk5zrpbwg7Iqk7LqU7ZWY7IS47JqUXCIsXG4gIGNvbm5lY3Q6IFwi7Jew6rKwXCIsXG4gIHFyY29kZTogXCJRUiDsvZTrk5xcIixcbiAgbW9iaWxlOiBcIuuqqOuwlOydvFwiLFxuICBkZXNrdG9wOiBcIuuNsOyKpO2BrO2DkVwiLFxuICBjb3B5X3RvX2NsaXBib2FyZDogXCLtgbTrpr3rs7Trk5zsl5Ag67O17IKsXCIsXG4gIGNvcGllZF90b19jbGlwYm9hcmQ6IFwi7YG066a967O065Oc7JeQIOuzteyCrOuQmOyXiOyKteuLiOuLpCFcIixcbiAgY29ubmVjdF93aXRoOiBcIuyZgCDsl7DqsrDtlZjri6RcIixcbiAgbG9hZGluZzogXCLroZzrk5wg7KSRLi4uXCIsXG4gIHNvbWV0aGluZ193ZW50X3dyb25nOiBcIuusuOygnOqwgCDrsJzsg53tlojsirXri4jri6QuXCIsXG4gIG5vX3N1cHBvcnRlZF93YWxsZXRzOiBcIuyVhOyngSDsp4Dsm5DrkJjripQg7KeA6rCR7J20IOyXhuyKteuLiOuLpFwiLFxuICBub193YWxsZXRzX2ZvdW5kOiBcIuyngOqwkeydhCDssL7snYQg7IiYIOyXhuyKteuLiOuLpFwiXG59O1xuXG52YXIgcHQgPSB7XG4gIGNob29zZV9wcmVmZXJyZWRfd2FsbGV0OiBcIkVzY29saGEgc3VhIGNhcnRlaXJhIHByZWZlcmlkYVwiLFxuICBjb25uZWN0X21vYmlsZV93YWxsZXQ6IFwiQ29uZWN0YXItc2Ugw6AgY2FydGVpcmEgbcOzdmVsXCIsXG4gIHNjYW5fcXJjb2RlX3dpdGhfd2FsbGV0OiBcIkxlciBvIGPDs2RpZ28gUVIgY29tIHVtYSBjYXJ0ZWlyYSBjb21wYXTDrXZlbCBjb20gV2FsbGV0Q29ubmVjdFwiLFxuICBjb25uZWN0OiBcIkNvbmVjdGFyXCIsXG4gIHFyY29kZTogXCJDw7NkaWdvIFFSXCIsXG4gIG1vYmlsZTogXCJNw7N2ZWxcIixcbiAgZGVza3RvcDogXCJEZXNrdG9wXCIsXG4gIGNvcHlfdG9fY2xpcGJvYXJkOiBcIkNvcGlhclwiLFxuICBjb3BpZWRfdG9fY2xpcGJvYXJkOiBcIkNvcGlhZG8hXCIsXG4gIGNvbm5lY3Rfd2l0aDogXCJMaWdhciBwb3IgbWVpbyBkZVwiLFxuICBsb2FkaW5nOiBcIkNhcnJlZ2FtZW50by4uLlwiLFxuICBzb21ldGhpbmdfd2VudF93cm9uZzogXCJBbGdvIGNvcnJldSBtYWxcIixcbiAgbm9fc3VwcG9ydGVkX3dhbGxldHM6IFwiQWluZGEgbsOjbyBow6EgY2FydGVpcmFzIHN1cG9ydGFkYXNcIixcbiAgbm9fd2FsbGV0c19mb3VuZDogXCJOZW5odW1hIGNhcnRlaXJhIGVuY29udHJhZGFcIlxufTtcblxudmFyIHpoID0ge1xuICBjaG9vc2VfcHJlZmVycmVkX3dhbGxldDogXCLpgInmi6nkvaDnmoTpkrHljIVcIixcbiAgY29ubmVjdF9tb2JpbGVfd2FsbGV0OiBcIui/nuaOpeiHs+enu+WKqOerr+mSseWMhVwiLFxuICBzY2FuX3FyY29kZV93aXRoX3dhbGxldDogXCLkvb/nlKjlhbzlrrkgV2FsbGV0Q29ubmVjdCDnmoTpkrHljIXmiavmj4/kuoznu7TnoIFcIixcbiAgY29ubmVjdDogXCLov57mjqVcIixcbiAgcXJjb2RlOiBcIuS6jOe7tOeggVwiLFxuICBtb2JpbGU6IFwi56e75YqoXCIsXG4gIGRlc2t0b3A6IFwi5qGM6Z2iXCIsXG4gIGNvcHlfdG9fY2xpcGJvYXJkOiBcIuWkjeWItuWIsOWJqui0tOadv1wiLFxuICBjb3BpZWRfdG9fY2xpcGJvYXJkOiBcIuWkjeWItuWIsOWJqui0tOadv+aIkOWKn++8gVwiLFxuICBjb25uZWN0X3dpdGg6IFwi6YCa6L+H5Lul5LiL5pa55byP6L+e5o6lXCIsXG4gIGxvYWRpbmc6IFwi5q2j5Zyo5Yqg6L29Li4uXCIsXG4gIHNvbWV0aGluZ193ZW50X3dyb25nOiBcIuWHuuS6humXrumimFwiLFxuICBub19zdXBwb3J0ZWRfd2FsbGV0czogXCLnm67liY3ov5jmsqHmnInmlK/mjIHnmoTpkrHljIVcIixcbiAgbm9fd2FsbGV0c19mb3VuZDogXCLmsqHmnInmib7liLDpkrHljIVcIlxufTtcblxudmFyIGZhID0ge1xuICBjaG9vc2VfcHJlZmVycmVkX3dhbGxldDogXCLaqduM2YEg2b7ZiNmEINmF2YjYsdivINmG2LjYsSDYrtmI2K8g2LHYpyDYp9mG2KrYrtin2Kgg2qnZhtuM2K9cIixcbiAgY29ubmVjdF9tb2JpbGVfd2FsbGV0OiBcItio2Ycg2qnbjNmBINm+2YjZhCDZhdmI2KjYp9uM2YQg2YjYtdmEINi02YjbjNivXCIsXG4gIHNjYW5fcXJjb2RlX3dpdGhfd2FsbGV0OiBcItqp2K8gUVIg2LHYpyDYqNinINuM2qkg2qnbjNmBINm+2YjZhCDYs9in2LLar9in2LEg2KjYpyBXYWxsZXRDb25uZWN0INin2LPaqdmGINqp2YbbjNivXCIsXG4gIGNvbm5lY3Q6IFwi2KfYqti12KfZhFwiLFxuICBxcmNvZGU6IFwi2qnYryBRUlwiLFxuICBtb2JpbGU6IFwi2LPbjNin2LFcIixcbiAgZGVza3RvcDogXCLYr9iz2qnYqtin2b5cIixcbiAgY29weV90b19jbGlwYm9hcmQ6IFwi2qnZvtuMINio2Ycg2qnZhNuM2b4g2KjZiNix2K9cIixcbiAgY29waWVkX3RvX2NsaXBib2FyZDogXCLYr9ixINqp2YTbjNm+INio2YjYsdivINqp2b7bjCDYtNivIVwiLFxuICBjb25uZWN0X3dpdGg6IFwi2KfYsdiq2KjYp9i3INio2KdcIixcbiAgbG9hZGluZzogXCIuLi7YqNin2LHar9iw2KfYsduMXCIsXG4gIHNvbWV0aGluZ193ZW50X3dyb25nOiBcItmF2LTaqdmE24wg2b7bjNi0INii2YXYr1wiLFxuICBub19zdXBwb3J0ZWRfd2FsbGV0czogXCLZh9mG2YjYsiDZh9uM2oYg2qnbjNmBINm+2YjZhCDZvti02KrbjNio2KfZhtuMINi02K/ZhyDYp9uMINmI2KzZiNivINmG2K/Yp9ix2K9cIixcbiAgbm9fd2FsbGV0c19mb3VuZDogXCLZh9uM2oYg2qnbjNmBINm+2YjZhNuMINm+24zYr9inINmG2LTYr1wiXG59O1xuXG52YXIgbGFuZ3VhZ2VzID0ge1xuICBkZTogZGUsXG4gIGVuOiBlbixcbiAgZXM6IGVzLFxuICBmcjogZnIsXG4gIGtvOiBrbyxcbiAgcHQ6IHB0LFxuICB6aDogemgsXG4gIGZhOiBmYVxufTtcblxuZnVuY3Rpb24gaW5qZWN0U3R5bGVTaGVldCgpIHtcbiAgdmFyIGRvYyA9IGJyb3dzZXJVdGlscy5nZXREb2N1bWVudE9yVGhyb3coKTtcbiAgdmFyIHByZXYgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoV0FMTEVUQ09OTkVDVF9TVFlMRV9JRCk7XG5cbiAgaWYgKHByZXYpIHtcbiAgICBkb2MuaGVhZC5yZW1vdmVDaGlsZChwcmV2KTtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IGRvYy5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIHN0eWxlLnNldEF0dHJpYnV0ZShcImlkXCIsIFdBTExFVENPTk5FQ1RfU1RZTEVfSUQpO1xuICBzdHlsZS5pbm5lclRleHQgPSBXQUxMRVRDT05ORUNUX1NUWUxFX1NIRUVUO1xuICBkb2MuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIHJlbmRlcldyYXBwZXIoKSB7XG4gIHZhciBkb2MgPSBicm93c2VyVXRpbHMuZ2V0RG9jdW1lbnRPclRocm93KCk7XG4gIHZhciB3cmFwcGVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHdyYXBwZXIuc2V0QXR0cmlidXRlKFwiaWRcIiwgV0FMTEVUQ09OTkVDVF9XUkFQUEVSX0lEKTtcbiAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG4gIHJldHVybiB3cmFwcGVyO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyQ2xvc2VBbmltYXRpb24oKSB7XG4gIHZhciBkb2MgPSBicm93c2VyVXRpbHMuZ2V0RG9jdW1lbnRPclRocm93KCk7XG4gIHZhciBtb2RhbCA9IGRvYy5nZXRFbGVtZW50QnlJZChXQUxMRVRDT05ORUNUX01PREFMX0lEKTtcblxuICBpZiAobW9kYWwpIHtcbiAgICBtb2RhbC5jbGFzc05hbWUgPSBtb2RhbC5jbGFzc05hbWUucmVwbGFjZShcImZhZGVJblwiLCBcImZhZGVPdXRcIik7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IGRvYy5nZXRFbGVtZW50QnlJZChXQUxMRVRDT05ORUNUX1dSQVBQRVJfSUQpO1xuXG4gICAgICBpZiAod3JhcHBlcikge1xuICAgICAgICBkb2MuYm9keS5yZW1vdmVDaGlsZCh3cmFwcGVyKTtcbiAgICAgIH1cbiAgICB9LCBBTklNQVRJT05fRFVSQVRJT04pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFdyYXBwZWRDYWxsYmFjayhjYikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHRyaWdnZXJDbG9zZUFuaW1hdGlvbigpO1xuXG4gICAgaWYgKGNiKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dCgpIHtcbiAgdmFyIGxhbmcgPSBicm93c2VyVXRpbHMuZ2V0TmF2aWdhdG9yT3JUaHJvdygpLmxhbmd1YWdlLnNwbGl0KFwiLVwiKVswXSB8fCBcImVuXCI7XG4gIHJldHVybiBsYW5ndWFnZXNbbGFuZ10gfHwgbGFuZ3VhZ2VzW1wiZW5cIl07XG59XG5cbmZ1bmN0aW9uIG9wZW4kMSh1cmksIGNiLCBxcmNvZGVNb2RhbE9wdGlvbnMpIHtcbiAgaW5qZWN0U3R5bGVTaGVldCgpO1xuICB2YXIgd3JhcHBlciA9IHJlbmRlcldyYXBwZXIoKTtcbiAgUmVhY3QucmVuZGVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9kYWwsIHtcbiAgICB0ZXh0OiBnZXRUZXh0KCksXG4gICAgdXJpOiB1cmksXG4gICAgb25DbG9zZTogZ2V0V3JhcHBlZENhbGxiYWNrKGNiKSxcbiAgICBxcmNvZGVNb2RhbE9wdGlvbnM6IHFyY29kZU1vZGFsT3B0aW9uc1xuICB9KSwgd3JhcHBlcik7XG59XG5mdW5jdGlvbiBjbG9zZSQxKCkge1xuICB0cmlnZ2VyQ2xvc2VBbmltYXRpb24oKTtcbn1cblxudmFyIGlzTm9kZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT09IFwidW5kZWZpbmVkXCI7IH07XG5cbmZ1bmN0aW9uIG9wZW4kMih1cmksIGNiLCBxcmNvZGVNb2RhbE9wdGlvbnMpIHtcbiAgY29uc29sZS5sb2codXJpKTtcblxuICBpZiAoaXNOb2RlKCkpIHtcbiAgICBvcGVuKHVyaSk7XG4gIH0gZWxzZSB7XG4gICAgb3BlbiQxKHVyaSwgY2IsIHFyY29kZU1vZGFsT3B0aW9ucyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvc2UkMigpIHtcbiAgaWYgKGlzTm9kZSgpKSA7IGVsc2Uge1xuICAgIGNsb3NlJDEoKTtcbiAgfVxufVxuXG52YXIgaW5kZXggPSB7XG4gIG9wZW46IG9wZW4kMixcbiAgY2xvc2U6IGNsb3NlJDJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW5kZXg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAnd3MgZG9lcyBub3Qgd29yayBpbiB0aGUgYnJvd3Nlci4gQnJvd3NlciBjbGllbnRzIG11c3QgdXNlIHRoZSBuYXRpdmUgJyArXG4gICAgICAnV2ViU29ja2V0IG9iamVjdCdcbiAgKTtcbn07XG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleCAoc3RyLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgPDw9IDQ7XG5cbiAgICAgIC8vICdhJyAtICdmJ1xuICAgICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NCkge1xuICAgICAgICByIHw9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnIC0gJ0YnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcgJiYgYyA8PSAyMikge1xuICAgICAgICByIHw9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByIHw9IGMgJiAweGY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCkge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICAgIHZhciBvZmYgPSAwO1xuICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYlxuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgICAgb2ZmICs9IDI0O1xuICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgKyA2ICE9PSBzdGFydCkge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgci5zdHJpcCgpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICAgIHJldHVybiBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCJleHBvcnQgY29uc3QgcmVzZXJ2ZWRFdmVudHMgPSBbXG4gICAgXCJzZXNzaW9uX3JlcXVlc3RcIixcbiAgICBcInNlc3Npb25fdXBkYXRlXCIsXG4gICAgXCJleGNoYW5nZV9rZXlcIixcbiAgICBcImNvbm5lY3RcIixcbiAgICBcImRpc2Nvbm5lY3RcIixcbiAgICBcImRpc3BsYXlfdXJpXCIsXG4gICAgXCJtb2RhbF9jbG9zZWRcIixcbiAgICBcInRyYW5zcG9ydF9vcGVuXCIsXG4gICAgXCJ0cmFuc3BvcnRfY2xvc2VcIixcbiAgICBcInRyYW5zcG9ydF9lcnJvclwiLFxuXTtcbmV4cG9ydCBjb25zdCBzaWduaW5nTWV0aG9kcyA9IFtcbiAgICBcImV0aF9zZW5kVHJhbnNhY3Rpb25cIixcbiAgICBcImV0aF9zaWduVHJhbnNhY3Rpb25cIixcbiAgICBcImV0aF9zaWduXCIsXG4gICAgXCJldGhfc2lnblR5cGVkRGF0YVwiLFxuICAgIFwiZXRoX3NpZ25UeXBlZERhdGFfdjFcIixcbiAgICBcImV0aF9zaWduVHlwZWREYXRhX3YyXCIsXG4gICAgXCJldGhfc2lnblR5cGVkRGF0YV92M1wiLFxuICAgIFwiZXRoX3NpZ25UeXBlZERhdGFfdjRcIixcbiAgICBcInBlcnNvbmFsX3NpZ25cIixcbiAgICBcIndhbGxldF9hZGRFdGhlcmV1bUNoYWluXCIsXG4gICAgXCJ3YWxsZXRfc3dpdGNoRXRoZXJldW1DaGFpblwiLFxuICAgIFwid2FsbGV0X2dldFBlcm1pc3Npb25zXCIsXG4gICAgXCJ3YWxsZXRfcmVxdWVzdFBlcm1pc3Npb25zXCIsXG4gICAgXCJ3YWxsZXRfcmVnaXN0ZXJPbmJvYXJkaW5nXCIsXG4gICAgXCJ3YWxsZXRfd2F0Y2hBc3NldFwiLFxuICAgIFwid2FsbGV0X3NjYW5RUkNvZGVcIixcbl07XG5leHBvcnQgY29uc3Qgc3RhdGVNZXRob2RzID0gW1wiZXRoX2FjY291bnRzXCIsIFwiZXRoX2NoYWluSWRcIiwgXCJuZXRfdmVyc2lvblwiXTtcbmV4cG9ydCBjb25zdCBpbmZ1cmFOZXR3b3JrcyA9IHtcbiAgICAxOiBcIm1haW5uZXRcIixcbiAgICAzOiBcInJvcHN0ZW5cIixcbiAgICA0OiBcInJpbmtlYnlcIixcbiAgICA1OiBcImdvZXJsaVwiLFxuICAgIDQyOiBcImtvdmFuXCIsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsImltcG9ydCBCTiBmcm9tIFwiYm4uanNcIjtcbmltcG9ydCAqIGFzIGVuY29kaW5nIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9lbmNvZGluZ1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRBcnJheUJ1ZmZlclRvQnVmZmVyKGFyckJ1Zikge1xuICAgIHJldHVybiBlbmNvZGluZy5hcnJheVRvQnVmZmVyKG5ldyBVaW50OEFycmF5KGFyckJ1ZikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRBcnJheUJ1ZmZlclRvVXRmOChhcnJCdWYpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuYXJyYXlUb1V0ZjgobmV3IFVpbnQ4QXJyYXkoYXJyQnVmKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEFycmF5QnVmZmVyVG9IZXgoYXJyQnVmLCBub1ByZWZpeCkge1xuICAgIHJldHVybiBlbmNvZGluZy5hcnJheVRvSGV4KG5ldyBVaW50OEFycmF5KGFyckJ1ZiksICFub1ByZWZpeCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEFycmF5QnVmZmVyVG9OdW1iZXIoYXJyQnVmKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmFycmF5VG9OdW1iZXIobmV3IFVpbnQ4QXJyYXkoYXJyQnVmKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0QXJyYXlCdWZmZXJzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuaGV4VG9BcnJheShhcmdzLm1hcChiID0+IGVuY29kaW5nLmFycmF5VG9IZXgobmV3IFVpbnQ4QXJyYXkoYikpKS5qb2luKFwiXCIpKS5idWZmZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEJ1ZmZlclRvQXJyYXlCdWZmZXIoYnVmKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmJ1ZmZlclRvQXJyYXkoYnVmKS5idWZmZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEJ1ZmZlclRvVXRmOChidWYpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuYnVmZmVyVG9VdGY4KGJ1Zik7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEJ1ZmZlclRvSGV4KGJ1Ziwgbm9QcmVmaXgpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuYnVmZmVyVG9IZXgoYnVmLCAhbm9QcmVmaXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRCdWZmZXJUb051bWJlcihidWYpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuYnVmZmVyVG9OdW1iZXIoYnVmKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRCdWZmZXJzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuY29uY2F0QnVmZmVycyguLi5hcmdzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VXRmOFRvQXJyYXlCdWZmZXIodXRmOCkge1xuICAgIHJldHVybiBlbmNvZGluZy51dGY4VG9BcnJheSh1dGY4KS5idWZmZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydFV0ZjhUb0J1ZmZlcih1dGY4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLnV0ZjhUb0J1ZmZlcih1dGY4KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VXRmOFRvSGV4KHV0ZjgsIG5vUHJlZml4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLnV0ZjhUb0hleCh1dGY4LCAhbm9QcmVmaXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRVdGY4VG9OdW1iZXIodXRmOCkge1xuICAgIHJldHVybiBuZXcgQk4odXRmOCwgMTApLnRvTnVtYmVyKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydEhleFRvQnVmZmVyKGhleCkge1xuICAgIHJldHVybiBlbmNvZGluZy5oZXhUb0J1ZmZlcihoZXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRIZXhUb0FycmF5QnVmZmVyKGhleCkge1xuICAgIHJldHVybiBlbmNvZGluZy5oZXhUb0FycmF5KGhleCkuYnVmZmVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRIZXhUb1V0ZjgoaGV4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmhleFRvVXRmOChoZXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRIZXhUb051bWJlcihoZXgpIHtcbiAgICByZXR1cm4gbmV3IEJOKGVuY29kaW5nLnJlbW92ZUhleFByZWZpeChoZXgpLCBcImhleFwiKS50b051bWJlcigpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnROdW1iZXJUb0J1ZmZlcihudW0pIHtcbiAgICByZXR1cm4gZW5jb2RpbmcubnVtYmVyVG9CdWZmZXIobnVtKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0TnVtYmVyVG9BcnJheUJ1ZmZlcihudW0pIHtcbiAgICByZXR1cm4gZW5jb2RpbmcubnVtYmVyVG9BcnJheShudW0pLmJ1ZmZlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0TnVtYmVyVG9VdGY4KG51bSkge1xuICAgIHJldHVybiBuZXcgQk4obnVtKS50b1N0cmluZygpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnROdW1iZXJUb0hleChudW0sIG5vUHJlZml4KSB7XG4gICAgY29uc3QgaGV4ID0gZW5jb2RpbmcucmVtb3ZlSGV4UHJlZml4KGVuY29kaW5nLnNhbml0aXplSGV4KG5ldyBCTihudW0pLnRvU3RyaW5nKDE2KSkpO1xuICAgIHJldHVybiBub1ByZWZpeCA/IGhleCA6IGVuY29kaW5nLmFkZEhleFByZWZpeChoZXgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RpbmcuanMubWFwIiwiaW1wb3J0IHsgZ2V0RXJyb3IsIGdldEVycm9yQnlDb2RlLCBpc1Jlc2VydmVkRXJyb3JDb2RlIH0gZnJvbSBcIi4vZXJyb3JcIjtcbmltcG9ydCB7IElOVEVSTkFMX0VSUk9SLCBTRVJWRVJfRVJST1IgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXlsb2FkSWQoKSB7XG4gICAgY29uc3QgZGF0ZSA9IERhdGUubm93KCkgKiBNYXRoLnBvdygxMCwgMyk7XG4gICAgY29uc3QgZXh0cmEgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygxMCwgMykpO1xuICAgIHJldHVybiBkYXRlICsgZXh0cmE7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0SnNvblJwY1JlcXVlc3QobWV0aG9kLCBwYXJhbXMsIGlkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGlkIHx8IHBheWxvYWRJZCgpLFxuICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICBtZXRob2QsXG4gICAgICAgIHBhcmFtcyxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEpzb25ScGNSZXN1bHQoaWQsIHJlc3VsdCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkLFxuICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICByZXN1bHQsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRKc29uUnBjRXJyb3IoaWQsIGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQsXG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIGVycm9yOiBmb3JtYXRFcnJvck1lc3NhZ2UoZXJyb3IpLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RXJyb3JNZXNzYWdlKGVycm9yKSB7XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZ2V0RXJyb3IoSU5URVJOQUxfRVJST1IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVycm9yID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGVycm9yID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBnZXRFcnJvcihTRVJWRVJfRVJST1IpKSwgeyBtZXNzYWdlOiBlcnJvciB9KTtcbiAgICB9XG4gICAgaWYgKGlzUmVzZXJ2ZWRFcnJvckNvZGUoZXJyb3IuY29kZSkpIHtcbiAgICAgICAgZXJyb3IgPSBnZXRFcnJvckJ5Q29kZShlcnJvci5jb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0LmpzLm1hcCIsImltcG9ydCAqIGFzIGVuY29kaW5nIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9lbmNvZGluZ1wiO1xuaW1wb3J0ICogYXMganNvblJwY1V0aWxzIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzXCI7XG5pbXBvcnQgeyBpbmZ1cmFOZXR3b3JrcyB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplSGV4KGhleCkge1xuICAgIHJldHVybiBlbmNvZGluZy5zYW5pdGl6ZUhleChoZXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFkZEhleFByZWZpeChoZXgpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuYWRkSGV4UHJlZml4KGhleCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSGV4UHJlZml4KGhleCkge1xuICAgIHJldHVybiBlbmNvZGluZy5yZW1vdmVIZXhQcmVmaXgoaGV4KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVIZXhMZWFkaW5nWmVyb3MoaGV4KSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLnJlbW92ZUhleExlYWRpbmdaZXJvcyhlbmNvZGluZy5hZGRIZXhQcmVmaXgoaGV4KSk7XG59XG5leHBvcnQgY29uc3QgcGF5bG9hZElkID0ganNvblJwY1V0aWxzLnBheWxvYWRJZDtcbmV4cG9ydCBmdW5jdGlvbiB1dWlkKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9ICgoYSwgYikgPT4ge1xuICAgICAgICBmb3IgKGIgPSBhID0gXCJcIjsgYSsrIDwgMzY7IGIgKz0gKGEgKiA1MSkgJiA1MiA/IChhIF4gMTUgPyA4IF4gKE1hdGgucmFuZG9tKCkgKiAoYSBeIDIwID8gMTYgOiA0KSkgOiA0KS50b1N0cmluZygxNikgOiBcIi1cIikge1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiO1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsb2dEZXByZWNhdGlvbldhcm5pbmcoKSB7XG4gICAgY29uc29sZS53YXJuKFwiREVQUkVDQVRJT04gV0FSTklORzogVGhpcyBXYWxsZXRDb25uZWN0IGNsaWVudCBsaWJyYXJ5IHdpbGwgYmUgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBAd2FsbGV0Y29ubmVjdC9jbGllbnQuIFBsZWFzZSBjaGVjayBkb2NzLndhbGxldGNvbm5lY3Qub3JnIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhpcyBtaWdyYXRpb24hXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEluZnVyYVJwY1VybChjaGFpbklkLCBpbmZ1cmFJZCkge1xuICAgIGxldCBycGNVcmw7XG4gICAgY29uc3QgbmV0d29yayA9IGluZnVyYU5ldHdvcmtzW2NoYWluSWRdO1xuICAgIGlmIChuZXR3b3JrKSB7XG4gICAgICAgIHJwY1VybCA9IGBodHRwczovLyR7bmV0d29ya30uaW5mdXJhLmlvL3YzLyR7aW5mdXJhSWR9YDtcbiAgICB9XG4gICAgcmV0dXJuIHJwY1VybDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRScGNVcmwoY2hhaW5JZCwgcnBjKSB7XG4gICAgbGV0IHJwY1VybDtcbiAgICBjb25zdCBpbmZ1cmFVcmwgPSBnZXRJbmZ1cmFScGNVcmwoY2hhaW5JZCwgcnBjLmluZnVyYUlkKTtcbiAgICBpZiAocnBjLmN1c3RvbSAmJiBycGMuY3VzdG9tW2NoYWluSWRdKSB7XG4gICAgICAgIHJwY1VybCA9IHJwYy5jdXN0b21bY2hhaW5JZF07XG4gICAgfVxuICAgIGVsc2UgaWYgKGluZnVyYVVybCkge1xuICAgICAgICBycGNVcmwgPSBpbmZ1cmFVcmw7XG4gICAgfVxuICAgIHJldHVybiBycGNVcmw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taXNjLmpzLm1hcCIsImltcG9ydCAqIGFzIGVuY29kaW5nIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9lbmNvZGluZ1wiO1xuaW1wb3J0IHsgc2lnbmluZ01ldGhvZHMsIHJlc2VydmVkRXZlbnRzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eVN0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gXCJcIiB8fCAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLnRyaW0oKSA9PT0gXCJcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eUFycmF5KGFycmF5KSB7XG4gICAgcmV0dXJuICEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcuaXNCdWZmZXIodmFsKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVkQXJyYXkodmFsKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmlzVHlwZWRBcnJheSh2YWwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmlzQXJyYXlCdWZmZXIodmFsKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlKHZhbCkge1xuICAgIHJldHVybiBlbmNvZGluZy5nZXRUeXBlKHZhbCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RW5jb2RpbmcodmFsKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLmdldEVuY29kaW5nKHZhbCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNIZXhTdHJpbmcodmFsdWUsIGxlbmd0aCkge1xuICAgIHJldHVybiBlbmNvZGluZy5pc0hleFN0cmluZyh2YWx1ZSwgbGVuZ3RoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25ScGNTdWJzY3JpcHRpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QucGFyYW1zID09PSBcIm9iamVjdFwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1JlcXVlc3Qob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QubWV0aG9kICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1Jlc3BvbnNlU3VjY2VzcyhvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdC5yZXN1bHQgIT09IFwidW5kZWZpbmVkXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjUmVzcG9uc2VFcnJvcihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdC5lcnJvciAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVybmFsRXZlbnQob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QuZXZlbnQgIT09IFwidW5kZWZpbmVkXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZXNlcnZlZEV2ZW50KGV2ZW50KSB7XG4gICAgcmV0dXJuIHJlc2VydmVkRXZlbnRzLmluY2x1ZGVzKGV2ZW50KSB8fCBldmVudC5zdGFydHNXaXRoKFwid2NfXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2lsZW50UGF5bG9hZChyZXF1ZXN0KSB7XG4gICAgaWYgKHJlcXVlc3QubWV0aG9kLnN0YXJ0c1dpdGgoXCJ3Y19cIikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChzaWduaW5nTWV0aG9kcy5pbmNsdWRlcyhyZXF1ZXN0Lm1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRvcnMuanMubWFwIiwiaW1wb3J0IHsga2VjY2FrXzI1NiB9IGZyb20gXCJqcy1zaGEzXCI7XG5pbXBvcnQgeyByZW1vdmVIZXhQcmVmaXgsIGFkZEhleFByZWZpeCB9IGZyb20gXCJAd2FsbGV0Y29ubmVjdC9lbmNvZGluZ1wiO1xuaW1wb3J0IHsgY29udmVydFV0ZjhUb0hleCwgY29udmVydE51bWJlclRvSGV4LCBjb252ZXJ0VXRmOFRvQnVmZmVyIH0gZnJvbSBcIi4vZW5jb2RpbmdcIjtcbmltcG9ydCB7IHNhbml0aXplSGV4LCByZW1vdmVIZXhMZWFkaW5nWmVyb3MgfSBmcm9tIFwiLi9taXNjXCI7XG5pbXBvcnQgeyBpc0VtcHR5QXJyYXksIGlzSGV4U3RyaW5nLCBpc0VtcHR5U3RyaW5nIH0gZnJvbSBcIi4vdmFsaWRhdG9yc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHRvQ2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpIHtcbiAgICBhZGRyZXNzID0gcmVtb3ZlSGV4UHJlZml4KGFkZHJlc3MudG9Mb3dlckNhc2UoKSk7XG4gICAgY29uc3QgaGFzaCA9IHJlbW92ZUhleFByZWZpeChrZWNjYWtfMjU2KGNvbnZlcnRVdGY4VG9CdWZmZXIoYWRkcmVzcykpKTtcbiAgICBsZXQgY2hlY2tzdW0gPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkcmVzcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocGFyc2VJbnQoaGFzaFtpXSwgMTYpID4gNykge1xuICAgICAgICAgICAgY2hlY2tzdW0gKz0gYWRkcmVzc1tpXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tzdW0gKz0gYWRkcmVzc1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWRkSGV4UHJlZml4KGNoZWNrc3VtKTtcbn1cbmV4cG9ydCBjb25zdCBpc1ZhbGlkQWRkcmVzcyA9IChhZGRyZXNzKSA9PiB7XG4gICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYWRkcmVzcy50b0xvd2VyQ2FzZSgpLnN1YnN0cmluZygwLCAyKSAhPT0gXCIweFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIS9eKDB4KT9bMC05YS1mXXs0MH0kL2kudGVzdChhZGRyZXNzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKC9eKDB4KT9bMC05YS1mXXs0MH0kLy50ZXN0KGFkZHJlc3MpIHx8IC9eKDB4KT9bMC05QS1GXXs0MH0kLy50ZXN0KGFkZHJlc3MpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFkZHJlc3MgPT09IHRvQ2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpO1xuICAgIH1cbn07XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQZXJzb25hbFNpZ24ocGFyYW1zKSB7XG4gICAgaWYgKCFpc0VtcHR5QXJyYXkocGFyYW1zKSAmJiAhaXNIZXhTdHJpbmcocGFyYW1zWzBdKSkge1xuICAgICAgICBwYXJhbXNbMF0gPSBjb252ZXJ0VXRmOFRvSGV4KHBhcmFtc1swXSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2FjdGlvbkRhdGEodHhEYXRhKSB7XG4gICAgaWYgKHR5cGVvZiB0eERhdGEudHlwZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eERhdGEudHlwZSAhPT0gXCIwXCIpXG4gICAgICAgIHJldHVybiB0eERhdGE7XG4gICAgaWYgKHR5cGVvZiB0eERhdGEuZnJvbSA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhaXNWYWxpZEFkZHJlc3ModHhEYXRhLmZyb20pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVHJhbnNhY3Rpb24gb2JqZWN0IG11c3QgaW5jbHVkZSBhIHZhbGlkICdmcm9tJyB2YWx1ZS5gKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VIZXhWYWx1ZXModmFsdWUpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8ICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIWlzRW1wdHlTdHJpbmcodmFsdWUpKSkge1xuICAgICAgICAgICAgaWYgKCFpc0hleFN0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBjb252ZXJ0TnVtYmVyVG9IZXgodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc2FuaXRpemVIZXgodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZW1vdmVIZXhMZWFkaW5nWmVyb3MocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjb25zdCB0eERhdGFSUEMgPSB7XG4gICAgICAgIGZyb206IHNhbml0aXplSGV4KHR4RGF0YS5mcm9tKSxcbiAgICAgICAgdG86IHR5cGVvZiB0eERhdGEudG8gPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogc2FuaXRpemVIZXgodHhEYXRhLnRvKSxcbiAgICAgICAgZ2FzUHJpY2U6IHR5cGVvZiB0eERhdGEuZ2FzUHJpY2UgPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogcGFyc2VIZXhWYWx1ZXModHhEYXRhLmdhc1ByaWNlKSxcbiAgICAgICAgZ2FzOiB0eXBlb2YgdHhEYXRhLmdhcyA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgPyB0eXBlb2YgdHhEYXRhLmdhc0xpbWl0ID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgOiBwYXJzZUhleFZhbHVlcyh0eERhdGEuZ2FzTGltaXQpXG4gICAgICAgICAgICA6IHBhcnNlSGV4VmFsdWVzKHR4RGF0YS5nYXMpLFxuICAgICAgICB2YWx1ZTogdHlwZW9mIHR4RGF0YS52YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiBwYXJzZUhleFZhbHVlcyh0eERhdGEudmFsdWUpLFxuICAgICAgICBub25jZTogdHlwZW9mIHR4RGF0YS5ub25jZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiBwYXJzZUhleFZhbHVlcyh0eERhdGEubm9uY2UpLFxuICAgICAgICBkYXRhOiB0eXBlb2YgdHhEYXRhLmRhdGEgPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogc2FuaXRpemVIZXgodHhEYXRhLmRhdGEpIHx8IFwiMHhcIixcbiAgICB9O1xuICAgIGNvbnN0IHBydW5hYmxlID0gW1wiZ2FzUHJpY2VcIiwgXCJnYXNcIiwgXCJ2YWx1ZVwiLCBcIm5vbmNlXCJdO1xuICAgIE9iamVjdC5rZXlzKHR4RGF0YVJQQykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGlmICghdHhEYXRhUlBDW2tleV0udHJpbSgpLmxlbmd0aCAmJiBwcnVuYWJsZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBkZWxldGUgdHhEYXRhUlBDW2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdHhEYXRhUlBDO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXRoZXJldW0uanMubWFwIiwiaW1wb3J0ICogYXMgcXVlcnlTdHJpbmdVdGlscyBmcm9tIFwicXVlcnktc3RyaW5nXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UXVlcnlTdHJpbmcodXJsKSB7XG4gICAgY29uc3QgcGF0aEVuZCA9IHVybC5pbmRleE9mKFwiP1wiKSAhPT0gLTEgPyB1cmwuaW5kZXhPZihcIj9cIikgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcXVlcnlTdHJpbmcgPSB0eXBlb2YgcGF0aEVuZCAhPT0gXCJ1bmRlZmluZWRcIiA/IHVybC5zdWJzdHIocGF0aEVuZCkgOiBcIlwiO1xuICAgIHJldHVybiBxdWVyeVN0cmluZztcbn1cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRUb1F1ZXJ5U3RyaW5nKHF1ZXJ5U3RyaW5nLCBuZXdRdWVyeVBhcmFtcykge1xuICAgIGxldCBxdWVyeVBhcmFtcyA9IHBhcnNlUXVlcnlTdHJpbmcocXVlcnlTdHJpbmcpO1xuICAgIHF1ZXJ5UGFyYW1zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBxdWVyeVBhcmFtcyksIG5ld1F1ZXJ5UGFyYW1zKTtcbiAgICBxdWVyeVN0cmluZyA9IGZvcm1hdFF1ZXJ5U3RyaW5nKHF1ZXJ5UGFyYW1zKTtcbiAgICByZXR1cm4gcXVlcnlTdHJpbmc7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZyhxdWVyeVN0cmluZykge1xuICAgIHJldHVybiBxdWVyeVN0cmluZ1V0aWxzLnBhcnNlKHF1ZXJ5U3RyaW5nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRRdWVyeVN0cmluZyhxdWVyeVBhcmFtcykge1xuICAgIHJldHVybiBxdWVyeVN0cmluZ1V0aWxzLnN0cmluZ2lmeShxdWVyeVBhcmFtcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmwuanMubWFwIiwiY2xhc3MgTmV0d29ya01vbml0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXJzID0gW107XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgKCkgPT4gdGhpcy50cmlnZ2VyKFwib25saW5lXCIpKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCAoKSA9PiB0aGlzLnRyaWdnZXIoXCJvZmZsaW5lXCIpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVycy5wdXNoKHtcbiAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0cmlnZ2VyKGV2ZW50KSB7XG4gICAgICAgIGxldCBldmVudEVtaXR0ZXJzID0gW107XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnRFbWl0dGVycyA9IHRoaXMuX2V2ZW50RW1pdHRlcnMuZmlsdGVyKChldmVudEVtaXR0ZXIpID0+IGV2ZW50RW1pdHRlci5ldmVudCA9PT0gZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50RW1pdHRlcnMuZm9yRWFjaCgoZXZlbnRFbWl0dGVyKSA9PiB7XG4gICAgICAgICAgICBldmVudEVtaXR0ZXIuY2FsbGJhY2soKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgTmV0d29ya01vbml0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXR3b3JrLmpzLm1hcCIsImltcG9ydCB7IGlzQnJvd3NlciwgZ2V0TG9jYXRpb24sIGdldFF1ZXJ5U3RyaW5nLCBkZXRlY3RFbnYsIGFwcGVuZFRvUXVlcnlTdHJpbmcsIH0gZnJvbSBcIkB3YWxsZXRjb25uZWN0L3V0aWxzXCI7XG5pbXBvcnQgTmV0d29ya01vbml0b3IgZnJvbSBcIi4vbmV0d29ya1wiO1xuY29uc3QgV1MgPSB0eXBlb2YgZ2xvYmFsLldlYlNvY2tldCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbC5XZWJTb2NrZXQgOiByZXF1aXJlKFwid3NcIik7XG5jbGFzcyBTb2NrZXRUcmFuc3BvcnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICAgICAgdGhpcy5fcXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gW107XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5fcHJvdG9jb2wgPSBvcHRzLnByb3RvY29sO1xuICAgICAgICB0aGlzLl92ZXJzaW9uID0gb3B0cy52ZXJzaW9uO1xuICAgICAgICB0aGlzLl91cmwgPSBcIlwiO1xuICAgICAgICB0aGlzLl9uZXRNb25pdG9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc29ja2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbmV4dFNvY2tldCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBvcHRzLnN1YnNjcmlwdGlvbnMgfHwgW107XG4gICAgICAgIHRoaXMuX25ldE1vbml0b3IgPSBvcHRzLm5ldE1vbml0b3IgfHwgbmV3IE5ldHdvcmtNb25pdG9yKCk7XG4gICAgICAgIGlmICghb3B0cy51cmwgfHwgdHlwZW9mIG9wdHMudXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIG9yIGludmFsaWQgV2ViU29ja2V0IHVybFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cmwgPSBvcHRzLnVybDtcbiAgICAgICAgdGhpcy5fbmV0TW9uaXRvci5vbihcIm9ubGluZVwiLCAoKSA9PiB0aGlzLl9zb2NrZXRDcmVhdGUoKSk7XG4gICAgfVxuICAgIHNldCByZWFkeVN0YXRlKHZhbHVlKSB7XG4gICAgfVxuICAgIGdldCByZWFkeVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc29ja2V0ID8gdGhpcy5fc29ja2V0LnJlYWR5U3RhdGUgOiAtMTtcbiAgICB9XG4gICAgc2V0IGNvbm5lY3RpbmcodmFsdWUpIHtcbiAgICB9XG4gICAgZ2V0IGNvbm5lY3RpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWR5U3RhdGUgPT09IDA7XG4gICAgfVxuICAgIHNldCBjb25uZWN0ZWQodmFsdWUpIHtcbiAgICB9XG4gICAgZ2V0IGNvbm5lY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZHlTdGF0ZSA9PT0gMTtcbiAgICB9XG4gICAgc2V0IGNsb3NpbmcodmFsdWUpIHtcbiAgICB9XG4gICAgZ2V0IGNsb3NpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWR5U3RhdGUgPT09IDI7XG4gICAgfVxuICAgIHNldCBjbG9zZWQodmFsdWUpIHtcbiAgICB9XG4gICAgZ2V0IGNsb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZHlTdGF0ZSA9PT0gMztcbiAgICB9XG4gICAgb3BlbigpIHtcbiAgICAgICAgdGhpcy5fc29ja2V0Q3JlYXRlKCk7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLl9zb2NrZXRDbG9zZSgpO1xuICAgIH1cbiAgICBzZW5kKG1lc3NhZ2UsIHRvcGljLCBzaWxlbnQpIHtcbiAgICAgICAgaWYgKCF0b3BpYyB8fCB0eXBlb2YgdG9waWMgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcgb3IgaW52YWxpZCB0b3BpYyBmaWVsZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zb2NrZXRTZW5kKHtcbiAgICAgICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgICAgIHR5cGU6IFwicHViXCIsXG4gICAgICAgICAgICBwYXlsb2FkOiBtZXNzYWdlLFxuICAgICAgICAgICAgc2lsZW50OiAhIXNpbGVudCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN1YnNjcmliZSh0b3BpYykge1xuICAgICAgICB0aGlzLl9zb2NrZXRTZW5kKHtcbiAgICAgICAgICAgIHRvcGljOiB0b3BpYyxcbiAgICAgICAgICAgIHR5cGU6IFwic3ViXCIsXG4gICAgICAgICAgICBwYXlsb2FkOiBcIlwiLFxuICAgICAgICAgICAgc2lsZW50OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5wdXNoKHsgZXZlbnQsIGNhbGxiYWNrIH0pO1xuICAgIH1cbiAgICBfc29ja2V0Q3JlYXRlKCkge1xuICAgICAgICBpZiAodGhpcy5fbmV4dFNvY2tldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVybCA9IGdldFdlYlNvY2tldFVybCh0aGlzLl91cmwsIHRoaXMuX3Byb3RvY29sLCB0aGlzLl92ZXJzaW9uKTtcbiAgICAgICAgdGhpcy5fbmV4dFNvY2tldCA9IG5ldyBXUyh1cmwpO1xuICAgICAgICBpZiAoIXRoaXMuX25leHRTb2NrZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgc29ja2V0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX25leHRTb2NrZXQub25tZXNzYWdlID0gKGV2ZW50KSA9PiB0aGlzLl9zb2NrZXRSZWNlaXZlKGV2ZW50KTtcbiAgICAgICAgdGhpcy5fbmV4dFNvY2tldC5vbm9wZW4gPSAoKSA9PiB0aGlzLl9zb2NrZXRPcGVuKCk7XG4gICAgICAgIHRoaXMuX25leHRTb2NrZXQub25lcnJvciA9IChldmVudCkgPT4gdGhpcy5fc29ja2V0RXJyb3IoZXZlbnQpO1xuICAgICAgICB0aGlzLl9uZXh0U29ja2V0Lm9uY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9uZXh0U29ja2V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zb2NrZXRDcmVhdGUoKTtcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBfc29ja2V0T3BlbigpIHtcbiAgICAgICAgdGhpcy5fc29ja2V0Q2xvc2UoKTtcbiAgICAgICAgdGhpcy5fc29ja2V0ID0gdGhpcy5fbmV4dFNvY2tldDtcbiAgICAgICAgdGhpcy5fbmV4dFNvY2tldCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3F1ZXVlU3Vic2NyaXB0aW9ucygpO1xuICAgICAgICB0aGlzLl9wdXNoUXVldWUoKTtcbiAgICB9XG4gICAgX3NvY2tldENsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fc29ja2V0KSB7XG4gICAgICAgICAgICB0aGlzLl9zb2NrZXQub25jbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl9zb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfc29ja2V0U2VuZChzb2NrZXRNZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShzb2NrZXRNZXNzYWdlKTtcbiAgICAgICAgaWYgKHRoaXMuX3NvY2tldCAmJiB0aGlzLl9zb2NrZXQucmVhZHlTdGF0ZSA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5fc29ja2V0LnNlbmQobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRUb1F1ZXVlKHNvY2tldE1lc3NhZ2UpO1xuICAgICAgICAgICAgdGhpcy5fc29ja2V0Q3JlYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgX3NvY2tldFJlY2VpdmUoZXZlbnQpIHtcbiAgICAgICAgbGV0IHNvY2tldE1lc3NhZ2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzb2NrZXRNZXNzYWdlID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zb2NrZXRTZW5kKHtcbiAgICAgICAgICAgIHRvcGljOiBzb2NrZXRNZXNzYWdlLnRvcGljLFxuICAgICAgICAgICAgdHlwZTogXCJhY2tcIixcbiAgICAgICAgICAgIHBheWxvYWQ6IFwiXCIsXG4gICAgICAgICAgICBzaWxlbnQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5fc29ja2V0ICYmIHRoaXMuX3NvY2tldC5yZWFkeVN0YXRlID09PSAxKSB7XG4gICAgICAgICAgICBjb25zdCBldmVudHMgPSB0aGlzLl9ldmVudHMuZmlsdGVyKGV2ZW50ID0+IGV2ZW50LmV2ZW50ID09PSBcIm1lc3NhZ2VcIik7XG4gICAgICAgICAgICBpZiAoZXZlbnRzICYmIGV2ZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBldmVudHMuZm9yRWFjaChldmVudCA9PiBldmVudC5jYWxsYmFjayhzb2NrZXRNZXNzYWdlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3NvY2tldEVycm9yKGUpIHtcbiAgICAgICAgY29uc3QgZXZlbnRzID0gdGhpcy5fZXZlbnRzLmZpbHRlcihldmVudCA9PiBldmVudC5ldmVudCA9PT0gXCJlcnJvclwiKTtcbiAgICAgICAgaWYgKGV2ZW50cyAmJiBldmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBldmVudHMuZm9yRWFjaChldmVudCA9PiBldmVudC5jYWxsYmFjayhlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3F1ZXVlU3Vic2NyaXB0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaCgodG9waWMpID0+IHRoaXMuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgICAgdHlwZTogXCJzdWJcIixcbiAgICAgICAgICAgIHBheWxvYWQ6IFwiXCIsXG4gICAgICAgICAgICBzaWxlbnQ6IHRydWUsXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHRoaXMub3B0cy5zdWJzY3JpcHRpb25zIHx8IFtdO1xuICAgIH1cbiAgICBfc2V0VG9RdWV1ZShzb2NrZXRNZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlLnB1c2goc29ja2V0TWVzc2FnZSk7XG4gICAgfVxuICAgIF9wdXNoUXVldWUoKSB7XG4gICAgICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5fcXVldWU7XG4gICAgICAgIHF1ZXVlLmZvckVhY2goKHNvY2tldE1lc3NhZ2UpID0+IHRoaXMuX3NvY2tldFNlbmQoc29ja2V0TWVzc2FnZSkpO1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFdlYlNvY2tldFVybChfdXJsLCBwcm90b2NvbCwgdmVyc2lvbikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgdXJsID0gX3VybC5zdGFydHNXaXRoKFwiaHR0cHNcIilcbiAgICAgICAgPyBfdXJsLnJlcGxhY2UoXCJodHRwc1wiLCBcIndzc1wiKVxuICAgICAgICA6IF91cmwuc3RhcnRzV2l0aChcImh0dHBcIilcbiAgICAgICAgICAgID8gX3VybC5yZXBsYWNlKFwiaHR0cFwiLCBcIndzXCIpXG4gICAgICAgICAgICA6IF91cmw7XG4gICAgY29uc3Qgc3BsaXRVcmwgPSB1cmwuc3BsaXQoXCI/XCIpO1xuICAgIGNvbnN0IHBhcmFtcyA9IGlzQnJvd3NlcigpXG4gICAgICAgID8ge1xuICAgICAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAgICAgZW52OiBcImJyb3dzZXJcIixcbiAgICAgICAgICAgIGhvc3Q6ICgoX2EgPSBnZXRMb2NhdGlvbigpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaG9zdCkgfHwgXCJcIixcbiAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgICAgIGVudjogKChfYiA9IGRldGVjdEVudigpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubmFtZSkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IGFwcGVuZFRvUXVlcnlTdHJpbmcoZ2V0UXVlcnlTdHJpbmcoc3BsaXRVcmxbMV0gfHwgXCJcIiksIHBhcmFtcyk7XG4gICAgcmV0dXJuIHNwbGl0VXJsWzBdICsgXCI/XCIgKyBxdWVyeVN0cmluZztcbn1cbmV4cG9ydCBkZWZhdWx0IFNvY2tldFRyYW5zcG9ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImV4cG9ydCBjb25zdCBFUlJPUl9TRVNTSU9OX0NPTk5FQ1RFRCA9IFwiU2Vzc2lvbiBjdXJyZW50bHkgY29ubmVjdGVkXCI7XG5leHBvcnQgY29uc3QgRVJST1JfU0VTU0lPTl9ESVNDT05ORUNURUQgPSBcIlNlc3Npb24gY3VycmVudGx5IGRpc2Nvbm5lY3RlZFwiO1xuZXhwb3J0IGNvbnN0IEVSUk9SX1NFU1NJT05fUkVKRUNURUQgPSBcIlNlc3Npb24gUmVqZWN0ZWRcIjtcbmV4cG9ydCBjb25zdCBFUlJPUl9NSVNTSU5HX0pTT05fUlBDID0gXCJNaXNzaW5nIEpTT04gUlBDIHJlc3BvbnNlXCI7XG5leHBvcnQgY29uc3QgRVJST1JfTUlTU0lOR19SRVNVTFQgPSBgSlNPTi1SUEMgc3VjY2VzcyByZXNwb25zZSBtdXN0IGluY2x1ZGUgXCJyZXN1bHRcIiBmaWVsZGA7XG5leHBvcnQgY29uc3QgRVJST1JfTUlTU0lOR19FUlJPUiA9IGBKU09OLVJQQyBlcnJvciByZXNwb25zZSBtdXN0IGluY2x1ZGUgXCJlcnJvclwiIGZpZWxkYDtcbmV4cG9ydCBjb25zdCBFUlJPUl9NSVNTSU5HX01FVEhPRCA9IGBKU09OIFJQQyByZXF1ZXN0IG11c3QgaGF2ZSB2YWxpZCBcIm1ldGhvZFwiIHZhbHVlYDtcbmV4cG9ydCBjb25zdCBFUlJPUl9NSVNTSU5HX0lEID0gYEpTT04gUlBDIHJlcXVlc3QgbXVzdCBoYXZlIHZhbGlkIFwiaWRcIiB2YWx1ZWA7XG5leHBvcnQgY29uc3QgRVJST1JfTUlTU0lOR19SRVFVSVJFRCA9IFwiTWlzc2luZyBvbmUgb2YgdGhlIHJlcXVpcmVkIHBhcmFtZXRlcnM6IGJyaWRnZSAvIHVyaSAvIHNlc3Npb25cIjtcbmV4cG9ydCBjb25zdCBFUlJPUl9JTlZBTElEX1JFU1BPTlNFID0gXCJKU09OIFJQQyByZXNwb25zZSBmb3JtYXQgaXMgaW52YWxpZFwiO1xuZXhwb3J0IGNvbnN0IEVSUk9SX0lOVkFMSURfVVJJID0gXCJVUkkgZm9ybWF0IGlzIGludmFsaWRcIjtcbmV4cG9ydCBjb25zdCBFUlJPUl9RUkNPREVfTU9EQUxfTk9UX1BST1ZJREVEID0gXCJRUkNvZGUgTW9kYWwgbm90IHByb3ZpZGVkXCI7XG5leHBvcnQgY29uc3QgRVJST1JfUVJDT0RFX01PREFMX1VTRVJfQ0xPU0VEID0gXCJVc2VyIGNsb3NlIFFSQ29kZSBNb2RhbFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCIsImltcG9ydCB7IGlzSnNvblJwY1JlcXVlc3QsIGlzSnNvblJwY1Jlc3BvbnNlU3VjY2VzcywgaXNKc29uUnBjUmVzcG9uc2VFcnJvciwgaXNJbnRlcm5hbEV2ZW50LCBpc1Jlc2VydmVkRXZlbnQsIH0gZnJvbSBcIkB3YWxsZXRjb25uZWN0L3V0aWxzXCI7XG5jbGFzcyBFdmVudE1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXJzID0gW107XG4gICAgfVxuICAgIHN1YnNjcmliZShldmVudEVtaXR0ZXIpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVycy5wdXNoKGV2ZW50RW1pdHRlcik7XG4gICAgfVxuICAgIHVuc3Vic2NyaWJlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlcnMgPSB0aGlzLl9ldmVudEVtaXR0ZXJzLmZpbHRlcih4ID0+IHguZXZlbnQgIT09IGV2ZW50KTtcbiAgICB9XG4gICAgdHJpZ2dlcihwYXlsb2FkKSB7XG4gICAgICAgIGxldCBldmVudEVtaXR0ZXJzID0gW107XG4gICAgICAgIGxldCBldmVudDtcbiAgICAgICAgaWYgKGlzSnNvblJwY1JlcXVlc3QocGF5bG9hZCkpIHtcbiAgICAgICAgICAgIGV2ZW50ID0gcGF5bG9hZC5tZXRob2Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNKc29uUnBjUmVzcG9uc2VTdWNjZXNzKHBheWxvYWQpIHx8IGlzSnNvblJwY1Jlc3BvbnNlRXJyb3IocGF5bG9hZCkpIHtcbiAgICAgICAgICAgIGV2ZW50ID0gYHJlc3BvbnNlOiR7cGF5bG9hZC5pZH1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzSW50ZXJuYWxFdmVudChwYXlsb2FkKSkge1xuICAgICAgICAgICAgZXZlbnQgPSBwYXlsb2FkLmV2ZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXZlbnQgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnRFbWl0dGVycyA9IHRoaXMuX2V2ZW50RW1pdHRlcnMuZmlsdGVyKChldmVudEVtaXR0ZXIpID0+IGV2ZW50RW1pdHRlci5ldmVudCA9PT0gZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIWV2ZW50RW1pdHRlcnMgfHwgIWV2ZW50RW1pdHRlcnMubGVuZ3RoKSAmJlxuICAgICAgICAgICAgIWlzUmVzZXJ2ZWRFdmVudChldmVudCkgJiZcbiAgICAgICAgICAgICFpc0ludGVybmFsRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgICAgICBldmVudEVtaXR0ZXJzID0gdGhpcy5fZXZlbnRFbWl0dGVycy5maWx0ZXIoKGV2ZW50RW1pdHRlcikgPT4gZXZlbnRFbWl0dGVyLmV2ZW50ID09PSBcImNhbGxfcmVxdWVzdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBldmVudEVtaXR0ZXJzLmZvckVhY2goKGV2ZW50RW1pdHRlcikgPT4ge1xuICAgICAgICAgICAgaWYgKGlzSnNvblJwY1Jlc3BvbnNlRXJyb3IocGF5bG9hZCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihwYXlsb2FkLmVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGV2ZW50RW1pdHRlci5jYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBldmVudEVtaXR0ZXIuY2FsbGJhY2sobnVsbCwgcGF5bG9hZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEV2ZW50TWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50cy5qcy5tYXAiLCJpbXBvcnQgeyBpc1dhbGxldENvbm5lY3RTZXNzaW9uLCBnZXRMb2NhbCwgc2V0TG9jYWwsIHJlbW92ZUxvY2FsIH0gZnJvbSBcIkB3YWxsZXRjb25uZWN0L3V0aWxzXCI7XG5jbGFzcyBTZXNzaW9uU3RvcmFnZSB7XG4gICAgY29uc3RydWN0b3Ioc3RvcmFnZUlkID0gXCJ3YWxsZXRjb25uZWN0XCIpIHtcbiAgICAgICAgdGhpcy5zdG9yYWdlSWQgPSBzdG9yYWdlSWQ7XG4gICAgfVxuICAgIGdldFNlc3Npb24oKSB7XG4gICAgICAgIGxldCBzZXNzaW9uID0gbnVsbDtcbiAgICAgICAgY29uc3QganNvbiA9IGdldExvY2FsKHRoaXMuc3RvcmFnZUlkKTtcbiAgICAgICAgaWYgKGpzb24gJiYgaXNXYWxsZXRDb25uZWN0U2Vzc2lvbihqc29uKSkge1xuICAgICAgICAgICAgc2Vzc2lvbiA9IGpzb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgfVxuICAgIHNldFNlc3Npb24oc2Vzc2lvbikge1xuICAgICAgICBzZXRMb2NhbCh0aGlzLnN0b3JhZ2VJZCwgc2Vzc2lvbik7XG4gICAgICAgIHJldHVybiBzZXNzaW9uO1xuICAgIH1cbiAgICByZW1vdmVTZXNzaW9uKCkge1xuICAgICAgICByZW1vdmVMb2NhbCh0aGlzLnN0b3JhZ2VJZCk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgU2Vzc2lvblN0b3JhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdG9yYWdlLmpzLm1hcCIsImltcG9ydCB7IHBhcnNlUXVlcnlTdHJpbmcgfSBmcm9tIFwiLi91cmxcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1dhbGxldENvbm5lY3RTZXNzaW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0LmJyaWRnZSAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVdhbGxldENvbm5lY3RVcmkoc3RyKSB7XG4gICAgY29uc3QgcGF0aFN0YXJ0ID0gc3RyLmluZGV4T2YoXCI6XCIpO1xuICAgIGNvbnN0IHBhdGhFbmQgPSBzdHIuaW5kZXhPZihcIj9cIikgIT09IC0xID8gc3RyLmluZGV4T2YoXCI/XCIpIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByb3RvY29sID0gc3RyLnN1YnN0cmluZygwLCBwYXRoU3RhcnQpO1xuICAgIGNvbnN0IHBhdGggPSBzdHIuc3Vic3RyaW5nKHBhdGhTdGFydCArIDEsIHBhdGhFbmQpO1xuICAgIGZ1bmN0aW9uIHBhcnNlUmVxdWlyZWRQYXJhbXMocGF0aCkge1xuICAgICAgICBjb25zdCBzZXBhcmF0b3IgPSBcIkBcIjtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gcGF0aC5zcGxpdChzZXBhcmF0b3IpO1xuICAgICAgICBjb25zdCByZXF1aXJlZFBhcmFtcyA9IHtcbiAgICAgICAgICAgIGhhbmRzaGFrZVRvcGljOiB2YWx1ZXNbMF0sXG4gICAgICAgICAgICB2ZXJzaW9uOiBwYXJzZUludCh2YWx1ZXNbMV0sIDEwKSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmVkUGFyYW1zO1xuICAgIH1cbiAgICBjb25zdCByZXF1aXJlZFBhcmFtcyA9IHBhcnNlUmVxdWlyZWRQYXJhbXMocGF0aCk7XG4gICAgY29uc3QgcXVlcnlTdHJpbmcgPSB0eXBlb2YgcGF0aEVuZCAhPT0gXCJ1bmRlZmluZWRcIiA/IHN0ci5zdWJzdHIocGF0aEVuZCkgOiBcIlwiO1xuICAgIGZ1bmN0aW9uIHBhcnNlUXVlcnlQYXJhbXMocXVlcnlTdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcGFyc2VRdWVyeVN0cmluZyhxdWVyeVN0cmluZyk7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB7XG4gICAgICAgICAgICBrZXk6IHJlc3VsdC5rZXkgfHwgXCJcIixcbiAgICAgICAgICAgIGJyaWRnZTogcmVzdWx0LmJyaWRnZSB8fCBcIlwiLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcGFyYW1ldGVycztcbiAgICB9XG4gICAgY29uc3QgcXVlcnlQYXJhbXMgPSBwYXJzZVF1ZXJ5UGFyYW1zKHF1ZXJ5U3RyaW5nKTtcbiAgICBjb25zdCByZXN1bHQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBwcm90b2NvbCB9LCByZXF1aXJlZFBhcmFtcyksIHF1ZXJ5UGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2Vzc2lvbi5qcy5tYXAiLCJjb25zdCBkb21haW4gPSBcIndhbGxldGNvbm5lY3Qub3JnXCI7XG5jb25zdCBhbHBoYW51bWVyaWNhbCA9IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCI7XG5jb25zdCBicmlkZ2VzID0gYWxwaGFudW1lcmljYWwuc3BsaXQoXCJcIikubWFwKGNoYXIgPT4gYGh0dHBzOi8vJHtjaGFyfS5icmlkZ2Uud2FsbGV0Y29ubmVjdC5vcmdgKTtcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0SG9zdG5hbWUodXJsKSB7XG4gICAgbGV0IGhvc3RuYW1lID0gdXJsLmluZGV4T2YoXCIvL1wiKSA+IC0xID8gdXJsLnNwbGl0KFwiL1wiKVsyXSA6IHVybC5zcGxpdChcIi9cIilbMF07XG4gICAgaG9zdG5hbWUgPSBob3N0bmFtZS5zcGxpdChcIjpcIilbMF07XG4gICAgaG9zdG5hbWUgPSBob3N0bmFtZS5zcGxpdChcIj9cIilbMF07XG4gICAgcmV0dXJuIGhvc3RuYW1lO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RSb290RG9tYWluKHVybCkge1xuICAgIHJldHVybiBleHRyYWN0SG9zdG5hbWUodXJsKVxuICAgICAgICAuc3BsaXQoXCIuXCIpXG4gICAgICAgIC5zbGljZSgtMilcbiAgICAgICAgLmpvaW4oXCIuXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUJyaWRnZUluZGV4KCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBicmlkZ2VzLmxlbmd0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0UmFuZG9tQnJpZGdlVXJsKCkge1xuICAgIHJldHVybiBicmlkZ2VzW3JhbmRvbUJyaWRnZUluZGV4KCldO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFNlbGVjdFJhbmRvbWx5KHVybCkge1xuICAgIHJldHVybiBleHRyYWN0Um9vdERvbWFpbih1cmwpID09PSBkb21haW47XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0QnJpZGdlVXJsKHVybCkge1xuICAgIGlmIChzaG91bGRTZWxlY3RSYW5kb21seSh1cmwpKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RSYW5kb21CcmlkZ2VVcmwoKTtcbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVybC5qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZVBlcnNvbmFsU2lnbiwgcGFyc2VUcmFuc2FjdGlvbkRhdGEsIGNvbnZlcnRBcnJheUJ1ZmZlclRvSGV4LCBjb252ZXJ0SGV4VG9BcnJheUJ1ZmZlciwgZ2V0Q2xpZW50TWV0YSwgcGF5bG9hZElkLCB1dWlkLCBmb3JtYXRScGNFcnJvciwgcGFyc2VXYWxsZXRDb25uZWN0VXJpLCBjb252ZXJ0TnVtYmVyVG9IZXgsIGlzSnNvblJwY1Jlc3BvbnNlU3VjY2VzcywgaXNKc29uUnBjUmVzcG9uc2VFcnJvciwgaXNTaWxlbnRQYXlsb2FkLCBnZXRMb2NhbCwgc2lnbmluZ01ldGhvZHMsIG1vYmlsZUxpbmtDaG9pY2VLZXksIGlzTW9iaWxlLCByZW1vdmVMb2NhbCwgfSBmcm9tIFwiQHdhbGxldGNvbm5lY3QvdXRpbHNcIjtcbmltcG9ydCBTb2NrZXRUcmFuc3BvcnQgZnJvbSBcIkB3YWxsZXRjb25uZWN0L3NvY2tldC10cmFuc3BvcnRcIjtcbmltcG9ydCB7IEVSUk9SX1NFU1NJT05fQ09OTkVDVEVELCBFUlJPUl9TRVNTSU9OX0RJU0NPTk5FQ1RFRCwgRVJST1JfU0VTU0lPTl9SRUpFQ1RFRCwgRVJST1JfTUlTU0lOR19KU09OX1JQQywgRVJST1JfTUlTU0lOR19SRVNVTFQsIEVSUk9SX01JU1NJTkdfRVJST1IsIEVSUk9SX01JU1NJTkdfTUVUSE9ELCBFUlJPUl9NSVNTSU5HX0lELCBFUlJPUl9JTlZBTElEX1JFU1BPTlNFLCBFUlJPUl9JTlZBTElEX1VSSSwgRVJST1JfTUlTU0lOR19SRVFVSVJFRCwgRVJST1JfUVJDT0RFX01PREFMX05PVF9QUk9WSURFRCwgRVJST1JfUVJDT0RFX01PREFMX1VTRVJfQ0xPU0VELCB9IGZyb20gXCIuL2Vycm9yc1wiO1xuaW1wb3J0IEV2ZW50TWFuYWdlciBmcm9tIFwiLi9ldmVudHNcIjtcbmltcG9ydCBTZXNzaW9uU3RvcmFnZSBmcm9tIFwiLi9zdG9yYWdlXCI7XG5pbXBvcnQgeyBnZXRCcmlkZ2VVcmwgfSBmcm9tIFwiLi91cmxcIjtcbmNsYXNzIENvbm5lY3RvciB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICB0aGlzLnByb3RvY29sID0gXCJ3Y1wiO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSAxO1xuICAgICAgICB0aGlzLl9icmlkZ2UgPSBcIlwiO1xuICAgICAgICB0aGlzLl9rZXkgPSBudWxsO1xuICAgICAgICB0aGlzLl9jbGllbnRJZCA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2NsaWVudE1ldGEgPSBudWxsO1xuICAgICAgICB0aGlzLl9wZWVySWQgPSBcIlwiO1xuICAgICAgICB0aGlzLl9wZWVyTWV0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2hhbmRzaGFrZUlkID0gMDtcbiAgICAgICAgdGhpcy5faGFuZHNoYWtlVG9waWMgPSBcIlwiO1xuICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fYWNjb3VudHMgPSBbXTtcbiAgICAgICAgdGhpcy5fY2hhaW5JZCA9IDA7XG4gICAgICAgIHRoaXMuX25ldHdvcmtJZCA9IDA7XG4gICAgICAgIHRoaXMuX3JwY1VybCA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlciA9IG5ldyBFdmVudE1hbmFnZXIoKTtcbiAgICAgICAgdGhpcy5fY2xpZW50TWV0YSA9IGdldENsaWVudE1ldGEoKSB8fCBvcHRzLmNvbm5lY3Rvck9wdHMuY2xpZW50TWV0YSB8fCBudWxsO1xuICAgICAgICB0aGlzLl9jcnlwdG9MaWIgPSBvcHRzLmNyeXB0b0xpYjtcbiAgICAgICAgdGhpcy5fc2Vzc2lvblN0b3JhZ2UgPSBvcHRzLnNlc3Npb25TdG9yYWdlIHx8IG5ldyBTZXNzaW9uU3RvcmFnZShvcHRzLmNvbm5lY3Rvck9wdHMuc3RvcmFnZUlkKTtcbiAgICAgICAgdGhpcy5fcXJjb2RlTW9kYWwgPSBvcHRzLmNvbm5lY3Rvck9wdHMucXJjb2RlTW9kYWw7XG4gICAgICAgIHRoaXMuX3FyY29kZU1vZGFsT3B0aW9ucyA9IG9wdHMuY29ubmVjdG9yT3B0cy5xcmNvZGVNb2RhbE9wdGlvbnM7XG4gICAgICAgIHRoaXMuX3NpZ25pbmdNZXRob2RzID0gWy4uLnNpZ25pbmdNZXRob2RzLCAuLi4ob3B0cy5jb25uZWN0b3JPcHRzLnNpZ25pbmdNZXRob2RzIHx8IFtdKV07XG4gICAgICAgIGlmICghb3B0cy5jb25uZWN0b3JPcHRzLmJyaWRnZSAmJiAhb3B0cy5jb25uZWN0b3JPcHRzLnVyaSAmJiAhb3B0cy5jb25uZWN0b3JPcHRzLnNlc3Npb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NSVNTSU5HX1JFUVVJUkVEKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy5jb25uZWN0b3JPcHRzLmJyaWRnZSkge1xuICAgICAgICAgICAgdGhpcy5icmlkZ2UgPSBnZXRCcmlkZ2VVcmwob3B0cy5jb25uZWN0b3JPcHRzLmJyaWRnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMuY29ubmVjdG9yT3B0cy51cmkpIHtcbiAgICAgICAgICAgIHRoaXMudXJpID0gb3B0cy5jb25uZWN0b3JPcHRzLnVyaTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZXNzaW9uID0gb3B0cy5jb25uZWN0b3JPcHRzLnNlc3Npb24gfHwgdGhpcy5fZ2V0U3RvcmFnZVNlc3Npb24oKTtcbiAgICAgICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2Vzc2lvbiA9IHNlc3Npb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFuZHNoYWtlSWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZVRvU2Vzc2lvblJlc3BvbnNlKHRoaXMuaGFuZHNoYWtlSWQsIFwiU2Vzc2lvbiByZXF1ZXN0IHJlamVjdGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydCA9XG4gICAgICAgICAgICBvcHRzLnRyYW5zcG9ydCB8fFxuICAgICAgICAgICAgICAgIG5ldyBTb2NrZXRUcmFuc3BvcnQoe1xuICAgICAgICAgICAgICAgICAgICBwcm90b2NvbDogdGhpcy5wcm90b2NvbCxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogdGhpcy52ZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHRoaXMuYnJpZGdlLFxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zOiBbdGhpcy5jbGllbnRJZF0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3N1YnNjcmliZVRvSW50ZXJuYWxFdmVudHMoKTtcbiAgICAgICAgdGhpcy5faW5pdFRyYW5zcG9ydCgpO1xuICAgICAgICBpZiAob3B0cy5jb25uZWN0b3JPcHRzLnVyaSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlVG9TZXNzaW9uUmVxdWVzdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLnB1c2hTZXJ2ZXJPcHRzKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWdpc3RlclB1c2hTZXJ2ZXIob3B0cy5wdXNoU2VydmVyT3B0cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0IGJyaWRnZSh2YWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYnJpZGdlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBicmlkZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9icmlkZ2U7XG4gICAgfVxuICAgIHNldCBrZXkodmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleSA9IGNvbnZlcnRIZXhUb0FycmF5QnVmZmVyKHZhbHVlKTtcbiAgICAgICAgdGhpcy5fa2V5ID0ga2V5O1xuICAgIH1cbiAgICBnZXQga2V5KCkge1xuICAgICAgICBpZiAodGhpcy5fa2V5KSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBjb252ZXJ0QXJyYXlCdWZmZXJUb0hleCh0aGlzLl9rZXksIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgc2V0IGNsaWVudElkKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbGllbnRJZCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgY2xpZW50SWQoKSB7XG4gICAgICAgIGxldCBjbGllbnRJZCA9IHRoaXMuX2NsaWVudElkO1xuICAgICAgICBpZiAoIWNsaWVudElkKSB7XG4gICAgICAgICAgICBjbGllbnRJZCA9IHRoaXMuX2NsaWVudElkID0gdXVpZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRJZDtcbiAgICB9XG4gICAgc2V0IHBlZXJJZCh2YWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcGVlcklkID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBwZWVySWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wZWVySWQ7XG4gICAgfVxuICAgIHNldCBjbGllbnRNZXRhKHZhbHVlKSB7XG4gICAgfVxuICAgIGdldCBjbGllbnRNZXRhKCkge1xuICAgICAgICBsZXQgY2xpZW50TWV0YSA9IHRoaXMuX2NsaWVudE1ldGE7XG4gICAgICAgIGlmICghY2xpZW50TWV0YSkge1xuICAgICAgICAgICAgY2xpZW50TWV0YSA9IHRoaXMuX2NsaWVudE1ldGEgPSBnZXRDbGllbnRNZXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsaWVudE1ldGE7XG4gICAgfVxuICAgIHNldCBwZWVyTWV0YSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wZWVyTWV0YSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgcGVlck1ldGEoKSB7XG4gICAgICAgIGNvbnN0IHBlZXJNZXRhID0gdGhpcy5fcGVlck1ldGE7XG4gICAgICAgIHJldHVybiBwZWVyTWV0YTtcbiAgICB9XG4gICAgc2V0IGhhbmRzaGFrZVRvcGljKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oYW5kc2hha2VUb3BpYyA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgaGFuZHNoYWtlVG9waWMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYW5kc2hha2VUb3BpYztcbiAgICB9XG4gICAgc2V0IGhhbmRzaGFrZUlkKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oYW5kc2hha2VJZCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgaGFuZHNoYWtlSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYW5kc2hha2VJZDtcbiAgICB9XG4gICAgZ2V0IHVyaSgpIHtcbiAgICAgICAgY29uc3QgX3VyaSA9IHRoaXMuX2Zvcm1hdFVyaSgpO1xuICAgICAgICByZXR1cm4gX3VyaTtcbiAgICB9XG4gICAgc2V0IHVyaSh2YWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBoYW5kc2hha2VUb3BpYywgYnJpZGdlLCBrZXkgfSA9IHRoaXMuX3BhcnNlVXJpKHZhbHVlKTtcbiAgICAgICAgdGhpcy5oYW5kc2hha2VUb3BpYyA9IGhhbmRzaGFrZVRvcGljO1xuICAgICAgICB0aGlzLmJyaWRnZSA9IGJyaWRnZTtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgfVxuICAgIHNldCBjaGFpbklkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2NoYWluSWQgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGNoYWluSWQoKSB7XG4gICAgICAgIGNvbnN0IGNoYWluSWQgPSB0aGlzLl9jaGFpbklkO1xuICAgICAgICByZXR1cm4gY2hhaW5JZDtcbiAgICB9XG4gICAgc2V0IG5ldHdvcmtJZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9uZXR3b3JrSWQgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG5ldHdvcmtJZCgpIHtcbiAgICAgICAgY29uc3QgbmV0d29ya0lkID0gdGhpcy5fbmV0d29ya0lkO1xuICAgICAgICByZXR1cm4gbmV0d29ya0lkO1xuICAgIH1cbiAgICBzZXQgYWNjb3VudHModmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYWNjb3VudHMgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGFjY291bnRzKCkge1xuICAgICAgICBjb25zdCBhY2NvdW50cyA9IHRoaXMuX2FjY291bnRzO1xuICAgICAgICByZXR1cm4gYWNjb3VudHM7XG4gICAgfVxuICAgIHNldCBycGNVcmwodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcnBjVXJsID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBycGNVcmwoKSB7XG4gICAgICAgIGNvbnN0IHJwY1VybCA9IHRoaXMuX3JwY1VybDtcbiAgICAgICAgcmV0dXJuIHJwY1VybDtcbiAgICB9XG4gICAgc2V0IGNvbm5lY3RlZCh2YWx1ZSkge1xuICAgIH1cbiAgICBnZXQgY29ubmVjdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29ubmVjdGVkO1xuICAgIH1cbiAgICBzZXQgcGVuZGluZyh2YWx1ZSkge1xuICAgIH1cbiAgICBnZXQgcGVuZGluZygpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5faGFuZHNoYWtlVG9waWM7XG4gICAgfVxuICAgIGdldCBzZXNzaW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29ubmVjdGVkOiB0aGlzLmNvbm5lY3RlZCxcbiAgICAgICAgICAgIGFjY291bnRzOiB0aGlzLmFjY291bnRzLFxuICAgICAgICAgICAgY2hhaW5JZDogdGhpcy5jaGFpbklkLFxuICAgICAgICAgICAgYnJpZGdlOiB0aGlzLmJyaWRnZSxcbiAgICAgICAgICAgIGtleTogdGhpcy5rZXksXG4gICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgIGNsaWVudE1ldGE6IHRoaXMuY2xpZW50TWV0YSxcbiAgICAgICAgICAgIHBlZXJJZDogdGhpcy5wZWVySWQsXG4gICAgICAgICAgICBwZWVyTWV0YTogdGhpcy5wZWVyTWV0YSxcbiAgICAgICAgICAgIGhhbmRzaGFrZUlkOiB0aGlzLmhhbmRzaGFrZUlkLFxuICAgICAgICAgICAgaGFuZHNoYWtlVG9waWM6IHRoaXMuaGFuZHNoYWtlVG9waWMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHNldCBzZXNzaW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSB2YWx1ZS5jb25uZWN0ZWQ7XG4gICAgICAgIHRoaXMuYWNjb3VudHMgPSB2YWx1ZS5hY2NvdW50cztcbiAgICAgICAgdGhpcy5jaGFpbklkID0gdmFsdWUuY2hhaW5JZDtcbiAgICAgICAgdGhpcy5icmlkZ2UgPSB2YWx1ZS5icmlkZ2U7XG4gICAgICAgIHRoaXMua2V5ID0gdmFsdWUua2V5O1xuICAgICAgICB0aGlzLmNsaWVudElkID0gdmFsdWUuY2xpZW50SWQ7XG4gICAgICAgIHRoaXMuY2xpZW50TWV0YSA9IHZhbHVlLmNsaWVudE1ldGE7XG4gICAgICAgIHRoaXMucGVlcklkID0gdmFsdWUucGVlcklkO1xuICAgICAgICB0aGlzLnBlZXJNZXRhID0gdmFsdWUucGVlck1ldGE7XG4gICAgICAgIHRoaXMuaGFuZHNoYWtlSWQgPSB2YWx1ZS5oYW5kc2hha2VJZDtcbiAgICAgICAgdGhpcy5oYW5kc2hha2VUb3BpYyA9IHZhbHVlLmhhbmRzaGFrZVRvcGljO1xuICAgIH1cbiAgICBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgZXZlbnRFbWl0dGVyID0ge1xuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fZXZlbnRNYW5hZ2VyLnN1YnNjcmliZShldmVudEVtaXR0ZXIpO1xuICAgIH1cbiAgICBvZmYoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRNYW5hZ2VyLnVuc3Vic2NyaWJlKGV2ZW50KTtcbiAgICB9XG4gICAgYXN5bmMgY3JlYXRlSW5zdGFudFJlcXVlc3QoaW5zdGFudFJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5fa2V5ID0gYXdhaXQgdGhpcy5fZ2VuZXJhdGVLZXkoKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIndjX2luc3RhbnRSZXF1ZXN0XCIsXG4gICAgICAgICAgICBwYXJhbXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBlZXJJZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgICAgICAgICAgcGVlck1ldGE6IHRoaXMuY2xpZW50TWV0YSxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdDogdGhpcy5fZm9ybWF0UmVxdWVzdChpbnN0YW50UmVxdWVzdCksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmhhbmRzaGFrZUlkID0gcmVxdWVzdC5pZDtcbiAgICAgICAgdGhpcy5oYW5kc2hha2VUb3BpYyA9IHV1aWQoKTtcbiAgICAgICAgdGhpcy5fZXZlbnRNYW5hZ2VyLnRyaWdnZXIoe1xuICAgICAgICAgICAgZXZlbnQ6IFwiZGlzcGxheV91cmlcIixcbiAgICAgICAgICAgIHBhcmFtczogW3RoaXMudXJpXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oXCJtb2RhbF9jbG9zZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1FSQ09ERV9NT0RBTF9VU0VSX0NMT1NFRCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBlbmRJbnN0YW50UmVxdWVzdCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMua2lsbFNlc3Npb24oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX3NlbmRDYWxsUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBlbmRJbnN0YW50UmVxdWVzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGVuZEluc3RhbnRSZXF1ZXN0KCk7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBjb25uZWN0KG9wdHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9xcmNvZGVNb2RhbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1FSQ09ERV9NT0RBTF9OT1RfUFJPVklERUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjaGFpbklkOiB0aGlzLmNoYWluSWQsXG4gICAgICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlU2Vzc2lvbihvcHRzKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMub24oXCJtb2RhbF9jbG9zZWRcIiwgKCkgPT4gcmVqZWN0KG5ldyBFcnJvcihFUlJPUl9RUkNPREVfTU9EQUxfVVNFUl9DTE9TRUQpKSk7XG4gICAgICAgICAgICB0aGlzLm9uKFwiY29ubmVjdFwiLCAoZXJyb3IsIHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUocGF5bG9hZC5wYXJhbXNbMF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBjcmVhdGVTZXNzaW9uKG9wdHMpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1NFU1NJT05fQ09OTkVDVEVEKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wZW5kaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fa2V5ID0gYXdhaXQgdGhpcy5fZ2VuZXJhdGVLZXkoKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIndjX3Nlc3Npb25SZXF1ZXN0XCIsXG4gICAgICAgICAgICBwYXJhbXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBlZXJJZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgICAgICAgICAgcGVlck1ldGE6IHRoaXMuY2xpZW50TWV0YSxcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5JZDogb3B0cyAmJiBvcHRzLmNoYWluSWQgPyBvcHRzLmNoYWluSWQgOiBudWxsLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5oYW5kc2hha2VJZCA9IHJlcXVlc3QuaWQ7XG4gICAgICAgIHRoaXMuaGFuZHNoYWtlVG9waWMgPSB1dWlkKCk7XG4gICAgICAgIHRoaXMuX3NlbmRTZXNzaW9uUmVxdWVzdChyZXF1ZXN0LCBcIlNlc3Npb24gdXBkYXRlIHJlamVjdGVkXCIsIHtcbiAgICAgICAgICAgIHRvcGljOiB0aGlzLmhhbmRzaGFrZVRvcGljLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZXZlbnRNYW5hZ2VyLnRyaWdnZXIoe1xuICAgICAgICAgICAgZXZlbnQ6IFwiZGlzcGxheV91cmlcIixcbiAgICAgICAgICAgIHBhcmFtczogW3RoaXMudXJpXSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFwcHJvdmVTZXNzaW9uKHNlc3Npb25TdGF0dXMpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1NFU1NJT05fQ09OTkVDVEVEKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoYWluSWQgPSBzZXNzaW9uU3RhdHVzLmNoYWluSWQ7XG4gICAgICAgIHRoaXMuYWNjb3VudHMgPSBzZXNzaW9uU3RhdHVzLmFjY291bnRzO1xuICAgICAgICB0aGlzLm5ldHdvcmtJZCA9IHNlc3Npb25TdGF0dXMubmV0d29ya0lkIHx8IDA7XG4gICAgICAgIHRoaXMucnBjVXJsID0gc2Vzc2lvblN0YXR1cy5ycGNVcmwgfHwgXCJcIjtcbiAgICAgICAgY29uc3Qgc2Vzc2lvblBhcmFtcyA9IHtcbiAgICAgICAgICAgIGFwcHJvdmVkOiB0cnVlLFxuICAgICAgICAgICAgY2hhaW5JZDogdGhpcy5jaGFpbklkLFxuICAgICAgICAgICAgbmV0d29ya0lkOiB0aGlzLm5ldHdvcmtJZCxcbiAgICAgICAgICAgIGFjY291bnRzOiB0aGlzLmFjY291bnRzLFxuICAgICAgICAgICAgcnBjVXJsOiB0aGlzLnJwY1VybCxcbiAgICAgICAgICAgIHBlZXJJZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgIHBlZXJNZXRhOiB0aGlzLmNsaWVudE1ldGEsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaGFuZHNoYWtlSWQsXG4gICAgICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICAgICAgcmVzdWx0OiBzZXNzaW9uUGFyYW1zLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9zZW5kUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zZXRTdG9yYWdlU2Vzc2lvbigpO1xuICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7XG4gICAgICAgICAgICBldmVudDogXCJjb25uZWN0XCIsXG4gICAgICAgICAgICBwYXJhbXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBlZXJJZDogdGhpcy5wZWVySWQsXG4gICAgICAgICAgICAgICAgICAgIHBlZXJNZXRhOiB0aGlzLnBlZXJNZXRhLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiB0aGlzLmNoYWluSWQsXG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRzOiB0aGlzLmFjY291bnRzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVqZWN0U2Vzc2lvbihzZXNzaW9uRXJyb3IpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1NFU1NJT05fQ09OTkVDVEVEKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXNzYWdlID0gc2Vzc2lvbkVycm9yICYmIHNlc3Npb25FcnJvci5tZXNzYWdlID8gc2Vzc2lvbkVycm9yLm1lc3NhZ2UgOiBFUlJPUl9TRVNTSU9OX1JFSkVDVEVEO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMuX2Zvcm1hdFJlc3BvbnNlKHtcbiAgICAgICAgICAgIGlkOiB0aGlzLmhhbmRzaGFrZUlkLFxuICAgICAgICAgICAgZXJyb3I6IHsgbWVzc2FnZSB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc2VuZFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5fY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgIGV2ZW50OiBcImRpc2Nvbm5lY3RcIixcbiAgICAgICAgICAgIHBhcmFtczogW3sgbWVzc2FnZSB9XSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3JlbW92ZVN0b3JhZ2VTZXNzaW9uKCk7XG4gICAgfVxuICAgIHVwZGF0ZVNlc3Npb24oc2Vzc2lvblN0YXR1cykge1xuICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1NFU1NJT05fRElTQ09OTkVDVEVEKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoYWluSWQgPSBzZXNzaW9uU3RhdHVzLmNoYWluSWQ7XG4gICAgICAgIHRoaXMuYWNjb3VudHMgPSBzZXNzaW9uU3RhdHVzLmFjY291bnRzO1xuICAgICAgICB0aGlzLm5ldHdvcmtJZCA9IHNlc3Npb25TdGF0dXMubmV0d29ya0lkIHx8IDA7XG4gICAgICAgIHRoaXMucnBjVXJsID0gc2Vzc2lvblN0YXR1cy5ycGNVcmwgfHwgXCJcIjtcbiAgICAgICAgY29uc3Qgc2Vzc2lvblBhcmFtcyA9IHtcbiAgICAgICAgICAgIGFwcHJvdmVkOiB0cnVlLFxuICAgICAgICAgICAgY2hhaW5JZDogdGhpcy5jaGFpbklkLFxuICAgICAgICAgICAgbmV0d29ya0lkOiB0aGlzLm5ldHdvcmtJZCxcbiAgICAgICAgICAgIGFjY291bnRzOiB0aGlzLmFjY291bnRzLFxuICAgICAgICAgICAgcnBjVXJsOiB0aGlzLnJwY1VybCxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIndjX3Nlc3Npb25VcGRhdGVcIixcbiAgICAgICAgICAgIHBhcmFtczogW3Nlc3Npb25QYXJhbXNdLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc2VuZFNlc3Npb25SZXF1ZXN0KHJlcXVlc3QsIFwiU2Vzc2lvbiB1cGRhdGUgcmVqZWN0ZWRcIik7XG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgIGV2ZW50OiBcInNlc3Npb25fdXBkYXRlXCIsXG4gICAgICAgICAgICBwYXJhbXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY2hhaW5JZCxcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9tYW5hZ2VTdG9yYWdlU2Vzc2lvbigpO1xuICAgIH1cbiAgICBhc3luYyBraWxsU2Vzc2lvbihzZXNzaW9uRXJyb3IpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHNlc3Npb25FcnJvciA/IHNlc3Npb25FcnJvci5tZXNzYWdlIDogXCJTZXNzaW9uIERpc2Nvbm5lY3RlZFwiO1xuICAgICAgICBjb25zdCBzZXNzaW9uUGFyYW1zID0ge1xuICAgICAgICAgICAgYXBwcm92ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgY2hhaW5JZDogbnVsbCxcbiAgICAgICAgICAgIG5ldHdvcmtJZDogbnVsbCxcbiAgICAgICAgICAgIGFjY291bnRzOiBudWxsLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwid2Nfc2Vzc2lvblVwZGF0ZVwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbc2Vzc2lvblBhcmFtc10sXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCB0aGlzLl9zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgdGhpcy5faGFuZGxlU2Vzc2lvbkRpc2Nvbm5lY3QobWVzc2FnZSk7XG4gICAgfVxuICAgIGFzeW5jIHNlbmRUcmFuc2FjdGlvbih0eCkge1xuICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1NFU1NJT05fRElTQ09OTkVDVEVEKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRUeCA9IHBhcnNlVHJhbnNhY3Rpb25EYXRhKHR4KTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9zZW5kVHJhbnNhY3Rpb25cIixcbiAgICAgICAgICAgIHBhcmFtczogW3BhcnNlZFR4XSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX3NlbmRDYWxsUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgc2lnblRyYW5zYWN0aW9uKHR4KSB7XG4gICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9ESVNDT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR4ID0gcGFyc2VUcmFuc2FjdGlvbkRhdGEodHgpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiZXRoX3NpZ25UcmFuc2FjdGlvblwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbcGFyc2VkVHhdLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fc2VuZENhbGxSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyBzaWduTWVzc2FnZShwYXJhbXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9TRVNTSU9OX0RJU0NPTk5FQ1RFRCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2Zvcm1hdFJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9zaWduXCIsXG4gICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9zZW5kQ2FsbFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25QZXJzb25hbE1lc3NhZ2UocGFyYW1zKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9ESVNDT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcyA9IHBhcnNlUGVyc29uYWxTaWduKHBhcmFtcyk7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLl9mb3JtYXRSZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJwZXJzb25hbF9zaWduXCIsXG4gICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9zZW5kQ2FsbFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25UeXBlZERhdGEocGFyYW1zKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfU0VTU0lPTl9ESVNDT05ORUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLl9mb3JtYXRSZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJldGhfc2lnblR5cGVkRGF0YVwiLFxuICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fc2VuZENhbGxSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyB1cGRhdGVDaGFpbihjaGFpblBhcmFtcykge1xuICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2Vzc2lvbiBjdXJyZW50bHkgZGlzY29ubmVjdGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLl9mb3JtYXRSZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJ3YWxsZXRfdXBkYXRlQ2hhaW5cIixcbiAgICAgICAgICAgIHBhcmFtczogW2NoYWluUGFyYW1zXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX3NlbmRDYWxsUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgdW5zYWZlU2VuZChyZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX3NlbmRSZXF1ZXN0KHJlcXVlc3QsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7XG4gICAgICAgICAgICBldmVudDogXCJjYWxsX3JlcXVlc3Rfc2VudFwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbeyByZXF1ZXN0LCBvcHRpb25zIH1dLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZVRvUmVzcG9uc2UocmVxdWVzdC5pZCwgKGVycm9yLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFwYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NSVNTSU5HX0pTT05fUlBDKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShwYXlsb2FkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgc2VuZEN1c3RvbVJlcXVlc3QocmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1NFU1NJT05fRElTQ09OTkVDVEVEKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHJlcXVlc3QubWV0aG9kKSB7XG4gICAgICAgICAgICBjYXNlIFwiZXRoX2FjY291bnRzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWNjb3VudHM7XG4gICAgICAgICAgICBjYXNlIFwiZXRoX2NoYWluSWRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udmVydE51bWJlclRvSGV4KHRoaXMuY2hhaW5JZCk7XG4gICAgICAgICAgICBjYXNlIFwiZXRoX3NlbmRUcmFuc2FjdGlvblwiOlxuICAgICAgICAgICAgY2FzZSBcImV0aF9zaWduVHJhbnNhY3Rpb25cIjpcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5wYXJhbXNbMF0gPSBwYXJzZVRyYW5zYWN0aW9uRGF0YShyZXF1ZXN0LnBhcmFtc1swXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInBlcnNvbmFsX3NpZ25cIjpcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5wYXJhbXMgPSBwYXJzZVBlcnNvbmFsU2lnbihyZXF1ZXN0LnBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRSZXF1ZXN0ID0gdGhpcy5fZm9ybWF0UmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fc2VuZENhbGxSZXF1ZXN0KGZvcm1hdHRlZFJlcXVlc3QsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhcHByb3ZlUmVxdWVzdChyZXNwb25zZSkge1xuICAgICAgICBpZiAoaXNKc29uUnBjUmVzcG9uc2VTdWNjZXNzKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkUmVzcG9uc2UgPSB0aGlzLl9mb3JtYXRSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgICAgICB0aGlzLl9zZW5kUmVzcG9uc2UoZm9ybWF0dGVkUmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01JU1NJTkdfUkVTVUxUKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWplY3RSZXF1ZXN0KHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChpc0pzb25ScGNSZXNwb25zZUVycm9yKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkUmVzcG9uc2UgPSB0aGlzLl9mb3JtYXRSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgICAgICB0aGlzLl9zZW5kUmVzcG9uc2UoZm9ybWF0dGVkUmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01JU1NJTkdfRVJST1IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyYW5zcG9ydENsb3NlKCkge1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB9XG4gICAgYXN5bmMgX3NlbmRSZXF1ZXN0KHJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY2FsbFJlcXVlc3QgPSB0aGlzLl9mb3JtYXRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICBjb25zdCBlbmNyeXB0aW9uUGF5bG9hZCA9IGF3YWl0IHRoaXMuX2VuY3J5cHQoY2FsbFJlcXVlc3QpO1xuICAgICAgICBjb25zdCB0b3BpYyA9IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRvcGljKSAhPT0gXCJ1bmRlZmluZWRcIiA/IG9wdGlvbnMudG9waWMgOiB0aGlzLnBlZXJJZDtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KGVuY3J5cHRpb25QYXlsb2FkKTtcbiAgICAgICAgY29uc3Qgc2lsZW50ID0gdHlwZW9mIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZm9yY2VQdXNoTm90aWZpY2F0aW9uKSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgPyAhb3B0aW9ucy5mb3JjZVB1c2hOb3RpZmljYXRpb25cbiAgICAgICAgICAgIDogaXNTaWxlbnRQYXlsb2FkKGNhbGxSZXF1ZXN0KTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0LnNlbmQocGF5bG9hZCwgdG9waWMsIHNpbGVudCk7XG4gICAgfVxuICAgIGFzeW5jIF9zZW5kUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgZW5jcnlwdGlvblBheWxvYWQgPSBhd2FpdCB0aGlzLl9lbmNyeXB0KHJlc3BvbnNlKTtcbiAgICAgICAgY29uc3QgdG9waWMgPSB0aGlzLnBlZXJJZDtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KGVuY3J5cHRpb25QYXlsb2FkKTtcbiAgICAgICAgY29uc3Qgc2lsZW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0LnNlbmQocGF5bG9hZCwgdG9waWMsIHNpbGVudCk7XG4gICAgfVxuICAgIGFzeW5jIF9zZW5kU2Vzc2lvblJlcXVlc3QocmVxdWVzdCwgZXJyb3JNc2csIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fc2VuZFJlcXVlc3QocmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3N1YnNjcmliZVRvU2Vzc2lvblJlc3BvbnNlKHJlcXVlc3QuaWQsIGVycm9yTXNnKTtcbiAgICB9XG4gICAgX3NlbmRDYWxsUmVxdWVzdChyZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX3NlbmRSZXF1ZXN0KHJlcXVlc3QsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7XG4gICAgICAgICAgICBldmVudDogXCJjYWxsX3JlcXVlc3Rfc2VudFwiLFxuICAgICAgICAgICAgcGFyYW1zOiBbeyByZXF1ZXN0LCBvcHRpb25zIH1dLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZVRvQ2FsbFJlc3BvbnNlKHJlcXVlc3QuaWQpO1xuICAgIH1cbiAgICBfZm9ybWF0UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdC5tZXRob2QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NSVNTSU5HX01FVEhPRCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm9ybWF0dGVkUmVxdWVzdCA9IHtcbiAgICAgICAgICAgIGlkOiB0eXBlb2YgcmVxdWVzdC5pZCA9PT0gXCJ1bmRlZmluZWRcIiA/IHBheWxvYWRJZCgpIDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgICAgcGFyYW1zOiB0eXBlb2YgcmVxdWVzdC5wYXJhbXMgPT09IFwidW5kZWZpbmVkXCIgPyBbXSA6IHJlcXVlc3QucGFyYW1zLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZm9ybWF0dGVkUmVxdWVzdDtcbiAgICB9XG4gICAgX2Zvcm1hdFJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2UuaWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NSVNTSU5HX0lEKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYXNlUmVzcG9uc2UgPSB7IGlkOiByZXNwb25zZS5pZCwganNvbnJwYzogXCIyLjBcIiB9O1xuICAgICAgICBpZiAoaXNKc29uUnBjUmVzcG9uc2VFcnJvcihyZXNwb25zZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZm9ybWF0UnBjRXJyb3IocmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICAgICAgY29uc3QgZXJyb3JSZXNwb25zZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBiYXNlUmVzcG9uc2UpLCByZXNwb25zZSksIHsgZXJyb3IgfSk7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JSZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0pzb25ScGNSZXNwb25zZVN1Y2Nlc3MocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICBjb25zdCBzdWNjZXNzUmVzcG9uc2UgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGJhc2VSZXNwb25zZSksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHJldHVybiBzdWNjZXNzUmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX0lOVkFMSURfUkVTUE9OU0UpO1xuICAgIH1cbiAgICBfaGFuZGxlU2Vzc2lvbkRpc2Nvbm5lY3QoZXJyb3JNc2cpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGVycm9yTXNnIHx8IFwiU2Vzc2lvbiBEaXNjb25uZWN0ZWRcIjtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9xcmNvZGVNb2RhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3FyY29kZU1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1vdmVMb2NhbChtb2JpbGVMaW5rQ2hvaWNlS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faGFuZHNoYWtlSWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRzaGFrZUlkID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faGFuZHNoYWtlVG9waWMpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRzaGFrZVRvcGljID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcGVlcklkKSB7XG4gICAgICAgICAgICB0aGlzLl9wZWVySWQgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgIGV2ZW50OiBcImRpc2Nvbm5lY3RcIixcbiAgICAgICAgICAgIHBhcmFtczogW3sgbWVzc2FnZSB9XSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3JlbW92ZVN0b3JhZ2VTZXNzaW9uKCk7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0Q2xvc2UoKTtcbiAgICB9XG4gICAgX2hhbmRsZVNlc3Npb25SZXNwb25zZShlcnJvck1zZywgc2Vzc2lvblBhcmFtcykge1xuICAgICAgICBpZiAoc2Vzc2lvblBhcmFtcykge1xuICAgICAgICAgICAgaWYgKHNlc3Npb25QYXJhbXMuYXBwcm92ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvblBhcmFtcy5jaGFpbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYWluSWQgPSBzZXNzaW9uUGFyYW1zLmNoYWluSWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25QYXJhbXMuYWNjb3VudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWNjb3VudHMgPSBzZXNzaW9uUGFyYW1zLmFjY291bnRzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uUGFyYW1zLnBlZXJJZCAmJiAhdGhpcy5wZWVySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVlcklkID0gc2Vzc2lvblBhcmFtcy5wZWVySWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25QYXJhbXMucGVlck1ldGEgJiYgIXRoaXMucGVlck1ldGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVlck1ldGEgPSBzZXNzaW9uUGFyYW1zLnBlZXJNZXRhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcImNvbm5lY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVlcklkOiB0aGlzLnBlZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVlck1ldGE6IHRoaXMucGVlck1ldGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY2hhaW5JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudHM6IHRoaXMuYWNjb3VudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25QYXJhbXMuY2hhaW5JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFpbklkID0gc2Vzc2lvblBhcmFtcy5jaGFpbklkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uUGFyYW1zLmFjY291bnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjY291bnRzID0gc2Vzc2lvblBhcmFtcy5hY2NvdW50cztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogXCJzZXNzaW9uX3VwZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiB0aGlzLmNoYWluSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRzOiB0aGlzLmFjY291bnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFuYWdlU3RvcmFnZVNlc3Npb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25EaXNjb25uZWN0KGVycm9yTXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25EaXNjb25uZWN0KGVycm9yTXNnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBfaGFuZGxlSW5jb21pbmdNZXNzYWdlcyhzb2NrZXRNZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVRvcGljcyA9IFt0aGlzLmNsaWVudElkLCB0aGlzLmhhbmRzaGFrZVRvcGljXTtcbiAgICAgICAgaWYgKCFhY3RpdmVUb3BpY3MuaW5jbHVkZXMoc29ja2V0TWVzc2FnZS50b3BpYykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZW5jcnlwdGlvblBheWxvYWQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBlbmNyeXB0aW9uUGF5bG9hZCA9IEpTT04ucGFyc2Uoc29ja2V0TWVzc2FnZS5wYXlsb2FkKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgdGhpcy5fZGVjcnlwdChlbmNyeXB0aW9uUGF5bG9hZCk7XG4gICAgICAgIGlmIChwYXlsb2FkKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcihwYXlsb2FkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfc3Vic2NyaWJlVG9TZXNzaW9uUmVxdWVzdCgpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0LnN1YnNjcmliZSh0aGlzLmhhbmRzaGFrZVRvcGljKTtcbiAgICB9XG4gICAgX3N1YnNjcmliZVRvUmVzcG9uc2UoaWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMub24oYHJlc3BvbnNlOiR7aWR9YCwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBfc3Vic2NyaWJlVG9TZXNzaW9uUmVzcG9uc2UoaWQsIGVycm9yTXNnKSB7XG4gICAgICAgIHRoaXMuX3N1YnNjcmliZVRvUmVzcG9uc2UoaWQsIChlcnJvciwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlU2Vzc2lvblJlc3BvbnNlKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXlsb2FkLnJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25SZXNwb25zZShlcnJvck1zZywgcGF5bG9hZC5yZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGF5bG9hZC5lcnJvciAmJiBwYXlsb2FkLmVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVTZXNzaW9uUmVzcG9uc2UocGF5bG9hZC5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25SZXNwb25zZShlcnJvck1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfc3Vic2NyaWJlVG9DYWxsUmVzcG9uc2UoaWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZVRvUmVzcG9uc2UoaWQsIChlcnJvciwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLnJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHBheWxvYWQucmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGF5bG9hZC5lcnJvciAmJiBwYXlsb2FkLmVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihwYXlsb2FkLmVycm9yLm1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoRVJST1JfSU5WQUxJRF9SRVNQT05TRSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3N1YnNjcmliZVRvSW50ZXJuYWxFdmVudHMoKSB7XG4gICAgICAgIHRoaXMub24oXCJkaXNwbGF5X3VyaVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcXJjb2RlTW9kYWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9xcmNvZGVNb2RhbC5vcGVuKHRoaXMudXJpLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcIm1vZGFsX2Nsb3NlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgdGhpcy5fcXJjb2RlTW9kYWxPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oXCJjb25uZWN0XCIsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9xcmNvZGVNb2RhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3FyY29kZU1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKFwiY2FsbF9yZXF1ZXN0X3NlbnRcIiwgKGVycm9yLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHJlcXVlc3QgfSA9IHBheWxvYWQucGFyYW1zWzBdO1xuICAgICAgICAgICAgaWYgKGlzTW9iaWxlKCkgJiYgdGhpcy5fc2lnbmluZ01ldGhvZHMuaW5jbHVkZXMocmVxdWVzdC5tZXRob2QpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9iaWxlTGlua1VybCA9IGdldExvY2FsKG1vYmlsZUxpbmtDaG9pY2VLZXkpO1xuICAgICAgICAgICAgICAgIGlmIChtb2JpbGVMaW5rVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbW9iaWxlTGlua1VybC5ocmVmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oXCJ3Y19zZXNzaW9uUmVxdWVzdFwiLCAoZXJyb3IsIHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogXCJTRVNTSU9OX1JFUVVFU1RfRVJST1JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGFuZHNoYWtlSWQgPSBwYXlsb2FkLmlkO1xuICAgICAgICAgICAgdGhpcy5wZWVySWQgPSBwYXlsb2FkLnBhcmFtc1swXS5wZWVySWQ7XG4gICAgICAgICAgICB0aGlzLnBlZXJNZXRhID0gcGF5bG9hZC5wYXJhbXNbMF0ucGVlck1ldGE7XG4gICAgICAgICAgICBjb25zdCBpbnRlcm5hbFBheWxvYWQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBheWxvYWQpLCB7IG1ldGhvZDogXCJzZXNzaW9uX3JlcXVlc3RcIiB9KTtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci50cmlnZ2VyKGludGVybmFsUGF5bG9hZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKFwid2Nfc2Vzc2lvblVwZGF0ZVwiLCAoZXJyb3IsIHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25SZXNwb25zZShlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNlc3Npb25SZXNwb25zZShcIlNlc3Npb24gZGlzY29ubmVjdGVkXCIsIHBheWxvYWQucGFyYW1zWzBdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9pbml0VHJhbnNwb3J0KCkge1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQub24oXCJtZXNzYWdlXCIsIChzb2NrZXRNZXNzYWdlKSA9PiB0aGlzLl9oYW5kbGVJbmNvbWluZ01lc3NhZ2VzKHNvY2tldE1lc3NhZ2UpKTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Lm9uKFwib3BlblwiLCAoKSA9PiB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7IGV2ZW50OiBcInRyYW5zcG9ydF9vcGVuXCIsIHBhcmFtczogW10gfSkpO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQub24oXCJjbG9zZVwiLCAoKSA9PiB0aGlzLl9ldmVudE1hbmFnZXIudHJpZ2dlcih7IGV2ZW50OiBcInRyYW5zcG9ydF9jbG9zZVwiLCBwYXJhbXM6IFtdIH0pKTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Lm9uKFwiZXJyb3JcIiwgKCkgPT4gdGhpcy5fZXZlbnRNYW5hZ2VyLnRyaWdnZXIoe1xuICAgICAgICAgICAgZXZlbnQ6IFwidHJhbnNwb3J0X2Vycm9yXCIsXG4gICAgICAgICAgICBwYXJhbXM6IFtcIldlYnNvY2tldCBjb25uZWN0aW9uIGZhaWxlZFwiXSxcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnQub3BlbigpO1xuICAgIH1cbiAgICBfZm9ybWF0VXJpKCkge1xuICAgICAgICBjb25zdCBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2w7XG4gICAgICAgIGNvbnN0IGhhbmRzaGFrZVRvcGljID0gdGhpcy5oYW5kc2hha2VUb3BpYztcbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHRoaXMudmVyc2lvbjtcbiAgICAgICAgY29uc3QgYnJpZGdlID0gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuYnJpZGdlKTtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5rZXk7XG4gICAgICAgIGNvbnN0IHVyaSA9IGAke3Byb3RvY29sfToke2hhbmRzaGFrZVRvcGljfUAke3ZlcnNpb259P2JyaWRnZT0ke2JyaWRnZX0ma2V5PSR7a2V5fWA7XG4gICAgICAgIHJldHVybiB1cmk7XG4gICAgfVxuICAgIF9wYXJzZVVyaSh1cmkpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcGFyc2VXYWxsZXRDb25uZWN0VXJpKHVyaSk7XG4gICAgICAgIGlmIChyZXN1bHQucHJvdG9jb2wgPT09IHRoaXMucHJvdG9jb2wpIHtcbiAgICAgICAgICAgIGlmICghcmVzdWx0LmhhbmRzaGFrZVRvcGljKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIG9yIG1pc3NpbmcgaGFuZHNoYWtlVG9waWMgcGFyYW1ldGVyIHZhbHVlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGFuZHNoYWtlVG9waWMgPSByZXN1bHQuaGFuZHNoYWtlVG9waWM7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5icmlkZ2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgb3IgbWlzc2luZyBicmlkZ2UgdXJsIHBhcmFtZXRlciB2YWx1ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGJyaWRnZSA9IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHQuYnJpZGdlKTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0LmtleSkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBvciBtaXNzaW5nIGtleSBwYXJhbWV0ZXIgdmFsdWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBrZXkgPSByZXN1bHQua2V5O1xuICAgICAgICAgICAgcmV0dXJuIHsgaGFuZHNoYWtlVG9waWMsIGJyaWRnZSwga2V5IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfSU5WQUxJRF9VUkkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9nZW5lcmF0ZUtleSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NyeXB0b0xpYikge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fY3J5cHRvTGliLmdlbmVyYXRlS2V5KCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBhc3luYyBfZW5jcnlwdChkYXRhKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuX2tleTtcbiAgICAgICAgaWYgKHRoaXMuX2NyeXB0b0xpYiAmJiBrZXkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2NyeXB0b0xpYi5lbmNyeXB0KGRhdGEsIGtleSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBhc3luYyBfZGVjcnlwdChwYXlsb2FkKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuX2tleTtcbiAgICAgICAgaWYgKHRoaXMuX2NyeXB0b0xpYiAmJiBrZXkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2NyeXB0b0xpYi5kZWNyeXB0KHBheWxvYWQsIGtleSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBfZ2V0U3RvcmFnZVNlc3Npb24oKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5fc2Vzc2lvblN0b3JhZ2UpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX3Nlc3Npb25TdG9yYWdlLmdldFNlc3Npb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBfc2V0U3RvcmFnZVNlc3Npb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZXNzaW9uU3RvcmFnZSkge1xuICAgICAgICAgICAgdGhpcy5fc2Vzc2lvblN0b3JhZ2Uuc2V0U2Vzc2lvbih0aGlzLnNlc3Npb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9yZW1vdmVTdG9yYWdlU2Vzc2lvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Nlc3Npb25TdG9yYWdlKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXNzaW9uU3RvcmFnZS5yZW1vdmVTZXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX21hbmFnZVN0b3JhZ2VTZXNzaW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdG9yYWdlU2Vzc2lvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlU3RvcmFnZVNlc3Npb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcmVnaXN0ZXJQdXNoU2VydmVyKHB1c2hTZXJ2ZXJPcHRzKSB7XG4gICAgICAgIGlmICghcHVzaFNlcnZlck9wdHMudXJsIHx8IHR5cGVvZiBwdXNoU2VydmVyT3B0cy51cmwgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBvciBtaXNzaW5nIHB1c2hTZXJ2ZXJPcHRzLnVybCBwYXJhbWV0ZXIgdmFsdWVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwdXNoU2VydmVyT3B0cy50eXBlIHx8IHR5cGVvZiBwdXNoU2VydmVyT3B0cy50eXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgb3IgbWlzc2luZyBwdXNoU2VydmVyT3B0cy50eXBlIHBhcmFtZXRlciB2YWx1ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXB1c2hTZXJ2ZXJPcHRzLnRva2VuIHx8IHR5cGVvZiBwdXNoU2VydmVyT3B0cy50b2tlbiAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIG9yIG1pc3NpbmcgcHVzaFNlcnZlck9wdHMudG9rZW4gcGFyYW1ldGVyIHZhbHVlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHB1c2hTdWJzY3JpcHRpb24gPSB7XG4gICAgICAgICAgICBicmlkZ2U6IHRoaXMuYnJpZGdlLFxuICAgICAgICAgICAgdG9waWM6IHRoaXMuY2xpZW50SWQsXG4gICAgICAgICAgICB0eXBlOiBwdXNoU2VydmVyT3B0cy50eXBlLFxuICAgICAgICAgICAgdG9rZW46IHB1c2hTZXJ2ZXJPcHRzLnRva2VuLFxuICAgICAgICAgICAgcGVlck5hbWU6IFwiXCIsXG4gICAgICAgICAgICBsYW5ndWFnZTogcHVzaFNlcnZlck9wdHMubGFuZ3VhZ2UgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbihcImNvbm5lY3RcIiwgYXN5bmMgKGVycm9yLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwdXNoU2VydmVyT3B0cy5wZWVyTWV0YSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBlZXJOYW1lID0gcGF5bG9hZC5wYXJhbXNbMF0ucGVlck1ldGEubmFtZTtcbiAgICAgICAgICAgICAgICBwdXNoU3Vic2NyaXB0aW9uLnBlZXJOYW1lID0gcGVlck5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7cHVzaFNlcnZlck9wdHMudXJsfS9uZXdgLCB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocHVzaFN1YnNjcmlwdGlvbiksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoIWpzb24uc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkZhaWxlZCB0byByZWdpc3RlciBpbiBQdXNoIFNlcnZlclwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkZhaWxlZCB0byByZWdpc3RlciBpbiBQdXNoIFNlcnZlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbEZuLCB0aGlzQXJnKSB7XG4gICAgY29uc3QgcHJvbWlzaWZpZWRGdW5jdGlvbiA9IGFzeW5jICguLi5jYWxsQXJncykgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVyciA9PT0gbnVsbCB8fCB0eXBlb2YgZXJyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9yaWdpbmFsRm4uYXBwbHkodGhpc0FyZywgWy4uLmNhbGxBcmdzLCBjYWxsYmFja10pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBwcm9taXNpZmllZEZ1bmN0aW9uO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFJwY0Vycm9yKGVycm9yKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UgfHwgXCJGYWlsZWQgb3IgUmVqZWN0ZWQgUmVxdWVzdFwiO1xuICAgIGxldCBjb2RlID0gLTMyMDAwO1xuICAgIGlmIChlcnJvciAmJiAhZXJyb3IuY29kZSkge1xuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNhc2UgXCJQYXJzZSBlcnJvclwiOlxuICAgICAgICAgICAgICAgIGNvZGUgPSAtMzI3MDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiSW52YWxpZCByZXF1ZXN0XCI6XG4gICAgICAgICAgICAgICAgY29kZSA9IC0zMjYwMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJNZXRob2Qgbm90IGZvdW5kXCI6XG4gICAgICAgICAgICAgICAgY29kZSA9IC0zMjYwMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJJbnZhbGlkIHBhcmFtc1wiOlxuICAgICAgICAgICAgICAgIGNvZGUgPSAtMzI2MDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiSW50ZXJuYWwgZXJyb3JcIjpcbiAgICAgICAgICAgICAgICBjb2RlID0gLTMyNjAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb2RlID0gLTMyMDAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgY29kZSxcbiAgICAgICAgbWVzc2FnZSxcbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXlsb2FkLmpzLm1hcCIsImV4cG9ydCBjb25zdCBMRU5HVEhfMCA9IDA7XG5leHBvcnQgY29uc3QgTEVOR1RIXzEgPSAxO1xuZXhwb3J0IGNvbnN0IExFTkdUSF8xNiA9IDE2O1xuZXhwb3J0IGNvbnN0IExFTkdUSF8zMiA9IDMyO1xuZXhwb3J0IGNvbnN0IExFTkdUSF82NCA9IDY0O1xuZXhwb3J0IGNvbnN0IExFTkdUSF8xMjggPSAxMjg7XG5leHBvcnQgY29uc3QgTEVOR1RIXzI1NiA9IDI1NjtcbmV4cG9ydCBjb25zdCBMRU5HVEhfNTEyID0gNTEyO1xuZXhwb3J0IGNvbnN0IExFTkdUSF8xMDI0ID0gMTAyNDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxlbmd0aC5qcy5tYXAiLCJpbXBvcnQgeyBMRU5HVEhfMSwgTEVOR1RIXzMyLCBMRU5HVEhfMTYsIExFTkdUSF8yNTYgfSBmcm9tIFwiLi9sZW5ndGhcIjtcbmV4cG9ydCBjb25zdCBBRVNfTEVOR1RIID0gTEVOR1RIXzI1NjtcbmV4cG9ydCBjb25zdCBITUFDX0xFTkdUSCA9IExFTkdUSF8yNTY7XG5leHBvcnQgY29uc3QgQUVTX0JST1dTRVJfQUxHTyA9IFwiQUVTLUNCQ1wiO1xuZXhwb3J0IGNvbnN0IEhNQUNfQlJPV1NFUl9BTEdPID0gYFNIQS0ke0FFU19MRU5HVEh9YDtcbmV4cG9ydCBjb25zdCBITUFDX0JST1dTRVIgPSBcIkhNQUNcIjtcbmV4cG9ydCBjb25zdCBTSEEyNTZfQlJPV1NFUl9BTEdPID0gXCJTSEEtMjU2XCI7XG5leHBvcnQgY29uc3QgU0hBNTEyX0JST1dTRVJfQUxHTyA9IFwiU0hBLTUxMlwiO1xuZXhwb3J0IGNvbnN0IEFFU19OT0RFX0FMR08gPSBgYWVzLSR7QUVTX0xFTkdUSH0tY2JjYDtcbmV4cG9ydCBjb25zdCBITUFDX05PREVfQUxHTyA9IGBzaGEke0hNQUNfTEVOR1RIfWA7XG5leHBvcnQgY29uc3QgU0hBMjU2X05PREVfQUxHTyA9IFwic2hhMjU2XCI7XG5leHBvcnQgY29uc3QgU0hBNTEyX05PREVfQUxHTyA9IFwic2hhNTEyXCI7XG5leHBvcnQgY29uc3QgUklQRU1EMTYwX05PREVfQUxHTyA9IFwicmlwZW1kMTYwXCI7XG5leHBvcnQgY29uc3QgUFJFRklYX0xFTkdUSCA9IExFTkdUSF8xO1xuZXhwb3J0IGNvbnN0IEtFWV9MRU5HVEggPSBMRU5HVEhfMzI7XG5leHBvcnQgY29uc3QgSVZfTEVOR1RIID0gTEVOR1RIXzE2O1xuZXhwb3J0IGNvbnN0IE1BQ19MRU5HVEggPSBMRU5HVEhfMzI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0LmpzLm1hcCIsImltcG9ydCAqIGFzIGVudiBmcm9tIFwiQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnRcIjtcbmltcG9ydCB7IEVOQ1JZUFRfT1AsIERFQ1JZUFRfT1AsIFNJR05fT1AsIFZFUklGWV9PUCwgQUVTX0JST1dTRVJfQUxHTywgQUVTX0xFTkdUSCwgSE1BQ19CUk9XU0VSX0FMR08sIEhNQUNfQlJPV1NFUiwgSE1BQ19MRU5HVEgsIFNIQTI1Nl9CUk9XU0VSX0FMR08sIFNIQTUxMl9CUk9XU0VSX0FMR08sIExFTkdUSF81MTIsIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFsZ28odHlwZSkge1xuICAgIHJldHVybiB0eXBlID09PSBBRVNfQlJPV1NFUl9BTEdPXG4gICAgICAgID8geyBsZW5ndGg6IEFFU19MRU5HVEgsIG5hbWU6IEFFU19CUk9XU0VSX0FMR08gfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIGhhc2g6IHsgbmFtZTogSE1BQ19CUk9XU0VSX0FMR08gfSxcbiAgICAgICAgICAgIG5hbWU6IEhNQUNfQlJPV1NFUixcbiAgICAgICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcHModHlwZSkge1xuICAgIHJldHVybiB0eXBlID09PSBBRVNfQlJPV1NFUl9BTEdPXG4gICAgICAgID8gW0VOQ1JZUFRfT1AsIERFQ1JZUFRfT1BdXG4gICAgICAgIDogW1NJR05fT1AsIFZFUklGWV9PUF07XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnJvd3NlckV4cG9ydEtleShjcnlwdG9LZXksIHR5cGUgPSBBRVNfQlJPV1NFUl9BTEdPKSB7XG4gICAgY29uc3Qgc3VidGxlID0gZW52LmdldFN1YnRsZUNyeXB0bygpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShhd2FpdCBzdWJ0bGUuZXhwb3J0S2V5KFwicmF3XCIsIGNyeXB0b0tleSkpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJyb3dzZXJJbXBvcnRLZXkoYnVmZmVyLCB0eXBlID0gQUVTX0JST1dTRVJfQUxHTykge1xuICAgIHJldHVybiBlbnYuZ2V0U3VidGxlQ3J5cHRvKCkuaW1wb3J0S2V5KFwicmF3XCIsIGJ1ZmZlciwgZ2V0QWxnbyh0eXBlKSwgdHJ1ZSwgZ2V0T3BzKHR5cGUpKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBicm93c2VyQWVzRW5jcnlwdChpdiwga2V5LCBkYXRhKSB7XG4gICAgY29uc3Qgc3VidGxlID0gZW52LmdldFN1YnRsZUNyeXB0bygpO1xuICAgIGNvbnN0IGNyeXB0b0tleSA9IGF3YWl0IGJyb3dzZXJJbXBvcnRLZXkoa2V5LCBBRVNfQlJPV1NFUl9BTEdPKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdWJ0bGUuZW5jcnlwdCh7XG4gICAgICAgIGl2LFxuICAgICAgICBuYW1lOiBBRVNfQlJPV1NFUl9BTEdPLFxuICAgIH0sIGNyeXB0b0tleSwgZGF0YSk7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlc3VsdCk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnJvd3NlckFlc0RlY3J5cHQoaXYsIGtleSwgZGF0YSkge1xuICAgIGNvbnN0IHN1YnRsZSA9IGVudi5nZXRTdWJ0bGVDcnlwdG8oKTtcbiAgICBjb25zdCBjcnlwdG9LZXkgPSBhd2FpdCBicm93c2VySW1wb3J0S2V5KGtleSwgQUVTX0JST1dTRVJfQUxHTyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VidGxlLmRlY3J5cHQoe1xuICAgICAgICBpdixcbiAgICAgICAgbmFtZTogQUVTX0JST1dTRVJfQUxHTyxcbiAgICB9LCBjcnlwdG9LZXksIGRhdGEpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShyZXN1bHQpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJyb3dzZXJIbWFjU2hhMjU2U2lnbihrZXksIGRhdGEpIHtcbiAgICBjb25zdCBzdWJ0bGUgPSBlbnYuZ2V0U3VidGxlQ3J5cHRvKCk7XG4gICAgY29uc3QgY3J5cHRvS2V5ID0gYXdhaXQgYnJvd3NlckltcG9ydEtleShrZXksIEhNQUNfQlJPV1NFUik7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgc3VidGxlLnNpZ24oe1xuICAgICAgICBsZW5ndGg6IEhNQUNfTEVOR1RILFxuICAgICAgICBuYW1lOiBITUFDX0JST1dTRVIsXG4gICAgfSwgY3J5cHRvS2V5LCBkYXRhKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBicm93c2VySG1hY1NoYTUxMlNpZ24oa2V5LCBkYXRhKSB7XG4gICAgY29uc3Qgc3VidGxlID0gZW52LmdldFN1YnRsZUNyeXB0bygpO1xuICAgIGNvbnN0IGNyeXB0b0tleSA9IGF3YWl0IGJyb3dzZXJJbXBvcnRLZXkoa2V5LCBITUFDX0JST1dTRVIpO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHN1YnRsZS5zaWduKHtcbiAgICAgICAgbGVuZ3RoOiBMRU5HVEhfNTEyLFxuICAgICAgICBuYW1lOiBITUFDX0JST1dTRVIsXG4gICAgfSwgY3J5cHRvS2V5LCBkYXRhKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBicm93c2VyU2hhMjU2KGRhdGEpIHtcbiAgICBjb25zdCBzdWJ0bGUgPSBlbnYuZ2V0U3VidGxlQ3J5cHRvKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VidGxlLmRpZ2VzdCh7XG4gICAgICAgIG5hbWU6IFNIQTI1Nl9CUk9XU0VSX0FMR08sXG4gICAgfSwgZGF0YSk7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlc3VsdCk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnJvd3NlclNoYTUxMihkYXRhKSB7XG4gICAgY29uc3Qgc3VidGxlID0gZW52LmdldFN1YnRsZUNyeXB0bygpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1YnRsZS5kaWdlc3Qoe1xuICAgICAgICBuYW1lOiBTSEE1MTJfQlJPV1NFUl9BTEdPLFxuICAgIH0sIGRhdGEpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShyZXN1bHQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci5qcy5tYXAiLCJleHBvcnQgY29uc3QgRU5DUllQVF9PUCA9IFwiZW5jcnlwdFwiO1xuZXhwb3J0IGNvbnN0IERFQ1JZUFRfT1AgPSBcImRlY3J5cHRcIjtcbmV4cG9ydCBjb25zdCBTSUdOX09QID0gXCJzaWduXCI7XG5leHBvcnQgY29uc3QgVkVSSUZZX09QID0gXCJ2ZXJpZnlcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZXJhdGlvbnMuanMubWFwIiwiaW1wb3J0IHsgYnJvd3NlckFlc0RlY3J5cHQsIGJyb3dzZXJBZXNFbmNyeXB0IH0gZnJvbSBcIi4uL2xpYi9icm93c2VyXCI7XG5leHBvcnQgZnVuY3Rpb24gYWVzQ2JjRW5jcnlwdChpdiwga2V5LCBkYXRhKSB7XG4gICAgcmV0dXJuIGJyb3dzZXJBZXNFbmNyeXB0KGl2LCBrZXksIGRhdGEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFlc0NiY0RlY3J5cHQoaXYsIGtleSwgZGF0YSkge1xuICAgIHJldHVybiBicm93c2VyQWVzRGVjcnlwdChpdiwga2V5LCBkYXRhKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFlcy5qcy5tYXAiLCJpbXBvcnQgeyBicm93c2VySG1hY1NoYTI1NlNpZ24sIGJyb3dzZXJIbWFjU2hhNTEyU2lnbiB9IGZyb20gXCIuLi9saWIvYnJvd3NlclwiO1xuaW1wb3J0IHsgaXNDb25zdGFudFRpbWUgfSBmcm9tIFwiLi4vaGVscGVyc1wiO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhtYWNTaGEyNTZTaWduKGtleSwgbXNnKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYnJvd3NlckhtYWNTaGEyNTZTaWduKGtleSwgbXNnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhtYWNTaGEyNTZWZXJpZnkoa2V5LCBtc2csIHNpZykge1xuICAgIGNvbnN0IGV4cGVjdGVkU2lnID0gYXdhaXQgYnJvd3NlckhtYWNTaGEyNTZTaWduKGtleSwgbXNnKTtcbiAgICBjb25zdCByZXN1bHQgPSBpc0NvbnN0YW50VGltZShleHBlY3RlZFNpZywgc2lnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhtYWNTaGE1MTJTaWduKGtleSwgbXNnKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYnJvd3NlckhtYWNTaGE1MTJTaWduKGtleSwgbXNnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhtYWNTaGE1MTJWZXJpZnkoa2V5LCBtc2csIHNpZykge1xuICAgIGNvbnN0IGV4cGVjdGVkU2lnID0gYXdhaXQgYnJvd3NlckhtYWNTaGE1MTJTaWduKGtleSwgbXNnKTtcbiAgICBjb25zdCByZXN1bHQgPSBpc0NvbnN0YW50VGltZShleHBlY3RlZFNpZywgc2lnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG1hYy5qcy5tYXAiLCJpbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSBcIkB3YWxsZXRjb25uZWN0L2NyeXB0b1wiO1xuaW1wb3J0ICogYXMgZW5jb2RpbmcgZnJvbSBcIkB3YWxsZXRjb25uZWN0L2VuY29kaW5nXCI7XG5pbXBvcnQgeyBjb252ZXJ0QXJyYXlCdWZmZXJUb0J1ZmZlciwgY29udmVydEJ1ZmZlclRvQXJyYXlCdWZmZXIgfSBmcm9tIFwiQHdhbGxldGNvbm5lY3QvdXRpbHNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUtleShsZW5ndGgpIHtcbiAgICBjb25zdCBfbGVuZ3RoID0gKGxlbmd0aCB8fCAyNTYpIC8gODtcbiAgICBjb25zdCBieXRlcyA9IGNyeXB0by5yYW5kb21CeXRlcyhfbGVuZ3RoKTtcbiAgICBjb25zdCByZXN1bHQgPSBjb252ZXJ0QnVmZmVyVG9BcnJheUJ1ZmZlcihlbmNvZGluZy5hcnJheVRvQnVmZmVyKGJ5dGVzKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlIbWFjKHBheWxvYWQsIGtleSkge1xuICAgIGNvbnN0IGNpcGhlclRleHQgPSBlbmNvZGluZy5oZXhUb0FycmF5KHBheWxvYWQuZGF0YSk7XG4gICAgY29uc3QgaXYgPSBlbmNvZGluZy5oZXhUb0FycmF5KHBheWxvYWQuaXYpO1xuICAgIGNvbnN0IGhtYWMgPSBlbmNvZGluZy5oZXhUb0FycmF5KHBheWxvYWQuaG1hYyk7XG4gICAgY29uc3QgaG1hY0hleCA9IGVuY29kaW5nLmFycmF5VG9IZXgoaG1hYywgZmFsc2UpO1xuICAgIGNvbnN0IHVuc2lnbmVkID0gZW5jb2RpbmcuY29uY2F0QXJyYXlzKGNpcGhlclRleHQsIGl2KTtcbiAgICBjb25zdCBjaG1hYyA9IGF3YWl0IGNyeXB0by5obWFjU2hhMjU2U2lnbihrZXksIHVuc2lnbmVkKTtcbiAgICBjb25zdCBjaG1hY0hleCA9IGVuY29kaW5nLmFycmF5VG9IZXgoY2htYWMsIGZhbHNlKTtcbiAgICBpZiAoZW5jb2RpbmcucmVtb3ZlSGV4UHJlZml4KGhtYWNIZXgpID09PSBlbmNvZGluZy5yZW1vdmVIZXhQcmVmaXgoY2htYWNIZXgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5jcnlwdChkYXRhLCBrZXksIHByb3ZpZGVkSXYpIHtcbiAgICBjb25zdCBfa2V5ID0gZW5jb2RpbmcuYnVmZmVyVG9BcnJheShjb252ZXJ0QXJyYXlCdWZmZXJUb0J1ZmZlcihrZXkpKTtcbiAgICBjb25zdCBpdkFycmF5QnVmZmVyID0gcHJvdmlkZWRJdiB8fCAoYXdhaXQgZ2VuZXJhdGVLZXkoMTI4KSk7XG4gICAgY29uc3QgaXYgPSBlbmNvZGluZy5idWZmZXJUb0FycmF5KGNvbnZlcnRBcnJheUJ1ZmZlclRvQnVmZmVyKGl2QXJyYXlCdWZmZXIpKTtcbiAgICBjb25zdCBpdkhleCA9IGVuY29kaW5nLmFycmF5VG9IZXgoaXYsIGZhbHNlKTtcbiAgICBjb25zdCBjb250ZW50U3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgY29uc3QgY29udGVudCA9IGVuY29kaW5nLnV0ZjhUb0FycmF5KGNvbnRlbnRTdHJpbmcpO1xuICAgIGNvbnN0IGNpcGhlclRleHQgPSBhd2FpdCBjcnlwdG8uYWVzQ2JjRW5jcnlwdChpdiwgX2tleSwgY29udGVudCk7XG4gICAgY29uc3QgY2lwaGVyVGV4dEhleCA9IGVuY29kaW5nLmFycmF5VG9IZXgoY2lwaGVyVGV4dCwgZmFsc2UpO1xuICAgIGNvbnN0IHVuc2lnbmVkID0gZW5jb2RpbmcuY29uY2F0QXJyYXlzKGNpcGhlclRleHQsIGl2KTtcbiAgICBjb25zdCBobWFjID0gYXdhaXQgY3J5cHRvLmhtYWNTaGEyNTZTaWduKF9rZXksIHVuc2lnbmVkKTtcbiAgICBjb25zdCBobWFjSGV4ID0gZW5jb2RpbmcuYXJyYXlUb0hleChobWFjLCBmYWxzZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogY2lwaGVyVGV4dEhleCxcbiAgICAgICAgaG1hYzogaG1hY0hleCxcbiAgICAgICAgaXY6IGl2SGV4LFxuICAgIH07XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVjcnlwdChwYXlsb2FkLCBrZXkpIHtcbiAgICBjb25zdCBfa2V5ID0gZW5jb2RpbmcuYnVmZmVyVG9BcnJheShjb252ZXJ0QXJyYXlCdWZmZXJUb0J1ZmZlcihrZXkpKTtcbiAgICBpZiAoIV9rZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBrZXk6IHJlcXVpcmVkIGZvciBkZWNyeXB0aW9uXCIpO1xuICAgIH1cbiAgICBjb25zdCB2ZXJpZmllZCA9IGF3YWl0IHZlcmlmeUhtYWMocGF5bG9hZCwgX2tleSk7XG4gICAgaWYgKCF2ZXJpZmllZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgY2lwaGVyVGV4dCA9IGVuY29kaW5nLmhleFRvQXJyYXkocGF5bG9hZC5kYXRhKTtcbiAgICBjb25zdCBpdiA9IGVuY29kaW5nLmhleFRvQXJyYXkocGF5bG9hZC5pdik7XG4gICAgY29uc3QgYnVmZmVyID0gYXdhaXQgY3J5cHRvLmFlc0NiY0RlY3J5cHQoaXYsIF9rZXksIGNpcGhlclRleHQpO1xuICAgIGNvbnN0IHV0ZjggPSBlbmNvZGluZy5hcnJheVRvVXRmOChidWZmZXIpO1xuICAgIGxldCBkYXRhO1xuICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHV0ZjgpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0ICogYXMgZW52IGZyb20gXCJAd2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudFwiO1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUJ5dGVzKGxlbmd0aCkge1xuICAgIGNvbnN0IGJyb3dzZXJDcnlwdG8gPSBlbnYuZ2V0QnJvd2VyQ3J5cHRvKCk7XG4gICAgcmV0dXJuIGJyb3dzZXJDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KGxlbmd0aCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IENvbm5lY3RvciBmcm9tIFwiQHdhbGxldGNvbm5lY3QvY29yZVwiO1xuaW1wb3J0ICogYXMgY3J5cHRvTGliIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9pc28tY3J5cHRvXCI7XG5jbGFzcyBXYWxsZXRDb25uZWN0IGV4dGVuZHMgQ29ubmVjdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0b3JPcHRzLCBwdXNoU2VydmVyT3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBjcnlwdG9MaWIsXG4gICAgICAgICAgICBjb25uZWN0b3JPcHRzLFxuICAgICAgICAgICAgcHVzaFNlcnZlck9wdHMsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFdhbGxldENvbm5lY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gXCJldmVudGVtaXR0ZXIzXCI7XG5pbXBvcnQgeyBYTUxIdHRwUmVxdWVzdCB9IGZyb20gXCJ4aHIyLWNvb2tpZXNcIjtcbmltcG9ydCB7IGdldEZyb21XaW5kb3cgfSBmcm9tIFwiQHdhbGxldGNvbm5lY3QvdXRpbHNcIjtcbmNvbnN0IFhIUiA9IGdldEZyb21XaW5kb3coXCJYTUxIdHRwUmVxdWVzdFwiKSB8fCBYTUxIdHRwUmVxdWVzdDtcbmNsYXNzIEhUVFBDb25uZWN0aW9uIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgfVxuICAgIGZvcm1hdEVycm9yKHBheWxvYWQsIG1lc3NhZ2UsIGNvZGUgPSAtMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3I6IHsgbWVzc2FnZSwgY29kZSB9LFxuICAgICAgICAgICAgaWQ6IHBheWxvYWQuaWQsXG4gICAgICAgICAgICBqc29ucnBjOiBwYXlsb2FkLmpzb25ycGMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHNlbmQocGF5bG9hZCwgaW50ZXJuYWwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgaWYgKHBheWxvYWQubWV0aG9kID09PSBcImV0aF9zdWJzY3JpYmVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gdGhpcy5mb3JtYXRFcnJvcihwYXlsb2FkLCBcIlN1YnNjcmlwdGlvbnMgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBIVFRQIGVuZHBvaW50XCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB4aHIgPSBuZXcgWEhSKCk7XG4gICAgICAgICAgICBsZXQgcmVzcG9uZGVkID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCByZXMgPSAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGludGVybmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbChlcnIsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGlkLCBqc29ucnBjIH0gPSBwYXlsb2FkO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBlcnJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgaWQsIGpzb25ycGMsIGVycm9yOiB7IG1lc3NhZ2U6IGVyci5tZXNzYWdlLCBjb2RlOiBlcnIuY29kZSB9IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHsgaWQsIGpzb25ycGMsIHJlc3VsdCB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwicGF5bG9hZFwiLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB4aHIub3BlbihcIlBPU1RcIiwgdGhpcy51cmwsIHRydWUpO1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgICAgICAgeGhyLnRpbWVvdXQgPSA2MCAqIDEwMDA7XG4gICAgICAgICAgICB4aHIub25lcnJvciA9IHJlcztcbiAgICAgICAgICAgIHhoci5vbnRpbWVvdXQgPSByZXM7XG4gICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzKHJlc3BvbnNlLmVycm9yLCByZXNwb25zZS5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLnNlbmQoSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBIVFRQQ29ubmVjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCBXYWxsZXRDb25uZWN0IGZyb20gXCJAd2FsbGV0Y29ubmVjdC9jbGllbnRcIjtcbmltcG9ydCBRUkNvZGVNb2RhbCBmcm9tIFwiQHdhbGxldGNvbm5lY3QvcXJjb2RlLW1vZGFsXCI7XG5pbXBvcnQgSHR0cENvbm5lY3Rpb24gZnJvbSBcIkB3YWxsZXRjb25uZWN0L2h0dHAtY29ubmVjdGlvblwiO1xuaW1wb3J0IHsgcGF5bG9hZElkLCBzaWduaW5nTWV0aG9kcywgcGFyc2VQZXJzb25hbFNpZ24sIGdldFJwY1VybCB9IGZyb20gXCJAd2FsbGV0Y29ubmVjdC91dGlsc1wiO1xuY29uc3QgUHJvdmlkZXJFbmdpbmUgPSByZXF1aXJlKFwid2ViMy1wcm92aWRlci1lbmdpbmVcIik7XG5jb25zdCBDYWNoZVN1YnByb3ZpZGVyID0gcmVxdWlyZShcIndlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9jYWNoZVwiKTtcbmNvbnN0IEZpeHR1cmVTdWJwcm92aWRlciA9IHJlcXVpcmUoXCJ3ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvZml4dHVyZVwiKTtcbmNvbnN0IEZpbHRlclN1YnByb3ZpZGVyID0gcmVxdWlyZShcIndlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9maWx0ZXJzXCIpO1xuY29uc3QgSG9va2VkV2FsbGV0U3VicHJvdmlkZXIgPSByZXF1aXJlKFwid2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL2hvb2tlZC13YWxsZXRcIik7XG5jb25zdCBOb25jZVN1YnByb3ZpZGVyID0gcmVxdWlyZShcIndlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9ub25jZS10cmFja2VyXCIpO1xuY29uc3QgU3Vic2NyaXB0aW9uc1N1YnByb3ZpZGVyID0gcmVxdWlyZShcIndlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9zdWJzY3JpcHRpb25zXCIpO1xuY2xhc3MgV2FsbGV0Q29ubmVjdFByb3ZpZGVyIGV4dGVuZHMgUHJvdmlkZXJFbmdpbmUge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoeyBwb2xsaW5nSW50ZXJ2YWw6IG9wdHMucG9sbGluZ0ludGVydmFsIHx8IDgwMDAgfSk7XG4gICAgICAgIHRoaXMuYnJpZGdlID0gXCJodHRwczovL2JyaWRnZS53YWxsZXRjb25uZWN0Lm9yZ1wiO1xuICAgICAgICB0aGlzLnFyY29kZSA9IHRydWU7XG4gICAgICAgIHRoaXMucXJjb2RlTW9kYWwgPSBRUkNvZGVNb2RhbDtcbiAgICAgICAgdGhpcy5xcmNvZGVNb2RhbE9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucnBjID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbmZ1cmFJZCA9IFwiXCI7XG4gICAgICAgIHRoaXMuaHR0cCA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNDb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29ubmVjdENhbGxiYWNrcyA9IFtdO1xuICAgICAgICB0aGlzLmFjY291bnRzID0gW107XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IDE7XG4gICAgICAgIHRoaXMucnBjVXJsID0gXCJcIjtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgICAgICBpZiAod2MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVXYWxsZXRDb25uZWN0b3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2MuYWNjb3VudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY29ubmVjdCB0byBXYWxsZUNvbm5lY3RcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVxdWVzdCA9IGFzeW5jIChwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kKHBheWxvYWQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNlbmQgPSBhc3luYyAocGF5bG9hZCwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IHBheWxvYWQ7XG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtcyA9IGNhbGxiYWNrO1xuICAgICAgICAgICAgICAgIGlmIChtZXRob2QgPT09IFwicGVyc29uYWxfc2lnblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcnNlUGVyc29uYWxTaWduKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRBc3luY1Byb21pc2UobWV0aG9kLCBwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGF5bG9hZCA9IE9iamVjdC5hc3NpZ24oeyBpZDogcGF5bG9hZElkKCksIGpzb25ycGM6IFwiMi4wXCIgfSwgcGF5bG9hZCk7XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5tZXRob2QgPT09IFwicGVyc29uYWxfc2lnblwiKSB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZC5wYXJhbXMgPSBwYXJzZVBlcnNvbmFsU2lnbihwYXlsb2FkLnBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRBc3luYyhwYXlsb2FkLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEFzeW5jUHJvbWlzZShwYXlsb2FkLm1ldGhvZCwgcGF5bG9hZC5wYXJhbXMpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uQ29ubmVjdCA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0Q2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRyaWdnZXJDb25uZWN0ID0gKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdENhbGxiYWNrcyAmJiB0aGlzLmNvbm5lY3RDYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0Q2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2socmVzdWx0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYnJpZGdlID0gb3B0cy5jb25uZWN0b3JcbiAgICAgICAgICAgID8gb3B0cy5jb25uZWN0b3IuYnJpZGdlXG4gICAgICAgICAgICA6IG9wdHMuYnJpZGdlIHx8IFwiaHR0cHM6Ly9icmlkZ2Uud2FsbGV0Y29ubmVjdC5vcmdcIjtcbiAgICAgICAgdGhpcy5xcmNvZGUgPSB0eXBlb2Ygb3B0cy5xcmNvZGUgPT09IFwidW5kZWZpbmVkXCIgfHwgb3B0cy5xcmNvZGUgIT09IGZhbHNlO1xuICAgICAgICB0aGlzLnFyY29kZU1vZGFsID0gb3B0cy5xcmNvZGVNb2RhbCB8fCB0aGlzLnFyY29kZU1vZGFsO1xuICAgICAgICB0aGlzLnFyY29kZU1vZGFsT3B0aW9ucyA9IG9wdHMucXJjb2RlTW9kYWxPcHRpb25zO1xuICAgICAgICB0aGlzLndjID1cbiAgICAgICAgICAgIG9wdHMuY29ubmVjdG9yIHx8XG4gICAgICAgICAgICAgICAgbmV3IFdhbGxldENvbm5lY3Qoe1xuICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IHRoaXMuYnJpZGdlLFxuICAgICAgICAgICAgICAgICAgICBxcmNvZGVNb2RhbDogdGhpcy5xcmNvZGUgPyB0aGlzLnFyY29kZU1vZGFsIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBxcmNvZGVNb2RhbE9wdGlvbnM6IHRoaXMucXJjb2RlTW9kYWxPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlSWQ6IG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5zdG9yYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgIHNpZ25pbmdNZXRob2RzOiBvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuc2lnbmluZ01ldGhvZHMsXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudE1ldGE6IG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5jbGllbnRNZXRhLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJwYyA9IG9wdHMucnBjIHx8IG51bGw7XG4gICAgICAgIGlmICghdGhpcy5ycGMgJiZcbiAgICAgICAgICAgICghb3B0cy5pbmZ1cmFJZCB8fCB0eXBlb2Ygb3B0cy5pbmZ1cmFJZCAhPT0gXCJzdHJpbmdcIiB8fCAhb3B0cy5pbmZ1cmFJZC50cmltKCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIG9uZSBvZiB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyczogcnBjIG9yIGluZnVyYUlkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5mdXJhSWQgPSBvcHRzLmluZnVyYUlkIHx8IFwiXCI7XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuY2hhaW5JZCkgfHwgdGhpcy5jaGFpbklkO1xuICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG4gICAgZ2V0IGlzV2FsbGV0Q29ubmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGdldCBjb25uZWN0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndjO1xuICAgIH1cbiAgICBnZXQgd2FsbGV0TWV0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2MucGVlck1ldGE7XG4gICAgfVxuICAgIGFzeW5jIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gICAgYXN5bmMgY2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IHdjID0gYXdhaXQgdGhpcy5nZXRXYWxsZXRDb25uZWN0b3IoeyBkaXNhYmxlU2Vzc2lvbkNyZWF0aW9uOiB0cnVlIH0pO1xuICAgICAgICBhd2FpdCB3Yy5raWxsU2Vzc2lvbigpO1xuICAgICAgICBhd2FpdCB0aGlzLm9uRGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICBhc3luYyBoYW5kbGVSZXF1ZXN0KHBheWxvYWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCByZXNwb25zZTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgY29uc3Qgd2MgPSBhd2FpdCB0aGlzLmdldFdhbGxldENvbm5lY3RvcigpO1xuICAgICAgICAgICAgc3dpdGNoIChwYXlsb2FkLm1ldGhvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ3Y19raWxsU2Vzc2lvblwiOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJldGhfYWNjb3VudHNcIjpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gd2MuYWNjb3VudHM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJldGhfY29pbmJhc2VcIjpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gd2MuYWNjb3VudHNbMF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJldGhfY2hhaW5JZFwiOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB3Yy5jaGFpbklkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibmV0X3ZlcnNpb25cIjpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gd2MuY2hhaW5JZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImV0aF91bmluc3RhbGxGaWx0ZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kQXN5bmMocGF5bG9hZCwgKF8pID0+IF8pO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuaGFuZGxlT3RoZXJSZXF1ZXN0cyhwYXlsb2FkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdFJlc3BvbnNlKHBheWxvYWQsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBoYW5kbGVPdGhlclJlcXVlc3RzKHBheWxvYWQpIHtcbiAgICAgICAgaWYgKCFzaWduaW5nTWV0aG9kcy5pbmNsdWRlcyhwYXlsb2FkLm1ldGhvZCkgJiYgcGF5bG9hZC5tZXRob2Quc3RhcnRzV2l0aChcImV0aF9cIikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVJlYWRSZXF1ZXN0cyhwYXlsb2FkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdjLnNlbmRDdXN0b21SZXF1ZXN0KHBheWxvYWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRSZXNwb25zZShwYXlsb2FkLCByZXN1bHQpO1xuICAgIH1cbiAgICBhc3luYyBoYW5kbGVSZWFkUmVxdWVzdHMocGF5bG9hZCkge1xuICAgICAgICBpZiAoIXRoaXMuaHR0cCkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJIVFRQIENvbm5lY3Rpb24gbm90IGF2YWlsYWJsZVwiKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuc2VuZChwYXlsb2FkKTtcbiAgICB9XG4gICAgZm9ybWF0UmVzcG9uc2UocGF5bG9hZCwgcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogcGF5bG9hZC5pZCxcbiAgICAgICAgICAgIGpzb25ycGM6IHBheWxvYWQuanNvbnJwYyxcbiAgICAgICAgICAgIHJlc3VsdDogcmVzdWx0LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRXYWxsZXRDb25uZWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgZGlzYWJsZVNlc3Npb25DcmVhdGlvbiA9IGZhbHNlIH0gPSBvcHRzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgd2MgPSB0aGlzLndjO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNvbm5lY3QoKHgpID0+IHJlc29sdmUoeCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXdjLmNvbm5lY3RlZCAmJiAhZGlzYWJsZVNlc3Npb25DcmVhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNDb25uZWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB3Yy5vbihcIm1vZGFsX2Nsb3NlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJVc2VyIGNsb3NlZCBtb2RhbFwiKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgd2MuY3JlYXRlU2Vzc2lvbih7IGNoYWluSWQ6IHRoaXMuY2hhaW5JZCB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHdjLm9uKFwiY29ubmVjdFwiLCAoZXJyb3IsIHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHBheWxvYWQucGFyYW1zWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImNvbm5lY3RcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJDb25uZWN0KHdjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUod2MpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUod2Muc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUod2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgc3Vic2NyaWJlV2FsbGV0Q29ubmVjdG9yKCkge1xuICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgIHdjLm9uKFwiZGlzY29ubmVjdFwiLCBlcnJvciA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHdjLm9uKFwic2Vzc2lvbl91cGRhdGVcIiwgKGVycm9yLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZShwYXlsb2FkLnBhcmFtc1swXSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBvbkRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLmVtaXQoXCJjbG9zZVwiLCAxMDAwLCBcIkNvbm5lY3Rpb24gY2xvc2VkXCIpO1xuICAgICAgICB0aGlzLmVtaXQoXCJkaXNjb25uZWN0XCIsIDEwMDAsIFwiQ29ubmVjdGlvbiBkaXNjb25uZWN0ZWRcIik7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGFzeW5jIHVwZGF0ZVN0YXRlKHNlc3Npb25QYXJhbXMpIHtcbiAgICAgICAgY29uc3QgeyBhY2NvdW50cywgY2hhaW5JZCwgbmV0d29ya0lkLCBycGNVcmwgfSA9IHNlc3Npb25QYXJhbXM7XG4gICAgICAgIGlmICghdGhpcy5hY2NvdW50cyB8fCAoYWNjb3VudHMgJiYgdGhpcy5hY2NvdW50cyAhPT0gYWNjb3VudHMpKSB7XG4gICAgICAgICAgICB0aGlzLmFjY291bnRzID0gYWNjb3VudHM7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJhY2NvdW50c0NoYW5nZWRcIiwgYWNjb3VudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5jaGFpbklkIHx8IChjaGFpbklkICYmIHRoaXMuY2hhaW5JZCAhPT0gY2hhaW5JZCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJjaGFpbkNoYW5nZWRcIiwgY2hhaW5JZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLm5ldHdvcmtJZCB8fCAobmV0d29ya0lkICYmIHRoaXMubmV0d29ya0lkICE9PSBuZXR3b3JrSWQpKSB7XG4gICAgICAgICAgICB0aGlzLm5ldHdvcmtJZCA9IG5ldHdvcmtJZDtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcIm5ldHdvcmtDaGFuZ2VkXCIsIG5ldHdvcmtJZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVScGNVcmwodGhpcy5jaGFpbklkLCBycGNVcmwgfHwgXCJcIik7XG4gICAgfVxuICAgIHVwZGF0ZVJwY1VybChjaGFpbklkLCBycGNVcmwgPSBcIlwiKSB7XG4gICAgICAgIGNvbnN0IHJwYyA9IHsgaW5mdXJhSWQ6IHRoaXMuaW5mdXJhSWQsIGN1c3RvbTogdGhpcy5ycGMgfHwgdW5kZWZpbmVkIH07XG4gICAgICAgIHJwY1VybCA9IHJwY1VybCB8fCBnZXRScGNVcmwoY2hhaW5JZCwgcnBjKTtcbiAgICAgICAgaWYgKHJwY1VybCkge1xuICAgICAgICAgICAgdGhpcy5ycGNVcmwgPSBycGNVcmw7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUh0dHBDb25uZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBuZXcgRXJyb3IoYE5vIFJQQyBVcmwgYXZhaWxhYmxlIGZvciBjaGFpbklkOiAke2NoYWluSWR9YCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUh0dHBDb25uZWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5ycGNVcmwpIHtcbiAgICAgICAgICAgIHRoaXMuaHR0cCA9IG5ldyBIdHRwQ29ubmVjdGlvbih0aGlzLnJwY1VybCk7XG4gICAgICAgICAgICB0aGlzLmh0dHAub24oXCJwYXlsb2FkXCIsIHBheWxvYWQgPT4gdGhpcy5lbWl0KFwicGF5bG9hZFwiLCBwYXlsb2FkKSk7XG4gICAgICAgICAgICB0aGlzLmh0dHAub24oXCJlcnJvclwiLCBlcnJvciA9PiB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbmRBc3luY1Byb21pc2UobWV0aG9kLCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEFzeW5jKHtcbiAgICAgICAgICAgICAgICBpZDogcGF5bG9hZElkKCksXG4gICAgICAgICAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMgfHwgW10sXG4gICAgICAgICAgICB9LCAoZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5yZXN1bHQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVJwY1VybCh0aGlzLmNoYWluSWQpO1xuICAgICAgICB0aGlzLmFkZFByb3ZpZGVyKG5ldyBGaXh0dXJlU3VicHJvdmlkZXIoe1xuICAgICAgICAgICAgZXRoX2hhc2hyYXRlOiBcIjB4MDBcIixcbiAgICAgICAgICAgIGV0aF9taW5pbmc6IGZhbHNlLFxuICAgICAgICAgICAgZXRoX3N5bmNpbmc6IHRydWUsXG4gICAgICAgICAgICBuZXRfbGlzdGVuaW5nOiB0cnVlLFxuICAgICAgICAgICAgd2ViM19jbGllbnRWZXJzaW9uOiBgV2FsbGV0Q29ubmVjdC92MS54LngvamF2YXNjcmlwdGAsXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5hZGRQcm92aWRlcihuZXcgQ2FjaGVTdWJwcm92aWRlcigpKTtcbiAgICAgICAgdGhpcy5hZGRQcm92aWRlcihuZXcgU3Vic2NyaXB0aW9uc1N1YnByb3ZpZGVyKCkpO1xuICAgICAgICB0aGlzLmFkZFByb3ZpZGVyKG5ldyBGaWx0ZXJTdWJwcm92aWRlcigpKTtcbiAgICAgICAgdGhpcy5hZGRQcm92aWRlcihuZXcgTm9uY2VTdWJwcm92aWRlcigpKTtcbiAgICAgICAgdGhpcy5hZGRQcm92aWRlcihuZXcgSG9va2VkV2FsbGV0U3VicHJvdmlkZXIodGhpcy5jb25maWdXYWxsZXQoKSkpO1xuICAgICAgICB0aGlzLmFkZFByb3ZpZGVyKHtcbiAgICAgICAgICAgIGhhbmRsZVJlcXVlc3Q6IGFzeW5jIChwYXlsb2FkLCBuZXh0LCBlbmQpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGVycm9yLCByZXN1bHQgfSA9IGF3YWl0IHRoaXMuaGFuZGxlUmVxdWVzdChwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICAgICAgZW5kKGVycm9yLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0RW5naW5lOiAoXykgPT4gXyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbmZpZ1dhbGxldCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldEFjY291bnRzOiBhc3luYyAoY2IpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnRzID0gd2MuYWNjb3VudHM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY2NvdW50cyAmJiBhY2NvdW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiKG51bGwsIGFjY291bnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiKG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgYWNjb3VudHNcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjYihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb2Nlc3NNZXNzYWdlOiBhc3luYyAobXNnUGFyYW1zLCBjYikgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdjID0gYXdhaXQgdGhpcy5nZXRXYWxsZXRDb25uZWN0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd2Muc2lnbk1lc3NhZ2UoW21zZ1BhcmFtcy5mcm9tLCBtc2dQYXJhbXMuZGF0YV0pO1xuICAgICAgICAgICAgICAgICAgICBjYihudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9jZXNzUGVyc29uYWxNZXNzYWdlOiBhc3luYyAobXNnUGFyYW1zLCBjYikgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdjID0gYXdhaXQgdGhpcy5nZXRXYWxsZXRDb25uZWN0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd2Muc2lnblBlcnNvbmFsTWVzc2FnZShbbXNnUGFyYW1zLmRhdGEsIG1zZ1BhcmFtcy5mcm9tXSk7XG4gICAgICAgICAgICAgICAgICAgIGNiKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjYihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb2Nlc3NTaWduVHJhbnNhY3Rpb246IGFzeW5jICh0eFBhcmFtcywgY2IpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdjLnNpZ25UcmFuc2FjdGlvbih0eFBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIGNiKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjYihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb2Nlc3NUcmFuc2FjdGlvbjogYXN5bmMgKHR4UGFyYW1zLCBjYikgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdjID0gYXdhaXQgdGhpcy5nZXRXYWxsZXRDb25uZWN0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd2Muc2VuZFRyYW5zYWN0aW9uKHR4UGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgY2IobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvY2Vzc1R5cGVkTWVzc2FnZTogYXN5bmMgKG1zZ1BhcmFtcywgY2IpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YyA9IGF3YWl0IHRoaXMuZ2V0V2FsbGV0Q29ubmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdjLnNpZ25UeXBlZERhdGEoW21zZ1BhcmFtcy5mcm9tLCBtc2dQYXJhbXMuZGF0YV0pO1xuICAgICAgICAgICAgICAgICAgICBjYihudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgV2FsbGV0Q29ubmVjdFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZSA9IGV4cG9ydHMuZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdyA9IGV4cG9ydHMuZ2V0Q3J5cHRvID0gZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZXhwb3J0cy5nZXRMb2NhdGlvbiA9IGV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZXhwb3J0cy5nZXROYXZpZ2F0b3IgPSBleHBvcnRzLmdldE5hdmlnYXRvck9yVGhyb3cgPSBleHBvcnRzLmdldERvY3VtZW50ID0gZXhwb3J0cy5nZXREb2N1bWVudE9yVGhyb3cgPSBleHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZXhwb3J0cy5nZXRGcm9tV2luZG93ID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0RnJvbVdpbmRvdyhuYW1lKSB7XG4gICAgbGV0IHJlcyA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93W25hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJlcyA9IHdpbmRvd1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ2V0RnJvbVdpbmRvdyA9IGdldEZyb21XaW5kb3c7XG5mdW5jdGlvbiBnZXRGcm9tV2luZG93T3JUaHJvdyhuYW1lKSB7XG4gICAgY29uc3QgcmVzID0gZ2V0RnJvbVdpbmRvdyhuYW1lKTtcbiAgICBpZiAoIXJlcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gaXMgbm90IGRlZmluZWQgaW4gV2luZG93YCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZ2V0RnJvbVdpbmRvd09yVGhyb3c7XG5mdW5jdGlvbiBnZXREb2N1bWVudE9yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50T3JUaHJvdyA9IGdldERvY3VtZW50T3JUaHJvdztcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50ID0gZ2V0RG9jdW1lbnQ7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3JPclRocm93KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93T3JUaHJvdyhcIm5hdmlnYXRvclwiKTtcbn1cbmV4cG9ydHMuZ2V0TmF2aWdhdG9yT3JUaHJvdyA9IGdldE5hdmlnYXRvck9yVGhyb3c7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3IoKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJuYXZpZ2F0b3JcIik7XG59XG5leHBvcnRzLmdldE5hdmlnYXRvciA9IGdldE5hdmlnYXRvcjtcbmZ1bmN0aW9uIGdldExvY2F0aW9uT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZ2V0TG9jYXRpb25PclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb24gPSBnZXRMb2NhdGlvbjtcbmZ1bmN0aW9uIGdldENyeXB0b09yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiY3J5cHRvXCIpO1xufVxuZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZ2V0Q3J5cHRvT3JUaHJvdztcbmZ1bmN0aW9uIGdldENyeXB0bygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvdyhcImNyeXB0b1wiKTtcbn1cbmV4cG9ydHMuZ2V0Q3J5cHRvID0gZ2V0Q3J5cHRvO1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhbFN0b3JhZ2VcIik7XG59XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZU9yVGhyb3cgPSBnZXRMb2NhbFN0b3JhZ2VPclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlKCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwibG9jYWxTdG9yYWdlXCIpO1xufVxuZXhwb3J0cy5nZXRMb2NhbFN0b3JhZ2UgPSBnZXRMb2NhbFN0b3JhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0V2luZG93TWV0YWRhdGEgPSB2b2lkIDA7XG5jb25zdCB3aW5kb3dfZ2V0dGVyc18xID0gcmVxdWlyZShcIkB3YWxsZXRjb25uZWN0L3dpbmRvdy1nZXR0ZXJzXCIpO1xuZnVuY3Rpb24gZ2V0V2luZG93TWV0YWRhdGEoKSB7XG4gICAgbGV0IGRvYztcbiAgICBsZXQgbG9jO1xuICAgIHRyeSB7XG4gICAgICAgIGRvYyA9IHdpbmRvd19nZXR0ZXJzXzEuZ2V0RG9jdW1lbnRPclRocm93KCk7XG4gICAgICAgIGxvYyA9IHdpbmRvd19nZXR0ZXJzXzEuZ2V0TG9jYXRpb25PclRocm93KCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRJY29ucygpIHtcbiAgICAgICAgY29uc3QgbGlua3MgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuICAgICAgICBjb25zdCBpY29ucyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rID0gbGlua3NbaV07XG4gICAgICAgICAgICBjb25zdCByZWwgPSBsaW5rLmdldEF0dHJpYnV0ZShcInJlbFwiKTtcbiAgICAgICAgICAgIGlmIChyZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVsLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImljb25cIikgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBocmVmID0gbGluay5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiaHR0cHM6XCIpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiaHR0cDpcIikgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZi5pbmRleE9mKFwiLy9cIikgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWJzb2x1dGVIcmVmID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgbG9jLmhvc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhyZWYuaW5kZXhPZihcIi9cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVIcmVmICs9IGhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gbG9jLnBhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmluYWxQYXRoID0gcGF0aC5qb2luKFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVIcmVmICs9IGZpbmFsUGF0aCArIFwiL1wiICsgaHJlZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMucHVzaChhYnNvbHV0ZUhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaHJlZi5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhYnNvbHV0ZVVybCA9IGxvYy5wcm90b2NvbCArIGhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMucHVzaChhYnNvbHV0ZVVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29ucy5wdXNoKGhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpY29ucztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0V2luZG93TWV0YWRhdGFPZkFueSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IG1ldGFUYWdzID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibWV0YVwiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXRhVGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gbWV0YVRhZ3NbaV07XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gW1wiaXRlbXByb3BcIiwgXCJwcm9wZXJ0eVwiLCBcIm5hbWVcIl1cbiAgICAgICAgICAgICAgICAubWFwKCh0YXJnZXQpID0+IHRhZy5nZXRBdHRyaWJ1dGUodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChhdHRyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MuaW5jbHVkZXMoYXR0cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMubGVuZ3RoICYmIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGFnLmdldEF0dHJpYnV0ZShcImNvbnRlbnRcIik7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXROYW1lKCkge1xuICAgICAgICBsZXQgbmFtZSA9IGdldFdpbmRvd01ldGFkYXRhT2ZBbnkoXCJuYW1lXCIsIFwib2c6c2l0ZV9uYW1lXCIsIFwib2c6dGl0bGVcIiwgXCJ0d2l0dGVyOnRpdGxlXCIpO1xuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIG5hbWUgPSBkb2MudGl0bGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldERlc2NyaXB0aW9uKCkge1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGdldFdpbmRvd01ldGFkYXRhT2ZBbnkoXCJkZXNjcmlwdGlvblwiLCBcIm9nOmRlc2NyaXB0aW9uXCIsIFwidHdpdHRlcjpkZXNjcmlwdGlvblwiLCBcImtleXdvcmRzXCIpO1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgfVxuICAgIGNvbnN0IG5hbWUgPSBnZXROYW1lKCk7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBnZXREZXNjcmlwdGlvbigpO1xuICAgIGNvbnN0IHVybCA9IGxvYy5vcmlnaW47XG4gICAgY29uc3QgaWNvbnMgPSBnZXRJY29ucygpO1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICB1cmwsXG4gICAgICAgIGljb25zLFxuICAgICAgICBuYW1lLFxuICAgIH07XG4gICAgcmV0dXJuIG1ldGE7XG59XG5leHBvcnRzLmdldFdpbmRvd01ldGFkYXRhID0gZ2V0V2luZG93TWV0YWRhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlYWRcblxudmFyIE1TQiA9IDB4ODBcbiAgLCBSRVNUID0gMHg3RlxuXG5mdW5jdGlvbiByZWFkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciByZXMgICAgPSAwXG4gICAgLCBvZmZzZXQgPSBvZmZzZXQgfHwgMFxuICAgICwgc2hpZnQgID0gMFxuICAgICwgY291bnRlciA9IG9mZnNldFxuICAgICwgYlxuICAgICwgbCA9IGJ1Zi5sZW5ndGhcblxuICBkbyB7XG4gICAgaWYgKGNvdW50ZXIgPj0gbCkge1xuICAgICAgcmVhZC5ieXRlcyA9IDBcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdDb3VsZCBub3QgZGVjb2RlIHZhcmludCcpXG4gICAgfVxuICAgIGIgPSBidWZbY291bnRlcisrXVxuICAgIHJlcyArPSBzaGlmdCA8IDI4XG4gICAgICA/IChiICYgUkVTVCkgPDwgc2hpZnRcbiAgICAgIDogKGIgJiBSRVNUKSAqIE1hdGgucG93KDIsIHNoaWZ0KVxuICAgIHNoaWZ0ICs9IDdcbiAgfSB3aGlsZSAoYiA+PSBNU0IpXG5cbiAgcmVhZC5ieXRlcyA9IGNvdW50ZXIgLSBvZmZzZXRcblxuICByZXR1cm4gcmVzXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGVuY29kZVxuXG52YXIgTVNCID0gMHg4MFxuICAsIFJFU1QgPSAweDdGXG4gICwgTVNCQUxMID0gflJFU1RcbiAgLCBJTlQgPSBNYXRoLnBvdygyLCAzMSlcblxuZnVuY3Rpb24gZW5jb2RlKG51bSwgb3V0LCBvZmZzZXQpIHtcbiAgb3V0ID0gb3V0IHx8IFtdXG4gIG9mZnNldCA9IG9mZnNldCB8fCAwXG4gIHZhciBvbGRPZmZzZXQgPSBvZmZzZXRcblxuICB3aGlsZShudW0gPj0gSU5UKSB7XG4gICAgb3V0W29mZnNldCsrXSA9IChudW0gJiAweEZGKSB8IE1TQlxuICAgIG51bSAvPSAxMjhcbiAgfVxuICB3aGlsZShudW0gJiBNU0JBTEwpIHtcbiAgICBvdXRbb2Zmc2V0KytdID0gKG51bSAmIDB4RkYpIHwgTVNCXG4gICAgbnVtID4+Pj0gN1xuICB9XG4gIG91dFtvZmZzZXRdID0gbnVtIHwgMFxuICBcbiAgZW5jb2RlLmJ5dGVzID0gb2Zmc2V0IC0gb2xkT2Zmc2V0ICsgMVxuICBcbiAgcmV0dXJuIG91dFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZW5jb2RlOiByZXF1aXJlKCcuL2VuY29kZS5qcycpXG4gICwgZGVjb2RlOiByZXF1aXJlKCcuL2RlY29kZS5qcycpXG4gICwgZW5jb2RpbmdMZW5ndGg6IHJlcXVpcmUoJy4vbGVuZ3RoLmpzJylcbn1cbiIsIlxudmFyIE4xID0gTWF0aC5wb3coMiwgIDcpXG52YXIgTjIgPSBNYXRoLnBvdygyLCAxNClcbnZhciBOMyA9IE1hdGgucG93KDIsIDIxKVxudmFyIE40ID0gTWF0aC5wb3coMiwgMjgpXG52YXIgTjUgPSBNYXRoLnBvdygyLCAzNSlcbnZhciBONiA9IE1hdGgucG93KDIsIDQyKVxudmFyIE43ID0gTWF0aC5wb3coMiwgNDkpXG52YXIgTjggPSBNYXRoLnBvdygyLCA1NilcbnZhciBOOSA9IE1hdGgucG93KDIsIDYzKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHZhbHVlIDwgTjEgPyAxXG4gIDogdmFsdWUgPCBOMiA/IDJcbiAgOiB2YWx1ZSA8IE4zID8gM1xuICA6IHZhbHVlIDwgTjQgPyA0XG4gIDogdmFsdWUgPCBONSA/IDVcbiAgOiB2YWx1ZSA8IE42ID8gNlxuICA6IHZhbHVlIDwgTjcgPyA3XG4gIDogdmFsdWUgPCBOOCA/IDhcbiAgOiB2YWx1ZSA8IE45ID8gOVxuICA6ICAgICAgICAgICAgICAxMFxuICApXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIF9fREVWX18gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChfX0RFVl9fKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAxID8gbGVuIC0gMSA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDE7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMV0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHByaW50V2FybmluZy5hcHBseShudWxsLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIl0sIm5hbWVzIjpbImRldGVjdEVudiIsInVzZXJBZ2VudCIsImRldGVjdE9TIiwiZW52Iiwib3MiLCJ1bmRlZmluZWQiLCJpc0FuZHJvaWQiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiaXNJT1MiLCJuYXZpZ2F0b3IiLCJtYXhUb3VjaFBvaW50cyIsImlzTW9iaWxlIiwiaXNOb2RlIiwibmFtZSIsImlzQnJvd3NlciIsImdldE5hdmlnYXRvciIsImdldEZyb21XaW5kb3ciLCJnZXRGcm9tV2luZG93T3JUaHJvdyIsImdldERvY3VtZW50T3JUaHJvdyIsImdldERvY3VtZW50IiwiZ2V0TmF2aWdhdG9yT3JUaHJvdyIsImdldExvY2F0aW9uT3JUaHJvdyIsImdldExvY2F0aW9uIiwiZ2V0Q3J5cHRvT3JUaHJvdyIsImdldENyeXB0byIsImdldExvY2FsU3RvcmFnZU9yVGhyb3ciLCJnZXRMb2NhbFN0b3JhZ2UiLCJnZXRDbGllbnRNZXRhIiwidmFsdWUiLCJFcnJvciIsIkpTT04iLCJwYXJzZSIsIl9hIiwic3RyaW5naWZ5Iiwic2V0TG9jYWwiLCJrZXkiLCJkYXRhIiwicmF3IiwibG9jYWwiLCJzZXRJdGVtIiwiZ2V0TG9jYWwiLCJnZXRJdGVtIiwicmVtb3ZlTG9jYWwiLCJyZW1vdmVJdGVtIiwibW9iaWxlTGlua0Nob2ljZUtleSIsImZvcm1hdElPU01vYmlsZSIsInVyaSIsImVudHJ5IiwiZW5jb2RlZFVyaSIsImVuY29kZVVSSUNvbXBvbmVudCIsInVuaXZlcnNhbExpbmsiLCJkZWVwTGluayIsImVuZHNXaXRoIiwic2F2ZU1vYmlsZUxpbmtJbmZvIiwiZm9jdXNVcmkiLCJocmVmIiwic3BsaXQiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXRNb2JpbGVSZWdpc3RyeUVudHJ5IiwicmVnaXN0cnkiLCJmaWx0ZXIiLCJnZXRNb2JpbGVMaW5rUmVnaXN0cnkiLCJ3aGl0ZWxpc3QiLCJsaW5rcyIsIm1hcCIsIkJvb2xlYW4iLCJBUElfVVJMIiwiZ2V0V2FsbGV0UmVnaXN0cnlVcmwiLCJnZXREYXBwUmVnaXN0cnlVcmwiLCJnZXRBcHBMb2dvVXJsIiwiaWQiLCJmb3JtYXRNb2JpbGVSZWdpc3RyeUVudHJ5IiwicGxhdGZvcm0iLCJzaG9ydE5hbWUiLCJtZXRhZGF0YSIsImNvbG9yIiwiY29sb3JzIiwicHJpbWFyeSIsImxvZ28iLCJ1bml2ZXJzYWwiLCJuYXRpdmUiLCJmb3JtYXRNb2JpbGVSZWdpc3RyeSIsInZhbHVlcyIsIl9faW1wb3J0RGVmYXVsdCIsInRoaXMiLCJtb2QiLCJfX2VzTW9kdWxlIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwicmVtb3ZlSGV4TGVhZGluZ1plcm9zIiwic2FuaXRpemVIZXgiLCJhZGRIZXhQcmVmaXgiLCJyZW1vdmVIZXhQcmVmaXgiLCJwYWRSaWdodCIsInBhZExlZnQiLCJzYW5pdGl6ZUJ5dGVzIiwic3dhcEhleCIsInN3YXBCeXRlcyIsInNwbGl0Qnl0ZXMiLCJjYWxjQnl0ZUxlbmd0aCIsInRyaW1SaWdodCIsInRyaW1MZWZ0IiwiY29uY2F0QXJyYXlzIiwiY29uY2F0QnVmZmVycyIsImdldEVuY29kaW5nIiwiZ2V0VHlwZSIsImlzQXJyYXlCdWZmZXIiLCJpc1R5cGVkQXJyYXkiLCJpc0J1ZmZlciIsImlzSGV4U3RyaW5nIiwiaXNCaW5hcnlTdHJpbmciLCJiaW5hcnlUb051bWJlciIsImJpbmFyeVRvVXRmOCIsImJpbmFyeVRvSGV4IiwiYmluYXJ5VG9BcnJheSIsImJpbmFyeVRvQnVmZmVyIiwibnVtYmVyVG9CaW5hcnkiLCJudW1iZXJUb1V0ZjgiLCJudW1iZXJUb0hleCIsIm51bWJlclRvQXJyYXkiLCJudW1iZXJUb0J1ZmZlciIsInV0ZjhUb0JpbmFyeSIsInV0ZjhUb051bWJlciIsInV0ZjhUb0hleCIsInV0ZjhUb0FycmF5IiwidXRmOFRvQnVmZmVyIiwiaGV4VG9CaW5hcnkiLCJoZXhUb051bWJlciIsImhleFRvVXRmOCIsImhleFRvQXJyYXkiLCJoZXhUb0J1ZmZlciIsImFycmF5VG9CaW5hcnkiLCJhcnJheVRvTnVtYmVyIiwiYXJyYXlUb1V0ZjgiLCJhcnJheVRvSGV4IiwiYXJyYXlUb0J1ZmZlciIsImJ1ZmZlclRvQmluYXJ5IiwiYnVmZmVyVG9OdW1iZXIiLCJidWZmZXJUb1V0ZjgiLCJidWZmZXJUb0hleCIsImJ1ZmZlclRvQXJyYXkiLCJpc190eXBlZGFycmF5XzEiLCJ0eXBlZGFycmF5X3RvX2J1ZmZlcl8xIiwiRU5DX0hFWCIsIkVOQ19VVEY4IiwiU1RSSU5HX1pFUk8iLCJidWYiLCJVaW50OEFycmF5IiwicHJlZml4ZWQiLCJoZXgiLCJ0b1N0cmluZyIsInJlYWRVSW50QkUiLCJsZW5ndGgiLCJhcnIiLCJkZWZhdWx0IiwiQXJyYXkiLCJmcm9tIiwiam9pbiIsIkJ1ZmZlciIsInV0ZjgiLCJudW0iLCJiaW4iLCJ4IiwicGFyc2VJbnQiLCJzdHIiLCJSZWdFeHAiLCJ0ZXN0IiwibWF0Y2giLCJ2YWwiLCJzdHJpY3QiLCJieXRlTGVuZ3RoIiwiYnl0ZVNpemUiLCJyZW1haW5kZXIiLCJieXRlcyIsInJldmVyc2VTdHJpbmciLCJwYWRkaW5nIiwicGFkU3RyaW5nIiwicmVwbGFjZSIsInN0YXJ0c1dpdGgiLCJyZXZlcnNlIiwibGVmdCIsImRpZmYiLCJyZXN1bHQiLCJwYWQiLCJyZXBlYXQiLCJhc3NlcnRpb24iLCJlcnJvck1lc3NhZ2UiLCJhc3NlcnQiLCJpc1VuZGVmaW5lZCIsImlzQXJyYXkiLCJhcmdzIiwiY29uY2F0IiwiZm9yRWFjaCIsImFyZyIsInNsaWNlIiwic3Vic3RyaW5nIiwiZ2V0QnJvd2VyQ3J5cHRvIiwiZyIsImNyeXB0byIsIm1zQ3J5cHRvIiwiZ2V0U3VidGxlQ3J5cHRvIiwiYnJvd3NlckNyeXB0byIsInN1YnRsZSIsIndlYmtpdFN1YnRsZSIsImlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSIsImlzUmVhY3ROYXRpdmUiLCJkb2N1bWVudCIsInByb2R1Y3QiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJub2RlIiwiX19jcmVhdGVCaW5kaW5nIiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19leHBvcnRTdGFyIiwicCIsImhhc093blByb3BlcnR5IiwiaGFzIiwicHJvdG90eXBlIiwicHJlZml4IiwiRXZlbnRzIiwiRUUiLCJmbiIsImNvbnRleHQiLCJvbmNlIiwiYWRkTGlzdGVuZXIiLCJlbWl0dGVyIiwiZXZlbnQiLCJUeXBlRXJyb3IiLCJsaXN0ZW5lciIsImV2dCIsIl9ldmVudHMiLCJwdXNoIiwiX2V2ZW50c0NvdW50IiwiY2xlYXJFdmVudCIsIkV2ZW50RW1pdHRlciIsIl9fcHJvdG9fXyIsImV2ZW50TmFtZXMiLCJldmVudHMiLCJuYW1lcyIsImNhbGwiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJsaXN0ZW5lcnMiLCJoYW5kbGVycyIsImkiLCJsIiwiZWUiLCJsaXN0ZW5lckNvdW50IiwiZW1pdCIsImExIiwiYTIiLCJhMyIsImE0IiwiYTUiLCJsZW4iLCJhcmd1bWVudHMiLCJyZW1vdmVMaXN0ZW5lciIsImFwcGx5IiwiaiIsIm9uIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwib2ZmIiwibW9kdWxlIiwiX2ludGVyb3BEZWZhdWx0IiwiZXgiLCJicm93c2VyVXRpbHMiLCJRUkNvZGUiLCJjb3B5IiwiUmVhY3QiLCJTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3IiLCJXQUxMRVRDT05ORUNUX1dSQVBQRVJfSUQiLCJXQUxMRVRDT05ORUNUX1NUWUxFX0lEIiwiV0FMTEVUQ09OTkVDVF9NT0RBTF9JRCIsIldBTExFVENPTk5FQ1RfQ1RBX1RFWFRfSUQiLCJIZWFkZXIiLCJwcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJzcmMiLCJvbkNsaWNrIiwib25DbG9zZSIsIkNvbm5lY3RCdXR0b24iLCJXQUxMRVRDT05ORUNUX0NPTk5FQ1RfQlVUVE9OX0lEIiwicmVsIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ0YXJnZXQiLCJXYWxsZXRCdXR0b24iLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZFNpemUiLCJXYWxsZXRJY29uIiwiZm9udFNpemUiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiTGlua0Rpc3BsYXkiLCJhbmRyb2lkIiwicmVmIiwidXNlU3RhdGUiLCJpbnB1dCIsInNldElucHV0IiwicmVmJDEiLCJzZXRGaWx0ZXIiLCJyZWYkMiIsInBhZ2UiLCJzZXRQYWdlIiwibGluayIsImdyaWQiLCJwYWdlcyIsIk1hdGgiLCJjZWlsIiwicmFuZ2UiLCJwYWdlTGlua3MiLCJfIiwiaW5kZXgiLCJoYXNQYWdpbmciLCJmaWx0ZXJUaW1lb3V0IiwidGV4dCIsImNvbm5lY3RfbW9iaWxlX3dhbGxldCIsImNob29zZV9wcmVmZXJyZWRfd2FsbGV0IiwicGxhY2Vob2xkZXIiLCJvbkNoYW5nZSIsImUiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY29ubmVjdCIsInVzZUNhbGxiYWNrIiwiaGFuZGxlQ2xpY2tJT1MiLCJGcmFnbWVudCIsIm5vX3dhbGxldHNfZm91bmQiLCJsb2FkaW5nIiwiZmlsbCIsInBhZ2VOdW1iZXIiLCJzZWxlY3RlZCIsIm1hcmdpbiIsImZvbnRXZWlnaHQiLCJOb3RpZmljYXRpb24iLCJzaG93IiwibWVzc2FnZSIsInRyaW0iLCJRUkNvZGVEaXNwbGF5Iiwibm90aWZpY2F0aW9uIiwic2V0Tm90aWZpY2F0aW9uIiwic3ZnIiwic2V0U3ZnIiwidXNlRWZmZWN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0eXBlIiwidGhlbiIsImRhdGFTdHJpbmciLCJyZWplY3QiLCJmb3JtYXRRUkNvZGVJbWFnZSIsIl9mb3JtYXRRUkNvZGVJbWFnZSIsInNjYW5fcXJjb2RlX3dpdGhfd2FsbGV0IiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJjb3BpZWRfdG9fY2xpcGJvYXJkIiwic2V0SW50ZXJ2YWwiLCJjb3B5X3RvX2NsaXBib2FyZCIsIk1vZGFsIiwibW9iaWxlIiwicXJjb2RlTW9kYWxPcHRpb25zIiwibW9iaWxlTGlua3MiLCJkZXNrdG9wTGlua3MiLCJzZXRMb2FkaW5nIiwiZmV0Y2hlZCIsInNldEZldGNoZWQiLCJkaXNwbGF5UVJDb2RlIiwic2V0RGlzcGxheVFSQ29kZSIsImRpc3BsYXlQcm9wcyIsInJlZiQzIiwic2luZ2xlTGlua0hyZWYiLCJzZXRTaW5nbGVMaW5rSHJlZiIsInJlZiQ0IiwiaGFzU2luZ2xlTGluayIsInNldEhhc1NpbmdsZUxpbmsiLCJyZWYkNSIsInNldExpbmtzIiwicmVmJDYiLCJzZXRFcnJvck1lc3NhZ2UiLCJnZXRMaW5rc0lmTmVlZGVkIiwiX3RlbXAiLCJib2R5IiwicmVjb3ZlciIsIl9jYXRjaCIsInVybCIsInJlZ2lzdHJ5VXJsIiwiZmV0Y2giLCJqc29uIiwiX2xpbmtzIiwibm9fc3VwcG9ydGVkX3dhbGxldHMiLCJzb21ldGhpbmdfd2VudF93cm9uZyIsImNvbnNvbGUiLCJlcnJvciIsImluaXRMaW5rcyIsInJpZ2h0U2VsZWN0ZWQiLCJjb25uZWN0X3dpdGgiLCJxcmNvZGUiLCJkZXNrdG9wIiwibGFuZ3VhZ2VzIiwiZGUiLCJlbiIsImVzIiwiZnIiLCJrbyIsInB0IiwiemgiLCJmYSIsInRyaWdnZXJDbG9zZUFuaW1hdGlvbiIsImRvYyIsIm1vZGFsIiwiZ2V0RWxlbWVudEJ5SWQiLCJ3cmFwcGVyIiwicmVtb3ZlQ2hpbGQiLCJnZXRXcmFwcGVkQ2FsbGJhY2siLCJjYiIsIm9wZW4kMSIsInByZXYiLCJoZWFkIiwic2V0QXR0cmlidXRlIiwiaW5uZXJUZXh0IiwiYXBwZW5kQ2hpbGQiLCJpbmplY3RTdHlsZVNoZWV0IiwibGFuZyIsInJlbmRlcldyYXBwZXIiLCJyZW5kZXIiLCJsYW5ndWFnZSIsIm9wZW4iLCJsb2ciLCJjbG9zZSIsIm1zZyIsImluaGVyaXRzIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiY29uc3RydWN0b3IiLCJCTiIsIm51bWJlciIsImJhc2UiLCJlbmRpYW4iLCJpc0JOIiwibmVnYXRpdmUiLCJ3b3JkcyIsInJlZCIsIl9pbml0Iiwid29yZFNpemUiLCJwYXJzZUhleCIsInN0YXJ0IiwiZW5kIiwiciIsIm1pbiIsImMiLCJjaGFyQ29kZUF0IiwicGFyc2VCYXNlIiwibXVsIiwibWF4IiwicmlnaHQiLCJjbXAiLCJfaW5pdE51bWJlciIsIl9pbml0QXJyYXkiLCJfcGFyc2VIZXgiLCJfcGFyc2VCYXNlIiwic3RyaXAiLCJ0b0FycmF5IiwidyIsImxpbWJMZW4iLCJsaW1iUG93IiwidG90YWwiLCJ3b3JkIiwiaW11bG4iLCJfaWFkZG4iLCJwb3ciLCJkZXN0IiwiY2xvbmUiLCJfZXhwYW5kIiwic2l6ZSIsIl9ub3JtU2lnbiIsImluc3BlY3QiLCJ6ZXJvcyIsImdyb3VwU2l6ZXMiLCJncm91cEJhc2VzIiwic21hbGxNdWxUbyIsInNlbGYiLCJvdXQiLCJhIiwiYiIsImxvIiwiY2FycnkiLCJuY2FycnkiLCJyd29yZCIsIm1heEoiLCJncm91cFNpemUiLCJncm91cEJhc2UiLCJpc1plcm8iLCJtb2RuIiwiaWRpdm4iLCJ0b051bWJlciIsInJldCIsInRvSlNPTiIsInRvQnVmZmVyIiwidG9BcnJheUxpa2UiLCJBcnJheVR5cGUiLCJyZXFMZW5ndGgiLCJsaXR0bGVFbmRpYW4iLCJyZXMiLCJxIiwiYW5kbG4iLCJpdXNocm4iLCJjbHozMiIsIl9jb3VudEJpdHMiLCJ0IiwiX3plcm9CaXRzIiwiYml0TGVuZ3RoIiwiaGkiLCJ6ZXJvQml0cyIsInRvVHdvcyIsIndpZHRoIiwiYWJzIiwiaW5vdG4iLCJpYWRkbiIsImZyb21Ud29zIiwidGVzdG4iLCJub3RuIiwiaW5lZyIsImlzTmVnIiwibmVnIiwiaXVvciIsImlvciIsIm9yIiwidW9yIiwiaXVhbmQiLCJpYW5kIiwiYW5kIiwidWFuZCIsIml1eG9yIiwiaXhvciIsInhvciIsInV4b3IiLCJieXRlc05lZWRlZCIsImJpdHNMZWZ0Iiwic2V0biIsImJpdCIsIndiaXQiLCJpYWRkIiwiaXN1YiIsImFkZCIsInN1YiIsImNvbWIxME11bFRvIiwibWlkIiwiYTAiLCJhbDAiLCJhaDAiLCJhbDEiLCJhaDEiLCJhbDIiLCJhaDIiLCJhbDMiLCJhaDMiLCJhbDQiLCJhaDQiLCJhbDUiLCJhaDUiLCJhNiIsImFsNiIsImFoNiIsImE3IiwiYWw3IiwiYWg3IiwiYTgiLCJhbDgiLCJhaDgiLCJhOSIsImFsOSIsImFoOSIsImIwIiwiYmwwIiwiYmgwIiwiYjEiLCJibDEiLCJiaDEiLCJiMiIsImJsMiIsImJoMiIsImIzIiwiYmwzIiwiYmgzIiwiYjQiLCJibDQiLCJiaDQiLCJiNSIsImJsNSIsImJoNSIsImI2IiwiYmw2IiwiYmg2IiwiYjciLCJibDciLCJiaDciLCJiOCIsImJsOCIsImJoOCIsImI5IiwiYmw5IiwiYmg5IiwidzAiLCJpbXVsIiwidzEiLCJ3MiIsInczIiwidzQiLCJ3NSIsInc2IiwidzciLCJ3OCIsInc5IiwidzEwIiwidzExIiwidzEyIiwidzEzIiwidzE0IiwidzE1IiwidzE2IiwidzE3IiwidzE4IiwianVtYm9NdWxUbyIsIkZGVE0iLCJtdWxwIiwieSIsIm11bFRvIiwiaG5jYXJyeSIsImJpZ011bFRvIiwibWFrZVJCVCIsIk4iLCJyZXZCaW4iLCJyYiIsInBlcm11dGUiLCJyYnQiLCJyd3MiLCJpd3MiLCJydHdzIiwiaXR3cyIsInRyYW5zZm9ybSIsInMiLCJydHdkZiIsImNvcyIsIlBJIiwiaXR3ZGYiLCJzaW4iLCJydHdkZl8iLCJpdHdkZl8iLCJyZSIsImllIiwicm8iLCJpbyIsInJ4IiwiZ3Vlc3NMZW4xM2IiLCJuIiwib2RkIiwiY29uanVnYXRlIiwibm9ybWFsaXplMTNiIiwid3MiLCJyb3VuZCIsImNvbnZlcnQxM2IiLCJzdHViIiwicGgiLCJyd3N0IiwiaXdzdCIsIm5yd3MiLCJucndzdCIsIm5pd3N0Iiwicm13cyIsIm11bGYiLCJtdWxuIiwic3FyIiwiaXNxciIsInRvQml0QXJyYXkiLCJpdXNobG4iLCJiaXRzIiwiY2FycnlNYXNrIiwibmV3Q2FycnkiLCJpc2hsbiIsImhpbnQiLCJleHRlbmRlZCIsImgiLCJtYXNrIiwibWFza2VkV29yZHMiLCJpc2hybiIsInNobG4iLCJ1c2hsbiIsInNocm4iLCJ1c2hybiIsImltYXNrbiIsIm1hc2tuIiwiaXN1Ym4iLCJhZGRuIiwic3VibiIsImlhYnMiLCJfaXNobG5zdWJtdWwiLCJzaGlmdCIsIl93b3JkRGl2IiwibW9kZSIsImJoaSIsInFqIiwiZGl2IiwiZGl2bW9kIiwicG9zaXRpdmUiLCJkaXZuIiwidW1vZCIsImRpdlJvdW5kIiwiZG0iLCJoYWxmIiwicjIiLCJhY2MiLCJlZ2NkIiwiQSIsIkIiLCJDIiwiRCIsImlzRXZlbiIsInlwIiwieHAiLCJpbSIsImlzT2RkIiwiam0iLCJnY2QiLCJfaW52bXAiLCJ4MSIsIngyIiwiZGVsdGEiLCJjbXBuIiwiaW52bSIsImJpbmNuIiwidWNtcCIsImd0biIsImd0IiwiZ3RlbiIsImd0ZSIsImx0biIsImx0IiwibHRlbiIsImx0ZSIsImVxbiIsImVxIiwiUmVkIiwidG9SZWQiLCJjdHgiLCJjb252ZXJ0VG8iLCJfZm9yY2VSZWQiLCJmcm9tUmVkIiwiY29udmVydEZyb20iLCJmb3JjZVJlZCIsInJlZEFkZCIsInJlZElBZGQiLCJyZWRTdWIiLCJyZWRJU3ViIiwicmVkU2hsIiwic2hsIiwicmVkTXVsIiwiX3ZlcmlmeTIiLCJyZWRJTXVsIiwicmVkU3FyIiwiX3ZlcmlmeTEiLCJyZWRJU3FyIiwicmVkU3FydCIsInNxcnQiLCJyZWRJbnZtIiwicmVkTmVnIiwicmVkUG93IiwicHJpbWVzIiwiazI1NiIsInAyMjQiLCJwMTkyIiwicDI1NTE5IiwiTVByaW1lIiwidG1wIiwiX3RtcCIsIksyNTYiLCJQMjI0IiwiUDE5MiIsIlAyNTUxOSIsInByaW1lIiwiX3ByaW1lIiwiTW9udCIsImltb2QiLCJyaW52IiwibWludiIsImlyZWR1Y2UiLCJybGVuIiwiaW11bEsiLCJvdXRwdXQiLCJvdXRMZW4iLCJuZXh0IiwibW9kMyIsIm9uZSIsIm5PbmUiLCJscG93IiwieiIsImludiIsInduZCIsImN1cnJlbnQiLCJjdXJyZW50TGVuIiwibW9udCIsInUiLCJyZXNlcnZlZEV2ZW50cyIsInNpZ25pbmdNZXRob2RzIiwiaW5mdXJhTmV0d29ya3MiLCJjb252ZXJ0QXJyYXlCdWZmZXJUb0J1ZmZlciIsImFyckJ1ZiIsImNvbnZlcnROdW1iZXJUb0hleCIsIm5vUHJlZml4IiwicGF5bG9hZElkIiwiRGF0ZSIsIm5vdyIsImZsb29yIiwicmFuZG9tIiwidXVpZCIsImdldFJwY1VybCIsImNoYWluSWQiLCJycGMiLCJycGNVcmwiLCJpbmZ1cmFVcmwiLCJpbmZ1cmFJZCIsIm5ldHdvcmsiLCJnZXRJbmZ1cmFScGNVcmwiLCJjdXN0b20iLCJpc0pzb25ScGNSZXNwb25zZVN1Y2Nlc3MiLCJvYmplY3QiLCJpc0pzb25ScGNSZXNwb25zZUVycm9yIiwiaXNJbnRlcm5hbEV2ZW50IiwidG9DaGVja3N1bUFkZHJlc3MiLCJhZGRyZXNzIiwiaGFzaCIsImtlY2Nha18yNTYiLCJjaGVja3N1bSIsInRvVXBwZXJDYXNlIiwicGFyc2VQZXJzb25hbFNpZ24iLCJwYXJhbXMiLCJhcnJheSIsInBhcnNlVHJhbnNhY3Rpb25EYXRhIiwidHhEYXRhIiwicGFyc2VIZXhWYWx1ZXMiLCJpc0VtcHR5U3RyaW5nIiwidHhEYXRhUlBDIiwidG8iLCJnYXNQcmljZSIsImdhcyIsImdhc0xpbWl0Iiwibm9uY2UiLCJwcnVuYWJsZSIsImtleXMiLCJhcHBlbmRUb1F1ZXJ5U3RyaW5nIiwicXVlcnlTdHJpbmciLCJuZXdRdWVyeVBhcmFtcyIsInF1ZXJ5UGFyYW1zIiwicGFyc2VRdWVyeVN0cmluZyIsImZvcm1hdFF1ZXJ5U3RyaW5nIiwiX2V2ZW50RW1pdHRlcnMiLCJhZGRFdmVudExpc3RlbmVyIiwidHJpZ2dlciIsImNhbGxiYWNrIiwiZXZlbnRFbWl0dGVycyIsImV2ZW50RW1pdHRlciIsIldTIiwiV2ViU29ja2V0Iiwib3B0cyIsIl9xdWV1ZSIsIl9zdWJzY3JpcHRpb25zIiwiX3Byb3RvY29sIiwicHJvdG9jb2wiLCJfdmVyc2lvbiIsInZlcnNpb24iLCJfdXJsIiwiX25ldE1vbml0b3IiLCJfc29ja2V0IiwiX25leHRTb2NrZXQiLCJzdWJzY3JpcHRpb25zIiwibmV0TW9uaXRvciIsIl9zb2NrZXRDcmVhdGUiLCJyZWFkeVN0YXRlIiwiY29ubmVjdGluZyIsImNvbm5lY3RlZCIsImNsb3NpbmciLCJjbG9zZWQiLCJfc29ja2V0Q2xvc2UiLCJzZW5kIiwidG9waWMiLCJzaWxlbnQiLCJfc29ja2V0U2VuZCIsInBheWxvYWQiLCJzdWJzY3JpYmUiLCJfYiIsInNwbGl0VXJsIiwiaG9zdCIsInBhdGhFbmQiLCJpbmRleE9mIiwic3Vic3RyIiwiZ2V0UXVlcnlTdHJpbmciLCJnZXRXZWJTb2NrZXRVcmwiLCJvbm1lc3NhZ2UiLCJfc29ja2V0UmVjZWl2ZSIsIm9ub3BlbiIsIl9zb2NrZXRPcGVuIiwib25lcnJvciIsIl9zb2NrZXRFcnJvciIsIm9uY2xvc2UiLCJfcXVldWVTdWJzY3JpcHRpb25zIiwiX3B1c2hRdWV1ZSIsInNvY2tldE1lc3NhZ2UiLCJfc2V0VG9RdWV1ZSIsImFzeW5jIiwiRVJST1JfU0VTU0lPTl9DT05ORUNURUQiLCJFUlJPUl9TRVNTSU9OX0RJU0NPTk5FQ1RFRCIsIkVSUk9SX0lOVkFMSURfUkVTUE9OU0UiLCJFUlJPUl9RUkNPREVfTU9EQUxfVVNFUl9DTE9TRUQiLCJ1bnN1YnNjcmliZSIsIm1ldGhvZCIsImlzUmVzZXJ2ZWRFdmVudCIsInN0b3JhZ2VJZCIsImdldFNlc3Npb24iLCJzZXNzaW9uIiwiYnJpZGdlIiwic2V0U2Vzc2lvbiIsInJlbW92ZVNlc3Npb24iLCJicmlkZ2VzIiwiY2hhciIsInNlbGVjdFJhbmRvbUJyaWRnZVVybCIsIl9icmlkZ2UiLCJfa2V5IiwiX2NsaWVudElkIiwiX2NsaWVudE1ldGEiLCJfcGVlcklkIiwiX3BlZXJNZXRhIiwiX2hhbmRzaGFrZUlkIiwiX2hhbmRzaGFrZVRvcGljIiwiX2Nvbm5lY3RlZCIsIl9hY2NvdW50cyIsIl9jaGFpbklkIiwiX25ldHdvcmtJZCIsIl9ycGNVcmwiLCJfZXZlbnRNYW5hZ2VyIiwiY29ubmVjdG9yT3B0cyIsImNsaWVudE1ldGEiLCJfY3J5cHRvTGliIiwiY3J5cHRvTGliIiwiX3Nlc3Npb25TdG9yYWdlIiwic2Vzc2lvblN0b3JhZ2UiLCJfcXJjb2RlTW9kYWwiLCJxcmNvZGVNb2RhbCIsIl9xcmNvZGVNb2RhbE9wdGlvbnMiLCJfc2lnbmluZ01ldGhvZHMiLCJob3N0bmFtZSIsImV4dHJhY3RIb3N0bmFtZSIsImV4dHJhY3RSb290RG9tYWluIiwic2hvdWxkU2VsZWN0UmFuZG9tbHkiLCJfZ2V0U3RvcmFnZVNlc3Npb24iLCJoYW5kc2hha2VJZCIsIl9zdWJzY3JpYmVUb1Nlc3Npb25SZXNwb25zZSIsIl90cmFuc3BvcnQiLCJ0cmFuc3BvcnQiLCJjbGllbnRJZCIsIl9zdWJzY3JpYmVUb0ludGVybmFsRXZlbnRzIiwiX2luaXRUcmFuc3BvcnQiLCJfc3Vic2NyaWJlVG9TZXNzaW9uUmVxdWVzdCIsInB1c2hTZXJ2ZXJPcHRzIiwiX3JlZ2lzdGVyUHVzaFNlcnZlciIsImJ1ZmZlciIsInBlZXJJZCIsInBlZXJNZXRhIiwiaGFuZHNoYWtlVG9waWMiLCJfZm9ybWF0VXJpIiwiX3BhcnNlVXJpIiwibmV0d29ya0lkIiwiYWNjb3VudHMiLCJwZW5kaW5nIiwiaW5zdGFudFJlcXVlc3QiLCJfZ2VuZXJhdGVLZXkiLCJyZXF1ZXN0IiwiX2Zvcm1hdFJlcXVlc3QiLCJlbmRJbnN0YW50UmVxdWVzdCIsImtpbGxTZXNzaW9uIiwiX3NlbmRDYWxsUmVxdWVzdCIsImNyZWF0ZVNlc3Npb24iLCJfc2VuZFNlc3Npb25SZXF1ZXN0IiwiYXBwcm92ZVNlc3Npb24iLCJzZXNzaW9uU3RhdHVzIiwic2Vzc2lvblBhcmFtcyIsImFwcHJvdmVkIiwicmVzcG9uc2UiLCJqc29ucnBjIiwiX3NlbmRSZXNwb25zZSIsIl9zZXRTdG9yYWdlU2Vzc2lvbiIsInJlamVjdFNlc3Npb24iLCJzZXNzaW9uRXJyb3IiLCJfZm9ybWF0UmVzcG9uc2UiLCJfcmVtb3ZlU3RvcmFnZVNlc3Npb24iLCJ1cGRhdGVTZXNzaW9uIiwiX21hbmFnZVN0b3JhZ2VTZXNzaW9uIiwiX3NlbmRSZXF1ZXN0IiwiX2hhbmRsZVNlc3Npb25EaXNjb25uZWN0IiwidHgiLCJwYXJzZWRUeCIsImNoYWluUGFyYW1zIiwidW5zYWZlU2VuZCIsIm9wdGlvbnMiLCJfc3Vic2NyaWJlVG9SZXNwb25zZSIsImZvcm1hdHRlZFJlcXVlc3QiLCJhcHByb3ZlUmVxdWVzdCIsImZvcm1hdHRlZFJlc3BvbnNlIiwicmVqZWN0UmVxdWVzdCIsInRyYW5zcG9ydENsb3NlIiwiY2FsbFJlcXVlc3QiLCJlbmNyeXB0aW9uUGF5bG9hZCIsIl9lbmNyeXB0IiwiZm9yY2VQdXNoTm90aWZpY2F0aW9uIiwiaXNTaWxlbnRQYXlsb2FkIiwiZXJyb3JNc2ciLCJfc3Vic2NyaWJlVG9DYWxsUmVzcG9uc2UiLCJiYXNlUmVzcG9uc2UiLCJjb2RlIiwiZm9ybWF0UnBjRXJyb3IiLCJfaGFuZGxlU2Vzc2lvblJlc3BvbnNlIiwiX2RlY3J5cHQiLCJtb2JpbGVMaW5rVXJsIiwibG9jYXRpb24iLCJpbnRlcm5hbFBheWxvYWQiLCJfaGFuZGxlSW5jb21pbmdNZXNzYWdlcyIsInBhdGhTdGFydCIsInJlcXVpcmVkUGFyYW1zIiwicGF0aCIsInBhcnNlUmVxdWlyZWRQYXJhbXMiLCJwYXJzZVF1ZXJ5UGFyYW1zIiwicGFyc2VXYWxsZXRDb25uZWN0VXJpIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZ2VuZXJhdGVLZXkiLCJlbmNyeXB0IiwiZGVjcnlwdCIsInRva2VuIiwicHVzaFN1YnNjcmlwdGlvbiIsInBlZXJOYW1lIiwiaGVhZGVycyIsIkFjY2VwdCIsInN1Y2Nlc3MiLCJicm93c2VySW1wb3J0S2V5IiwiaW1wb3J0S2V5IiwiZ2V0QWxnbyIsImdldE9wcyIsImFlc0NiY0VuY3J5cHQiLCJpdiIsImNyeXB0b0tleSIsImJyb3dzZXJBZXNFbmNyeXB0IiwiYWVzQ2JjRGVjcnlwdCIsImJyb3dzZXJBZXNEZWNyeXB0IiwiaG1hY1NoYTI1NlNpZ24iLCJzaWduYXR1cmUiLCJzaWduIiwiZ2V0UmFuZG9tVmFsdWVzIiwidmVyaWZ5SG1hYyIsImNpcGhlclRleHQiLCJobWFjIiwiaG1hY0hleCIsInVuc2lnbmVkIiwiY2htYWMiLCJjaG1hY0hleCIsInByb3ZpZGVkSXYiLCJpdkFycmF5QnVmZmVyIiwiaXZIZXgiLCJjb250ZW50U3RyaW5nIiwiY29udGVudCIsImNpcGhlclRleHRIZXgiLCJzdXBlciIsIlhIUiIsIlhNTEh0dHBSZXF1ZXN0IiwiSFRUUENvbm5lY3Rpb24iLCJmb3JtYXRFcnJvciIsImludGVybmFsIiwieGhyIiwicmVzcG9uZGVkIiwiZXJyIiwiYWJvcnQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwidGltZW91dCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVGV4dCIsIlByb3ZpZGVyRW5naW5lIiwiQ2FjaGVTdWJwcm92aWRlciIsIkZpeHR1cmVTdWJwcm92aWRlciIsIkZpbHRlclN1YnByb3ZpZGVyIiwiSG9va2VkV2FsbGV0U3VicHJvdmlkZXIiLCJOb25jZVN1YnByb3ZpZGVyIiwiU3Vic2NyaXB0aW9uc1N1YnByb3ZpZGVyIiwicG9sbGluZ0ludGVydmFsIiwiaHR0cCIsImlzQ29ubmVjdGluZyIsImNvbm5lY3RDYWxsYmFja3MiLCJlbmFibGUiLCJ3YyIsImdldFdhbGxldENvbm5lY3RvciIsInN1YnNjcmliZVdhbGxldENvbm5lY3RvciIsInNlbmRBc3luY1Byb21pc2UiLCJzZW5kQXN5bmMiLCJvbkNvbm5lY3QiLCJ0cmlnZ2VyQ29ubmVjdCIsImNvbm5lY3RvciIsImluaXRpYWxpemUiLCJpc1dhbGxldENvbm5lY3QiLCJ3YWxsZXRNZXRhIiwiZGlzYWJsZVNlc3Npb25DcmVhdGlvbiIsIm9uRGlzY29ubmVjdCIsImhhbmRsZU90aGVyUmVxdWVzdHMiLCJmb3JtYXRSZXNwb25zZSIsImhhbmRsZVJlYWRSZXF1ZXN0cyIsInNlbmRDdXN0b21SZXF1ZXN0IiwidXBkYXRlU3RhdGUiLCJjYXRjaCIsInN0b3AiLCJ1cGRhdGVScGNVcmwiLCJ1cGRhdGVIdHRwQ29ubmVjdGlvbiIsImFkZFByb3ZpZGVyIiwiZXRoX2hhc2hyYXRlIiwiZXRoX21pbmluZyIsImV0aF9zeW5jaW5nIiwibmV0X2xpc3RlbmluZyIsIndlYjNfY2xpZW50VmVyc2lvbiIsImNvbmZpZ1dhbGxldCIsImhhbmRsZVJlcXVlc3QiLCJzZXRFbmdpbmUiLCJnZXRBY2NvdW50cyIsInByb2Nlc3NNZXNzYWdlIiwibXNnUGFyYW1zIiwic2lnbk1lc3NhZ2UiLCJwcm9jZXNzUGVyc29uYWxNZXNzYWdlIiwic2lnblBlcnNvbmFsTWVzc2FnZSIsInByb2Nlc3NTaWduVHJhbnNhY3Rpb24iLCJ0eFBhcmFtcyIsInNpZ25UcmFuc2FjdGlvbiIsInByb2Nlc3NUcmFuc2FjdGlvbiIsInNlbmRUcmFuc2FjdGlvbiIsInByb2Nlc3NUeXBlZE1lc3NhZ2UiLCJzaWduVHlwZWREYXRhIiwid2luZG93X2dldHRlcnNfMSIsImxvYyIsImdldFdpbmRvd01ldGFkYXRhT2ZBbnkiLCJtZXRhVGFncyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGFnIiwiYXR0cmlidXRlcyIsImdldEF0dHJpYnV0ZSIsImF0dHIiLCJ0aXRsZSIsImdldE5hbWUiLCJkZXNjcmlwdGlvbiIsIm9yaWdpbiIsImljb25zIiwiYWJzb2x1dGVIcmVmIiwicGF0aG5hbWUiLCJwb3AiLCJhYnNvbHV0ZVVybCIsImdldEljb25zIiwicmVhZCIsIm9mZnNldCIsImNvdW50ZXIiLCJSYW5nZUVycm9yIiwiZW5jb2RlIiwib2xkT2Zmc2V0IiwiSU5UIiwiZGVjb2RlIiwiZW5jb2RpbmdMZW5ndGgiLCJOMSIsIk4yIiwiTjMiLCJONCIsIk41IiwiTjYiLCJONyIsIk44IiwiTjkiLCJ3YXJuaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==
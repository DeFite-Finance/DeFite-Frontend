"use strict";(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[3278],{29847:function(e,r,t){var n=t(23085).Buffer;var f=t(21964),i=t(16523),o=f.BN,a=new o("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),u=function(){function e(r){!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),r=r||{};var t=[{name:"nonce",length:32,allowLess:!0,default:new n([])},{name:"gasPrice",length:32,allowLess:!0,default:new n([])},{name:"gasLimit",alias:"gas",length:32,allowLess:!0,default:new n([])},{name:"to",allowZero:!0,length:20,default:new n([])},{name:"value",length:32,allowLess:!0,default:new n([])},{name:"data",alias:"input",allowZero:!0,default:new n([])},{name:"v",allowZero:!0,default:new n([28])},{name:"r",length:32,allowZero:!0,allowLess:!0,default:new n([])},{name:"s",length:32,allowZero:!0,allowLess:!0,default:new n([])}];f.defineProperties(this,t,r),Object.defineProperty(this,"from",{enumerable:!0,configurable:!0,get:this.getSenderAddress.bind(this)});var i=f.bufferToInt(this.v),o=Math.floor((i-35)/2);o<0&&(o=0),this._chainId=o||r.chainId||0,this._homestead=!0}return e.prototype.toCreationAddress=function(){return""===this.to.toString("hex")},e.prototype.hash=function(e){void 0===e&&(e=!0);var r=void 0;if(e)r=this.raw;else if(this._chainId>0){var t=this.raw.slice();this.v=this._chainId,this.r=0,this.s=0,r=this.raw,this.raw=t}else r=this.raw.slice(0,6);return f.rlphash(r)},e.prototype.getChainId=function(){return this._chainId},e.prototype.getSenderAddress=function(){if(this._from)return this._from;var e=this.getSenderPublicKey();return this._from=f.publicToAddress(e),this._from},e.prototype.getSenderPublicKey=function(){if(!(this._senderPubKey&&this._senderPubKey.length||this.verifySignature()))throw new Error("Invalid Signature");return this._senderPubKey},e.prototype.verifySignature=function(){var e=this.hash(!1);if(this._homestead&&1===new o(this.s).cmp(a))return!1;try{var r=f.bufferToInt(this.v);this._chainId>0&&(r-=2*this._chainId+8),this._senderPubKey=f.ecrecover(e,r,this.r,this.s)}catch(e){return!1}return!!this._senderPubKey},e.prototype.sign=function(e){var r=this.hash(!1),t=f.ecsign(r,e);this._chainId>0&&(t.v+=2*this._chainId+8),Object.assign(this,t)},e.prototype.getDataFee=function(){for(var e=this.raw[5],r=new o(0),t=0;t<e.length;t++)0===e[t]?r.iaddn(i.txDataZeroGas.v):r.iaddn(i.txDataNonZeroGas.v);return r},e.prototype.getBaseFee=function(){var e=this.getDataFee().iaddn(i.txGas.v);return this._homestead&&this.toCreationAddress()&&e.iaddn(i.txCreation.v),e},e.prototype.getUpfrontCost=function(){return new o(this.gasLimit).imul(new o(this.gasPrice)).iadd(new o(this.value))},e.prototype.validate=function(e){var r=[];return this.verifySignature()||r.push("Invalid Signature"),this.getBaseFee().cmp(new o(this.gasLimit))>0&&r.push(["gas limit is too low. Need at least "+this.getBaseFee()]),void 0===e||!1===e?0===r.length:r.join(" ")},e}();e.exports=u},21964:function(e,r,t){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=t(82192),i=f.keccak224,o=f.keccak384,a=f.keccak256,u=f.keccak512,s=t(24565),c=t(69282),l=t(51675),h=t(13550),d=t(23482),p=t(89509).Buffer;Object.assign(r,t(80884)),r.MAX_INTEGER=new h("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),r.TWO_POW256=new h("10000000000000000000000000000000000000000000000000000000000000000",16),r.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",r.SHA3_NULL_S=r.KECCAK256_NULL_S,r.KECCAK256_NULL=p.from(r.KECCAK256_NULL_S,"hex"),r.SHA3_NULL=r.KECCAK256_NULL,r.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",r.SHA3_RLP_ARRAY_S=r.KECCAK256_RLP_ARRAY_S,r.KECCAK256_RLP_ARRAY=p.from(r.KECCAK256_RLP_ARRAY_S,"hex"),r.SHA3_RLP_ARRAY=r.KECCAK256_RLP_ARRAY,r.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",r.SHA3_RLP_S=r.KECCAK256_RLP_S,r.KECCAK256_RLP=p.from(r.KECCAK256_RLP_S,"hex"),r.SHA3_RLP=r.KECCAK256_RLP,r.BN=h,r.rlp=l,r.secp256k1=s,r.zeros=function(e){return p.allocUnsafe(e).fill(0)},r.zeroAddress=function(){var e=r.zeros(20);return r.bufferToHex(e)},r.setLengthLeft=r.setLength=function(e,t,n){var f=r.zeros(t);return e=r.toBuffer(e),n?e.length<t?(e.copy(f),f):e.slice(0,t):e.length<t?(e.copy(f,t-e.length),f):e.slice(-t)},r.setLengthRight=function(e,t){return r.setLength(e,t,!0)},r.unpad=r.stripZeros=function(e){for(var t=(e=r.stripHexPrefix(e))[0];e.length>0&&"0"===t.toString();)t=(e=e.slice(1))[0];return e},r.toBuffer=function(e){if(!p.isBuffer(e))if(Array.isArray(e))e=p.from(e);else if("string"==typeof e)e=r.isHexString(e)?p.from(r.padToEven(r.stripHexPrefix(e)),"hex"):p.from(e);else if("number"==typeof e)e=r.intToBuffer(e);else if(null==e)e=p.allocUnsafe(0);else if(h.isBN(e))e=e.toArrayLike(p);else{if(!e.toArray)throw new Error("invalid type");e=p.from(e.toArray())}return e},r.bufferToInt=function(e){return new h(r.toBuffer(e)).toNumber()},r.bufferToHex=function(e){return"0x"+(e=r.toBuffer(e)).toString("hex")},r.fromSigned=function(e){return new h(e).fromTwos(256)},r.toUnsigned=function(e){return p.from(e.toTwos(256).toArray())},r.keccak=function(e,t){switch(e=r.toBuffer(e),t||(t=256),t){case 224:return i(e);case 256:return a(e);case 384:return o(e);case 512:return u(e);default:throw new Error("Invald algorithm: keccak"+t)}},r.keccak256=function(e){return r.keccak(e)},r.sha3=r.keccak,r.sha256=function(e){return e=r.toBuffer(e),d("sha256").update(e).digest()},r.ripemd160=function(e,t){e=r.toBuffer(e);var n=d("rmd160").update(e).digest();return!0===t?r.setLength(n,32):n},r.rlphash=function(e){return r.keccak(l.encode(e))},r.isValidPrivate=function(e){return s.privateKeyVerify(e)},r.isValidPublic=function(e,r){return 64===e.length?s.publicKeyVerify(p.concat([p.from([4]),e])):!!r&&s.publicKeyVerify(e)},r.pubToAddress=r.publicToAddress=function(e,t){return e=r.toBuffer(e),t&&64!==e.length&&(e=s.publicKeyConvert(e,!1).slice(1)),c(64===e.length),r.keccak(e).slice(-20)};var g=r.privateToPublic=function(e){return e=r.toBuffer(e),s.publicKeyCreate(e,!1).slice(1)};r.importPublic=function(e){return 64!==(e=r.toBuffer(e)).length&&(e=s.publicKeyConvert(e,!1).slice(1)),e},r.ecsign=function(e,r){var t=s.sign(e,r),n={};return n.r=t.signature.slice(0,32),n.s=t.signature.slice(32,64),n.v=t.recovery+27,n},r.hashPersonalMessage=function(e){var t=r.toBuffer("Ethereum Signed Message:\n"+e.length.toString());return r.keccak(p.concat([t,e]))},r.ecrecover=function(e,t,n,f){var i=p.concat([r.setLength(n,32),r.setLength(f,32)],64),o=t-27;if(0!==o&&1!==o)throw new Error("Invalid signature v value");var a=s.recover(e,i,o);return s.publicKeyConvert(a,!1).slice(1)},r.toRpcSig=function(e,t,n){if(27!==e&&28!==e)throw new Error("Invalid recovery id");return r.bufferToHex(p.concat([r.setLengthLeft(t,32),r.setLengthLeft(n,32),r.toBuffer(e-27)]))},r.fromRpcSig=function(e){if(65!==(e=r.toBuffer(e)).length)throw new Error("Invalid signature length");var t=e[64];return t<27&&(t+=27),{v:t,r:e.slice(0,32),s:e.slice(32,64)}},r.privateToAddress=function(e){return r.publicToAddress(g(e))},r.isValidAddress=function(e){return/^0x[0-9a-fA-F]{40}$/.test(e)},r.isZeroAddress=function(e){return r.zeroAddress()===r.addHexPrefix(e)},r.toChecksumAddress=function(e){e=r.stripHexPrefix(e).toLowerCase();for(var t=r.keccak(e).toString("hex"),n="0x",f=0;f<e.length;f++)parseInt(t[f],16)>=8?n+=e[f].toUpperCase():n+=e[f];return n},r.isValidChecksumAddress=function(e){return r.isValidAddress(e)&&r.toChecksumAddress(e)===e},r.generateAddress=function(e,t){return e=r.toBuffer(e),t=(t=new h(t)).isZero()?null:p.from(t.toArray()),r.rlphash([e,t]).slice(-20)},r.isPrecompiled=function(e){var t=r.unpad(e);return 1===t.length&&t[0]>=1&&t[0]<=8},r.addHexPrefix=function(e){return"string"!=typeof e||r.isHexPrefixed(e)?e:"0x"+e},r.isValidSignature=function(e,r,t,n){var f=new h("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),i=new h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);return 32===r.length&&32===t.length&&((27===e||28===e)&&(r=new h(r),t=new h(t),!(r.isZero()||r.gt(i)||t.isZero()||t.gt(i))&&(!1!==n||1!==new h(t).cmp(f))))},r.baToJSON=function(e){if(p.isBuffer(e))return"0x"+e.toString("hex");if(e instanceof Array){for(var t=[],n=0;n<e.length;n++)t.push(r.baToJSON(e[n]));return t}},r.defineProperties=function(e,t,f){if(e.raw=[],e._fields=[],e.toJSON=function(t){if(t){var n={};return e._fields.forEach((function(r){n[r]="0x"+e[r].toString("hex")})),n}return r.baToJSON(this.raw)},e.serialize=function(){return l.encode(e.raw)},t.forEach((function(t,n){function f(){return e.raw[n]}function i(f){"00"!==(f=r.toBuffer(f)).toString("hex")||t.allowZero||(f=p.allocUnsafe(0)),t.allowLess&&t.length?(f=r.stripZeros(f),c(t.length>=f.length,"The field "+t.name+" must not have more "+t.length+" bytes")):t.allowZero&&0===f.length||!t.length||c(t.length===f.length,"The field "+t.name+" must have byte length of "+t.length),e.raw[n]=f}e._fields.push(t.name),Object.defineProperty(e,t.name,{enumerable:!0,configurable:!0,get:f,set:i}),t.default&&(e[t.name]=t.default),t.alias&&Object.defineProperty(e,t.alias,{enumerable:!1,configurable:!0,set:i,get:f})})),f)if("string"==typeof f&&(f=p.from(r.stripHexPrefix(f),"hex")),p.isBuffer(f)&&(f=l.decode(f)),Array.isArray(f)){if(f.length>e._fields.length)throw new Error("wrong number of fields in data");f.forEach((function(t,n){e[e._fields[n]]=r.toBuffer(t)}))}else{if("object"!==(void 0===f?"undefined":n(f)))throw new Error("invalid data");var i=Object.keys(f);t.forEach((function(r){-1!==i.indexOf(r.name)&&(e[r.name]=f[r.name]),-1!==i.indexOf(r.alias)&&(e[r.alias]=f[r.alias])}))}}},24565:function(e,r,t){var n=t(23085).Buffer,f=t(95053),i=t(67587),o=t(85484),a=function(e){return 32===e.length&&f.privateKeyVerify(Uint8Array.from(e))};e.exports={privateKeyVerify:a,privateKeyExport:function(e,r){if(32!==e.length)throw new RangeError("private key length is invalid");var t=i.privateKeyExport(e,r);return o.privateKeyExport(e,t,r)},privateKeyImport:function(e){if(null!==(e=o.privateKeyImport(e))&&32===e.length&&a(e))return e;throw new Error("couldn't import from DER format")},privateKeyNegate:function(e){return n.from(f.privateKeyNegate(Uint8Array.from(e)))},privateKeyModInverse:function(e){if(32!==e.length)throw new Error("private key length is invalid");return n.from(i.privateKeyModInverse(Uint8Array.from(e)))},privateKeyTweakAdd:function(e,r){return n.from(f.privateKeyTweakAdd(Uint8Array.from(e),r))},privateKeyTweakMul:function(e,r){return n.from(f.privateKeyTweakMul(Uint8Array.from(e),Uint8Array.from(r)))},publicKeyCreate:function(e,r){return n.from(f.publicKeyCreate(Uint8Array.from(e),r))},publicKeyConvert:function(e,r){return n.from(f.publicKeyConvert(Uint8Array.from(e),r))},publicKeyVerify:function(e){return(33===e.length||65===e.length)&&f.publicKeyVerify(Uint8Array.from(e))},publicKeyTweakAdd:function(e,r,t){return n.from(f.publicKeyTweakAdd(Uint8Array.from(e),Uint8Array.from(r),t))},publicKeyTweakMul:function(e,r,t){return n.from(f.publicKeyTweakMul(Uint8Array.from(e),Uint8Array.from(r),t))},publicKeyCombine:function(e,r){var t=[];return e.forEach((function(e){t.push(Uint8Array.from(e))})),n.from(f.publicKeyCombine(t,r))},signatureNormalize:function(e){return n.from(f.signatureNormalize(Uint8Array.from(e)))},signatureExport:function(e){return n.from(f.signatureExport(Uint8Array.from(e)))},signatureImport:function(e){return n.from(f.signatureImport(Uint8Array.from(e)))},signatureImportLax:function(e){if(0===e.length)throw new RangeError("signature length is invalid");var r=o.signatureImportLax(e);if(null===r)throw new Error("couldn't parse DER signature");return i.signatureImport(r)},sign:function(e,r,t){if(null===t)throw new TypeError("options should be an Object");var i=void 0;if(t){if(i={},null===t.data)throw new TypeError("options.data should be a Buffer");if(t.data){if(32!==t.data.length)throw new RangeError("options.data length is invalid");i.data=new Uint8Array(t.data)}if(null===t.noncefn)throw new TypeError("options.noncefn should be a Function");t.noncefn&&(i.noncefn=function(e,r,f,i,o){var a=null!=f?n.from(f):null,u=null!=i?n.from(i):null,s=n.from("");return t.noncefn&&(s=t.noncefn(n.from(e),n.from(r),a,u,o)),Uint8Array.from(s)})}var o=f.ecdsaSign(Uint8Array.from(e),Uint8Array.from(r),i);return{signature:n.from(o.signature),recovery:o.recid}},verify:function(e,r,t){return f.ecdsaVerify(Uint8Array.from(r),Uint8Array.from(e),t)},recover:function(e,r,t,i){return n.from(f.ecdsaRecover(Uint8Array.from(r),t,Uint8Array.from(e),i))},ecdh:function(e,r){return n.from(f.ecdh(Uint8Array.from(e),Uint8Array.from(r),{}))},ecdhUnsafe:function(e,r,t){if(33!==e.length&&65!==e.length)throw new RangeError("public key length is invalid");if(32!==r.length)throw new RangeError("private key length is invalid");return n.from(i.ecdhUnsafe(Uint8Array.from(e),Uint8Array.from(r),t))}}},85484:function(e,r,t){var n=t(23085).Buffer,f=n.from([48,129,211,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,133,48,129,130,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,33,2,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,36,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),i=n.from([48,130,1,19,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,165,48,129,162,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,65,4,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,72,58,218,119,38,163,196,101,93,164,251,252,14,17,8,168,253,23,180,72,166,133,84,25,156,71,208,143,251,16,212,184,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,68,3,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);r.privateKeyExport=function(e,r,t){var o=n.from(t?f:i);return e.copy(o,t?8:9),r.copy(o,t?181:214),o},r.privateKeyImport=function(e){var r=e.length,t=0;if(r<t+1||48!==e[t])return null;if(r<(t+=1)+1||!(128&e[t]))return null;var n=127&e[t];if(n<1||n>2)return null;if(r<(t+=1)+n)return null;var f=e[t+n-1]|(n>1?e[t+n-2]<<8:0);return r<(t+=n)+f||r<t+3||2!==e[t]||1!==e[t+1]||1!==e[t+2]||r<(t+=3)+2||4!==e[t]||e[t+1]>32||r<t+2+e[t+1]?null:e.slice(t+2,t+2+e[t+1])},r.signatureImportLax=function(e){var r=n.alloc(32,0),t=n.alloc(32,0),f=e.length,i=0;if(48!==e[i++])return null;var o=e[i++];if(128&o&&(i+=o-128)>f)return null;if(2!==e[i++])return null;var a=e[i++];if(128&a){if(i+(o=a-128)>f)return null;for(;o>0&&0===e[i];i+=1,o-=1);for(a=0;o>0;i+=1,o-=1)a=(a<<8)+e[i]}if(a>f-i)return null;var u=i;if(i+=a,2!==e[i++])return null;var s=e[i++];if(128&s){if(i+(o=s-128)>f)return null;for(;o>0&&0===e[i];i+=1,o-=1);for(s=0;o>0;i+=1,o-=1)s=(s<<8)+e[i]}if(s>f-i)return null;var c=i;for(i+=s;a>0&&0===e[u];a-=1,u+=1);if(a>32)return null;var l=e.slice(u,u+a);for(l.copy(r,32-l.length);s>0&&0===e[c];s-=1,c+=1);if(s>32)return null;var h=e.slice(c,c+s);return h.copy(t,32-h.length),{r:r,s:t}}},67587:function(e,r,t){var n=t(23085).Buffer,f=t(13550),i=new(0,t(86266).ec)("secp256k1"),o=i.curve;r.privateKeyExport=function(e,r){var t=new f(e);if(t.ucmp(o.n)>=0)throw new Error("couldn't export to DER format");var n=i.g.mul(t);return a(n.getX(),n.getY(),r)},r.privateKeyModInverse=function(e){var r=new f(e);if(r.ucmp(o.n)>=0||r.isZero())throw new Error("private key range is invalid");return r.invm(o.n).toArrayLike(n,"be",32)},r.signatureImport=function(e){var r=new f(e.r);r.ucmp(o.n)>=0&&(r=new f(0));var t=new f(e.s);return t.ucmp(o.n)>=0&&(t=new f(0)),n.concat([r.toArrayLike(n,"be",32),t.toArrayLike(n,"be",32)])},r.ecdhUnsafe=function(e,r,t){var n=i.keyFromPublic(e),u=new f(r);if(u.ucmp(o.n)>=0||u.isZero())throw new Error("scalar was invalid (zero or overflow)");var s=n.pub.mul(u);return a(s.getX(),s.getY(),t)};var a=function(e,r,t){var f=void 0;return t?((f=n.alloc(33))[0]=r.isOdd()?3:2,e.toArrayLike(n,"be",32).copy(f,1)):((f=n.alloc(65))[0]=4,e.toArrayLike(n,"be",32).copy(f,1),r.toArrayLike(n,"be",32).copy(f,33)),f}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[418],{66418:function(e,i,d){d.r(i);var r=d(85893),s=d(67294),c=d(77044),l=d(3283),n=d.n(l);const t=()=>{const{account:e,library:i}=(0,c.Ge)(),[d,l]=s.useState(),t=new(n())(n().givenProvider);return s.useEffect((()=>{if(e&&i){let i=!1;return t.eth.getBalance(e).then((e=>{var d=t.utils.fromWei(e,"ether");i||l(d)})).catch((()=>{i||l("NaN")})),()=>{l(void 0)}}}),[e,i]),(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("p",{id:"title",children:["ETH: ",null===d?"Error":d?`${d}`:""]},void 0)},void 0)};i.default=()=>{const{account:e,library:i}=(0,c.Ge)();return e&&i?(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("div",{id:"footer",children:(0,r.jsxs)("div",{className:"row",children:[(0,r.jsx)("div",{className:"col-3",children:(0,r.jsx)("p",{id:"title",children:"Wallet Connected"},void 0)},void 0),(0,r.jsx)("div",{className:"col-3",children:(0,r.jsx)(t,{},void 0)},void 0)]},void 0)},void 0)},void 0):(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("div",{id:"footer",children:(0,r.jsx)("div",{className:"row",children:(0,r.jsx)("div",{className:"ml-5 col-3",children:(0,r.jsx)("p",{id:"title",children:"Welcome to HugiRIS"},void 0)},void 0)},void 0)},void 0)},void 0)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE4LmM2MzAzNDJiZDI1ZjgxNTg2YTZkLmpzIiwibWFwcGluZ3MiOiIrS0FNQSxNQUFNQSxFQUFhLEtBQ2YsTUFBTSxRQUFFQyxFQUFPLFFBQUVDLElBQVksV0FDdEJDLEVBQVlDLEdBQWlCLGFBQzlCQyxFQUFPLElBQUksSUFBSixDQUFTLG1CQTBCdEIsT0F4QkEsYUFBZ0IsS0FDWixHQUFNSixHQUFhQyxFQUFTLENBQ3hCLElBQUlJLEdBQVEsRUFnQlosT0FkQUQsRUFBS0UsSUFDQUMsV0FBV1AsR0FDWFEsTUFBTUMsSUFDSCxJQUFJQyxFQUFVTixFQUFLTyxNQUFNQyxRQUFRSCxFQUFLLFNBQ2pDSixHQUNERixFQUFjTyxNQUdyQkcsT0FBTSxLQUNFUixHQUNERixFQUFjLFVBSW5CLEtBQ0hBLE9BQWNXLE9BR3ZCLENBQUNkLEVBQVNDLEtBR1QsK0JBQ0ksZUFBR2MsR0FBRyxRQUFPLGtCQUFzQixPQUFmYixFQUFzQixRQUFVQSxFQUFhLEdBQUdBLElBQWUsVUFBRSxTQUFLLElBK0V0RyxVQW5DZSxLQUNYLE1BQU0sUUFBRUYsRUFBTyxRQUFFQyxJQUFZLFVBQzdCLE9BQUtELEdBQVlDLEdBY1QsK0JBQ0ksZ0JBQUtjLEdBQUcsU0FBUSxVQUNaLGlCQUFLQyxVQUFVLE1BQUssV0FDaEIsZ0JBQUtBLFVBQVUsUUFBTyxVQUNsQixjQUFHRCxHQUFHLFFBQU8sMkNBQXFCLElBS3RDLGdCQUFLQyxVQUFVLFFBQU8sVUFDbEIsU0FBQ2pCLEVBQVUsaUJBQUcsVUFDWixTQUNKLFNBQ0osSUF6QlYsK0JBQ0ksZ0JBQUtnQixHQUFHLFNBQVEsVUFDWixnQkFBS0MsVUFBVSxNQUFLLFVBQ2hCLGdCQUFLQSxVQUFVLGFBQVksVUFDdkIsY0FBR0QsR0FBRyxRQUFPLDZDQUF1QixTQUNsQyxTQUNKLFNBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL3NyYy9jb21wb25lbnRzL0Zvb3Rlci9Gb290ZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vLyBpbXBvcnQgeyBMaW5rLCBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgdXNlV2ViM1JlYWN0IH0gZnJvbSAnQHdlYjMtcmVhY3QvY29yZSc7XG5pbXBvcnQgV2ViMyBmcm9tICd3ZWIzJztcbmltcG9ydCAnLi9pbmRleC5jc3MnO1xuXG5jb25zdCBFVEhCYWxhbmNlID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgYWNjb3VudCwgbGlicmFyeSB9ID0gdXNlV2ViM1JlYWN0KCk7XG4gICAgY29uc3QgW2V0aGJhbGFuY2UsIHNldEV0aGJhbGFuY2VdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPigpO1xuICAgIGNvbnN0IHdlYjMgPSBuZXcgV2ViMyhXZWIzLmdpdmVuUHJvdmlkZXIpO1xuXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpOiBhbnkgPT4ge1xuICAgICAgICBpZiAoISFhY2NvdW50ICYmICEhbGlicmFyeSkge1xuICAgICAgICAgICAgbGV0IHN0YWxlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHdlYjMuZXRoXG4gICAgICAgICAgICAgICAgLmdldEJhbGFuY2UoYWNjb3VudClcbiAgICAgICAgICAgICAgICAudGhlbigod2VpOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhbGFuY2UgPSB3ZWIzLnV0aWxzLmZyb21XZWkod2VpLCAnZXRoZXInKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGFsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RXRoYmFsYW5jZShiYWxhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGFsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RXRoYmFsYW5jZSgnTmFOJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRFdGhiYWxhbmNlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSwgW2FjY291bnQsIGxpYnJhcnldKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcblxuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8cCBpZD1cInRpdGxlXCI+RVRIOiB7ZXRoYmFsYW5jZSA9PT0gbnVsbCA/ICdFcnJvcicgOiBldGhiYWxhbmNlID8gYCR7ZXRoYmFsYW5jZX1gIDogJyd9PC9wPlxuICAgICAgICA8Lz5cbiAgICApO1xufTtcblxuLy8gY29uc3QgQlRDQmFsYW5jZSA9ICgpID0+IHtcbi8vICAgICBjb25zdCB7IGFjY291bnQsIGxpYnJhcnksIGNoYWluSWQgfSA9IHVzZVdlYjNSZWFjdCgpO1xuLy8gICAgIGNvbnN0IFtidGNiYWxhbmNlLCBzZXRCdGNiYWxhbmNlXSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4oKTtcbi8vICAgICBjb25zdCB3ZWIzID0gbmV3IFdlYjMoJ2h0dHBzOi8vYnNjLWRhdGFzZWVkMS5iaW5hbmNlLm9yZzo0NDMnKTtcblxuLy8gICAgIGNvbnN0IEFkZHJlc3MgPSAnMHg1YUYwM0RiZEQ4MjczQTgxQjllNzEzQUY4MjFEMjVlODE5ZDMxODk0Jztcbi8vICAgICBjb25zdCBCaXRjb2luQUJJID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXF1aXJlKCcuL0JpdGNvaW5BQkkuanNvbicpKSk7XG4vLyAgICAgY29uc3QgQlRDY29udHJhY3QgPSBuZXcgd2ViMy5ldGguQ29udHJhY3QoQml0Y29pbkFCSSwgQWRkcmVzcyk7XG4vLyAgICAgUmVhY3QudXNlRWZmZWN0KCgpOiBhbnkgPT4ge1xuLy8gICAgICAgICBpZiAoISFhY2NvdW50ICYmICEhbGlicmFyeSkge1xuLy8gICAgICAgICAgICAgbGV0IHN0YWxlID0gZmFsc2U7XG5cbi8vICAgICAgICAgICAgIEJUQ2NvbnRyYWN0Lm1ldGhvZHNcbi8vICAgICAgICAgICAgICAgICAuYmFsYW5jZU9mKGFjY291bnQpXG4vLyAgICAgICAgICAgICAgICAgLmNhbGwoKVxuLy8gICAgICAgICAgICAgICAgIC50aGVuKChiYWxhbmNlOiBhbnkpID0+IHtcbi8vICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGFsZSkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgc2V0QnRjYmFsYW5jZShiYWxhbmNlKTtcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIH0pXG4vLyAgICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbi8vICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGFsZSkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgc2V0QnRjYmFsYW5jZShOYU4pO1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgfSk7XG5cbi8vICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgc2V0QnRjYmFsYW5jZSh1bmRlZmluZWQpO1xuLy8gICAgICAgICAgICAgfTtcbi8vICAgICAgICAgfVxuLy8gICAgIH0sIFthY2NvdW50LCBsaWJyYXJ5LCBjaGFpbklkLCBCVENjb250cmFjdC5tZXRob2RzXSk7XG4vLyAgICAgLy8gY29uc29sZS5sb2coYnRjYmFsYW5jZSk7XG4vLyAgICAgcmV0dXJuIChcbi8vICAgICAgICAgPD5cbi8vICAgICAgICAgICAgIDxwIGlkPVwidGl0bGVcIj5CVEM6IHtidGNiYWxhbmNlID09PSBudWxsID8gJ0Vycm9yJyA6IGJ0Y2JhbGFuY2UgPyBgJHtidGNiYWxhbmNlfWAgOiAnJ308L3A+XG4vLyAgICAgICAgIDwvPlxuLy8gICAgICk7XG4vLyB9O1xuXG5jb25zdCBGb290ZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBhY2NvdW50LCBsaWJyYXJ5IH0gPSB1c2VXZWIzUmVhY3QoKTtcbiAgICBpZiAoIWFjY291bnQgfHwgIWxpYnJhcnkpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImZvb3RlclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtbC01IGNvbC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgaWQ9XCJ0aXRsZVwiPldlbGNvbWUgdG8gSHVnaVJJUzwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJmb290ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBpZD1cInRpdGxlXCI+V2FsbGV0IENvbm5lY3RlZDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgey8qIDxkaXYgY2xhc3NOYW1lPVwiY29sLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QlRDQmFsYW5jZSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICovfVxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxFVEhCYWxhbmNlIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb290ZXI7XG4iXSwibmFtZXMiOlsiRVRIQmFsYW5jZSIsImFjY291bnQiLCJsaWJyYXJ5IiwiZXRoYmFsYW5jZSIsInNldEV0aGJhbGFuY2UiLCJ3ZWIzIiwic3RhbGUiLCJldGgiLCJnZXRCYWxhbmNlIiwidGhlbiIsIndlaSIsImJhbGFuY2UiLCJ1dGlscyIsImZyb21XZWkiLCJjYXRjaCIsInVuZGVmaW5lZCIsImlkIiwiY2xhc3NOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==
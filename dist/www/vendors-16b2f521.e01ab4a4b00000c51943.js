(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[7219],{93338:function(t,e,r){var n=r(48764).Buffer,i=r(18269),o=r(82415).RQ,s=r(82415)._R,a=new o((function(t,e){return!t.match(/^u?int/)||Array.isArray(e)||e&&"object"==typeof e&&"BN"===e.constructor.name?e:e.toString()}));function u(){}var h=function(){};h.prototype.encodeFunctionSignature=function(t){return("function"==typeof t||"object"==typeof t&&t)&&(t=i._jsonInterfaceMethodToString(t)),i.sha3(t).slice(0,10)},h.prototype.encodeEventSignature=function(t){return("function"==typeof t||"object"==typeof t&&t)&&(t=i._jsonInterfaceMethodToString(t)),i.sha3(t)},h.prototype.encodeParameter=function(t,e){return this.encodeParameters([t],[e])},h.prototype.encodeParameters=function(t,e){var r=this;return t=r.mapTypes(t),e=e.map((function(e,n){let i=t[n];if("object"==typeof i&&i.type&&(i=i.type),e=r.formatParam(i,e),"string"==typeof i&&i.includes("tuple")){const t=a._getCoder(s.from(i)),n=(t,e)=>{if("array"===t.name)return e.map((e=>n(a._getCoder(s.from(t.type.replace("[]",""))),e)));t.coders.forEach(((t,i)=>{"tuple"===t.name?n(t,e[i]):e[i]=r.formatParam(t.name,e[i])}))};n(t,e)}return e})),a.encode(t,e)},h.prototype.mapTypes=function(t){var e=this,r=[];return t.forEach((function(t){if("object"==typeof t&&"function"===t.type&&(t=Object.assign({},t,{type:"bytes24"})),e.isSimplifiedStructFormat(t)){var n=Object.keys(t)[0];r.push(Object.assign(e.mapStructNameAndType(n),{components:e.mapStructToCoderFormat(t[n])}))}else r.push(t)})),r},h.prototype.isSimplifiedStructFormat=function(t){return"object"==typeof t&&void 0===t.components&&void 0===t.name},h.prototype.mapStructNameAndType=function(t){var e="tuple";return t.indexOf("[]")>-1&&(e="tuple[]",t=t.slice(0,-2)),{type:e,name:t}},h.prototype.mapStructToCoderFormat=function(t){var e=this,r=[];return Object.keys(t).forEach((function(n){"object"!=typeof t[n]?r.push({name:n,type:t[n]}):r.push(Object.assign(e.mapStructNameAndType(n),{components:e.mapStructToCoderFormat(t[n])}))})),r},h.prototype.formatParam=function(t,e){const r=new RegExp(/^bytes([0-9]*)$/),o=new RegExp(/^bytes([0-9]*)\[\]$/),s=new RegExp(/^(u?int)([0-9]*)$/),a=new RegExp(/^(u?int)([0-9]*)\[\]$/);if(i.isBN(e)||i.isBigNumber(e))return e.toString(10);if(t.match(o)||t.match(a))return e.map((e=>this.formatParam(t.replace("[]",""),e)));let u=t.match(s);if(u){let t=parseInt(u[2]||"256");t/8<e.length&&(e=i.leftPad(e,t))}if(u=t.match(r),u){n.isBuffer(e)&&(e=i.toHex(e));let t=parseInt(u[1]);if(t){let r=2*t;"0x"===e.substring(0,2)&&(r+=2),e.length<r&&(e=i.rightPad(e,2*t))}e.length%2==1&&(e="0x0"+e.substring(2))}return e},h.prototype.encodeFunctionCall=function(t,e){return this.encodeFunctionSignature(t)+this.encodeParameters(t.inputs,e).replace("0x","")},h.prototype.decodeParameter=function(t,e){return this.decodeParameters([t],e)[0]},h.prototype.decodeParameters=function(t,e){return this.decodeParametersWith(t,e,!1)},h.prototype.decodeParametersWith=function(t,e,r){if(t.length>0&&(!e||"0x"===e||"0X"===e))throw new Error("Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced.");var n=a.decode(this.mapTypes(t),"0x"+e.replace(/0x/i,""),r),i=new u;return i.__length__=0,t.forEach((function(t,e){var r=n[i.__length__];r="0x"===r?null:r,i[e]=r,("function"==typeof t||t&&"object"==typeof t)&&t.name&&(i[t.name]=r),i.__length__++})),i},h.prototype.decodeLog=function(t,e,r){var n=this;r=Array.isArray(r)?r:[r],e=e||"";var i=[],o=[],s=0;t.forEach((function(t,e){t.indexed?(o[e]=["bool","int","uint","address","fixed","ufixed"].find((function(e){return-1!==t.type.indexOf(e)}))?n.decodeParameter(t.type,r[s]):r[s],s++):i[e]=t}));var a=e,h=a?this.decodeParametersWith(i,a,!0):[],f=new u;return f.__length__=0,t.forEach((function(t,e){f[e]="string"===t.type?"":null,void 0!==h[e]&&(f[e]=h[e]),void 0!==o[e]&&(f[e]=o[e]),t.name&&(f[t.name]=f[e]),f.__length__++})),f};var f=new h;t.exports=f},17935:function(t,e,r){"use strict";var n=r(23085).Buffer,i=r(92928),o=r(93952),s=r(93608),a=(r.g,r(55835)),u=r(17635),h=r(48410),f=r(18269),c=r(84390),{TransactionFactory:l}=r(66052),d=r(2832).default,p=r(2832).Hardfork,m=r(53326),g=function(t){return null==t},v=function(t){return null!=t},y=function(){var t=this;i.packageInit(this,arguments),delete this.BatchRequest,delete this.extend;var e=[new o({name:"getNetworkId",call:"net_version",params:0,outputFormatter:parseInt}),new o({name:"getChainId",call:"eth_chainId",params:0,outputFormatter:f.hexToNumber}),new o({name:"getGasPrice",call:"eth_gasPrice",params:0}),new o({name:"getTransactionCount",call:"eth_getTransactionCount",params:2,inputFormatter:[function(t){if(f.isAddress(t))return t;throw new Error("Address "+t+' is not a valid address to get the "transactionCount".')},function(){return"latest"}]}),new o({name:"getBlockByNumber",call:"eth_getBlockByNumber",params:2,inputFormatter:[function(t){return t?f.toHex(t):"latest"},function(){return!1}]})];this._ethereumCall={},e.forEach((e=>{e.attachToObject(t._ethereumCall),e.setRequestManager(t._requestManager)})),this.wallet=new M(this)};function w(t,e){return new Promise(((r,n)=>{try{(void 0===e.type||e.type<"0x2")&&void 0!==e.gasPrice?r({gasPrice:e.gasPrice}):Promise.all([t._ethereumCall.getBlockByNumber(),t._ethereumCall.getGasPrice()]).then((t=>{const[n,i]=t;if("0x2"===e.type&&n&&n.baseFeePerGas){let t,i;e.gasPrice?(t=e.gasPrice,i=e.gasPrice,delete e.gasPrice):(t=e.maxPriorityFeePerGas||"0x9502F900",i=e.maxFeePerGas||f.toHex(f.toBN(n.baseFeePerGas).mul(f.toBN(2)).add(f.toBN(t)))),r({maxFeePerGas:i,maxPriorityFeePerGas:t})}else{if(e.maxPriorityFeePerGas||e.maxFeePerGas)throw Error("Network doesn't support eip-1559");r({gasPrice:i})}}))}catch(t){n(t)}}))}function M(t){this._accounts=t,this.length=0,this.defaultKeyName="web3js_wallet"}y.prototype._addAccountFunctions=function(t){var e=this;return t.signTransaction=function(r,n){return e.signTransaction(r,t.privateKey,n)},t.sign=function(r){return e.sign(r,t.privateKey)},t.encrypt=function(r,n){return e.encrypt(t.privateKey,r,n)},t},y.prototype.create=function(t){return this._addAccountFunctions(s.create(t||f.randomHex(32)))},y.prototype.privateKeyToAccount=function(t,e){if(t.startsWith("0x")||(t="0x"+t),!e&&66!==t.length)throw new Error("Private key must be 32 bytes long");return this._addAccountFunctions(s.fromPrivate(t))},y.prototype.signTransaction=function(t,e,r){var i=this,o=!1,s={},a=!(!t||!(t.chain&&t.hardfork||t.common));if(r=r||function(){},!t)return o=new Error("No transaction object given!"),r(o),Promise.reject(o);if(v(t.common)&&g(t.common.customChain))return o=new Error("If tx.common is provided it must have tx.common.customChain"),r(o),Promise.reject(o);if(v(t.common)&&g(t.common.customChain.chainId))return o=new Error("If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId"),r(o),Promise.reject(o);if(v(t.common)&&v(t.common.customChain.chainId)&&v(t.chainId)&&t.chainId!==t.common.customChain.chainId)return o=new Error("Chain Id doesnt match in tx.chainId tx.common.customChain.chainId"),r(o),Promise.reject(o);function u(t){const i=function(t){if(t.common&&t.chain&&t.hardfork)return new Error("Please provide the @ethereumjs/common object or the chain and hardfork property but not all together.");if(t.chain&&!t.hardfork||t.hardfork&&!t.chain)return new Error('When specifying chain and hardfork, both values must be defined. Received "chain": '+t.chain+', "hardfork": '+t.hardfork);if(!(t.gas||t.gasLimit||t.maxPriorityFeePerGas||t.maxFeePerGas))return new Error('"gas" is missing');if(t.gas&&t.gasPrice){if(t.gas<0||t.gasPrice<0)return new Error("Gas or gasPrice is lower than 0")}else if(t.maxPriorityFeePerGas<0||t.maxFeePerGas<0)return new Error("maxPriorityFeePerGas or maxFeePerGas is lower than 0");if(t.nonce<0||t.chainId<0)return new Error("Nonce or chainId is lower than 0");return}(t);if(i)return r(i),Promise.reject(i);try{var o=c.formatters.inputCallFormatter(Object.assign({},t));o.data=o.data||"0x",o.value=o.value||"0x",o.gasLimit=o.gasLimit||o.gas,"0x1"===o.type&&void 0===o.accessList&&(o.accessList=[]),a?(o.common&&(s.common=d.forCustomChain(o.common.baseChain||"mainnet",{name:o.common.customChain.name||"custom-network",networkId:o.common.customChain.networkId,chainId:o.common.customChain.chainId},o.common.hardfork||p.London),delete o.common),o.chain&&(s.chain=o.chain,delete o.chain),o.hardfork&&(s.hardfork=o.hardfork,delete o.hardfork)):(s.common=d.forCustomChain("mainnet",{name:"custom-network",networkId:o.networkId,chainId:o.chainId},o.hardfork||p.London),delete o.networkId),e.startsWith("0x")&&(e=e.substring(2));var u=l.fromTxData(o,s).sign(n.from(e,"hex")),h=u.validate(!0);if(h.length>0){let t="Signer Error: ";for(const e of h)t+=`${t} ${e}.`;throw new Error(t)}var m="0x"+u.serialize().toString("hex"),g=f.keccak256(m),v={messageHash:"0x"+n.from(u.getMessageToSign(!0)).toString("hex"),v:"0x"+u.v.toString("hex"),r:"0x"+u.r.toString("hex"),s:"0x"+u.s.toString("hex"),rawTransaction:m,transactionHash:g};return r(null,v),v}catch(t){return r(t),Promise.reject(t)}}return t.type=function(t){const e=void 0!==t.maxFeePerGas||void 0!==t.maxPriorityFeePerGas;let r;void 0!==t.type?r=f.toHex(t.type):void 0===t.type&&e&&(r="0x2");if(void 0!==t.gasPrice&&("0x2"===r||e))throw Error("eip-1559 transactions don't support gasPrice");if(("0x1"===r||"0x0"===r)&&e)throw Error("pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas");e||t.common&&t.common.hardfork&&t.common.hardfork.toLowerCase()===p.London||t.hardfork&&t.hardfork.toLowerCase()===p.London?r="0x2":(t.accessList||t.common&&t.common.hardfork&&t.common.hardfork.toLowerCase()===p.Berlin||t.hardfork&&t.hardfork.toLowerCase()===p.Berlin)&&(r="0x1");return r}(t),void 0!==t.nonce&&void 0!==t.chainId&&(void 0!==t.gasPrice||void 0!==t.maxFeePerGas&&void 0!==t.maxPriorityFeePerGas)&&a?Promise.resolve(u(t)):Promise.all([g(t.common)||g(t.common.customChain.chainId)?g(t.chainId)?i._ethereumCall.getChainId():t.chainId:void 0,g(t.nonce)?i._ethereumCall.getTransactionCount(i.privateKeyToAccount(e).address):t.nonce,g(a)?i._ethereumCall.getNetworkId():1,w(i,t)]).then((function(e){const[r,n,i,o]=e;if(g(r)&&g(t.common)&&g(t.common.customChain.chainId)||g(n)||g(i)||g(o))throw new Error('One of the values "chainId", "networkId", "gasPrice", or "nonce" couldn\'t be fetched: '+JSON.stringify(e));return u({...t,...g(t.common)||g(t.common.customChain.chainId)?{chainId:r}:{},nonce:n,networkId:i,...o})}))},y.prototype.recoverTransaction=function(t,e={}){const r=n.from(t.slice(2),"hex"),i=l.fromSerializedData(r);return f.toChecksumAddress(i.getSenderAddress().toString("hex"))},y.prototype.hashMessage=function(t){var e=f.isHexStrict(t)?t:f.utf8ToHex(t),r=f.hexToBytes(e),i=n.from(r),o="Ethereum Signed Message:\n"+r.length,s=n.from(o),a=n.concat([s,i]);return m.bufferToHex(m.keccak256(a))},y.prototype.sign=function(t,e){if(e.startsWith("0x")||(e="0x"+e),66!==e.length)throw new Error("Private key must be 32 bytes long");var r=this.hashMessage(t),n=s.sign(r,e),i=s.decodeSignature(n);return{message:t,messageHash:r,v:i[0],r:i[1],s:i[2],signature:n}},y.prototype.recover=function(t,e,r){var n=[].slice.apply(arguments);return t&&"object"==typeof t?this.recover(t.messageHash,s.encodeSignature([t.v,t.r,t.s]),!0):(r||(t=this.hashMessage(t)),n.length>=4?(r="boolean"==typeof(r=n.slice(-1)[0])&&!!r,this.recover(t,s.encodeSignature(n.slice(1,4)),r)):s.recover(t,e))},y.prototype.decrypt=function(t,e,r){if("string"!=typeof e)throw new Error("No password given.");var i,o,s=t&&"object"==typeof t?t:JSON.parse(r?t.toLowerCase():t);if(3!==s.version)throw new Error("Not a valid V3 wallet");if("scrypt"===s.crypto.kdf)o=s.crypto.kdfparams,i=u.syncScrypt(n.from(e),n.from(o.salt,"hex"),o.n,o.r,o.p,o.dklen);else{if("pbkdf2"!==s.crypto.kdf)throw new Error("Unsupported key derivation scheme");if("hmac-sha256"!==(o=s.crypto.kdfparams).prf)throw new Error("Unsupported parameters to PBKDF2");i=a.pbkdf2Sync(n.from(e),n.from(o.salt,"hex"),o.c,o.dklen,"sha256")}var h=n.from(s.crypto.ciphertext,"hex");if(f.sha3(n.from([...i.slice(16,32),...h])).replace("0x","")!==s.crypto.mac)throw new Error("Key derivation failed - possibly wrong password");var c=a.createDecipheriv(s.crypto.cipher,i.slice(0,16),n.from(s.crypto.cipherparams.iv,"hex")),l="0x"+n.from([...c.update(h),...c.final()]).toString("hex");return this.privateKeyToAccount(l,!0)},y.prototype.encrypt=function(t,e,r){var i,o=this.privateKeyToAccount(t,!0),s=(r=r||{}).salt||a.randomBytes(32),c=r.iv||a.randomBytes(16),l=r.kdf||"scrypt",d={dklen:r.dklen||32,salt:s.toString("hex")};if("pbkdf2"===l)d.c=r.c||262144,d.prf="hmac-sha256",i=a.pbkdf2Sync(n.from(e),n.from(d.salt,"hex"),d.c,d.dklen,"sha256");else{if("scrypt"!==l)throw new Error("Unsupported kdf");d.n=r.n||8192,d.r=r.r||8,d.p=r.p||1,i=u.syncScrypt(n.from(e),n.from(d.salt,"hex"),d.n,d.r,d.p,d.dklen)}var p=a.createCipheriv(r.cipher||"aes-128-ctr",i.slice(0,16),c);if(!p)throw new Error("Unsupported cipher");var m=n.from([...p.update(n.from(o.privateKey.replace("0x",""),"hex")),...p.final()]),g=f.sha3(n.from([...i.slice(16,32),...m])).replace("0x","");return{version:3,id:h.v4({random:r.uuid||a.randomBytes(16)}),address:o.address.toLowerCase().replace("0x",""),crypto:{ciphertext:m.toString("hex"),cipherparams:{iv:c.toString("hex")},cipher:r.cipher||"aes-128-ctr",kdf:l,kdfparams:d,mac:g.toString("hex")}}},M.prototype._findSafeIndex=function(t){return t=t||0,this.hasOwnProperty(t)?this._findSafeIndex(t+1):t},M.prototype._currentIndexes=function(){return Object.keys(this).map((function(t){return parseInt(t)})).filter((function(t){return t<9e20}))},M.prototype.create=function(t,e){for(var r=0;r<t;++r)this.add(this._accounts.create(e).privateKey);return this},M.prototype.add=function(t){return"string"==typeof t&&(t=this._accounts.privateKeyToAccount(t)),this[t.address]?this[t.address]:((t=this._accounts.privateKeyToAccount(t.privateKey)).index=this._findSafeIndex(),this[t.index]=t,this[t.address]=t,this[t.address.toLowerCase()]=t,this.length++,t)},M.prototype.remove=function(t){var e=this[t];return!(!e||!e.address)&&(this[e.address].privateKey=null,delete this[e.address],this[e.address.toLowerCase()].privateKey=null,delete this[e.address.toLowerCase()],this[e.index].privateKey=null,delete this[e.index],this.length--,!0)},M.prototype.clear=function(){var t=this;return this._currentIndexes().forEach((function(e){t.remove(e)})),this},M.prototype.encrypt=function(t,e){var r=this;return this._currentIndexes().map((function(n){return r[n].encrypt(t,e)}))},M.prototype.decrypt=function(t,e){var r=this;return t.forEach((function(t){var n=r._accounts.decrypt(t,e);if(!n)throw new Error("Couldn't decrypt accounts. Password wrong?");r.add(n)})),this},M.prototype.save=function(t,e){return localStorage.setItem(e||this.defaultKeyName,JSON.stringify(this.encrypt(t))),!0},M.prototype.load=function(t,e){var r=localStorage.getItem(e||this.defaultKeyName);if(r)try{r=JSON.parse(r)}catch(t){}return this.decrypt(r||[],t)},function(t){var e;try{e=window[t];var r="__storage_test__";return e.setItem(r,r),e.removeItem(r),!0}catch(t){return t&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}}("localStorage")||(delete M.prototype.save,delete M.prototype.load),t.exports=y},116:function(t,e,r){!function(t,e){"use strict";function n(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function o(t,e,r){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var s;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:r(43503).Buffer}catch(t){}function a(t,e){var r=t.charCodeAt(e);return r>=48&&r<=57?r-48:r>=65&&r<=70?r-55:r>=97&&r<=102?r-87:void n(!1,"Invalid character in "+t)}function u(t,e,r){var n=a(t,r);return r-1>=e&&(n|=a(t,r-1)<<4),n}function h(t,e,r,i){for(var o=0,s=0,a=Math.min(t.length,r),u=e;u<a;u++){var h=t.charCodeAt(u)-48;o*=i,s=h>=49?h-49+10:h>=17?h-17+10:h,n(h>=0&&s<i,"Invalid character"),o+=s}return o}function f(t,e){t.words=e.words,t.length=e.length,t.negative=e.negative,t.red=e.red}if(o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),n(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<t.length&&(16===e?this._parseHex(t,i,r):(this._parseBase(t,e,i),"le"===r&&this._initArray(this.toArray(),e,r)))},o.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(n(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},o.prototype._initArray=function(t,e,r){if(n("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===r)for(i=t.length-1,o=0;i>=0;i-=3)s=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===r)for(i=0,o=0;i<t.length;i+=3)s=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this._strip()},o.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var i,o=0,s=0;if("be"===r)for(n=t.length-1;n>=e;n-=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;else for(n=(t.length-e)%2==0?e+1:e;n<t.length;n+=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;this._strip()},o.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var o=t.length-r,s=o%n,a=Math.min(o,o-s)+r,u=0,f=r;f<a;f+=n)u=h(t,f,f+n,e),this.imuln(i),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var c=1;for(u=h(t,f,t.length,e),f=0;f<s;f++)c*=e;this.imuln(c),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this._strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype._move=function(t){f(t,this)},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{o.prototype[Symbol.for("nodejs.util.inspect.custom")]=c}catch(t){o.prototype.inspect=c}else o.prototype.inspect=c;function c(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var l=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],d=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];o.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||"hex"===t){r="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],u=(16777215&(a<<i|o)).toString(16);r=0!==(o=a>>>24-i&16777215)||s!==this.length-1?l[6-u.length]+u+r:u+r,(i+=2)>=26&&(i-=26,s--)}for(0!==o&&(r=o.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var h=d[t],f=p[t];r="";var c=this.clone();for(c.negative=0;!c.isZero();){var m=c.modrn(f).toString(t);r=(c=c.idivn(f)).isZero()?m+r:l[h-m.length]+m+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16,2)},s&&(o.prototype.toBuffer=function(t,e){return this.toArrayLike(s,t,e)}),o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)};function m(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],o=0|e.words[0],s=i*o,a=67108863&s,u=s/67108864|0;r.words[0]=a;for(var h=1;h<n;h++){for(var f=u>>>26,c=67108863&u,l=Math.min(h,e.length-1),d=Math.max(0,h-t.length+1);d<=l;d++){var p=h-d|0;f+=(s=(i=0|t.words[p])*(o=0|e.words[d])+c)/67108864|0,c=67108863&s}r.words[h]=0|c,u=0|f}return 0!==u?r.words[h]=0|u:r.length--,r._strip()}o.prototype.toArrayLike=function(t,e,r){this._strip();var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0");var s=function(t,e){return t.allocUnsafe?t.allocUnsafe(e):new t(e)}(t,o);return this["_toArrayLike"+("le"===e?"LE":"BE")](s,i),s},o.prototype._toArrayLikeLE=function(t,e){for(var r=0,n=0,i=0,o=0;i<this.length;i++){var s=this.words[i]<<o|n;t[r++]=255&s,r<t.length&&(t[r++]=s>>8&255),r<t.length&&(t[r++]=s>>16&255),6===o?(r<t.length&&(t[r++]=s>>24&255),n=0,o=0):(n=s>>>24,o+=2)}if(r<t.length)for(t[r++]=n;r<t.length;)t[r++]=0},o.prototype._toArrayLikeBE=function(t,e){for(var r=t.length-1,n=0,i=0,o=0;i<this.length;i++){var s=this.words[i]<<o|n;t[r--]=255&s,r>=0&&(t[r--]=s>>8&255),r>=0&&(t[r--]=s>>16&255),6===o?(r>=0&&(t[r--]=s>>24&255),n=0,o=0):(n=s>>>24,o+=2)}if(r>=0)for(t[r--]=n;r>=0;)t[r--]=0},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this._strip()},o.prototype.ior=function(t){return n(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this._strip()},o.prototype.iand=function(t){return n(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this._strip()},o.prototype.ixor=function(t){return n(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){n("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this._strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){n("number"==typeof t&&t>=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<i:this.words[r]&~(1<<i),this._strip()},o.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,o=0;o<n.length;o++)e=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<r.length;o++)e=(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var o=0,s=0;s<n.length;s++)o=(e=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this._strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var g=function(t,e,r){var n,i,o,s=t.words,a=e.words,u=r.words,h=0,f=0|s[0],c=8191&f,l=f>>>13,d=0|s[1],p=8191&d,m=d>>>13,g=0|s[2],v=8191&g,y=g>>>13,w=0|s[3],M=8191&w,b=w>>>13,_=0|s[4],x=8191&_,A=_>>>13,k=0|s[5],B=8191&k,P=k>>>13,S=0|s[6],E=8191&S,T=S>>>13,C=0|s[7],I=8191&C,N=C>>>13,L=0|s[8],j=8191&L,O=L>>>13,R=0|s[9],F=8191&R,H=R>>>13,K=0|a[0],q=8191&K,D=K>>>13,U=0|a[1],Z=8191&U,z=U>>>13,G=0|a[2],V=8191&G,W=G>>>13,J=0|a[3],$=8191&J,X=J>>>13,Y=0|a[4],Q=8191&Y,tt=Y>>>13,et=0|a[5],rt=8191&et,nt=et>>>13,it=0|a[6],ot=8191&it,st=it>>>13,at=0|a[7],ut=8191&at,ht=at>>>13,ft=0|a[8],ct=8191&ft,lt=ft>>>13,dt=0|a[9],pt=8191&dt,mt=dt>>>13;r.negative=t.negative^e.negative,r.length=19;var gt=(h+(n=Math.imul(c,q))|0)+((8191&(i=(i=Math.imul(c,D))+Math.imul(l,q)|0))<<13)|0;h=((o=Math.imul(l,D))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,n=Math.imul(p,q),i=(i=Math.imul(p,D))+Math.imul(m,q)|0,o=Math.imul(m,D);var vt=(h+(n=n+Math.imul(c,Z)|0)|0)+((8191&(i=(i=i+Math.imul(c,z)|0)+Math.imul(l,Z)|0))<<13)|0;h=((o=o+Math.imul(l,z)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(v,q),i=(i=Math.imul(v,D))+Math.imul(y,q)|0,o=Math.imul(y,D),n=n+Math.imul(p,Z)|0,i=(i=i+Math.imul(p,z)|0)+Math.imul(m,Z)|0,o=o+Math.imul(m,z)|0;var yt=(h+(n=n+Math.imul(c,V)|0)|0)+((8191&(i=(i=i+Math.imul(c,W)|0)+Math.imul(l,V)|0))<<13)|0;h=((o=o+Math.imul(l,W)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,n=Math.imul(M,q),i=(i=Math.imul(M,D))+Math.imul(b,q)|0,o=Math.imul(b,D),n=n+Math.imul(v,Z)|0,i=(i=i+Math.imul(v,z)|0)+Math.imul(y,Z)|0,o=o+Math.imul(y,z)|0,n=n+Math.imul(p,V)|0,i=(i=i+Math.imul(p,W)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,W)|0;var wt=(h+(n=n+Math.imul(c,$)|0)|0)+((8191&(i=(i=i+Math.imul(c,X)|0)+Math.imul(l,$)|0))<<13)|0;h=((o=o+Math.imul(l,X)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(x,q),i=(i=Math.imul(x,D))+Math.imul(A,q)|0,o=Math.imul(A,D),n=n+Math.imul(M,Z)|0,i=(i=i+Math.imul(M,z)|0)+Math.imul(b,Z)|0,o=o+Math.imul(b,z)|0,n=n+Math.imul(v,V)|0,i=(i=i+Math.imul(v,W)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,W)|0,n=n+Math.imul(p,$)|0,i=(i=i+Math.imul(p,X)|0)+Math.imul(m,$)|0,o=o+Math.imul(m,X)|0;var Mt=(h+(n=n+Math.imul(c,Q)|0)|0)+((8191&(i=(i=i+Math.imul(c,tt)|0)+Math.imul(l,Q)|0))<<13)|0;h=((o=o+Math.imul(l,tt)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(B,q),i=(i=Math.imul(B,D))+Math.imul(P,q)|0,o=Math.imul(P,D),n=n+Math.imul(x,Z)|0,i=(i=i+Math.imul(x,z)|0)+Math.imul(A,Z)|0,o=o+Math.imul(A,z)|0,n=n+Math.imul(M,V)|0,i=(i=i+Math.imul(M,W)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,W)|0,n=n+Math.imul(v,$)|0,i=(i=i+Math.imul(v,X)|0)+Math.imul(y,$)|0,o=o+Math.imul(y,X)|0,n=n+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var bt=(h+(n=n+Math.imul(c,rt)|0)|0)+((8191&(i=(i=i+Math.imul(c,nt)|0)+Math.imul(l,rt)|0))<<13)|0;h=((o=o+Math.imul(l,nt)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,n=Math.imul(E,q),i=(i=Math.imul(E,D))+Math.imul(T,q)|0,o=Math.imul(T,D),n=n+Math.imul(B,Z)|0,i=(i=i+Math.imul(B,z)|0)+Math.imul(P,Z)|0,o=o+Math.imul(P,z)|0,n=n+Math.imul(x,V)|0,i=(i=i+Math.imul(x,W)|0)+Math.imul(A,V)|0,o=o+Math.imul(A,W)|0,n=n+Math.imul(M,$)|0,i=(i=i+Math.imul(M,X)|0)+Math.imul(b,$)|0,o=o+Math.imul(b,X)|0,n=n+Math.imul(v,Q)|0,i=(i=i+Math.imul(v,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,n=n+Math.imul(p,rt)|0,i=(i=i+Math.imul(p,nt)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,nt)|0;var _t=(h+(n=n+Math.imul(c,ot)|0)|0)+((8191&(i=(i=i+Math.imul(c,st)|0)+Math.imul(l,ot)|0))<<13)|0;h=((o=o+Math.imul(l,st)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(I,q),i=(i=Math.imul(I,D))+Math.imul(N,q)|0,o=Math.imul(N,D),n=n+Math.imul(E,Z)|0,i=(i=i+Math.imul(E,z)|0)+Math.imul(T,Z)|0,o=o+Math.imul(T,z)|0,n=n+Math.imul(B,V)|0,i=(i=i+Math.imul(B,W)|0)+Math.imul(P,V)|0,o=o+Math.imul(P,W)|0,n=n+Math.imul(x,$)|0,i=(i=i+Math.imul(x,X)|0)+Math.imul(A,$)|0,o=o+Math.imul(A,X)|0,n=n+Math.imul(M,Q)|0,i=(i=i+Math.imul(M,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,n=n+Math.imul(v,rt)|0,i=(i=i+Math.imul(v,nt)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,nt)|0,n=n+Math.imul(p,ot)|0,i=(i=i+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var xt=(h+(n=n+Math.imul(c,ut)|0)|0)+((8191&(i=(i=i+Math.imul(c,ht)|0)+Math.imul(l,ut)|0))<<13)|0;h=((o=o+Math.imul(l,ht)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(j,q),i=(i=Math.imul(j,D))+Math.imul(O,q)|0,o=Math.imul(O,D),n=n+Math.imul(I,Z)|0,i=(i=i+Math.imul(I,z)|0)+Math.imul(N,Z)|0,o=o+Math.imul(N,z)|0,n=n+Math.imul(E,V)|0,i=(i=i+Math.imul(E,W)|0)+Math.imul(T,V)|0,o=o+Math.imul(T,W)|0,n=n+Math.imul(B,$)|0,i=(i=i+Math.imul(B,X)|0)+Math.imul(P,$)|0,o=o+Math.imul(P,X)|0,n=n+Math.imul(x,Q)|0,i=(i=i+Math.imul(x,tt)|0)+Math.imul(A,Q)|0,o=o+Math.imul(A,tt)|0,n=n+Math.imul(M,rt)|0,i=(i=i+Math.imul(M,nt)|0)+Math.imul(b,rt)|0,o=o+Math.imul(b,nt)|0,n=n+Math.imul(v,ot)|0,i=(i=i+Math.imul(v,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,n=n+Math.imul(p,ut)|0,i=(i=i+Math.imul(p,ht)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,ht)|0;var At=(h+(n=n+Math.imul(c,ct)|0)|0)+((8191&(i=(i=i+Math.imul(c,lt)|0)+Math.imul(l,ct)|0))<<13)|0;h=((o=o+Math.imul(l,lt)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(F,q),i=(i=Math.imul(F,D))+Math.imul(H,q)|0,o=Math.imul(H,D),n=n+Math.imul(j,Z)|0,i=(i=i+Math.imul(j,z)|0)+Math.imul(O,Z)|0,o=o+Math.imul(O,z)|0,n=n+Math.imul(I,V)|0,i=(i=i+Math.imul(I,W)|0)+Math.imul(N,V)|0,o=o+Math.imul(N,W)|0,n=n+Math.imul(E,$)|0,i=(i=i+Math.imul(E,X)|0)+Math.imul(T,$)|0,o=o+Math.imul(T,X)|0,n=n+Math.imul(B,Q)|0,i=(i=i+Math.imul(B,tt)|0)+Math.imul(P,Q)|0,o=o+Math.imul(P,tt)|0,n=n+Math.imul(x,rt)|0,i=(i=i+Math.imul(x,nt)|0)+Math.imul(A,rt)|0,o=o+Math.imul(A,nt)|0,n=n+Math.imul(M,ot)|0,i=(i=i+Math.imul(M,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,n=n+Math.imul(v,ut)|0,i=(i=i+Math.imul(v,ht)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,ht)|0,n=n+Math.imul(p,ct)|0,i=(i=i+Math.imul(p,lt)|0)+Math.imul(m,ct)|0,o=o+Math.imul(m,lt)|0;var kt=(h+(n=n+Math.imul(c,pt)|0)|0)+((8191&(i=(i=i+Math.imul(c,mt)|0)+Math.imul(l,pt)|0))<<13)|0;h=((o=o+Math.imul(l,mt)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(F,Z),i=(i=Math.imul(F,z))+Math.imul(H,Z)|0,o=Math.imul(H,z),n=n+Math.imul(j,V)|0,i=(i=i+Math.imul(j,W)|0)+Math.imul(O,V)|0,o=o+Math.imul(O,W)|0,n=n+Math.imul(I,$)|0,i=(i=i+Math.imul(I,X)|0)+Math.imul(N,$)|0,o=o+Math.imul(N,X)|0,n=n+Math.imul(E,Q)|0,i=(i=i+Math.imul(E,tt)|0)+Math.imul(T,Q)|0,o=o+Math.imul(T,tt)|0,n=n+Math.imul(B,rt)|0,i=(i=i+Math.imul(B,nt)|0)+Math.imul(P,rt)|0,o=o+Math.imul(P,nt)|0,n=n+Math.imul(x,ot)|0,i=(i=i+Math.imul(x,st)|0)+Math.imul(A,ot)|0,o=o+Math.imul(A,st)|0,n=n+Math.imul(M,ut)|0,i=(i=i+Math.imul(M,ht)|0)+Math.imul(b,ut)|0,o=o+Math.imul(b,ht)|0,n=n+Math.imul(v,ct)|0,i=(i=i+Math.imul(v,lt)|0)+Math.imul(y,ct)|0,o=o+Math.imul(y,lt)|0;var Bt=(h+(n=n+Math.imul(p,pt)|0)|0)+((8191&(i=(i=i+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;h=((o=o+Math.imul(m,mt)|0)+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,n=Math.imul(F,V),i=(i=Math.imul(F,W))+Math.imul(H,V)|0,o=Math.imul(H,W),n=n+Math.imul(j,$)|0,i=(i=i+Math.imul(j,X)|0)+Math.imul(O,$)|0,o=o+Math.imul(O,X)|0,n=n+Math.imul(I,Q)|0,i=(i=i+Math.imul(I,tt)|0)+Math.imul(N,Q)|0,o=o+Math.imul(N,tt)|0,n=n+Math.imul(E,rt)|0,i=(i=i+Math.imul(E,nt)|0)+Math.imul(T,rt)|0,o=o+Math.imul(T,nt)|0,n=n+Math.imul(B,ot)|0,i=(i=i+Math.imul(B,st)|0)+Math.imul(P,ot)|0,o=o+Math.imul(P,st)|0,n=n+Math.imul(x,ut)|0,i=(i=i+Math.imul(x,ht)|0)+Math.imul(A,ut)|0,o=o+Math.imul(A,ht)|0,n=n+Math.imul(M,ct)|0,i=(i=i+Math.imul(M,lt)|0)+Math.imul(b,ct)|0,o=o+Math.imul(b,lt)|0;var Pt=(h+(n=n+Math.imul(v,pt)|0)|0)+((8191&(i=(i=i+Math.imul(v,mt)|0)+Math.imul(y,pt)|0))<<13)|0;h=((o=o+Math.imul(y,mt)|0)+(i>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,n=Math.imul(F,$),i=(i=Math.imul(F,X))+Math.imul(H,$)|0,o=Math.imul(H,X),n=n+Math.imul(j,Q)|0,i=(i=i+Math.imul(j,tt)|0)+Math.imul(O,Q)|0,o=o+Math.imul(O,tt)|0,n=n+Math.imul(I,rt)|0,i=(i=i+Math.imul(I,nt)|0)+Math.imul(N,rt)|0,o=o+Math.imul(N,nt)|0,n=n+Math.imul(E,ot)|0,i=(i=i+Math.imul(E,st)|0)+Math.imul(T,ot)|0,o=o+Math.imul(T,st)|0,n=n+Math.imul(B,ut)|0,i=(i=i+Math.imul(B,ht)|0)+Math.imul(P,ut)|0,o=o+Math.imul(P,ht)|0,n=n+Math.imul(x,ct)|0,i=(i=i+Math.imul(x,lt)|0)+Math.imul(A,ct)|0,o=o+Math.imul(A,lt)|0;var St=(h+(n=n+Math.imul(M,pt)|0)|0)+((8191&(i=(i=i+Math.imul(M,mt)|0)+Math.imul(b,pt)|0))<<13)|0;h=((o=o+Math.imul(b,mt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(F,Q),i=(i=Math.imul(F,tt))+Math.imul(H,Q)|0,o=Math.imul(H,tt),n=n+Math.imul(j,rt)|0,i=(i=i+Math.imul(j,nt)|0)+Math.imul(O,rt)|0,o=o+Math.imul(O,nt)|0,n=n+Math.imul(I,ot)|0,i=(i=i+Math.imul(I,st)|0)+Math.imul(N,ot)|0,o=o+Math.imul(N,st)|0,n=n+Math.imul(E,ut)|0,i=(i=i+Math.imul(E,ht)|0)+Math.imul(T,ut)|0,o=o+Math.imul(T,ht)|0,n=n+Math.imul(B,ct)|0,i=(i=i+Math.imul(B,lt)|0)+Math.imul(P,ct)|0,o=o+Math.imul(P,lt)|0;var Et=(h+(n=n+Math.imul(x,pt)|0)|0)+((8191&(i=(i=i+Math.imul(x,mt)|0)+Math.imul(A,pt)|0))<<13)|0;h=((o=o+Math.imul(A,mt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(F,rt),i=(i=Math.imul(F,nt))+Math.imul(H,rt)|0,o=Math.imul(H,nt),n=n+Math.imul(j,ot)|0,i=(i=i+Math.imul(j,st)|0)+Math.imul(O,ot)|0,o=o+Math.imul(O,st)|0,n=n+Math.imul(I,ut)|0,i=(i=i+Math.imul(I,ht)|0)+Math.imul(N,ut)|0,o=o+Math.imul(N,ht)|0,n=n+Math.imul(E,ct)|0,i=(i=i+Math.imul(E,lt)|0)+Math.imul(T,ct)|0,o=o+Math.imul(T,lt)|0;var Tt=(h+(n=n+Math.imul(B,pt)|0)|0)+((8191&(i=(i=i+Math.imul(B,mt)|0)+Math.imul(P,pt)|0))<<13)|0;h=((o=o+Math.imul(P,mt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,n=Math.imul(F,ot),i=(i=Math.imul(F,st))+Math.imul(H,ot)|0,o=Math.imul(H,st),n=n+Math.imul(j,ut)|0,i=(i=i+Math.imul(j,ht)|0)+Math.imul(O,ut)|0,o=o+Math.imul(O,ht)|0,n=n+Math.imul(I,ct)|0,i=(i=i+Math.imul(I,lt)|0)+Math.imul(N,ct)|0,o=o+Math.imul(N,lt)|0;var Ct=(h+(n=n+Math.imul(E,pt)|0)|0)+((8191&(i=(i=i+Math.imul(E,mt)|0)+Math.imul(T,pt)|0))<<13)|0;h=((o=o+Math.imul(T,mt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,n=Math.imul(F,ut),i=(i=Math.imul(F,ht))+Math.imul(H,ut)|0,o=Math.imul(H,ht),n=n+Math.imul(j,ct)|0,i=(i=i+Math.imul(j,lt)|0)+Math.imul(O,ct)|0,o=o+Math.imul(O,lt)|0;var It=(h+(n=n+Math.imul(I,pt)|0)|0)+((8191&(i=(i=i+Math.imul(I,mt)|0)+Math.imul(N,pt)|0))<<13)|0;h=((o=o+Math.imul(N,mt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863,n=Math.imul(F,ct),i=(i=Math.imul(F,lt))+Math.imul(H,ct)|0,o=Math.imul(H,lt);var Nt=(h+(n=n+Math.imul(j,pt)|0)|0)+((8191&(i=(i=i+Math.imul(j,mt)|0)+Math.imul(O,pt)|0))<<13)|0;h=((o=o+Math.imul(O,mt)|0)+(i>>>13)|0)+(Nt>>>26)|0,Nt&=67108863;var Lt=(h+(n=Math.imul(F,pt))|0)+((8191&(i=(i=Math.imul(F,mt))+Math.imul(H,pt)|0))<<13)|0;return h=((o=Math.imul(H,mt))+(i>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,u[0]=gt,u[1]=vt,u[2]=yt,u[3]=wt,u[4]=Mt,u[5]=bt,u[6]=_t,u[7]=xt,u[8]=At,u[9]=kt,u[10]=Bt,u[11]=Pt,u[12]=St,u[13]=Et,u[14]=Tt,u[15]=Ct,u[16]=It,u[17]=Nt,u[18]=Lt,0!==h&&(u[19]=h,r.length++),r};function v(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,u=Math.min(o,e.length-1),h=Math.max(0,o-t.length+1);h<=u;h++){var f=o-h,c=(0|t.words[f])*(0|e.words[h]),l=67108863&c;a=67108863&(l=l+a|0),i+=(s=(s=s+(c/67108864|0)|0)+(l>>>26)|0)>>>26,s&=67108863}r.words[o]=a,n=s,s=i}return 0!==n?r.words[o]=n:r.length--,r._strip()}function y(t,e,r){return v(t,e,r)}function w(t,e){this.x=t,this.y=e}Math.imul||(g=m),o.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?g(this,t,e):r<63?m(this,t,e):r<1024?v(this,t,e):y(this,t,e)},w.prototype.makeRBT=function(t){for(var e=new Array(t),r=o.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},w.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},w.prototype.permute=function(t,e,r,n,i,o){for(var s=0;s<o;s++)n[s]=e[t[s]],i[s]=r[t[s]]},w.prototype.transform=function(t,e,r,n,i,o){this.permute(o,t,e,r,n,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,u=Math.cos(2*Math.PI/a),h=Math.sin(2*Math.PI/a),f=0;f<i;f+=a)for(var c=u,l=h,d=0;d<s;d++){var p=r[f+d],m=n[f+d],g=r[f+d+s],v=n[f+d+s],y=c*g-l*v;v=c*v+l*g,g=y,r[f+d]=p+g,n[f+d]=m+v,r[f+d+s]=p-g,n[f+d+s]=m-v,d!==a&&(y=u*c-h*l,l=u*l+h*c,c=y)}},w.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},w.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},w.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},w.prototype.convert13b=function(t,e,r,i){for(var o=0,s=0;s<e;s++)o+=0|t[s],r[2*s]=8191&o,o>>>=13,r[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<i;++s)r[s]=0;n(0===o),n(0==(-8192&o))},w.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},w.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),u=new Array(n),h=new Array(n),f=new Array(n),c=new Array(n),l=r.words;l.length=n,this.convert13b(t.words,t.length,s,n),this.convert13b(e.words,e.length,h,n),this.transform(s,o,a,u,n,i),this.transform(h,o,f,c,n,i);for(var d=0;d<n;d++){var p=a[d]*f[d]-u[d]*c[d];u[d]=a[d]*c[d]+u[d]*f[d],a[d]=p}return this.conjugate(a,u,n),this.transform(a,u,l,o,n,i),this.conjugate(l,o,n),this.normalize13b(l,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r._strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),y(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){var e=t<0;e&&(t=-t),n("number"==typeof t),n(t<67108864);for(var r=0,i=0;i<this.length;i++){var o=(0|this.words[i])*t,s=(67108863&o)+(67108863&r);r>>=26,r+=o/67108864|0,r+=s>>>26,this.words[i]=67108863&s}return 0!==r&&(this.words[i]=r,this.length++),e?this.ineg():this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=t.words[n]>>>i&1}return e}(t);if(0===e.length)return new o(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var i=r.sqr();n<e.length;n++,i=i.sqr())0!==e[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(t){n("number"==typeof t&&t>=0);var e,r=t%26,i=(t-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var s=0;for(e=0;e<this.length;e++){var a=this.words[e]&o,u=(0|this.words[e])-a<<r;this.words[e]=u|s,s=a>>>26-r}s&&(this.words[e]=s,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this._strip()},o.prototype.ishln=function(t){return n(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,r){var i;n("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),a=67108863^67108863>>>o<<o,u=r;if(i-=s,i=Math.max(0,i),u){for(var h=0;h<s;h++)u.words[h]=this.words[h];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,h=0;h<this.length;h++)this.words[h]=this.words[h+s];else this.words[0]=0,this.length=1;var f=0;for(h=this.length-1;h>=0&&(0!==f||h>=i);h--){var c=0|this.words[h];this.words[h]=f<<26-o|c>>>o,f=c&a}return u&&0!==f&&(u.words[u.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},o.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,i=1<<e;return!(this.length<=r)&&!!(this.words[r]&i)},o.prototype.imaskn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this._strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return n("number"==typeof t),n(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<=t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(n("number"==typeof t),n(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this._strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,r){var i,o,s=t.length+r;this._expand(s);var a=0;for(i=0;i<t.length;i++){o=(0|this.words[i+r])+a;var u=(0|t.words[i])*e;a=((o-=67108863&u)>>26)-(u/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)a=(o=(0|this.words[i+r])+a)>>26,this.words[i+r]=67108863&o;if(0===a)return this._strip();for(n(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this._strip()},o.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,s=0|i.words[i.length-1];0!==(r=26-this._countBits(s))&&(i=i.ushln(r),n.iushln(r),s=0|i.words[i.length-1]);var a,u=n.length-i.length;if("mod"!==e){(a=new o(null)).length=u+1,a.words=new Array(a.length);for(var h=0;h<a.length;h++)a.words[h]=0}var f=n.clone()._ishlnsubmul(i,1,u);0===f.negative&&(n=f,a&&(a.words[u]=1));for(var c=u-1;c>=0;c--){var l=67108864*(0|n.words[i.length+c])+(0|n.words[i.length+c-1]);for(l=Math.min(l/s|0,67108863),n._ishlnsubmul(i,l,c);0!==n.negative;)l--,n.negative=0,n._ishlnsubmul(i,1,c),n.isZero()||(n.negative^=1);a&&(a.words[c]=l)}return a&&a._strip(),n._strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:a||null,mod:n}},o.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(a=this.neg().divmod(t,e),"mod"!==e&&(i=a.div.neg()),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.iadd(t)),{div:i,mod:s}):0===this.negative&&0!==t.negative?(a=this.divmod(t.neg(),e),"mod"!==e&&(i=a.div.neg()),{div:i,mod:a.mod}):0!=(this.negative&t.negative)?(a=this.neg().divmod(t.neg(),e),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.isub(t)),{div:a.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modrn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modrn(t.words[0]))}:this._wordDiv(t,e);var i,s,a},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modrn=function(t){var e=t<0;e&&(t=-t),n(t<=67108863);for(var r=(1<<26)%t,i=0,o=this.length-1;o>=0;o--)i=(r*i+(0|this.words[o]))%t;return e?-i:i},o.prototype.modn=function(t){return this.modrn(t)},o.prototype.idivn=function(t){var e=t<0;e&&(t=-t),n(t<=67108863);for(var r=0,i=this.length-1;i>=0;i--){var o=(0|this.words[i])+67108864*r;this.words[i]=o/t|0,r=o%t}return this._strip(),e?this.ineg():this},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),s=new o(0),a=new o(0),u=new o(1),h=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++h;for(var f=r.clone(),c=e.clone();!e.isZero();){for(var l=0,d=1;0==(e.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(e.iushrn(l);l-- >0;)(i.isOdd()||s.isOdd())&&(i.iadd(f),s.isub(c)),i.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(r.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(a.isOdd()||u.isOdd())&&(a.iadd(f),u.isub(c)),a.iushrn(1),u.iushrn(1);e.cmp(r)>=0?(e.isub(r),i.isub(a),s.isub(u)):(r.isub(e),a.isub(i),u.isub(s))}return{a:a,b:u,gcd:r.iushln(h)}},o.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,s=new o(1),a=new o(0),u=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var h=0,f=1;0==(e.words[0]&f)&&h<26;++h,f<<=1);if(h>0)for(e.iushrn(h);h-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var c=0,l=1;0==(r.words[0]&l)&&c<26;++c,l<<=1);if(c>0)for(r.iushrn(c);c-- >0;)a.isOdd()&&a.iadd(u),a.iushrn(1);e.cmp(r)>=0?(e.isub(r),s.isub(a)):(r.isub(e),a.isub(s))}return(i=0===e.cmpn(1)?s:a).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var o=e;e=r,r=o}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){n("number"==typeof t);var e=t%26,r=(t-e)/26,i=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,s=r;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this._strip(),this.length>1)e=1;else{r&&(t=-t),n(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new B(t)},o.prototype.toRed=function(t){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return n(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return n(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var M={k256:null,p224:null,p192:null,p25519:null};function b(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function _(){b.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function x(){b.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function A(){b.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function k(){b.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function B(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function P(t){B.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}b.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},b.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},b.prototype.split=function(t,e){t.iushrn(this.n,0,e)},b.prototype.imulK=function(t){return t.imul(this.k)},i(_,b),_.prototype.split=function(t,e){for(var r=4194303,n=Math.min(t.length,9),i=0;i<n;i++)e.words[i]=t.words[i];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,i=10;i<t.length;i++){var s=0|t.words[i];t.words[i-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[i-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},_.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(x,b),i(A,b),i(k,b),k.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(M[t])return M[t];var e;if("k256"===t)e=new _;else if("p224"===t)e=new x;else if("p192"===t)e=new A;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new k}return M[t]=e,e},B.prototype._verify1=function(t){n(0===t.negative,"red works only with positives"),n(t.red,"red works only with red numbers")},B.prototype._verify2=function(t,e){n(0==(t.negative|e.negative),"red works only with positives"),n(t.red&&t.red===e.red,"red works only with red numbers")},B.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):(f(t,t.umod(this.m)._forceRed(this)),t)},B.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},B.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},B.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},B.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},B.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},B.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},B.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},B.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},B.prototype.isqr=function(t){return this.imul(t,t.clone())},B.prototype.sqr=function(t){return this.mul(t,t)},B.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new o(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),s=0;!i.isZero()&&0===i.andln(1);)s++,i.iushrn(1);n(!i.isZero());var a=new o(1).toRed(this),u=a.redNeg(),h=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,h).cmp(u);)f.redIAdd(u);for(var c=this.pow(f,i),l=this.pow(t,i.addn(1).iushrn(1)),d=this.pow(t,i),p=s;0!==d.cmp(a);){for(var m=d,g=0;0!==m.cmp(a);g++)m=m.redSqr();n(g<p);var v=this.pow(c,new o(1).iushln(p-g-1));l=l.redMul(v),c=v.redSqr(),d=d.redMul(c),p=g}return l},B.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},B.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var i=r[0],s=0,a=0,u=e.bitLength()%26;for(0===u&&(u=26),n=e.length-1;n>=0;n--){for(var h=e.words[n],f=u-1;f>=0;f--){var c=h>>f&1;i!==r[0]&&(i=this.sqr(i)),0!==c||0!==s?(s<<=1,s|=c,(4===++a||0===n&&0===f)&&(i=this.mul(i,r[s]),a=0,s=0)):a=0}u=26}return i},B.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},B.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new P(t)},i(P,B),P.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},P.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},P.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},P.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),s=i;return i.cmp(this.m)>=0?s=i.isub(this.m):i.cmpn(0)<0&&(s=i.iadd(this.m)),s._forceRed(this)},P.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=r.nmd(t),this)},14354:function(t,e,r){"use strict";var n=r(23085).Buffer,i=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)s.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return s},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.isZeroAddress=e.zeroAddress=e.importPublic=e.privateToAddress=e.privateToPublic=e.publicToAddress=e.pubToAddress=e.isValidPublic=e.isValidPrivate=e.generateAddress2=e.generateAddress=e.isValidChecksumAddress=e.toChecksumAddress=e.isValidAddress=e.Account=void 0;var s=o(r(69282)),a=r(3215),u=r(95053),h=r(27006),f=r(26921),c=r(23064),l=r(14177),d=r(90316),p=r(76538),m=function(){function t(t,e,r,n){void 0===t&&(t=new a.BN(0)),void 0===e&&(e=new a.BN(0)),void 0===r&&(r=f.KECCAK256_RLP),void 0===n&&(n=f.KECCAK256_NULL),this.nonce=t,this.balance=e,this.stateRoot=r,this.codeHash=n,this._validate()}return t.fromAccountData=function(e){var r=e.nonce,n=e.balance,i=e.stateRoot,o=e.codeHash;return new t(r?new a.BN((0,c.toBuffer)(r)):void 0,n?new a.BN((0,c.toBuffer)(n)):void 0,i?(0,c.toBuffer)(i):void 0,o?(0,c.toBuffer)(o):void 0)},t.fromRlpSerializedAccount=function(t){var e=a.rlp.decode(t);if(!Array.isArray(e))throw new Error("Invalid serialized account input. Must be array");return this.fromValuesArray(e)},t.fromValuesArray=function(e){var r=i(e,4),n=r[0],o=r[1],s=r[2],u=r[3];return new t(new a.BN(n),new a.BN(o),s,u)},t.prototype._validate=function(){if(this.nonce.lt(new a.BN(0)))throw new Error("nonce must be greater than zero");if(this.balance.lt(new a.BN(0)))throw new Error("balance must be greater than zero");if(32!==this.stateRoot.length)throw new Error("stateRoot must have a length of 32");if(32!==this.codeHash.length)throw new Error("codeHash must have a length of 32")},t.prototype.raw=function(){return[(0,p.bnToUnpaddedBuffer)(this.nonce),(0,p.bnToUnpaddedBuffer)(this.balance),this.stateRoot,this.codeHash]},t.prototype.serialize=function(){return a.rlp.encode(this.raw())},t.prototype.isContract=function(){return!this.codeHash.equals(f.KECCAK256_NULL)},t.prototype.isEmpty=function(){return this.balance.isZero()&&this.nonce.isZero()&&this.codeHash.equals(f.KECCAK256_NULL)},t}();e.Account=m;e.isValidAddress=function(t){try{(0,d.assertIsString)(t)}catch(t){return!1}return/^0x[0-9a-fA-F]{40}$/.test(t)};e.toChecksumAddress=function(t,e){(0,d.assertIsHexString)(t);var r=(0,h.stripHexPrefix)(t).toLowerCase(),n="";e&&(n=(0,p.toType)(e,p.TypeOutput.BN).toString()+"0x");for(var i=(0,l.keccakFromString)(n+r).toString("hex"),o="0x",s=0;s<r.length;s++)parseInt(i[s],16)>=8?o+=r[s].toUpperCase():o+=r[s];return o};e.isValidChecksumAddress=function(t,r){return(0,e.isValidAddress)(t)&&(0,e.toChecksumAddress)(t,r)===t};e.generateAddress=function(t,e){(0,d.assertIsBuffer)(t),(0,d.assertIsBuffer)(e);var r=new a.BN(e);return r.isZero()?(0,l.rlphash)([t,null]).slice(-20):(0,l.rlphash)([t,n.from(r.toArray())]).slice(-20)};e.generateAddress2=function(t,e,r){return(0,d.assertIsBuffer)(t),(0,d.assertIsBuffer)(e),(0,d.assertIsBuffer)(r),(0,s.default)(20===t.length),(0,s.default)(32===e.length),(0,l.keccak256)(n.concat([n.from("ff","hex"),t,e,(0,l.keccak256)(r)])).slice(-20)};e.isValidPrivate=function(t){return(0,u.privateKeyVerify)(t)};e.isValidPublic=function(t,e){return void 0===e&&(e=!1),(0,d.assertIsBuffer)(t),64===t.length?(0,u.publicKeyVerify)(n.concat([n.from([4]),t])):!!e&&(0,u.publicKeyVerify)(t)};e.pubToAddress=function(t,e){return void 0===e&&(e=!1),(0,d.assertIsBuffer)(t),e&&64!==t.length&&(t=n.from((0,u.publicKeyConvert)(t,!1).slice(1))),(0,s.default)(64===t.length),(0,l.keccak)(t).slice(-20)},e.publicToAddress=e.pubToAddress;e.privateToPublic=function(t){return(0,d.assertIsBuffer)(t),n.from((0,u.publicKeyCreate)(t,!1)).slice(1)};e.privateToAddress=function(t){return(0,e.publicToAddress)((0,e.privateToPublic)(t))};e.importPublic=function(t){return(0,d.assertIsBuffer)(t),64!==t.length&&(t=n.from((0,u.publicKeyConvert)(t,!1).slice(1))),t};e.zeroAddress=function(){var t=(0,c.zeros)(20);return(0,c.bufferToHex)(t)};e.isZeroAddress=function(t){try{(0,d.assertIsString)(t)}catch(t){return!1}return(0,e.zeroAddress)()===t}},74741:function(t,e,r){"use strict";var n=r(23085).Buffer,i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Address=void 0;var o=i(r(69282)),s=r(3215),a=r(23064),u=r(14354),h=function(){function t(t){(0,o.default)(20===t.length,"Invalid address length"),this.buf=t}return t.zero=function(){return new t((0,a.zeros)(20))},t.fromString=function(e){return(0,o.default)((0,u.isValidAddress)(e),"Invalid address"),new t((0,a.toBuffer)(e))},t.fromPublicKey=function(e){return(0,o.default)(n.isBuffer(e),"Public key should be Buffer"),new t((0,u.pubToAddress)(e))},t.fromPrivateKey=function(e){return(0,o.default)(n.isBuffer(e),"Private key should be Buffer"),new t((0,u.privateToAddress)(e))},t.generate=function(e,r){return(0,o.default)(s.BN.isBN(r)),new t((0,u.generateAddress)(e.buf,r.toArrayLike(n)))},t.generate2=function(e,r,i){return(0,o.default)(n.isBuffer(r)),(0,o.default)(n.isBuffer(i)),new t((0,u.generateAddress2)(e.buf,r,i))},t.prototype.equals=function(t){return this.buf.equals(t.buf)},t.prototype.isZero=function(){return this.equals(t.zero())},t.prototype.isPrecompileOrSystemAddress=function(){var t=new s.BN(this.buf),e=new s.BN(0),r=new s.BN("ffff","hex");return t.gte(e)&&t.lte(r)},t.prototype.toString=function(){return"0x"+this.buf.toString("hex")},t.prototype.toBuffer=function(){return n.from(this.buf)},t}();e.Address=h},23064:function(t,e,r){"use strict";var n=r(23085).Buffer,i=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)s.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return s};Object.defineProperty(e,"__esModule",{value:!0}),e.bufArrToArr=e.arrToBufArr=e.validateNoLeadingZeroes=e.baToJSON=e.toUtf8=e.addHexPrefix=e.toUnsigned=e.fromSigned=e.bufferToHex=e.bufferToInt=e.toBuffer=e.unpadHexString=e.unpadArray=e.unpadBuffer=e.setLengthRight=e.setLengthLeft=e.zeros=e.intToBuffer=e.intToHex=void 0;var s=r(3215),a=r(27006),u=r(90316);e.intToHex=function(t){if(!Number.isSafeInteger(t)||t<0)throw new Error("Received an invalid integer type: ".concat(t));return"0x".concat(t.toString(16))};e.intToBuffer=function(t){var r=(0,e.intToHex)(t);return n.from((0,a.padToEven)(r.slice(2)),"hex")};e.zeros=function(t){return n.allocUnsafe(t).fill(0)};var h=function(t,r,n){var i=(0,e.zeros)(r);return n?t.length<r?(t.copy(i),i):t.slice(0,r):t.length<r?(t.copy(i,r-t.length),i):t.slice(-r)};e.setLengthLeft=function(t,e){return(0,u.assertIsBuffer)(t),h(t,e,!1)};e.setLengthRight=function(t,e){return(0,u.assertIsBuffer)(t),h(t,e,!0)};var f=function(t){for(var e=t[0];t.length>0&&"0"===e.toString();)e=(t=t.slice(1))[0];return t};e.unpadBuffer=function(t){return(0,u.assertIsBuffer)(t),f(t)};e.unpadArray=function(t){return(0,u.assertIsArray)(t),f(t)};e.unpadHexString=function(t){return(0,u.assertIsHexString)(t),t=(0,a.stripHexPrefix)(t),f(t)};e.toBuffer=function(t){if(null==t)return n.allocUnsafe(0);if(n.isBuffer(t))return n.from(t);if(Array.isArray(t)||t instanceof Uint8Array)return n.from(t);if("string"==typeof t){if(!(0,a.isHexString)(t))throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(t));return n.from((0,a.padToEven)((0,a.stripHexPrefix)(t)),"hex")}if("number"==typeof t)return(0,e.intToBuffer)(t);if(s.BN.isBN(t)){if(t.isNeg())throw new Error("Cannot convert negative BN to buffer. Given: ".concat(t));return t.toArrayLike(n)}if(t.toArray)return n.from(t.toArray());if(t.toBuffer)return n.from(t.toBuffer());throw new Error("invalid type")};e.bufferToInt=function(t){return new s.BN((0,e.toBuffer)(t)).toNumber()};e.bufferToHex=function(t){return"0x"+(t=(0,e.toBuffer)(t)).toString("hex")};e.fromSigned=function(t){return new s.BN(t).fromTwos(256)};e.toUnsigned=function(t){return n.from(t.toTwos(256).toArray())};e.addHexPrefix=function(t){return"string"!=typeof t||(0,a.isHexPrefixed)(t)?t:"0x"+t};e.toUtf8=function(t){if((t=(0,a.stripHexPrefix)(t)).length%2!=0)throw new Error("Invalid non-even hex string input for toUtf8() provided");return n.from(t.replace(/^(00)+|(00)+$/g,""),"hex").toString("utf8")};e.baToJSON=function(t){if(n.isBuffer(t))return"0x".concat(t.toString("hex"));if(t instanceof Array){for(var r=[],i=0;i<t.length;i++)r.push((0,e.baToJSON)(t[i]));return r}};e.validateNoLeadingZeroes=function(t){var e,r;try{for(var n=i(Object.entries(t)),s=n.next();!s.done;s=n.next()){var a=o(s.value,2),u=a[0],h=a[1];if(void 0!==h&&h.length>0&&0===h[0])throw new Error("".concat(u," cannot have leading zeroes, received: ").concat(h.toString("hex")))}}catch(t){e={error:t}}finally{try{s&&!s.done&&(r=n.return)&&r.call(n)}finally{if(e)throw e.error}}},e.arrToBufArr=function t(e){return Array.isArray(e)?e.map((function(e){return t(e)})):n.from(e)},e.bufArrToArr=function t(e){return Array.isArray(e)?e.map((function(e){return t(e)})):Uint8Array.from(null!=e?e:[])}},26921:function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.KECCAK256_RLP=e.KECCAK256_RLP_S=e.KECCAK256_RLP_ARRAY=e.KECCAK256_RLP_ARRAY_S=e.KECCAK256_NULL=e.KECCAK256_NULL_S=e.TWO_POW256=e.MAX_INTEGER=e.MAX_UINT64=void 0;var n=r(48764),i=r(3215);e.MAX_UINT64=new i.BN("ffffffffffffffff",16),e.MAX_INTEGER=new i.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),e.TWO_POW256=new i.BN("10000000000000000000000000000000000000000000000000000000000000000",16),e.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",e.KECCAK256_NULL=n.Buffer.from(e.KECCAK256_NULL_S,"hex"),e.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",e.KECCAK256_RLP_ARRAY=n.Buffer.from(e.KECCAK256_RLP_ARRAY_S,"hex"),e.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",e.KECCAK256_RLP=n.Buffer.from(e.KECCAK256_RLP_S,"hex")},3215:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&n(e,t,r);return i(e,t),e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.rlp=e.BN=void 0;var a=s(r(116));e.BN=a.default;var u=o(r(51675));e.rlp=u},14177:function(t,e,r){"use strict";var n=r(23085).Buffer;Object.defineProperty(e,"__esModule",{value:!0}),e.rlphash=e.ripemd160FromArray=e.ripemd160FromString=e.ripemd160=e.sha256FromArray=e.sha256FromString=e.sha256=e.keccakFromArray=e.keccakFromHexString=e.keccakFromString=e.keccak256=e.keccak=void 0;var i=r(82192),o=r(23482),s=r(3215),a=r(23064),u=r(90316);e.keccak=function(t,e){switch(void 0===e&&(e=256),(0,u.assertIsBuffer)(t),e){case 224:return(0,i.keccak224)(t);case 256:return(0,i.keccak256)(t);case 384:return(0,i.keccak384)(t);case 512:return(0,i.keccak512)(t);default:throw new Error("Invald algorithm: keccak".concat(e))}};e.keccak256=function(t){return(0,e.keccak)(t)};e.keccakFromString=function(t,r){void 0===r&&(r=256),(0,u.assertIsString)(t);var i=n.from(t,"utf8");return(0,e.keccak)(i,r)};e.keccakFromHexString=function(t,r){return void 0===r&&(r=256),(0,u.assertIsHexString)(t),(0,e.keccak)((0,a.toBuffer)(t),r)};e.keccakFromArray=function(t,r){return void 0===r&&(r=256),(0,u.assertIsArray)(t),(0,e.keccak)((0,a.toBuffer)(t),r)};var h=function(t){return t=(0,a.toBuffer)(t),o("sha256").update(t).digest()};e.sha256=function(t){return(0,u.assertIsBuffer)(t),h(t)};e.sha256FromString=function(t){return(0,u.assertIsString)(t),h(t)};e.sha256FromArray=function(t){return(0,u.assertIsArray)(t),h(t)};var f=function(t,e){t=(0,a.toBuffer)(t);var r=o("rmd160").update(t).digest();return!0===e?(0,a.setLengthLeft)(r,32):r};e.ripemd160=function(t,e){return(0,u.assertIsBuffer)(t),f(t,e)};e.ripemd160FromString=function(t,e){return(0,u.assertIsString)(t),f(t,e)};e.ripemd160FromArray=function(t,e){return(0,u.assertIsArray)(t),f(t,e)};e.rlphash=function(t){return(0,e.keccak)(s.rlp.encode(t))}},90316:function(t,e,r){"use strict";var n=r(23085).Buffer;Object.defineProperty(e,"__esModule",{value:!0}),e.assertIsString=e.assertIsArray=e.assertIsBuffer=e.assertIsHexString=void 0;var i=r(27006);e.assertIsHexString=function(t){if(!(0,i.isHexString)(t)){var e="This method only supports 0x-prefixed hex strings but input was: ".concat(t);throw new Error(e)}};e.assertIsBuffer=function(t){if(!n.isBuffer(t)){var e="This method only supports Buffer but input was: ".concat(t);throw new Error(e)}};e.assertIsArray=function(t){if(!Array.isArray(t)){var e="This method only supports number arrays but input was: ".concat(t);throw new Error(e)}};e.assertIsString=function(t){if("string"!=typeof t){var e="This method only supports strings but input was: ".concat(t);throw new Error(e)}}},53326:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),e.isHexString=e.getKeys=e.fromAscii=e.fromUtf8=e.toAscii=e.arrayContainsArray=e.getBinarySize=e.padToEven=e.stripHexPrefix=e.isHexPrefixed=void 0,i(r(26921),e),i(r(14354),e),i(r(74741),e),i(r(14177),e),i(r(2081),e),i(r(23064),e),i(r(96892),e),i(r(3215),e),i(r(76538),e);var o=r(27006);Object.defineProperty(e,"isHexPrefixed",{enumerable:!0,get:function(){return o.isHexPrefixed}}),Object.defineProperty(e,"stripHexPrefix",{enumerable:!0,get:function(){return o.stripHexPrefix}}),Object.defineProperty(e,"padToEven",{enumerable:!0,get:function(){return o.padToEven}}),Object.defineProperty(e,"getBinarySize",{enumerable:!0,get:function(){return o.getBinarySize}}),Object.defineProperty(e,"arrayContainsArray",{enumerable:!0,get:function(){return o.arrayContainsArray}}),Object.defineProperty(e,"toAscii",{enumerable:!0,get:function(){return o.toAscii}}),Object.defineProperty(e,"fromUtf8",{enumerable:!0,get:function(){return o.fromUtf8}}),Object.defineProperty(e,"fromAscii",{enumerable:!0,get:function(){return o.fromAscii}}),Object.defineProperty(e,"getKeys",{enumerable:!0,get:function(){return o.getKeys}}),Object.defineProperty(e,"isHexString",{enumerable:!0,get:function(){return o.isHexString}})},27006:function(t,e,r){"use strict";var n=r(23085).Buffer;function i(t){if("string"!=typeof t)throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof t));return"0"===t[0]&&"x"===t[1]}Object.defineProperty(e,"__esModule",{value:!0}),e.isHexString=e.getKeys=e.fromAscii=e.fromUtf8=e.toAscii=e.arrayContainsArray=e.getBinarySize=e.padToEven=e.stripHexPrefix=e.isHexPrefixed=void 0,e.isHexPrefixed=i;function o(t){var e=t;if("string"!=typeof e)throw new Error("[padToEven] value must be type 'string', received ".concat(typeof e));return e.length%2&&(e="0".concat(e)),e}e.stripHexPrefix=function(t){if("string"!=typeof t)throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof t));return i(t)?t.slice(2):t},e.padToEven=o,e.getBinarySize=function(t){if("string"!=typeof t)throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof t));return n.byteLength(t,"utf8")},e.arrayContainsArray=function(t,e,r){if(!0!==Array.isArray(t))throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof t,"'"));if(!0!==Array.isArray(e))throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof e,"'"));return e[r?"some":"every"]((function(e){return t.indexOf(e)>=0}))},e.toAscii=function(t){var e="",r=0,n=t.length;for("0x"===t.substring(0,2)&&(r=2);r<n;r+=2){var i=parseInt(t.substr(r,2),16);e+=String.fromCharCode(i)}return e},e.fromUtf8=function(t){var e=n.from(t,"utf8");return"0x".concat(o(e.toString("hex")).replace(/^0+|0+$/g,""))},e.fromAscii=function(t){for(var e="",r=0;r<t.length;r++){var n=t.charCodeAt(r).toString(16);e+=n.length<2?"0".concat(n):n}return"0x".concat(e)},e.getKeys=function(t,e,r){if(!Array.isArray(t))throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof t));if("string"!=typeof e)throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof t));for(var n=[],i=0;i<t.length;i++){var o=t[i][e];if(r&&!o)o="";else if("string"!=typeof o)throw new Error("invalid abi - expected type 'string', received ".concat(typeof o));n.push(o)}return n},e.isHexString=function(t,e){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/))&&(!e||t.length===2+2*e)}},96892:function(t,e,r){"use strict";var n=r(23085).Buffer,i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.defineProperties=void 0;var o=i(r(69282)),s=r(27006),a=r(3215),u=r(23064);e.defineProperties=function(t,e,r){if(t.raw=[],t._fields=[],t.toJSON=function(e){if(void 0===e&&(e=!1),e){var r={};return t._fields.forEach((function(e){r[e]="0x".concat(t[e].toString("hex"))})),r}return(0,u.baToJSON)(t.raw)},t.serialize=function(){return a.rlp.encode(t.raw)},e.forEach((function(e,r){function i(){return t.raw[r]}function s(i){"00"!==(i=(0,u.toBuffer)(i)).toString("hex")||e.allowZero||(i=n.allocUnsafe(0)),e.allowLess&&e.length?(i=(0,u.unpadBuffer)(i),(0,o.default)(e.length>=i.length,"The field ".concat(e.name," must not have more ").concat(e.length," bytes"))):e.allowZero&&0===i.length||!e.length||(0,o.default)(e.length===i.length,"The field ".concat(e.name," must have byte length of ").concat(e.length)),t.raw[r]=i}t._fields.push(e.name),Object.defineProperty(t,e.name,{enumerable:!0,configurable:!0,get:i,set:s}),e.default&&(t[e.name]=e.default),e.alias&&Object.defineProperty(t,e.alias,{enumerable:!1,configurable:!0,set:s,get:i})})),r)if("string"==typeof r&&(r=n.from((0,s.stripHexPrefix)(r),"hex")),n.isBuffer(r)&&(r=a.rlp.decode(r)),Array.isArray(r)){if(r.length>t._fields.length)throw new Error("wrong number of fields in data");r.forEach((function(e,r){t[t._fields[r]]=(0,u.toBuffer)(e)}))}else{if("object"!=typeof r)throw new Error("invalid data");var i=Object.keys(r);e.forEach((function(e){-1!==i.indexOf(e.name)&&(t[e.name]=r[e.name]),-1!==i.indexOf(e.alias)&&(t[e.alias]=r[e.alias])}))}}},2081:function(t,e,r){"use strict";var n=r(23085).Buffer;Object.defineProperty(e,"__esModule",{value:!0}),e.hashPersonalMessage=e.isValidSignature=e.fromRpcSig=e.toCompactSig=e.toRpcSig=e.ecrecover=e.ecsign=void 0;var i=r(95053),o=r(3215),s=r(23064),a=r(14177),u=r(90316),h=r(76538);function f(t,e){var r=(0,h.toType)(t,h.TypeOutput.BN);if(!e)return r.subn(27);var n=(0,h.toType)(e,h.TypeOutput.BN);return r.sub(n.muln(2).addn(35))}function c(t){var e=new o.BN(t);return e.eqn(0)||e.eqn(1)}e.ecsign=function(t,e,r){var o=(0,i.ecdsaSign)(t,e),s=o.signature,a=o.recid,u=n.from(s.slice(0,32)),f=n.from(s.slice(32,64));if(!r||"number"==typeof r){if(r&&!Number.isSafeInteger(r))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");return{r:u,s:f,v:r?a+(2*r+35):a+27}}return{r:u,s:f,v:(0,h.toType)(r,h.TypeOutput.BN).muln(2).addn(35).addn(a).toArrayLike(n)}};e.ecrecover=function(t,e,r,o,a){var u=n.concat([(0,s.setLengthLeft)(r,32),(0,s.setLengthLeft)(o,32)],64),h=f(e,a);if(!c(h))throw new Error("Invalid signature v value");var l=(0,i.ecdsaRecover)(u,h.toNumber(),t);return n.from((0,i.publicKeyConvert)(l,!1).slice(1))};e.toRpcSig=function(t,e,r,i){if(!c(f(t,i)))throw new Error("Invalid signature v value");return(0,s.bufferToHex)(n.concat([(0,s.setLengthLeft)(e,32),(0,s.setLengthLeft)(r,32),(0,s.toBuffer)(t)]))};e.toCompactSig=function(t,e,r,i){if(!c(f(t,i)))throw new Error("Invalid signature v value");var o=(0,h.toType)(t,h.TypeOutput.Number),a=r;return(o>28&&o%2==1||1===o||28===o)&&((a=n.from(r))[0]|=128),(0,s.bufferToHex)(n.concat([(0,s.setLengthLeft)(e,32),(0,s.setLengthLeft)(a,32)]))};e.fromRpcSig=function(t){var e,r,n,i=(0,s.toBuffer)(t);if(i.length>=65)e=i.slice(0,32),r=i.slice(32,64),n=(0,s.bufferToInt)(i.slice(64));else{if(64!==i.length)throw new Error("Invalid signature length");e=i.slice(0,32),r=i.slice(32,64),n=(0,s.bufferToInt)(i.slice(32,33))>>7,r[0]&=127}return n<27&&(n+=27),{v:n,r:e,s:r}};e.isValidSignature=function(t,e,r,n,i){void 0===n&&(n=!0);var s=new o.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),a=new o.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);if(32!==e.length||32!==r.length)return!1;if(!c(f(t,i)))return!1;var u=new o.BN(e),h=new o.BN(r);return!(u.isZero()||u.gt(a)||h.isZero()||h.gt(a))&&(!n||1!==h.cmp(s))};e.hashPersonalMessage=function(t){(0,u.assertIsBuffer)(t);var e=n.from("Ethereum Signed Message:\n".concat(t.length),"utf-8");return(0,a.keccak)(n.concat([e,t]))}},76538:function(t,e,r){"use strict";var n=r(23085).Buffer;Object.defineProperty(e,"__esModule",{value:!0}),e.toType=e.TypeOutput=e.bnToRlp=e.bnToUnpaddedBuffer=e.bnToHex=void 0;var i,o=r(3215),s=r(27006),a=r(23064);function u(t){return(0,a.unpadBuffer)(t.toArrayLike(n))}e.bnToHex=function(t){return"0x".concat(t.toString(16))},e.bnToUnpaddedBuffer=u,e.bnToRlp=function(t){return u(t)},function(t){t[t.Number=0]="Number",t[t.BN=1]="BN",t[t.Buffer=2]="Buffer",t[t.PrefixedHexString=3]="PrefixedHexString"}(i=e.TypeOutput||(e.TypeOutput={})),e.toType=function(t,e){if(null===t)return null;if(void 0!==t){if("string"==typeof t&&!(0,s.isHexString)(t))throw new Error("A string must be provided with a 0x-prefix, given: ".concat(t));if("number"==typeof t&&!Number.isSafeInteger(t))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");var r=(0,a.toBuffer)(t);if(e===i.Buffer)return r;if(e===i.BN)return new o.BN(r);if(e===i.Number){var n=new o.BN(r),u=new o.BN(Number.MAX_SAFE_INTEGER.toString());if(n.gt(u))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");return n.toNumber()}return"0x".concat(r.toString("hex"))}}},48410:function(t,e,r){var n=r(11225),i=r(91542),o=i;o.v1=n,o.v4=i,t.exports=o},52444:function(t){for(var e=[],r=0;r<256;++r)e[r]=(r+256).toString(16).substr(1);t.exports=function(t,r){var n=r||0,i=e;return[i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]]].join("")}},33960:function(t){var e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(e){var r=new Uint8Array(16);t.exports=function(){return e(r),r}}else{var n=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),n[e]=t>>>((3&e)<<3)&255;return n}}},11225:function(t,e,r){var n,i,o=r(33960),s=r(52444),a=0,u=0;t.exports=function(t,e,r){var h=e&&r||0,f=e||[],c=(t=t||{}).node||n,l=void 0!==t.clockseq?t.clockseq:i;if(null==c||null==l){var d=o();null==c&&(c=n=[1|d[0],d[1],d[2],d[3],d[4],d[5]]),null==l&&(l=i=16383&(d[6]<<8|d[7]))}var p=void 0!==t.msecs?t.msecs:(new Date).getTime(),m=void 0!==t.nsecs?t.nsecs:u+1,g=p-a+(m-u)/1e4;if(g<0&&void 0===t.clockseq&&(l=l+1&16383),(g<0||p>a)&&void 0===t.nsecs&&(m=0),m>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=p,u=m,i=l;var v=(1e4*(268435455&(p+=122192928e5))+m)%4294967296;f[h++]=v>>>24&255,f[h++]=v>>>16&255,f[h++]=v>>>8&255,f[h++]=255&v;var y=p/4294967296*1e4&268435455;f[h++]=y>>>8&255,f[h++]=255&y,f[h++]=y>>>24&15|16,f[h++]=y>>>16&255,f[h++]=l>>>8|128,f[h++]=255&l;for(var w=0;w<6;++w)f[h+w]=c[w];return e||s(f)}},91542:function(t,e,r){var n=r(33960),i=r(52444);t.exports=function(t,e,r){var o=e&&r||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var s=(t=t||{}).random||(t.rng||n)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,e)for(var a=0;a<16;++a)e[o+a]=s[a];return e||i(s)}},31692:function(t,e,r){"use strict";var n=r(25108),i=r(92928),o=r(93952),s=r(18269),a=r(96602).subscription,u=r(84390).formatters,h=r(84390).errors,f=r(4017),c=r(93338),l=function t(e,r,n){var o=this,a=Array.prototype.slice.call(arguments);if(!(this instanceof t))throw new Error('Please use the "new" keyword to instantiate a web3.eth.Contract() object!');if(this.setProvider=function(){i.packageInit(o,arguments),o.clearSubscriptions=o._requestManager.clearSubscriptions},i.packageInit(this,[this.constructor]),this.clearSubscriptions=this._requestManager.clearSubscriptions,!e||!Array.isArray(e))throw h.ContractMissingABIError();this.options={};var f=a[a.length-1];f&&"object"==typeof f&&!Array.isArray(f)&&(n=f,this.options={...this.options,...this._getOrSetDefaultOptions(n)},r&&"object"==typeof r&&(r=null)),Object.defineProperty(this.options,"address",{set:function(t){t&&(o._address=s.toChecksumAddress(u.inputAddressFormatter(t)))},get:function(){return o._address},enumerable:!0}),Object.defineProperty(this.options,"jsonInterface",{set:function(t){return o.methods={},o.events={},o._jsonInterface=t.map((function(t){var e,r;if(t.constant="view"===t.stateMutability||"pure"===t.stateMutability||t.constant,t.payable="payable"===t.stateMutability||t.payable,t.name&&(r=s._jsonInterfaceMethodToString(t)),"function"===t.type){if(t.signature=c.encodeFunctionSignature(r),e=o._createTxObject.bind({method:t,parent:o}),o.methods[t.name]){var n=o._createTxObject.bind({method:t,parent:o,nextMethod:o.methods[t.name]});o.methods[t.name]=n}else o.methods[t.name]=e;o.methods[t.signature]=e,o.methods[r]=e}else if("event"===t.type){t.signature=c.encodeEventSignature(r);var i=o._on.bind(o,t.signature);o.events[t.name]&&"bound "!==o.events[t.name].name||(o.events[t.name]=i),o.events[t.signature]=i,o.events[r]=i}return t})),o.events.allEvents=o._on.bind(o,"allevents"),o._jsonInterface},get:function(){return o._jsonInterface},enumerable:!0});var l=this.constructor.defaultAccount,d=this.constructor.defaultBlock||"latest";Object.defineProperty(this,"handleRevert",{get:function(){return!1===o.options.handleRevert||!0===o.options.handleRevert?o.options.handleRevert:this.constructor.handleRevert},set:function(t){o.options.handleRevert=t},enumerable:!0}),Object.defineProperty(this,"defaultCommon",{get:function(){return o.options.common||this.constructor.defaultCommon},set:function(t){o.options.common=t},enumerable:!0}),Object.defineProperty(this,"defaultHardfork",{get:function(){return o.options.hardfork||this.constructor.defaultHardfork},set:function(t){o.options.hardfork=t},enumerable:!0}),Object.defineProperty(this,"defaultChain",{get:function(){return o.options.chain||this.constructor.defaultChain},set:function(t){o.options.chain=t},enumerable:!0}),Object.defineProperty(this,"transactionPollingTimeout",{get:function(){return 0===o.options.transactionPollingTimeout?o.options.transactionPollingTimeout:o.options.transactionPollingTimeout||this.constructor.transactionPollingTimeout},set:function(t){o.options.transactionPollingTimeout=t},enumerable:!0}),Object.defineProperty(this,"transactionPollingInterval",{get:function(){return 0===o.options.transactionPollingInterval?o.options.transactionPollingInterval:o.options.transactionPollingInterval||this.constructor.transactionPollingInterval},set:function(t){o.options.transactionPollingInterval=t},enumerable:!0}),Object.defineProperty(this,"transactionConfirmationBlocks",{get:function(){return 0===o.options.transactionConfirmationBlocks?o.options.transactionConfirmationBlocks:o.options.transactionConfirmationBlocks||this.constructor.transactionConfirmationBlocks},set:function(t){o.options.transactionConfirmationBlocks=t},enumerable:!0}),Object.defineProperty(this,"transactionBlockTimeout",{get:function(){return 0===o.options.transactionBlockTimeout?o.options.transactionBlockTimeout:o.options.transactionBlockTimeout||this.constructor.transactionBlockTimeout},set:function(t){o.options.transactionBlockTimeout=t},enumerable:!0}),Object.defineProperty(this,"blockHeaderTimeout",{get:function(){return 0===o.options.blockHeaderTimeout?o.options.blockHeaderTimeout:o.options.blockHeaderTimeout||this.constructor.blockHeaderTimeout},set:function(t){o.options.blockHeaderTimeout=t},enumerable:!0}),Object.defineProperty(this,"defaultAccount",{get:function(){return l},set:function(t){return t&&(l=s.toChecksumAddress(u.inputAddressFormatter(t))),t},enumerable:!0}),Object.defineProperty(this,"defaultBlock",{get:function(){return d},set:function(t){return d=t,t},enumerable:!0}),this.methods={},this.events={},this._address=null,this._jsonInterface=[],this.options.address=r,this.options.jsonInterface=e};l.setProvider=function(t,e){i.packageInit(this,[t]),this._ethAccounts=e},l.prototype._getCallback=function(t){if(t&&t[t.length-1]&&"function"==typeof t[t.length-1])return t.pop()},l.prototype._checkListener=function(t,e){if(e===t)throw h.ContractReservedEventError(t)},l.prototype._getOrSetDefaultOptions=function(t){var e=t.gasPrice?String(t.gasPrice):null,r=t.from?s.toChecksumAddress(u.inputAddressFormatter(t.from)):null;return t.data=t.data||this.options.data,t.from=r||this.options.from,t.gasPrice=e||this.options.gasPrice,t.gas=t.gas||t.gasLimit||this.options.gas,delete t.gasLimit,t},l.prototype._encodeEventABI=function(t,e){var r=(e=e||{}).filter||{},n={};if(["fromBlock","toBlock"].filter((function(t){return void 0!==e[t]})).forEach((function(t){n[t]=u.inputBlockNumberFormatter(e[t])})),Array.isArray(e.topics))n.topics=e.topics;else{if(n.topics=[],t&&!t.anonymous&&"ALLEVENTS"!==t.name&&n.topics.push(t.signature),"ALLEVENTS"!==t.name){var i=t.inputs.filter((function(t){return!0===t.indexed})).map((function(t){var e=r[t.name];return e?Array.isArray(e)?e.map((function(e){return c.encodeParameter(t.type,e)})):c.encodeParameter(t.type,e):null}));n.topics=n.topics.concat(i)}n.topics.length||delete n.topics}return this.options.address&&(n.address=this.options.address.toLowerCase()),n},l.prototype._decodeEventABI=function(t){var e=this;t.data=t.data||"",t.topics=t.topics||[];var r=u.outputLogFormatter(t);if("ALLEVENTS"===e.name&&(e=e.jsonInterface.find((function(e){return e.signature===t.topics[0]}))||{anonymous:!0}),e.inputs=e.inputs||[],!e.anonymous){let r=0;e.inputs.forEach((t=>t.indexed?r++:null)),r>0&&t.topics.length!==r+1&&(e={anonymous:!0,inputs:[]})}var n=e.anonymous?t.topics:t.topics.slice(1);return r.returnValues=c.decodeLog(e.inputs,t.data,n),delete r.returnValues.__length__,r.event=e.name,r.signature=e.anonymous||!t.topics[0]?null:t.topics[0],r.raw={data:r.data,topics:r.topics},delete r.data,delete r.topics,r},l.prototype._encodeMethodABI=function(){var t=this._method.signature,e=this.arguments||[],r=!1,n=this._parent.options.jsonInterface.filter((function(e){return"constructor"===t&&e.type===t||(e.signature===t||e.signature===t.replace("0x","")||e.name===t)&&"function"===e.type})).map((function(t){var n=Array.isArray(t.inputs)?t.inputs.length:0;if(n!==e.length)throw new Error("The number of arguments is not matching the methods required number. You need to pass "+n+" arguments.");return"function"===t.type&&(r=t.signature),Array.isArray(t.inputs)?t.inputs:[]})).map((function(t){return c.encodeParameters(t,e).replace("0x","")}))[0]||"";if("constructor"===t){if(!this._deployData)throw new Error("The contract has no contract data option set. This is necessary to append the constructor parameters.");return this._deployData.startsWith("0x")||(this._deployData="0x"+this._deployData),this._deployData+n}var i=r?r+n:n;if(!i)throw new Error("Couldn't find a matching contract method named \""+this._method.name+'".');return i},l.prototype._decodeMethodReturn=function(t,e){if(!e)return null;e=e.length>=2?e.slice(2):e;var r=c.decodeParameters(t,e);return 1===r.__length__?r[0]:(delete r.__length__,r)},l.prototype.deploy=function(t,e){if((t=t||{}).arguments=t.arguments||[],!(t=this._getOrSetDefaultOptions(t)).data){if("function"==typeof e)return e(h.ContractMissingDeployDataError());throw h.ContractMissingDeployDataError()}var r=this.options.jsonInterface.find((t=>"constructor"===t.type))||{};return r.signature="constructor",this._createTxObject.apply({method:r,parent:this,deployData:t.data,_ethAccounts:this.constructor._ethAccounts},t.arguments)},l.prototype._generateEventOptions=function(){var t=Array.prototype.slice.call(arguments),e=this._getCallback(t),r="object"===(!!t[t.length-1]&&typeof t[t.length-1])?t.pop():{},n="string"==typeof t[0]?t[0]:"allevents",i="allevents"===n.toLowerCase()?{name:"ALLEVENTS",jsonInterface:this.options.jsonInterface}:this.options.jsonInterface.find((function(t){return"event"===t.type&&(t.name===n||t.signature==="0x"+n.replace("0x",""))}));if(!i)throw h.ContractEventDoesNotExistError(n);if(!s.isAddress(this.options.address))throw h.ContractNoAddressDefinedError();return{params:this._encodeEventABI(i,r),event:i,callback:e}},l.prototype.clone=function(){return new this.constructor(this.options.jsonInterface,this.options.address,this.options)},l.prototype.once=function(t,e,r){var n=Array.prototype.slice.call(arguments);if(!(r=this._getCallback(n)))throw h.ContractOnceRequiresCallbackError();e&&delete e.fromBlock,this._on(t,e,(function(t,e,n){n.unsubscribe(),"function"==typeof r&&r(t,e,n)}))},l.prototype._on=function(){var t=this._generateEventOptions.apply(this,arguments);t.params&&t.params.toBlock&&(delete t.params.toBlock,n.warn("Invalid option: toBlock. Use getPastEvents for specific range.")),this._checkListener("newListener",t.event.name),this._checkListener("removeListener",t.event.name);var e=new a({subscription:{params:1,inputFormatter:[u.inputLogFormatter],outputFormatter:this._decodeEventABI.bind(t.event),subscriptionHandler:function(t){t.removed?this.emit("changed",t):this.emit("data",t),"function"==typeof this.callback&&this.callback(null,t,this)}},type:"eth",requestManager:this._requestManager});return e.subscribe("logs",t.params,t.callback||function(){}),e},l.prototype.getPastEvents=function(){var t=this._generateEventOptions.apply(this,arguments),e=new o({name:"getPastLogs",call:"eth_getLogs",params:1,inputFormatter:[u.inputLogFormatter],outputFormatter:this._decodeEventABI.bind(t.event)});e.setRequestManager(this._requestManager);var r=e.buildCall();return e=null,r(t.params,t.callback)},l.prototype._createTxObject=function(){var t=Array.prototype.slice.call(arguments),e={};if("function"===this.method.type&&(e.call=this.parent._executeMethod.bind(e,"call"),e.call.request=this.parent._executeMethod.bind(e,"call",!0)),e.send=this.parent._executeMethod.bind(e,"send"),e.send.request=this.parent._executeMethod.bind(e,"send",!0),e.encodeABI=this.parent._encodeMethodABI.bind(e),e.estimateGas=this.parent._executeMethod.bind(e,"estimate"),e.createAccessList=this.parent._executeMethod.bind(e,"createAccessList"),t&&this.method.inputs&&t.length!==this.method.inputs.length){if(this.nextMethod)return this.nextMethod.apply(null,t);throw h.InvalidNumberOfParams(t.length,this.method.inputs.length,this.method.name)}return e.arguments=t||[],e._method=this.method,e._parent=this.parent,e._ethAccounts=this.parent.constructor._ethAccounts||this._ethAccounts,this.deployData&&(e._deployData=this.deployData),e},l.prototype._processExecuteArguments=function(t,e){var r={};if(r.type=t.shift(),r.callback=this._parent._getCallback(t),"call"!==r.type||!0===t[t.length-1]||"string"!=typeof t[t.length-1]&&!isFinite(t[t.length-1])||(r.defaultBlock=t.pop()),r.options="object"===(!!t[t.length-1]&&typeof t[t.length-1])?t.pop():{},r.generateRequest=!0===t[t.length-1]&&t.pop(),r.options=this._parent._getOrSetDefaultOptions(r.options),r.options.data=this.encodeABI(),!this._deployData&&!s.isAddress(this._parent.options.address))throw h.ContractNoAddressDefinedError();return this._deployData||(r.options.to=this._parent.options.address),r.options.data?r:s._fireError(new Error("Couldn't find a matching contract method, or the number of parameters is wrong."),e.eventEmitter,e.reject,r.callback)},l.prototype._executeMethod=function(){var t=this,e=this._parent._processExecuteArguments.call(this,Array.prototype.slice.call(arguments),r),r=f("send"!==e.type),n=t.constructor._ethAccounts||t._ethAccounts;if(e.generateRequest){var i={params:[u.inputCallFormatter.call(this._parent,e.options)],callback:e.callback};return"call"===e.type?(i.params.push(u.inputDefaultBlockNumberFormatter.call(this._parent,e.defaultBlock)),i.method="eth_call",i.format=this._parent._decodeMethodReturn.bind(null,this._method.outputs)):i.method="eth_sendTransaction",i}switch(e.type){case"createAccessList":if(!s.isAddress(e.options.from))return s._fireError(h.ContractNoFromAddressDefinedError(),r.eventEmitter,r.reject,e.callback);var a=new o({name:"createAccessList",call:"eth_createAccessList",params:2,inputFormatter:[u.inputTransactionFormatter,u.inputDefaultBlockNumberFormatter],requestManager:t._parent._requestManager,accounts:n,defaultAccount:t._parent.defaultAccount,defaultBlock:t._parent.defaultBlock}).createFunction();return a(e.options,e.callback);case"estimate":var l=new o({name:"estimateGas",call:"eth_estimateGas",params:1,inputFormatter:[u.inputCallFormatter],outputFormatter:s.hexToNumber,requestManager:t._parent._requestManager,accounts:n,defaultAccount:t._parent.defaultAccount,defaultBlock:t._parent.defaultBlock}).createFunction();return l(e.options,e.callback);case"call":var d=new o({name:"call",call:"eth_call",params:2,inputFormatter:[u.inputCallFormatter,u.inputDefaultBlockNumberFormatter],outputFormatter:function(e){return t._parent._decodeMethodReturn(t._method.outputs,e)},requestManager:t._parent._requestManager,accounts:n,defaultAccount:t._parent.defaultAccount,defaultBlock:t._parent.defaultBlock,handleRevert:t._parent.handleRevert,abiCoder:c}).createFunction();return d(e.options,e.defaultBlock,e.callback);case"send":if(!s.isAddress(e.options.from))return s._fireError(h.ContractNoFromAddressDefinedError(),r.eventEmitter,r.reject,e.callback);if("boolean"==typeof this._method.payable&&!this._method.payable&&e.options.value&&e.options.value>0)return s._fireError(new Error("Can not send value to non-payable contract method or constructor"),r.eventEmitter,r.reject,e.callback);var p={receiptFormatter:function(e){if(Array.isArray(e.logs)){var r=e.logs.map((e=>t._parent._decodeEventABI.call({name:"ALLEVENTS",jsonInterface:t._parent.options.jsonInterface},e)));e.events={};var n=0;r.forEach((function(t){t.event?e.events[t.event]?Array.isArray(e.events[t.event])?e.events[t.event].push(t):e.events[t.event]=[e.events[t.event],t]:e.events[t.event]=t:(e.events[n]=t,n++)})),delete e.logs}return e},contractDeployFormatter:function(e){var r=t._parent.clone();return r.options.address=e.contractAddress,r}},m=new o({name:"sendTransaction",call:"eth_sendTransaction",params:1,inputFormatter:[u.inputTransactionFormatter],requestManager:t._parent._requestManager,accounts:t.constructor._ethAccounts||t._ethAccounts,defaultAccount:t._parent.defaultAccount,defaultBlock:t._parent.defaultBlock,transactionBlockTimeout:t._parent.transactionBlockTimeout,transactionConfirmationBlocks:t._parent.transactionConfirmationBlocks,transactionPollingTimeout:t._parent.transactionPollingTimeout,transactionPollingInterval:t._parent.transactionPollingInterval,defaultCommon:t._parent.defaultCommon,defaultChain:t._parent.defaultChain,defaultHardfork:t._parent.defaultHardfork,handleRevert:t._parent.handleRevert,extraFormatters:p,abiCoder:c}).createFunction();return m(e.options,e.callback);default:throw new Error('Method "'+e.type+'" not implemented.')}},t.exports=l}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
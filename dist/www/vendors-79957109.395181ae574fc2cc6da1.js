(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[8059],{29321:function(t,e,n){"use strict";var r=n(7340),o=n(84390).formatters,a=n(18269),s=n(33677),i=n(2561),u=n(88894);function c(t){this.eth=t;var e=null;this._detectedAddress=null,this._lastSyncCheck=null,Object.defineProperty(this,"registry",{get:function(){return new s(this)},enumerable:!0}),Object.defineProperty(this,"resolverMethodHandler",{get:function(){return new i(this.registry)},enumerable:!0}),Object.defineProperty(this,"registryAddress",{get:function(){return e},set:function(t){e=null!==t?o.inputAddressFormatter(t):t},enumerable:!0})}c.prototype.supportsInterface=function(t,e,n){return this.getResolver(t).then((function(t){return a.isHexStrict(e)||(e=a.sha3(e).slice(0,10)),t.methods.supportsInterface(e).call(n)})).catch((function(t){if("function"!=typeof n)throw t;n(t,null)}))},c.prototype.resolver=function(t,e){return this.registry.resolver(t,e)},c.prototype.getResolver=function(t,e){return this.registry.getResolver(t,e)},c.prototype.setResolver=function(t,e,n,r){return this.registry.setResolver(t,e,n,r)},c.prototype.setRecord=function(t,e,n,r,o,a){return this.registry.setRecord(t,e,n,r,o,a)},c.prototype.setSubnodeRecord=function(t,e,n,r,o,a,s){return this.registry.setSubnodeRecord(t,e,n,r,o,a,s)},c.prototype.setApprovalForAll=function(t,e,n,r){return this.registry.setApprovalForAll(t,e,n,r)},c.prototype.isApprovedForAll=function(t,e,n){return this.registry.isApprovedForAll(t,e,n)},c.prototype.recordExists=function(t,e){return this.registry.recordExists(t,e)},c.prototype.setSubnodeOwner=function(t,e,n,r,o){return this.registry.setSubnodeOwner(t,e,n,r,o)},c.prototype.getTTL=function(t,e){return this.registry.getTTL(t,e)},c.prototype.setTTL=function(t,e,n,r){return this.registry.setTTL(t,e,n,r)},c.prototype.getOwner=function(t,e){return this.registry.getOwner(t,e)},c.prototype.setOwner=function(t,e,n,r){return this.registry.setOwner(t,e,n,r)},c.prototype.getAddress=function(t,e){return this.resolverMethodHandler.method(t,"addr",[]).call(e)},c.prototype.setAddress=function(t,e,n,r){return this.resolverMethodHandler.method(t,"setAddr",[e]).send(n,r)},c.prototype.getPubkey=function(t,e){return this.resolverMethodHandler.method(t,"pubkey",[],null,e).call(e)},c.prototype.setPubkey=function(t,e,n,r,o){return this.resolverMethodHandler.method(t,"setPubkey",[e,n]).send(r,o)},c.prototype.getContent=function(t,e){return this.resolverMethodHandler.method(t,"content",[]).call(e)},c.prototype.setContent=function(t,e,n,r){return this.resolverMethodHandler.method(t,"setContent",[e]).send(n,r)},c.prototype.getContenthash=function(t,e){return this.resolverMethodHandler.method(t,"contenthash",[],u.decode).call(e)},c.prototype.setContenthash=function(t,e,n,r){var o;try{o=u.encode(e)}catch(t){var a=new Error("Could not encode "+e+". See docs for supported hash protocols.");if("function"==typeof r)return void r(a,null);throw a}return this.resolverMethodHandler.method(t,"setContenthash",[o]).send(n,r)},c.prototype.getMultihash=function(t,e){return this.resolverMethodHandler.method(t,"multihash",[]).call(e)},c.prototype.setMultihash=function(t,e,n,r){return this.resolverMethodHandler.method(t,"multihash",[e]).send(n,r)},c.prototype.checkNetwork=async function(){var t=new Date/1e3;if(!this._lastSyncCheck||t-this._lastSyncCheck>3600){var e=t-(await this.eth.getBlock("latest")).timestamp;if(e>3600)throw new Error("Network not synced; last block was "+e+" seconds ago");this._lastSyncCheck=t}if(this.registryAddress)return this.registryAddress;if(!this._detectedAddress){var n=await this.eth.net.getNetworkType(),o=r.addresses[n];if(void 0===o)throw new Error("ENS is not supported on network "+n);return this._detectedAddress=o,this._detectedAddress}return this._detectedAddress},t.exports=c},7340:function(t){"use strict";t.exports={addresses:{main:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",ropsten:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",rinkeby:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",goerli:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"},interfaceIds:{addr:"0x3b3b57de",setAddr:"0x3b3b57de",pubkey:"0xc8690233",setPubkey:"0xc8690233",contenthash:"0xbc1c58d1",setContenthash:"0xbc1c58d1",content:"0xd8389dc5",setContent:"0xd8389dc5"}}},33677:function(t,e,n){"use strict";var r=n(25108),o=n(31692),a=n(59873),s=n(4017),i=n(84390).formatters,u=n(18269),c=n(26116),p=n(29234);function l(t){var e=this;this.ens=t,this.contract=t.checkNetwork().then((function(t){var n=new o(c,t);return n.setProvider(e.ens.eth.currentProvider),n}))}l.prototype.owner=function(t,e){return r.warn('Deprecated: Please use the "getOwner" method instead of "owner".'),this.getOwner(t,e)},l.prototype.getOwner=function(t,e){var n=new s(!0);return this.contract.then((function(e){return e.methods.owner(a.hash(t)).call()})).then((function(t){"function"!=typeof e?n.resolve(t):e(t,t)})).catch((function(t){"function"!=typeof e?n.reject(t):e(t,null)})),n.eventEmitter},l.prototype.setOwner=function(t,e,n,r){var o=new s(!0);return this.contract.then((function(r){return r.methods.setOwner(a.hash(t),i.inputAddressFormatter(e)).send(n)})).then((function(t){"function"!=typeof r?o.resolve(t):r(t,t)})).catch((function(t){"function"!=typeof r?o.reject(t):r(t,null)})),o.eventEmitter},l.prototype.getTTL=function(t,e){var n=new s(!0);return this.contract.then((function(e){return e.methods.ttl(a.hash(t)).call()})).then((function(t){"function"!=typeof e?n.resolve(t):e(t,t)})).catch((function(t){"function"!=typeof e?n.reject(t):e(t,null)})),n.eventEmitter},l.prototype.setTTL=function(t,e,n,r){var o=new s(!0);return this.contract.then((function(r){return r.methods.setTTL(a.hash(t),e).send(n)})).then((function(t){"function"!=typeof r?o.resolve(t):r(t,t)})).catch((function(t){"function"!=typeof r?o.reject(t):r(t,null)})),o.eventEmitter},l.prototype.setSubnodeOwner=function(t,e,n,r,o){var c=new s(!0);return u.isHexStrict(e)||(e=u.sha3(e)),this.contract.then((function(o){return o.methods.setSubnodeOwner(a.hash(t),e,i.inputAddressFormatter(n)).send(r)})).then((function(t){"function"!=typeof o?c.resolve(t):o(t,t)})).catch((function(t){"function"!=typeof o?c.reject(t):o(t,null)})),c.eventEmitter},l.prototype.setRecord=function(t,e,n,r,o,u){var c=new s(!0);return this.contract.then((function(s){return s.methods.setRecord(a.hash(t),i.inputAddressFormatter(e),i.inputAddressFormatter(n),r).send(o)})).then((function(t){"function"!=typeof u?c.resolve(t):u(t,t)})).catch((function(t){"function"!=typeof u?c.reject(t):u(t,null)})),c.eventEmitter},l.prototype.setSubnodeRecord=function(t,e,n,r,o,c,p){var l=new s(!0);return u.isHexStrict(e)||(e=u.sha3(e)),this.contract.then((function(s){return s.methods.setSubnodeRecord(a.hash(t),e,i.inputAddressFormatter(n),i.inputAddressFormatter(r),o).send(c)})).then((function(t){"function"!=typeof p?l.resolve(t):p(t,t)})).catch((function(t){"function"!=typeof p?l.reject(t):p(t,null)})),l.eventEmitter},l.prototype.setApprovalForAll=function(t,e,n,r){var o=new s(!0);return this.contract.then((function(r){return r.methods.setApprovalForAll(i.inputAddressFormatter(t),e).send(n)})).then((function(t){"function"!=typeof r?o.resolve(t):r(t,t)})).catch((function(t){"function"!=typeof r?o.reject(t):r(t,null)})),o.eventEmitter},l.prototype.isApprovedForAll=function(t,e,n){var r=new s(!0);return this.contract.then((function(n){return n.methods.isApprovedForAll(i.inputAddressFormatter(t),i.inputAddressFormatter(e)).call()})).then((function(t){"function"!=typeof n?r.resolve(t):n(t,t)})).catch((function(t){"function"!=typeof n?r.reject(t):n(t,null)})),r.eventEmitter},l.prototype.recordExists=function(t,e){var n=new s(!0);return this.contract.then((function(e){return e.methods.recordExists(a.hash(t)).call()})).then((function(t){"function"!=typeof e?n.resolve(t):e(t,t)})).catch((function(t){"function"!=typeof e?n.reject(t):e(t,null)})),n.eventEmitter},l.prototype.resolver=function(t,e){return r.warn('Deprecated: Please use the "getResolver" method instead of "resolver".'),this.getResolver(t,e)},l.prototype.getResolver=function(t,e){var n=this;return this.contract.then((function(e){return e.methods.resolver(a.hash(t)).call()})).then((function(t){var r=new o(p,t);if(r.setProvider(n.ens.eth.currentProvider),"function"!=typeof e)return r;e(r,r)})).catch((function(t){if("function"!=typeof e)throw t;e(t,null)}))},l.prototype.setResolver=function(t,e,n,r){var o=new s(!0);return this.contract.then((function(r){return r.methods.setResolver(a.hash(t),i.inputAddressFormatter(e)).send(n)})).then((function(t){"function"!=typeof r?o.resolve(t):r(t,t)})).catch((function(t){"function"!=typeof r?o.reject(t):r(t,null)})),o.eventEmitter},t.exports=l},60306:function(t,e,n){"use strict";var r=n(29321);t.exports=r},2561:function(t,e,n){"use strict";var r=n(25108),o=n(4017),a=n(59873),s=n(84390).errors,i=n(7340).interfaceIds;function u(t){this.registry=t}u.prototype.method=function(t,e,n,r,o){return{call:this.call.bind({ensName:t,methodName:e,methodArguments:n,callback:o,parent:this,outputFormatter:r}),send:this.send.bind({ensName:t,methodName:e,methodArguments:n,callback:o,parent:this})}},u.prototype.call=function(t){var e=this,n=new o,r=this.parent.prepareArguments(this.ensName,this.methodArguments),a=this.outputFormatter||null;return this.parent.registry.getResolver(this.ensName).then((async function(o){await e.parent.checkInterfaceSupport(o,e.methodName),e.parent.handleCall(n,o.methods[e.methodName],r,a,t)})).catch((function(e){"function"!=typeof t?n.reject(e):t(e,null)})),n.eventEmitter},u.prototype.send=function(t,e){var n=this,r=new o,a=this.parent.prepareArguments(this.ensName,this.methodArguments);return this.parent.registry.getResolver(this.ensName).then((async function(o){await n.parent.checkInterfaceSupport(o,n.methodName),n.parent.handleSend(r,o.methods[n.methodName],a,t,e)})).catch((function(t){"function"!=typeof e?r.reject(t):e(t,null)})),r.eventEmitter},u.prototype.handleCall=function(t,e,n,r,o){return e.apply(this,n).call().then((function(e){r&&(e=r(e)),"function"!=typeof o?t.resolve(e):o(e,e)})).catch((function(e){"function"!=typeof o?t.reject(e):o(e,null)})),t},u.prototype.handleSend=function(t,e,n,r,o){return e.apply(this,n).send(r).on("sending",(function(){t.eventEmitter.emit("sending")})).on("sent",(function(){t.eventEmitter.emit("sent")})).on("transactionHash",(function(e){t.eventEmitter.emit("transactionHash",e)})).on("confirmation",(function(e,n){t.eventEmitter.emit("confirmation",e,n)})).on("receipt",(function(e){t.eventEmitter.emit("receipt",e),t.resolve(e),"function"==typeof o&&o(e,e)})).on("error",(function(e){t.eventEmitter.emit("error",e),"function"!=typeof o?t.reject(e):o(e,null)})),t},u.prototype.prepareArguments=function(t,e){var n=a.hash(t);return e.length>0?(e.unshift(n),e):[n]},u.prototype.checkInterfaceSupport=async function(t,e){if(i[e]){var n=!1;try{n=await t.methods.supportsInterface(i[e]).call()}catch(e){r.warn('Could not verify interface of resolver contract at "'+t.options.address+'". ')}if(!n)throw s.ResolverMethodMissingError(t.options.address,e)}},t.exports=u},88894:function(t,e,n){var r=n(78138);t.exports={decode:function(t){var e=null,n=null,o=null;if(t&&t.error)return{protocolType:null,decoded:t.error};if(t)try{e=r.decode(t);var a=r.getCodec(t);"ipfs-ns"===a?n="ipfs":"swarm-ns"===a?n="bzz":"onion"===a?n="onion":"onion3"===a?n="onion3":e=t}catch(t){o=t.message}return{protocolType:n,decoded:e,error:o}},encode:function(t){var e,n,o=!1;if(t){var a=t.match(/^(ipfs|bzz|onion|onion3):\/\/(.*)/)||t.match(/\/(ipfs)\/(.*)/);a&&(n=a[1],e=a[2]);try{if("ipfs"===n)e.length>=4&&(o="0x"+r.fromIpfs(e));else if("bzz"===n)e.length>=4&&(o="0x"+r.fromSwarm(e));else if("onion"===n)16===e.length&&(o="0x"+r.encode("onion",e));else{if("onion3"!==n)throw new Error("Could not encode content hash: unsupported content type");56===e.length&&(o="0x"+r.encode("onion3",e))}}catch(t){throw t}}return o}}},26116:function(t){"use strict";t.exports=[{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"resolver",outputs:[{name:"",type:"address"}],payable:!1,type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"owner",outputs:[{name:"",type:"address"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"label",type:"bytes32"},{name:"owner",type:"address"}],name:"setSubnodeOwner",outputs:[],payable:!1,type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"ttl",type:"uint64"}],name:"setTTL",outputs:[],payable:!1,type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"ttl",outputs:[{name:"",type:"uint64"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"resolver",type:"address"}],name:"setResolver",outputs:[],payable:!1,type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"owner",type:"address"}],name:"setOwner",outputs:[],payable:!1,type:"function"},{anonymous:!1,inputs:[{indexed:!0,name:"node",type:"bytes32"},{indexed:!1,name:"owner",type:"address"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"node",type:"bytes32"},{indexed:!0,name:"label",type:"bytes32"},{indexed:!1,name:"owner",type:"address"}],name:"NewOwner",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"node",type:"bytes32"},{indexed:!1,name:"resolver",type:"address"}],name:"NewResolver",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"node",type:"bytes32"},{indexed:!1,name:"ttl",type:"uint64"}],name:"NewTTL",type:"event"},{constant:!1,inputs:[{internalType:"bytes32",name:"node",type:"bytes32"},{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"resolver",type:"address"},{internalType:"uint64",name:"ttl",type:"uint64"}],name:"setRecord",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"bool",name:"approved",type:"bool"}],name:"setApprovalForAll",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},{constant:!0,inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"operator",type:"address"}],name:"isApprovedForAll",outputs:[{internalType:"bool",name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{internalType:"bytes32",name:"node",type:"bytes32"}],name:"recordExists",outputs:[{internalType:"bool",name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{internalType:"bytes32",name:"node",type:"bytes32"},{internalType:"bytes32",name:"label",type:"bytes32"},{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"resolver",type:"address"},{internalType:"uint64",name:"ttl",type:"uint64"}],name:"setSubnodeRecord",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"}]},29234:function(t){"use strict";t.exports=[{constant:!0,inputs:[{name:"interfaceID",type:"bytes4"}],name:"supportsInterface",outputs:[{name:"",type:"bool"}],payable:!1,type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"},{name:"contentTypes",type:"uint256"}],name:"ABI",outputs:[{name:"contentType",type:"uint256"},{name:"data",type:"bytes"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"hash",type:"bytes"}],name:"setMultihash",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"multihash",outputs:[{name:"",type:"bytes"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"x",type:"bytes32"},{name:"y",type:"bytes32"}],name:"setPubkey",outputs:[],payable:!1,type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"content",outputs:[{name:"ret",type:"bytes32"}],payable:!1,type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"addr",outputs:[{name:"ret",type:"address"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"contentType",type:"uint256"},{name:"data",type:"bytes"}],name:"setABI",outputs:[],payable:!1,type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"name",outputs:[{name:"ret",type:"string"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"name",type:"string"}],name:"setName",outputs:[],payable:!1,type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"hash",type:"bytes32"}],name:"setContent",outputs:[],payable:!1,type:"function"},{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"pubkey",outputs:[{name:"x",type:"bytes32"},{name:"y",type:"bytes32"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"addr",type:"address"}],name:"setAddr",outputs:[],payable:!1,type:"function"},{inputs:[{name:"ensAddr",type:"address"}],payable:!1,type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,name:"node",type:"bytes32"},{indexed:!1,name:"a",type:"address"}],name:"AddrChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"node",type:"bytes32"},{indexed:!1,name:"hash",type:"bytes32"}],name:"ContentChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"node",type:"bytes32"},{indexed:!1,name:"name",type:"string"}],name:"NameChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"node",type:"bytes32"},{indexed:!0,name:"contentType",type:"uint256"}],name:"ABIChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"node",type:"bytes32"},{indexed:!1,name:"x",type:"bytes32"},{indexed:!1,name:"y",type:"bytes32"}],name:"PubkeyChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"node",type:"bytes32"},{indexed:!1,name:"hash",type:"bytes"}],name:"ContenthashChanged",type:"event"},{constant:!0,inputs:[{name:"node",type:"bytes32"}],name:"contenthash",outputs:[{name:"",type:"bytes"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"node",type:"bytes32"},{name:"hash",type:"bytes"}],name:"setContenthash",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"}]},34751:function(t,e,n){"use strict";const r=n(18269),o=n(13550),a=function(t){const e="A".charCodeAt(0),n="Z".charCodeAt(0);return(t=(t=t.toUpperCase()).substr(4)+t.substr(0,4)).split("").map((function(t){const r=t.charCodeAt(0);return r>=e&&r<=n?r-e+10:t})).join("")},s=function(t){let e,n=t;for(;n.length>2;)e=n.slice(0,9),n=parseInt(e,10)%97+n.slice(e.length);return parseInt(n,10)%97};class i{constructor(t){this._iban=t}static toAddress(t){if(!(t=new i(t)).isDirect())throw new Error("IBAN is indirect and can't be converted");return t.toAddress()}static toIban(t){return i.fromAddress(t).toString()}static fromAddress(t){if(!r.isAddress(t))throw new Error("Provided address is not a valid address: "+t);t=t.replace("0x","").replace("0X","");const e=function(t,e){let n=t;for(;n.length<2*e;)n="0"+n;return n}(new o(t,16).toString(36),15);return i.fromBban(e.toUpperCase())}static fromBban(t){const e=("0"+(98-s(a("XE00"+t)))).slice(-2);return new i("XE"+e+t)}static createIndirect(t){return i.fromBban("ETH"+t.institution+t.identifier)}static isValid(t){return new i(t).isValid()}isValid(){return/^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban)&&1===s(a(this._iban))}isDirect(){return 34===this._iban.length||35===this._iban.length}isIndirect(){return 20===this._iban.length}checksum(){return this._iban.substr(2,2)}institution(){return this.isIndirect()?this._iban.substr(7,4):""}client(){return this.isIndirect()?this._iban.substr(11):""}toAddress(){if(this.isDirect()){const t=this._iban.substr(4),e=new o(t,36);return r.toChecksumAddress(e.toString(16,20))}return""}toString(){return this._iban}}t.exports=i},15868:function(t,e,n){"use strict";var r=n(92928),o=n(93952),a=n(18269),s=n(11324),i=n(84390).formatters,u=function(){var t=this;r.packageInit(this,arguments),this.net=new s(this);var e=null,n="latest";Object.defineProperty(this,"defaultAccount",{get:function(){return e},set:function(t){return t&&(e=a.toChecksumAddress(i.inputAddressFormatter(t))),u.forEach((function(t){t.defaultAccount=e})),t},enumerable:!0}),Object.defineProperty(this,"defaultBlock",{get:function(){return n},set:function(t){return n=t,u.forEach((function(t){t.defaultBlock=n})),t},enumerable:!0});var u=[new o({name:"getAccounts",call:"personal_listAccounts",params:0,outputFormatter:a.toChecksumAddress}),new o({name:"newAccount",call:"personal_newAccount",params:1,inputFormatter:[null],outputFormatter:a.toChecksumAddress}),new o({name:"unlockAccount",call:"personal_unlockAccount",params:3,inputFormatter:[i.inputAddressFormatter,null,null]}),new o({name:"lockAccount",call:"personal_lockAccount",params:1,inputFormatter:[i.inputAddressFormatter]}),new o({name:"importRawKey",call:"personal_importRawKey",params:2}),new o({name:"sendTransaction",call:"personal_sendTransaction",params:2,inputFormatter:[i.inputTransactionFormatter,null]}),new o({name:"signTransaction",call:"personal_signTransaction",params:2,inputFormatter:[i.inputTransactionFormatter,null]}),new o({name:"sign",call:"personal_sign",params:3,inputFormatter:[i.inputSignFormatter,i.inputAddressFormatter,null]}),new o({name:"ecRecover",call:"personal_ecRecover",params:2,inputFormatter:[i.inputSignFormatter,null]})];u.forEach((function(e){e.attachToObject(t),e.setRequestManager(t._requestManager),e.defaultBlock=t.defaultBlock,e.defaultAccount=t.defaultAccount}))};r.addProviders(u),t.exports=u},8436:function(t){"use strict";t.exports=function(t){var e,n=this;return this.net.getId().then((function(t){return e=t,n.getBlock(0)})).then((function(n){var r="private";return"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3"===n.hash&&1===e&&(r="main"),"0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303"===n.hash&&2===e&&(r="morden"),"0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d"===n.hash&&3===e&&(r="ropsten"),"0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177"===n.hash&&4===e&&(r="rinkeby"),"0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a"===n.hash&&5===e&&(r="goerli"),"0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9"===n.hash&&42===e&&(r="kovan"),"function"==typeof t&&t(null,r),r})).catch((function(e){if("function"!=typeof t)throw e;t(e)}))}},27646:function(t,e,n){"use strict";var r=n(92928),o=n(84390),a=n(96602).subscriptions,s=n(93952),i=n(18269),u=n(11324),c=n(60306),p=n(15868),l=n(31692),d=n(34751),m=n(17935),h=n(93338),f=n(8436),y=o.formatters,b=function(t){return"string"==typeof t[0]&&0===t[0].indexOf("0x")?"eth_getBlockByHash":"eth_getBlockByNumber"},g=function(t){return"string"==typeof t[0]&&0===t[0].indexOf("0x")?"eth_getTransactionByBlockHashAndIndex":"eth_getTransactionByBlockNumberAndIndex"},v=function(t){return"string"==typeof t[0]&&0===t[0].indexOf("0x")?"eth_getUncleByBlockHashAndIndex":"eth_getUncleByBlockNumberAndIndex"},w=function(t){return"string"==typeof t[0]&&0===t[0].indexOf("0x")?"eth_getBlockTransactionCountByHash":"eth_getBlockTransactionCountByNumber"},F=function(t){return"string"==typeof t[0]&&0===t[0].indexOf("0x")?"eth_getUncleCountByBlockHash":"eth_getUncleCountByBlockNumber"},k=function(){var t=this;r.packageInit(this,arguments);var e=this.setRequestManager;this.setRequestManager=function(n){return e(n),t.net.setRequestManager(n),t.personal.setRequestManager(n),t.accounts.setRequestManager(n),t.Contract._requestManager=t._requestManager,t.Contract.currentProvider=t._provider,!0};var n=this.setProvider;this.setProvider=function(){n.apply(t,arguments),t.setRequestManager(t._requestManager),t.ens._detectedAddress=null,t.ens._lastSyncCheck=null};var o,k,A,T=!1,C=null,x="latest",_=50,B=24,P=750,E=1e3,N=10,S=100;Object.defineProperty(this,"handleRevert",{get:function(){return T},set:function(e){T=e,t.Contract.handleRevert=T,I.forEach((function(t){t.handleRevert=T}))},enumerable:!0}),Object.defineProperty(this,"defaultCommon",{get:function(){return A},set:function(e){A=e,t.Contract.defaultCommon=A,I.forEach((function(t){t.defaultCommon=A}))},enumerable:!0}),Object.defineProperty(this,"defaultHardfork",{get:function(){return k},set:function(e){k=e,t.Contract.defaultHardfork=k,I.forEach((function(t){t.defaultHardfork=k}))},enumerable:!0}),Object.defineProperty(this,"defaultChain",{get:function(){return o},set:function(e){o=e,t.Contract.defaultChain=o,I.forEach((function(t){t.defaultChain=o}))},enumerable:!0}),Object.defineProperty(this,"transactionPollingTimeout",{get:function(){return P},set:function(e){P=e,t.Contract.transactionPollingTimeout=P,I.forEach((function(t){t.transactionPollingTimeout=P}))},enumerable:!0}),Object.defineProperty(this,"transactionPollingInterval",{get:function(){return E},set:function(e){E=e,t.Contract.transactionPollingInterval=E,I.forEach((function(t){t.transactionPollingInterval=E}))},enumerable:!0}),Object.defineProperty(this,"transactionConfirmationBlocks",{get:function(){return B},set:function(e){B=e,t.Contract.transactionConfirmationBlocks=B,I.forEach((function(t){t.transactionConfirmationBlocks=B}))},enumerable:!0}),Object.defineProperty(this,"transactionBlockTimeout",{get:function(){return _},set:function(e){_=e,t.Contract.transactionBlockTimeout=_,I.forEach((function(t){t.transactionBlockTimeout=_}))},enumerable:!0}),Object.defineProperty(this,"blockHeaderTimeout",{get:function(){return N},set:function(e){N=e,t.Contract.blockHeaderTimeout=N,I.forEach((function(t){t.blockHeaderTimeout=N}))},enumerable:!0}),Object.defineProperty(this,"defaultAccount",{get:function(){return C},set:function(e){return e&&(C=i.toChecksumAddress(y.inputAddressFormatter(e))),t.Contract.defaultAccount=C,t.personal.defaultAccount=C,I.forEach((function(t){t.defaultAccount=C})),e},enumerable:!0}),Object.defineProperty(this,"defaultBlock",{get:function(){return x},set:function(e){return x=e,t.Contract.defaultBlock=x,t.personal.defaultBlock=x,I.forEach((function(t){t.defaultBlock=x})),e},enumerable:!0}),Object.defineProperty(this,"maxListenersWarningThreshold",{get:function(){return S},set:function(e){t.currentProvider&&t.currentProvider.setMaxListeners&&(S=e,t.currentProvider.setMaxListeners(e))},enumerable:!0}),this.clearSubscriptions=t._requestManager.clearSubscriptions.bind(t._requestManager),this.removeSubscriptionById=t._requestManager.removeSubscription.bind(t._requestManager),this.net=new u(this),this.net.getNetworkType=f.bind(this),this.accounts=new m(this),this.personal=new p(this),this.personal.defaultAccount=this.defaultAccount,this.maxListenersWarningThreshold=S;var M=this,R=function(){l.apply(this,arguments);var t=this,e=M.setProvider;M.setProvider=function(){e.apply(M,arguments),r.packageInit(t,[M])}};R.setProvider=function(){l.setProvider.apply(this,arguments)},R.prototype=Object.create(l.prototype),R.prototype.constructor=R,this.Contract=R,this.Contract.defaultAccount=this.defaultAccount,this.Contract.defaultBlock=this.defaultBlock,this.Contract.transactionBlockTimeout=this.transactionBlockTimeout,this.Contract.transactionConfirmationBlocks=this.transactionConfirmationBlocks,this.Contract.transactionPollingTimeout=this.transactionPollingTimeout,this.Contract.transactionPollingInterval=this.transactionPollingInterval,this.Contract.blockHeaderTimeout=this.blockHeaderTimeout,this.Contract.handleRevert=this.handleRevert,this.Contract._requestManager=this._requestManager,this.Contract._ethAccounts=this.accounts,this.Contract.currentProvider=this._requestManager.provider,this.Iban=d,this.abi=h,this.ens=new c(this);var I=[new s({name:"getNodeInfo",call:"web3_clientVersion"}),new s({name:"getProtocolVersion",call:"eth_protocolVersion",params:0}),new s({name:"getCoinbase",call:"eth_coinbase",params:0}),new s({name:"isMining",call:"eth_mining",params:0}),new s({name:"getHashrate",call:"eth_hashrate",params:0,outputFormatter:i.hexToNumber}),new s({name:"isSyncing",call:"eth_syncing",params:0,outputFormatter:y.outputSyncingFormatter}),new s({name:"getGasPrice",call:"eth_gasPrice",params:0,outputFormatter:y.outputBigNumberFormatter}),new s({name:"getFeeHistory",call:"eth_feeHistory",params:3,inputFormatter:[i.numberToHex,y.inputBlockNumberFormatter,null]}),new s({name:"getAccounts",call:"eth_accounts",params:0,outputFormatter:i.toChecksumAddress}),new s({name:"getBlockNumber",call:"eth_blockNumber",params:0,outputFormatter:i.hexToNumber}),new s({name:"getBalance",call:"eth_getBalance",params:2,inputFormatter:[y.inputAddressFormatter,y.inputDefaultBlockNumberFormatter],outputFormatter:y.outputBigNumberFormatter}),new s({name:"getStorageAt",call:"eth_getStorageAt",params:3,inputFormatter:[y.inputAddressFormatter,i.numberToHex,y.inputDefaultBlockNumberFormatter]}),new s({name:"getCode",call:"eth_getCode",params:2,inputFormatter:[y.inputAddressFormatter,y.inputDefaultBlockNumberFormatter]}),new s({name:"getBlock",call:b,params:2,inputFormatter:[y.inputBlockNumberFormatter,function(t){return!!t}],outputFormatter:y.outputBlockFormatter}),new s({name:"getUncle",call:v,params:2,inputFormatter:[y.inputBlockNumberFormatter,i.numberToHex],outputFormatter:y.outputBlockFormatter}),new s({name:"getBlockTransactionCount",call:w,params:1,inputFormatter:[y.inputBlockNumberFormatter],outputFormatter:i.hexToNumber}),new s({name:"getBlockUncleCount",call:F,params:1,inputFormatter:[y.inputBlockNumberFormatter],outputFormatter:i.hexToNumber}),new s({name:"getTransaction",call:"eth_getTransactionByHash",params:1,inputFormatter:[null],outputFormatter:y.outputTransactionFormatter}),new s({name:"getTransactionFromBlock",call:g,params:2,inputFormatter:[y.inputBlockNumberFormatter,i.numberToHex],outputFormatter:y.outputTransactionFormatter}),new s({name:"getTransactionReceipt",call:"eth_getTransactionReceipt",params:1,inputFormatter:[null],outputFormatter:y.outputTransactionReceiptFormatter}),new s({name:"getTransactionCount",call:"eth_getTransactionCount",params:2,inputFormatter:[y.inputAddressFormatter,y.inputDefaultBlockNumberFormatter],outputFormatter:i.hexToNumber}),new s({name:"sendSignedTransaction",call:"eth_sendRawTransaction",params:1,inputFormatter:[null],abiCoder:h}),new s({name:"signTransaction",call:"eth_signTransaction",params:1,inputFormatter:[y.inputTransactionFormatter]}),new s({name:"sendTransaction",call:"eth_sendTransaction",params:1,inputFormatter:[y.inputTransactionFormatter],abiCoder:h}),new s({name:"sign",call:"eth_sign",params:2,inputFormatter:[y.inputSignFormatter,y.inputAddressFormatter],transformPayload:function(t){return t.params.reverse(),t}}),new s({name:"call",call:"eth_call",params:2,inputFormatter:[y.inputCallFormatter,y.inputDefaultBlockNumberFormatter],abiCoder:h}),new s({name:"estimateGas",call:"eth_estimateGas",params:1,inputFormatter:[y.inputCallFormatter],outputFormatter:i.hexToNumber}),new s({name:"submitWork",call:"eth_submitWork",params:3}),new s({name:"getWork",call:"eth_getWork",params:0}),new s({name:"getPastLogs",call:"eth_getLogs",params:1,inputFormatter:[y.inputLogFormatter],outputFormatter:y.outputLogFormatter}),new s({name:"getChainId",call:"eth_chainId",params:0,outputFormatter:i.hexToNumber}),new s({name:"requestAccounts",call:"eth_requestAccounts",params:0,outputFormatter:i.toChecksumAddress}),new s({name:"getProof",call:"eth_getProof",params:3,inputFormatter:[y.inputAddressFormatter,y.inputStorageKeysFormatter,y.inputDefaultBlockNumberFormatter],outputFormatter:y.outputProofFormatter}),new s({name:"getPendingTransactions",call:"eth_pendingTransactions",params:0,outputFormatter:y.outputTransactionFormatter}),new s({name:"createAccessList",call:"eth_createAccessList",params:2,inputFormatter:[y.inputTransactionFormatter,y.inputDefaultBlockNumberFormatter]}),new a({name:"subscribe",type:"eth",subscriptions:{newBlockHeaders:{subscriptionName:"newHeads",params:0,outputFormatter:y.outputBlockFormatter},pendingTransactions:{subscriptionName:"newPendingTransactions",params:0},logs:{params:1,inputFormatter:[y.inputLogFormatter],outputFormatter:y.outputLogFormatter,subscriptionHandler:function(t){t.removed?this.emit("changed",t):this.emit("data",t),"function"==typeof this.callback&&this.callback(null,t,this)}},syncing:{params:0,outputFormatter:y.outputSyncingFormatter,subscriptionHandler:function(t){var e=this;!0!==this._isSyncing?(this._isSyncing=!0,this.emit("changed",e._isSyncing),"function"==typeof this.callback&&this.callback(null,e._isSyncing,this),setTimeout((function(){e.emit("data",t),"function"==typeof e.callback&&e.callback(null,t,e)}),0)):(this.emit("data",t),"function"==typeof e.callback&&this.callback(null,t,this),clearTimeout(this._isSyncingTimeout),this._isSyncingTimeout=setTimeout((function(){t.currentBlock>t.highestBlock-200&&(e._isSyncing=!1,e.emit("changed",e._isSyncing),"function"==typeof e.callback&&e.callback(null,e._isSyncing,e))}),500))}}}})];I.forEach((function(e){e.attachToObject(t),e.setRequestManager(t._requestManager,t.accounts),e.defaultBlock=t.defaultBlock,e.defaultAccount=t.defaultAccount,e.transactionBlockTimeout=t.transactionBlockTimeout,e.transactionConfirmationBlocks=t.transactionConfirmationBlocks,e.transactionPollingTimeout=t.transactionPollingTimeout,e.transactionPollingInterval=t.transactionPollingInterval,e.handleRevert=t.handleRevert}))};r.addProviders(k),t.exports=k},11324:function(t,e,n){"use strict";var r=n(92928),o=n(93952),a=n(18269),s=function(){var t=this;r.packageInit(this,arguments),[new o({name:"getId",call:"net_version",params:0,outputFormatter:parseInt}),new o({name:"isListening",call:"net_listening",params:0}),new o({name:"getPeerCount",call:"net_peerCount",params:0,outputFormatter:a.hexToNumber})].forEach((function(e){e.attachToObject(t),e.setRequestManager(t._requestManager)}))};r.addProviders(s),t.exports=s}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
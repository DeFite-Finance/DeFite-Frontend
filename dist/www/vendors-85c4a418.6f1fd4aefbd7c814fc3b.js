(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[2329],{36225:function(t,e,r){"use strict";var i=this&&this.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&i(e,t,r);return n(e,t),e},s=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],i=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,n,o=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s};Object.defineProperty(e,"__esModule",{value:!0}),e.BaseTransaction=void 0;var u=o(r(2832)),h=r(77295),f=r(63458),c=function(){function t(t){this.cache={hash:void 0,dataFee:void 0},this.activeCapabilities=[],this.DEFAULT_CHAIN=u.Chain.Mainnet,this.DEFAULT_HARDFORK=u.Hardfork.Istanbul;var e=t.nonce,r=t.gasLimit,i=t.to,n=t.value,o=t.data,s=t.v,a=t.r,f=t.s,c=t.type;this._type=new h.BN((0,h.toBuffer)(c)).toNumber();var l=(0,h.toBuffer)(""===i?"0x":i),d=(0,h.toBuffer)(""===s?"0x":s),p=(0,h.toBuffer)(""===a?"0x":a),m=(0,h.toBuffer)(""===f?"0x":f);this.nonce=new h.BN((0,h.toBuffer)(""===e?"0x":e)),this.gasLimit=new h.BN((0,h.toBuffer)(""===r?"0x":r)),this.to=l.length>0?new h.Address(l):void 0,this.value=new h.BN((0,h.toBuffer)(""===n?"0x":n)),this.data=(0,h.toBuffer)(""===o?"0x":o),this.v=d.length>0?new h.BN(d):void 0,this.r=p.length>0?new h.BN(p):void 0,this.s=m.length>0?new h.BN(m):void 0,this._validateCannotExceedMaxInteger({value:this.value,r:this.r,s:this.s}),this._validateCannotExceedMaxInteger({gasLimit:this.gasLimit},64),this._validateCannotExceedMaxInteger({nonce:this.nonce},64,!0)}return Object.defineProperty(t.prototype,"transactionType",{get:function(){return this.type},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"type",{get:function(){return this._type},enumerable:!1,configurable:!0}),t.prototype.supports=function(t){return this.activeCapabilities.includes(t)},t.prototype.validate=function(t){void 0===t&&(t=!1);var e=[];return this.getBaseFee().gt(this.gasLimit)&&e.push("gasLimit is too low. given ".concat(this.gasLimit,", need at least ").concat(this.getBaseFee())),this.isSigned()&&!this.verifySignature()&&e.push("Invalid Signature"),t?e:0===e.length},t.prototype.getBaseFee=function(){var t=this.getDataFee().addn(this.common.param("gasPrices","tx"));return this.common.gteHardfork("homestead")&&this.toCreationAddress()&&t.iaddn(this.common.param("gasPrices","txCreation")),t},t.prototype.getDataFee=function(){for(var t=this.common.param("gasPrices","txDataZero"),e=this.common.param("gasPrices","txDataNonZero"),r=0,i=0;i<this.data.length;i++)0===this.data[i]?r+=t:r+=e;return new h.BN(r)},t.prototype.toCreationAddress=function(){return void 0===this.to||0===this.to.buf.length},t.prototype.isSigned=function(){var t=this,e=t.v,r=t.r,i=t.s;return 0===this.type?!!(e&&r&&i):!(void 0===e||!r||!i)},t.prototype.verifySignature=function(){try{var t=this.getSenderPublicKey();return 0!==(0,h.unpadBuffer)(t).length}catch(t){return!1}},t.prototype.getSenderAddress=function(){return new h.Address((0,h.publicToAddress)(this.getSenderPublicKey()))},t.prototype.sign=function(t){if(32!==t.length){var e=this._errorMsg("Private key must be 32 bytes in length.");throw new Error(e)}var r=!1;0===this.type&&this.common.gteHardfork("spuriousDragon")&&!this.supports(f.Capability.EIP155ReplayProtection)&&(this.activeCapabilities.push(f.Capability.EIP155ReplayProtection),r=!0);var i=this.getMessageToSign(!0),n=(0,h.ecsign)(i,t),o=n.v,s=n.r,a=n.s,u=this._processSignature(o,s,a);if(r){var c=this.activeCapabilities.indexOf(f.Capability.EIP155ReplayProtection);c>-1&&this.activeCapabilities.splice(c,1)}return u},t.prototype._getCommon=function(t,e){var r;if(e){var i=new h.BN((0,h.toBuffer)(e));if(t){if(!t.chainIdBN().eq(i)){var n=this._errorMsg("The chain ID does not match the chain ID of Common");throw new Error(n)}return t.copy()}return u.default.isSupportedChainId(i)?new u.default({chain:i,hardfork:this.DEFAULT_HARDFORK}):u.default.forCustomChain(this.DEFAULT_CHAIN,{name:"custom-chain",networkId:i,chainId:i},this.DEFAULT_HARDFORK)}return null!==(r=null==t?void 0:t.copy())&&void 0!==r?r:new u.default({chain:this.DEFAULT_CHAIN,hardfork:this.DEFAULT_HARDFORK})},t.prototype._validateCannotExceedMaxInteger=function(t,e,r){var i,n;void 0===e&&(e=256),void 0===r&&(r=!1);try{for(var o=s(Object.entries(t)),u=o.next();!u.done;u=o.next()){var f=a(u.value,2),c=f[0],l=f[1];switch(e){case 64:if(r){if(null==l?void 0:l.gte(h.MAX_UINT64)){var d=this._errorMsg("".concat(c," cannot equal or exceed MAX_UINT64 (2^64-1), given ").concat(l));throw new Error(d)}}else if(null==l?void 0:l.gt(h.MAX_UINT64)){d=this._errorMsg("".concat(c," cannot exceed MAX_UINT64 (2^64-1), given ").concat(l));throw new Error(d)}break;case 256:if(r){if(null==l?void 0:l.gte(h.MAX_INTEGER)){d=this._errorMsg("".concat(c," cannot equal or exceed MAX_INTEGER (2^256-1), given ").concat(l));throw new Error(d)}}else if(null==l?void 0:l.gt(h.MAX_INTEGER)){d=this._errorMsg("".concat(c," cannot exceed MAX_INTEGER (2^256-1), given ").concat(l));throw new Error(d)}break;default:d=this._errorMsg("unimplemented bits value");throw new Error(d)}}}catch(t){i={error:t}}finally{try{u&&!u.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}},t.prototype._getSharedErrorPostfix=function(){var t="";try{t=this.isSigned()?(0,h.bufferToHex)(this.hash()):"not available (unsigned)"}catch(e){t="error"}var e="";try{e=this.isSigned().toString()}catch(e){t="error"}var r="";try{r=this.common.hardfork()}catch(t){r="error"}var i="tx type=".concat(this.type," hash=").concat(t," nonce=").concat(this.nonce," value=").concat(this.value," ");return i+="signed=".concat(e," hf=").concat(r)},t}();e.BaseTransaction=c},47669:function(t,e,r){"use strict";var i,n=r(23085).Buffer,o=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),s=this&&this.__assign||function(){return s=Object.assign||function(t){for(var e,r=1,i=arguments.length;r<i;r++)for(var n in e=arguments[r])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t},s.apply(this,arguments)},a=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,n,o=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s};Object.defineProperty(e,"__esModule",{value:!0});var u=r(77295),h=r(36225),f=r(63458),c=r(82942),l=n.from(2..toString(16).padStart(2,"0"),"hex"),d=function(t){function e(e,r){var i,n;void 0===r&&(r={});var o=t.call(this,s(s({},e),{type:2}))||this;o.DEFAULT_HARDFORK="london";var a=e.chainId,h=e.accessList,l=e.maxFeePerGas,d=e.maxPriorityFeePerGas;if(o.common=o._getCommon(r.common,a),o.chainId=o.common.chainIdBN(),!o.common.isActivatedEIP(1559))throw new Error("EIP-1559 not enabled on Common");o.activeCapabilities=o.activeCapabilities.concat([1559,2718,2930]);var p=c.AccessLists.getAccessListData(null!=h?h:[]);if(o.accessList=p.accessList,o.AccessListJSON=p.AccessListJSON,c.AccessLists.verifyAccessList(o.accessList),o.maxFeePerGas=new u.BN((0,u.toBuffer)(""===l?"0x":l)),o.maxPriorityFeePerGas=new u.BN((0,u.toBuffer)(""===d?"0x":d)),o._validateCannotExceedMaxInteger({maxFeePerGas:o.maxFeePerGas,maxPriorityFeePerGas:o.maxPriorityFeePerGas}),o.gasLimit.mul(o.maxFeePerGas).gt(u.MAX_INTEGER)){var m=o._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)");throw new Error(m)}if(o.maxFeePerGas.lt(o.maxPriorityFeePerGas)){m=o._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");throw new Error(m)}if(o.v&&!o.v.eqn(0)&&!o.v.eqn(1)){m=o._errorMsg("The y-parity of the transaction should either be 0 or 1");throw new Error(m)}if(o.common.gteHardfork("homestead")&&(null===(i=o.s)||void 0===i?void 0:i.gt(f.N_DIV_2))){m=o._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");throw new Error(m)}return(null===(n=null==r?void 0:r.freeze)||void 0===n||n)&&Object.freeze(o),o}return o(e,t),Object.defineProperty(e.prototype,"senderR",{get:function(){return this.r},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"senderS",{get:function(){return this.s},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"yParity",{get:function(){return this.v},enumerable:!1,configurable:!0}),e.fromTxData=function(t,r){return void 0===r&&(r={}),new e(t,r)},e.fromSerializedTx=function(t,r){if(void 0===r&&(r={}),!t.slice(0,1).equals(l))throw new Error("Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ".concat(2,", received: ").concat(t.slice(0,1).toString("hex")));var i=u.rlp.decode(t.slice(1));if(!Array.isArray(i))throw new Error("Invalid serialized tx input: must be array");return e.fromValuesArray(i,r)},e.fromRlpSerializedTx=function(t,r){return void 0===r&&(r={}),e.fromSerializedTx(t,r)},e.fromValuesArray=function(t,r){if(void 0===r&&(r={}),9!==t.length&&12!==t.length)throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");var i=a(t,12),n=i[0],o=i[1],s=i[2],h=i[3],f=i[4],c=i[5],l=i[6],d=i[7],p=i[8],m=i[9],v=i[10],g=i[11];return(0,u.validateNoLeadingZeroes)({nonce:o,maxPriorityFeePerGas:s,maxFeePerGas:h,gasLimit:f,value:l,v:m,r:v,s:g}),new e({chainId:new u.BN(n),nonce:o,maxPriorityFeePerGas:s,maxFeePerGas:h,gasLimit:f,to:c,value:l,data:d,accessList:null!=p?p:[],v:void 0!==m?new u.BN(m):void 0,r:v,s:g},r)},e.prototype.getDataFee=function(){if(this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork())return this.cache.dataFee.value;var e=t.prototype.getDataFee.call(this);return e.iaddn(c.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),Object.isFrozen(this)&&(this.cache.dataFee={value:e,hardfork:this.common.hardfork()}),e},e.prototype.getUpfrontCost=function(t){void 0===t&&(t=new u.BN(0));var e=u.BN.min(this.maxPriorityFeePerGas,this.maxFeePerGas.sub(t)).add(t);return this.gasLimit.mul(e).add(this.value)},e.prototype.raw=function(){return[(0,u.bnToUnpaddedBuffer)(this.chainId),(0,u.bnToUnpaddedBuffer)(this.nonce),(0,u.bnToUnpaddedBuffer)(this.maxPriorityFeePerGas),(0,u.bnToUnpaddedBuffer)(this.maxFeePerGas),(0,u.bnToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:n.from([]),(0,u.bnToUnpaddedBuffer)(this.value),this.data,this.accessList,void 0!==this.v?(0,u.bnToUnpaddedBuffer)(this.v):n.from([]),void 0!==this.r?(0,u.bnToUnpaddedBuffer)(this.r):n.from([]),void 0!==this.s?(0,u.bnToUnpaddedBuffer)(this.s):n.from([])]},e.prototype.serialize=function(){var t=this.raw();return n.concat([l,u.rlp.encode(t)])},e.prototype.getMessageToSign=function(t){void 0===t&&(t=!0);var e=this.raw().slice(0,9),r=n.concat([l,u.rlp.encode(e)]);return t?(0,u.keccak256)(r):r},e.prototype.hash=function(){if(!this.isSigned()){var t=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(t)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=(0,u.keccak256)(this.serialize())),this.cache.hash):(0,u.keccak256)(this.serialize())},e.prototype.getMessageToVerifySignature=function(){return this.getMessageToSign()},e.prototype.getSenderPublicKey=function(){var t;if(!this.isSigned()){var e=this._errorMsg("Cannot call this method if transaction is not signed");throw new Error(e)}var r=this.getMessageToVerifySignature();if(this.common.gteHardfork("homestead")&&(null===(t=this.s)||void 0===t?void 0:t.gt(f.N_DIV_2))){e=this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");throw new Error(e)}var i=this,n=i.v,o=i.r,s=i.s;try{return(0,u.ecrecover)(r,n.addn(27),(0,u.bnToUnpaddedBuffer)(o),(0,u.bnToUnpaddedBuffer)(s))}catch(t){e=this._errorMsg("Invalid Signature");throw new Error(e)}},e.prototype._processSignature=function(t,r,i){var n={common:this.common};return e.fromTxData({chainId:this.chainId,nonce:this.nonce,maxPriorityFeePerGas:this.maxPriorityFeePerGas,maxFeePerGas:this.maxFeePerGas,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:new u.BN(t-27),r:new u.BN(r),s:new u.BN(i)},n)},e.prototype.toJSON=function(){var t=c.AccessLists.getAccessListJSON(this.accessList);return{chainId:(0,u.bnToHex)(this.chainId),nonce:(0,u.bnToHex)(this.nonce),maxPriorityFeePerGas:(0,u.bnToHex)(this.maxPriorityFeePerGas),maxFeePerGas:(0,u.bnToHex)(this.maxFeePerGas),gasLimit:(0,u.bnToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,u.bnToHex)(this.value),data:"0x"+this.data.toString("hex"),accessList:t,v:void 0!==this.v?(0,u.bnToHex)(this.v):void 0,r:void 0!==this.r?(0,u.bnToHex)(this.r):void 0,s:void 0!==this.s?(0,u.bnToHex)(this.s):void 0}},e.prototype.errorStr=function(){var t=this._getSharedErrorPostfix();return t+=" maxFeePerGas=".concat(this.maxFeePerGas," maxPriorityFeePerGas=").concat(this.maxPriorityFeePerGas)},e.prototype._errorMsg=function(t){return"".concat(t," (").concat(this.errorStr(),")")},e}(h.BaseTransaction);e.default=d},29325:function(t,e,r){"use strict";var i,n=r(23085).Buffer,o=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),s=this&&this.__assign||function(){return s=Object.assign||function(t){for(var e,r=1,i=arguments.length;r<i;r++)for(var n in e=arguments[r])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t},s.apply(this,arguments)},a=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,n,o=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s};Object.defineProperty(e,"__esModule",{value:!0});var u=r(77295),h=r(36225),f=r(63458),c=r(82942),l=n.from(1..toString(16).padStart(2,"0"),"hex"),d=function(t){function e(e,r){var i,n;void 0===r&&(r={});var o=t.call(this,s(s({},e),{type:1}))||this;o.DEFAULT_HARDFORK="berlin";var a=e.chainId,h=e.accessList,l=e.gasPrice;if(o.common=o._getCommon(r.common,a),o.chainId=o.common.chainIdBN(),!o.common.isActivatedEIP(2930))throw new Error("EIP-2930 not enabled on Common");o.activeCapabilities=o.activeCapabilities.concat([2718,2930]);var d=c.AccessLists.getAccessListData(null!=h?h:[]);if(o.accessList=d.accessList,o.AccessListJSON=d.AccessListJSON,c.AccessLists.verifyAccessList(o.accessList),o.gasPrice=new u.BN((0,u.toBuffer)(""===l?"0x":l)),o._validateCannotExceedMaxInteger({gasPrice:o.gasPrice}),o.gasPrice.mul(o.gasLimit).gt(u.MAX_INTEGER)){var p=o._errorMsg("gasLimit * gasPrice cannot exceed MAX_INTEGER");throw new Error(p)}if(o.v&&!o.v.eqn(0)&&!o.v.eqn(1)){p=o._errorMsg("The y-parity of the transaction should either be 0 or 1");throw new Error(p)}if(o.common.gteHardfork("homestead")&&(null===(i=o.s)||void 0===i?void 0:i.gt(f.N_DIV_2))){p=o._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");throw new Error(p)}return(null===(n=null==r?void 0:r.freeze)||void 0===n||n)&&Object.freeze(o),o}return o(e,t),Object.defineProperty(e.prototype,"senderR",{get:function(){return this.r},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"senderS",{get:function(){return this.s},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"yParity",{get:function(){return this.v},enumerable:!1,configurable:!0}),e.fromTxData=function(t,r){return void 0===r&&(r={}),new e(t,r)},e.fromSerializedTx=function(t,r){if(void 0===r&&(r={}),!t.slice(0,1).equals(l))throw new Error("Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ".concat(1,", received: ").concat(t.slice(0,1).toString("hex")));var i=u.rlp.decode(t.slice(1));if(!Array.isArray(i))throw new Error("Invalid serialized tx input: must be array");return e.fromValuesArray(i,r)},e.fromRlpSerializedTx=function(t,r){return void 0===r&&(r={}),e.fromSerializedTx(t,r)},e.fromValuesArray=function(t,r){if(void 0===r&&(r={}),8!==t.length&&11!==t.length)throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");var i=a(t,11),n=i[0],o=i[1],s=i[2],h=i[3],f=i[4],c=i[5],l=i[6],d=i[7],p=i[8],m=i[9],v=i[10];(0,u.validateNoLeadingZeroes)({nonce:o,gasPrice:s,gasLimit:h,value:c,v:p,r:m,s:v});return new e({chainId:new u.BN(n),nonce:o,gasPrice:s,gasLimit:h,to:f,value:c,data:l,accessList:null!=d?d:[],v:void 0!==p?new u.BN(p):void 0,r:m,s:v},r)},e.prototype.getDataFee=function(){if(this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork())return this.cache.dataFee.value;var e=t.prototype.getDataFee.call(this);return e.iaddn(c.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),Object.isFrozen(this)&&(this.cache.dataFee={value:e,hardfork:this.common.hardfork()}),e},e.prototype.getUpfrontCost=function(){return this.gasLimit.mul(this.gasPrice).add(this.value)},e.prototype.raw=function(){return[(0,u.bnToUnpaddedBuffer)(this.chainId),(0,u.bnToUnpaddedBuffer)(this.nonce),(0,u.bnToUnpaddedBuffer)(this.gasPrice),(0,u.bnToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:n.from([]),(0,u.bnToUnpaddedBuffer)(this.value),this.data,this.accessList,void 0!==this.v?(0,u.bnToUnpaddedBuffer)(this.v):n.from([]),void 0!==this.r?(0,u.bnToUnpaddedBuffer)(this.r):n.from([]),void 0!==this.s?(0,u.bnToUnpaddedBuffer)(this.s):n.from([])]},e.prototype.serialize=function(){var t=this.raw();return n.concat([l,u.rlp.encode(t)])},e.prototype.getMessageToSign=function(t){void 0===t&&(t=!0);var e=this.raw().slice(0,8),r=n.concat([l,u.rlp.encode(e)]);return t?(0,u.keccak256)(r):r},e.prototype.hash=function(){if(!this.isSigned()){var t=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(t)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=(0,u.keccak256)(this.serialize())),this.cache.hash):(0,u.keccak256)(this.serialize())},e.prototype.getMessageToVerifySignature=function(){return this.getMessageToSign()},e.prototype.getSenderPublicKey=function(){var t;if(!this.isSigned()){var e=this._errorMsg("Cannot call this method if transaction is not signed");throw new Error(e)}var r=this.getMessageToVerifySignature();if(this.common.gteHardfork("homestead")&&(null===(t=this.s)||void 0===t?void 0:t.gt(f.N_DIV_2))){e=this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");throw new Error(e)}var i=this,n=i.yParity,o=i.r,s=i.s;try{return(0,u.ecrecover)(r,n.addn(27),(0,u.bnToUnpaddedBuffer)(o),(0,u.bnToUnpaddedBuffer)(s))}catch(t){e=this._errorMsg("Invalid Signature");throw new Error(e)}},e.prototype._processSignature=function(t,r,i){var n={common:this.common};return e.fromTxData({chainId:this.chainId,nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:new u.BN(t-27),r:new u.BN(r),s:new u.BN(i)},n)},e.prototype.toJSON=function(){var t=c.AccessLists.getAccessListJSON(this.accessList);return{chainId:(0,u.bnToHex)(this.chainId),nonce:(0,u.bnToHex)(this.nonce),gasPrice:(0,u.bnToHex)(this.gasPrice),gasLimit:(0,u.bnToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,u.bnToHex)(this.value),data:"0x"+this.data.toString("hex"),accessList:t,v:void 0!==this.v?(0,u.bnToHex)(this.v):void 0,r:void 0!==this.r?(0,u.bnToHex)(this.r):void 0,s:void 0!==this.s?(0,u.bnToHex)(this.s):void 0}},e.prototype.errorStr=function(){var t,e,r=this._getSharedErrorPostfix();return r+=" gasPrice=".concat(this.gasPrice," accessListCount=").concat(null!==(e=null===(t=this.accessList)||void 0===t?void 0:t.length)&&void 0!==e?e:0)},e.prototype._errorMsg=function(t){return"".concat(t," (").concat(this.errorStr(),")")},e}(h.BaseTransaction);e.default=d},66052:function(t,e,r){"use strict";var i=this&&this.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),n=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||i(e,t,r)},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.FeeMarketEIP1559Transaction=e.TransactionFactory=e.AccessListEIP2930Transaction=e.Transaction=void 0;var s=r(35534);Object.defineProperty(e,"Transaction",{enumerable:!0,get:function(){return o(s).default}});var a=r(29325);Object.defineProperty(e,"AccessListEIP2930Transaction",{enumerable:!0,get:function(){return o(a).default}});var u=r(31932);Object.defineProperty(e,"TransactionFactory",{enumerable:!0,get:function(){return o(u).default}});var h=r(47669);Object.defineProperty(e,"FeeMarketEIP1559Transaction",{enumerable:!0,get:function(){return o(h).default}}),n(r(63458),e)},35534:function(t,e,r){"use strict";var i,n=r(23085).Buffer,o=this&&this.__extends||(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),s=this&&this.__assign||function(){return s=Object.assign||function(t){for(var e,r=1,i=arguments.length;r<i;r++)for(var n in e=arguments[r])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t},s.apply(this,arguments)},a=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,n,o=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s};Object.defineProperty(e,"__esModule",{value:!0});var u=r(77295),h=r(63458),f=r(36225),c=function(t){function e(e,r){var i;void 0===r&&(r={});var n=t.call(this,s(s({},e),{type:0}))||this;if(n.common=n._validateTxV(n.v,r.common),n.gasPrice=new u.BN((0,u.toBuffer)(""===e.gasPrice?"0x":e.gasPrice)),n.gasPrice.mul(n.gasLimit).gt(u.MAX_INTEGER)){var o=n._errorMsg("gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)");throw new Error(o)}if(n._validateCannotExceedMaxInteger({gasPrice:n.gasPrice}),n.common.gteHardfork("spuriousDragon"))if(n.isSigned()){var a=n.v,f=n.common.chainIdBN().muln(2);(a.eq(f.addn(35))||a.eq(f.addn(36)))&&n.activeCapabilities.push(h.Capability.EIP155ReplayProtection)}else n.activeCapabilities.push(h.Capability.EIP155ReplayProtection);return(null===(i=null==r?void 0:r.freeze)||void 0===i||i)&&Object.freeze(n),n}return o(e,t),e.fromTxData=function(t,r){return void 0===r&&(r={}),new e(t,r)},e.fromSerializedTx=function(t,e){void 0===e&&(e={});var r=u.rlp.decode(t);if(!Array.isArray(r))throw new Error("Invalid serialized tx input. Must be array");return this.fromValuesArray(r,e)},e.fromRlpSerializedTx=function(t,r){return void 0===r&&(r={}),e.fromSerializedTx(t,r)},e.fromValuesArray=function(t,r){if(void 0===r&&(r={}),6!==t.length&&9!==t.length)throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");var i=a(t,9),n=i[0],o=i[1],s=i[2],h=i[3],f=i[4],c=i[5],l=i[6],d=i[7],p=i[8];return(0,u.validateNoLeadingZeroes)({nonce:n,gasPrice:o,gasLimit:s,value:f,v:l,r:d,s:p}),new e({nonce:n,gasPrice:o,gasLimit:s,to:h,value:f,data:c,v:l,r:d,s:p},r)},e.prototype.raw=function(){return[(0,u.bnToUnpaddedBuffer)(this.nonce),(0,u.bnToUnpaddedBuffer)(this.gasPrice),(0,u.bnToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:n.from([]),(0,u.bnToUnpaddedBuffer)(this.value),this.data,void 0!==this.v?(0,u.bnToUnpaddedBuffer)(this.v):n.from([]),void 0!==this.r?(0,u.bnToUnpaddedBuffer)(this.r):n.from([]),void 0!==this.s?(0,u.bnToUnpaddedBuffer)(this.s):n.from([])]},e.prototype.serialize=function(){return u.rlp.encode(this.raw())},e.prototype._getMessageToSign=function(){var t=[(0,u.bnToUnpaddedBuffer)(this.nonce),(0,u.bnToUnpaddedBuffer)(this.gasPrice),(0,u.bnToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:n.from([]),(0,u.bnToUnpaddedBuffer)(this.value),this.data];return this.supports(h.Capability.EIP155ReplayProtection)&&(t.push((0,u.toBuffer)(this.common.chainIdBN())),t.push((0,u.unpadBuffer)((0,u.toBuffer)(0))),t.push((0,u.unpadBuffer)((0,u.toBuffer)(0)))),t},e.prototype.getMessageToSign=function(t){void 0===t&&(t=!0);var e=this._getMessageToSign();return t?(0,u.rlphash)(e):e},e.prototype.getDataFee=function(){return this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork()?this.cache.dataFee.value:(Object.isFrozen(this)&&(this.cache.dataFee={value:t.prototype.getDataFee.call(this),hardfork:this.common.hardfork()}),t.prototype.getDataFee.call(this))},e.prototype.getUpfrontCost=function(){return this.gasLimit.mul(this.gasPrice).add(this.value)},e.prototype.hash=function(){return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=(0,u.rlphash)(this.raw())),this.cache.hash):(0,u.rlphash)(this.raw())},e.prototype.getMessageToVerifySignature=function(){if(!this.isSigned()){var t=this._errorMsg("This transaction is not signed");throw new Error(t)}var e=this._getMessageToSign();return(0,u.rlphash)(e)},e.prototype.getSenderPublicKey=function(){var t,e=this.getMessageToVerifySignature();if(this.common.gteHardfork("homestead")&&(null===(t=this.s)||void 0===t?void 0:t.gt(h.N_DIV_2))){var r=this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");throw new Error(r)}var i=this,n=i.v,o=i.r,s=i.s;try{return(0,u.ecrecover)(e,n,(0,u.bnToUnpaddedBuffer)(o),(0,u.bnToUnpaddedBuffer)(s),this.supports(h.Capability.EIP155ReplayProtection)?this.common.chainIdBN():void 0)}catch(t){r=this._errorMsg("Invalid Signature");throw new Error(r)}},e.prototype._processSignature=function(t,r,i){var n=new u.BN(t);this.supports(h.Capability.EIP155ReplayProtection)&&n.iadd(this.common.chainIdBN().muln(2).addn(8));var o={common:this.common};return e.fromTxData({nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,v:n,r:new u.BN(r),s:new u.BN(i)},o)},e.prototype.toJSON=function(){return{nonce:(0,u.bnToHex)(this.nonce),gasPrice:(0,u.bnToHex)(this.gasPrice),gasLimit:(0,u.bnToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,u.bnToHex)(this.value),data:"0x"+this.data.toString("hex"),v:void 0!==this.v?(0,u.bnToHex)(this.v):void 0,r:void 0!==this.r?(0,u.bnToHex)(this.r):void 0,s:void 0!==this.s?(0,u.bnToHex)(this.s):void 0}},e.prototype._validateTxV=function(t,e){var r;if(void 0!==t&&!t.eqn(0)&&(!e||e.gteHardfork("spuriousDragon"))&&!t.eqn(27)&&!t.eqn(28))if(e){var i=e.chainIdBN().muln(2);if(!(t.eq(i.addn(35))||t.eq(i.addn(36))))throw new Error("Incompatible EIP155-based V ".concat(t," and chain id ").concat(e.chainIdBN(),". See the Common parameter of the Transaction constructor to set the chain id."))}else{var n=void 0;n=t.subn(35).isEven()?35:36,r=t.subn(n).divn(2)}return this._getCommon(e,r)},e.prototype._unsignedTxImplementsEIP155=function(){return this.common.gteHardfork("spuriousDragon")},e.prototype._signedTxImplementsEIP155=function(){if(!this.isSigned()){var t=this._errorMsg("This transaction is not signed");throw new Error(t)}var e=this.common.gteHardfork("spuriousDragon"),r=this.v,i=this.common.chainIdBN().muln(2);return(r.eq(i.addn(35))||r.eq(i.addn(36)))&&e},e.prototype.errorStr=function(){var t=this._getSharedErrorPostfix();return t+=" gasPrice=".concat(this.gasPrice)},e.prototype._errorMsg=function(t){return"".concat(t," (").concat(this.errorStr(),")")},e}(f.BaseTransaction);e.default=c},31932:function(t,e,r){"use strict";var i=r(23085).Buffer;Object.defineProperty(e,"__esModule",{value:!0});var n=r(77295),o=r(66052),s=function(){function t(){}return t.fromTxData=function(t,e){if(void 0===e&&(e={}),"type"in t&&void 0!==t.type){var r=new n.BN((0,n.toBuffer)(t.type)).toNumber();if(0===r)return o.Transaction.fromTxData(t,e);if(1===r)return o.AccessListEIP2930Transaction.fromTxData(t,e);if(2===r)return o.FeeMarketEIP1559Transaction.fromTxData(t,e);throw new Error("Tx instantiation with type ".concat(r," not supported"))}return o.Transaction.fromTxData(t,e)},t.fromSerializedData=function(t,e){if(void 0===e&&(e={}),t[0]<=127){var r=void 0;switch(t[0]){case 1:r=2930;break;case 2:r=1559;break;default:throw new Error("TypedTransaction with ID ".concat(t[0]," unknown"))}return 1559===r?o.FeeMarketEIP1559Transaction.fromSerializedTx(t,e):o.AccessListEIP2930Transaction.fromSerializedTx(t,e)}return o.Transaction.fromSerializedTx(t,e)},t.fromBlockBodyData=function(t,e){if(void 0===e&&(e={}),i.isBuffer(t))return this.fromSerializedData(t,e);if(Array.isArray(t))return o.Transaction.fromValuesArray(t,e);throw new Error("Cannot decode transaction: unknown type input")},t.getTransactionClass=function(t,e){if(void 0===t&&(t=0),0==t||t>=128&&t<=255)return o.Transaction;switch(t){case 1:return o.AccessListEIP2930Transaction;case 2:return o.FeeMarketEIP1559Transaction;default:throw new Error("TypedTransaction with ID ".concat(t," unknown"))}},t}();e.default=s},63458:function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.N_DIV_2=e.isAccessList=e.isAccessListBuffer=e.Capability=void 0;var i=r(77295);function n(t){if(0===t.length)return!0;var e=t[0];return!!Array.isArray(e)}!function(t){t[t.EIP155ReplayProtection=155]="EIP155ReplayProtection",t[t.EIP1559FeeMarket=1559]="EIP1559FeeMarket",t[t.EIP2718TypedTransaction=2718]="EIP2718TypedTransaction",t[t.EIP2930AccessLists=2930]="EIP2930AccessLists"}(e.Capability||(e.Capability={})),e.isAccessListBuffer=n,e.isAccessList=function(t){return!n(t)},e.N_DIV_2=new i.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16)},82942:function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AccessLists=void 0;var i=r(77295),n=r(63458),o=function(){function t(){}return t.getAccessListData=function(t){var e,r;if(t&&(0,n.isAccessList)(t)){e=t;for(var o=[],s=0;s<t.length;s++){for(var a=t[s],u=(0,i.toBuffer)(a.address),h=[],f=0;f<a.storageKeys.length;f++)h.push((0,i.toBuffer)(a.storageKeys[f]));o.push([u,h])}r=o}else{r=null!=t?t:[];var c=[];for(s=0;s<r.length;s++){var l=r[s],d=(0,i.bufferToHex)(l[0]),p=[];for(a=0;a<l[1].length;a++)p.push((0,i.bufferToHex)(l[1][a]));var m={address:d,storageKeys:p};c.push(m)}e=c}return{AccessListJSON:e,accessList:r}},t.verifyAccessList=function(t){for(var e=0;e<t.length;e++){var r=t[e],i=r[0],n=r[1];if(void 0!==r[2])throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");if(20!=i.length)throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");for(var o=0;o<n.length;o++)if(32!=n[o].length)throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes")}},t.getAccessListJSON=function(t){for(var e=[],r=0;r<t.length;r++){for(var n=t[r],o={address:"0x"+(0,i.setLengthLeft)(n[0],20).toString("hex"),storageKeys:[]},s=n[1],a=0;a<s.length;a++){var u=s[a];o.storageKeys.push("0x"+(0,i.setLengthLeft)(u,32).toString("hex"))}e.push(o)}return e},t.getDataFeeEIP2930=function(t,e){for(var r=e.param("gasPrices","accessListStorageKeyCost"),i=e.param("gasPrices","accessListAddressCost"),n=0,o=0;o<t.length;o++){n+=t[o][1].length}return t.length*i+n*r},t}();e.AccessLists=o},14081:function(t,e,r){!function(t,e){"use strict";function i(t,e){if(!t)throw new Error(e||"Assertion failed")}function n(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function o(t,e,r){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var s;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:r(75304).Buffer}catch(t){}function a(t,e){var r=t.charCodeAt(e);return r>=48&&r<=57?r-48:r>=65&&r<=70?r-55:r>=97&&r<=102?r-87:void i(!1,"Invalid character in "+t)}function u(t,e,r){var i=a(t,r);return r-1>=e&&(i|=a(t,r-1)<<4),i}function h(t,e,r,n){for(var o=0,s=0,a=Math.min(t.length,r),u=e;u<a;u++){var h=t.charCodeAt(u)-48;o*=n,s=h>=49?h-49+10:h>=17?h-17+10:h,i(h>=0&&s<n,"Invalid character"),o+=s}return o}function f(t,e){t.words=e.words,t.length=e.length,t.negative=e.negative,t.red=e.red}if(o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),i(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(n++,this.negative=1),n<t.length&&(16===e?this._parseHex(t,n,r):(this._parseBase(t,e,n),"le"===r&&this._initArray(this.toArray(),e,r)))},o.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(i(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},o.prototype._initArray=function(t,e,r){if(i("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,s,a=0;if("be"===r)for(n=t.length-1,o=0;n>=0;n-=3)s=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===r)for(n=0,o=0;n<t.length;n+=3)s=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this._strip()},o.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var n,o=0,s=0;if("be"===r)for(i=t.length-1;i>=e;i-=2)n=u(t,e,i)<<o,this.words[s]|=67108863&n,o>=18?(o-=18,s+=1,this.words[s]|=n>>>26):o+=8;else for(i=(t.length-e)%2==0?e+1:e;i<t.length;i+=2)n=u(t,e,i)<<o,this.words[s]|=67108863&n,o>=18?(o-=18,s+=1,this.words[s]|=n>>>26):o+=8;this._strip()},o.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var i=0,n=1;n<=67108863;n*=e)i++;i--,n=n/e|0;for(var o=t.length-r,s=o%i,a=Math.min(o,o-s)+r,u=0,f=r;f<a;f+=i)u=h(t,f,f+i,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var c=1;for(u=h(t,f,t.length,e),f=0;f<s;f++)c*=e;this.imuln(c),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this._strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype._move=function(t){f(t,this)},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{o.prototype[Symbol.for("nodejs.util.inspect.custom")]=c}catch(t){o.prototype.inspect=c}else o.prototype.inspect=c;function c(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var l=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],d=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];o.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||"hex"===t){r="";for(var n=0,o=0,s=0;s<this.length;s++){var a=this.words[s],u=(16777215&(a<<n|o)).toString(16);r=0!==(o=a>>>24-n&16777215)||s!==this.length-1?l[6-u.length]+u+r:u+r,(n+=2)>=26&&(n-=26,s--)}for(0!==o&&(r=o.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var h=d[t],f=p[t];r="";var c=this.clone();for(c.negative=0;!c.isZero();){var m=c.modrn(f).toString(t);r=(c=c.idivn(f)).isZero()?m+r:l[h-m.length]+m+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}i(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&i(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16,2)},s&&(o.prototype.toBuffer=function(t,e){return this.toArrayLike(s,t,e)}),o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)};function m(t,e,r){r.negative=e.negative^t.negative;var i=t.length+e.length|0;r.length=i,i=i-1|0;var n=0|t.words[0],o=0|e.words[0],s=n*o,a=67108863&s,u=s/67108864|0;r.words[0]=a;for(var h=1;h<i;h++){for(var f=u>>>26,c=67108863&u,l=Math.min(h,e.length-1),d=Math.max(0,h-t.length+1);d<=l;d++){var p=h-d|0;f+=(s=(n=0|t.words[p])*(o=0|e.words[d])+c)/67108864|0,c=67108863&s}r.words[h]=0|c,u=0|f}return 0!==u?r.words[h]=0|u:r.length--,r._strip()}o.prototype.toArrayLike=function(t,e,r){this._strip();var n=this.byteLength(),o=r||Math.max(1,n);i(n<=o,"byte array longer than desired length"),i(o>0,"Requested array length <= 0");var s=function(t,e){return t.allocUnsafe?t.allocUnsafe(e):new t(e)}(t,o);return this["_toArrayLike"+("le"===e?"LE":"BE")](s,n),s},o.prototype._toArrayLikeLE=function(t,e){for(var r=0,i=0,n=0,o=0;n<this.length;n++){var s=this.words[n]<<o|i;t[r++]=255&s,r<t.length&&(t[r++]=s>>8&255),r<t.length&&(t[r++]=s>>16&255),6===o?(r<t.length&&(t[r++]=s>>24&255),i=0,o=0):(i=s>>>24,o+=2)}if(r<t.length)for(t[r++]=i;r<t.length;)t[r++]=0},o.prototype._toArrayLikeBE=function(t,e){for(var r=t.length-1,i=0,n=0,o=0;n<this.length;n++){var s=this.words[n]<<o|i;t[r--]=255&s,r>=0&&(t[r--]=s>>8&255),r>=0&&(t[r--]=s>>16&255),6===o?(r>=0&&(t[r--]=s>>24&255),i=0,o=0):(i=s>>>24,o+=2)}if(r>=0)for(t[r--]=i;r>=0;)t[r--]=0},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this._strip()},o.prototype.ior=function(t){return i(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this._strip()},o.prototype.iand=function(t){return i(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var i=0;i<r.length;i++)this.words[i]=e.words[i]^r.words[i];if(this!==e)for(;i<e.length;i++)this.words[i]=e.words[i];return this.length=e.length,this._strip()},o.prototype.ixor=function(t){return i(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){i("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return r>0&&(this.words[n]=~this.words[n]&67108863>>26-r),this._strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){i("number"==typeof t&&t>=0);var r=t/26|0,n=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<n:this.words[r]&~(1<<n),this._strip()},o.prototype.iadd=function(t){var e,r,i;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,i=t):(r=t,i=this);for(var n=0,o=0;o<i.length;o++)e=(0|r.words[o])+(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<r.length;o++)e=(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=r.length,0!==n)this.words[this.length]=n,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,i,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(r=this,i=t):(r=t,i=this);for(var o=0,s=0;s<i.length;s++)o=(e=(0|r.words[s])-(0|i.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this._strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var v=function(t,e,r){var i,n,o,s=t.words,a=e.words,u=r.words,h=0,f=0|s[0],c=8191&f,l=f>>>13,d=0|s[1],p=8191&d,m=d>>>13,v=0|s[2],g=8191&v,y=v>>>13,w=0|s[3],M=8191&w,b=w>>>13,_=0|s[4],x=8191&_,A=_>>>13,P=0|s[5],T=8191&P,B=P>>>13,S=0|s[6],E=8191&S,I=S>>>13,L=0|s[7],N=8191&L,k=L>>>13,O=0|s[8],C=8191&O,F=O>>>13,H=0|s[9],R=8191&H,j=H>>>13,U=0|a[0],K=8191&U,D=U>>>13,z=0|a[1],q=8191&z,G=z>>>13,Z=0|a[2],V=8191&Z,X=Z>>>13,J=0|a[3],Y=8191&J,W=J>>>13,$=0|a[4],Q=8191&$,tt=$>>>13,et=0|a[5],rt=8191&et,it=et>>>13,nt=0|a[6],ot=8191&nt,st=nt>>>13,at=0|a[7],ut=8191&at,ht=at>>>13,ft=0|a[8],ct=8191&ft,lt=ft>>>13,dt=0|a[9],pt=8191&dt,mt=dt>>>13;r.negative=t.negative^e.negative,r.length=19;var vt=(h+(i=Math.imul(c,K))|0)+((8191&(n=(n=Math.imul(c,D))+Math.imul(l,K)|0))<<13)|0;h=((o=Math.imul(l,D))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,i=Math.imul(p,K),n=(n=Math.imul(p,D))+Math.imul(m,K)|0,o=Math.imul(m,D);var gt=(h+(i=i+Math.imul(c,q)|0)|0)+((8191&(n=(n=n+Math.imul(c,G)|0)+Math.imul(l,q)|0))<<13)|0;h=((o=o+Math.imul(l,G)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,i=Math.imul(g,K),n=(n=Math.imul(g,D))+Math.imul(y,K)|0,o=Math.imul(y,D),i=i+Math.imul(p,q)|0,n=(n=n+Math.imul(p,G)|0)+Math.imul(m,q)|0,o=o+Math.imul(m,G)|0;var yt=(h+(i=i+Math.imul(c,V)|0)|0)+((8191&(n=(n=n+Math.imul(c,X)|0)+Math.imul(l,V)|0))<<13)|0;h=((o=o+Math.imul(l,X)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,i=Math.imul(M,K),n=(n=Math.imul(M,D))+Math.imul(b,K)|0,o=Math.imul(b,D),i=i+Math.imul(g,q)|0,n=(n=n+Math.imul(g,G)|0)+Math.imul(y,q)|0,o=o+Math.imul(y,G)|0,i=i+Math.imul(p,V)|0,n=(n=n+Math.imul(p,X)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,X)|0;var wt=(h+(i=i+Math.imul(c,Y)|0)|0)+((8191&(n=(n=n+Math.imul(c,W)|0)+Math.imul(l,Y)|0))<<13)|0;h=((o=o+Math.imul(l,W)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,i=Math.imul(x,K),n=(n=Math.imul(x,D))+Math.imul(A,K)|0,o=Math.imul(A,D),i=i+Math.imul(M,q)|0,n=(n=n+Math.imul(M,G)|0)+Math.imul(b,q)|0,o=o+Math.imul(b,G)|0,i=i+Math.imul(g,V)|0,n=(n=n+Math.imul(g,X)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,X)|0,i=i+Math.imul(p,Y)|0,n=(n=n+Math.imul(p,W)|0)+Math.imul(m,Y)|0,o=o+Math.imul(m,W)|0;var Mt=(h+(i=i+Math.imul(c,Q)|0)|0)+((8191&(n=(n=n+Math.imul(c,tt)|0)+Math.imul(l,Q)|0))<<13)|0;h=((o=o+Math.imul(l,tt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,i=Math.imul(T,K),n=(n=Math.imul(T,D))+Math.imul(B,K)|0,o=Math.imul(B,D),i=i+Math.imul(x,q)|0,n=(n=n+Math.imul(x,G)|0)+Math.imul(A,q)|0,o=o+Math.imul(A,G)|0,i=i+Math.imul(M,V)|0,n=(n=n+Math.imul(M,X)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,X)|0,i=i+Math.imul(g,Y)|0,n=(n=n+Math.imul(g,W)|0)+Math.imul(y,Y)|0,o=o+Math.imul(y,W)|0,i=i+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var bt=(h+(i=i+Math.imul(c,rt)|0)|0)+((8191&(n=(n=n+Math.imul(c,it)|0)+Math.imul(l,rt)|0))<<13)|0;h=((o=o+Math.imul(l,it)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,i=Math.imul(E,K),n=(n=Math.imul(E,D))+Math.imul(I,K)|0,o=Math.imul(I,D),i=i+Math.imul(T,q)|0,n=(n=n+Math.imul(T,G)|0)+Math.imul(B,q)|0,o=o+Math.imul(B,G)|0,i=i+Math.imul(x,V)|0,n=(n=n+Math.imul(x,X)|0)+Math.imul(A,V)|0,o=o+Math.imul(A,X)|0,i=i+Math.imul(M,Y)|0,n=(n=n+Math.imul(M,W)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,W)|0,i=i+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,i=i+Math.imul(p,rt)|0,n=(n=n+Math.imul(p,it)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,it)|0;var _t=(h+(i=i+Math.imul(c,ot)|0)|0)+((8191&(n=(n=n+Math.imul(c,st)|0)+Math.imul(l,ot)|0))<<13)|0;h=((o=o+Math.imul(l,st)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,i=Math.imul(N,K),n=(n=Math.imul(N,D))+Math.imul(k,K)|0,o=Math.imul(k,D),i=i+Math.imul(E,q)|0,n=(n=n+Math.imul(E,G)|0)+Math.imul(I,q)|0,o=o+Math.imul(I,G)|0,i=i+Math.imul(T,V)|0,n=(n=n+Math.imul(T,X)|0)+Math.imul(B,V)|0,o=o+Math.imul(B,X)|0,i=i+Math.imul(x,Y)|0,n=(n=n+Math.imul(x,W)|0)+Math.imul(A,Y)|0,o=o+Math.imul(A,W)|0,i=i+Math.imul(M,Q)|0,n=(n=n+Math.imul(M,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,i=i+Math.imul(g,rt)|0,n=(n=n+Math.imul(g,it)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,it)|0,i=i+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var xt=(h+(i=i+Math.imul(c,ut)|0)|0)+((8191&(n=(n=n+Math.imul(c,ht)|0)+Math.imul(l,ut)|0))<<13)|0;h=((o=o+Math.imul(l,ht)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,i=Math.imul(C,K),n=(n=Math.imul(C,D))+Math.imul(F,K)|0,o=Math.imul(F,D),i=i+Math.imul(N,q)|0,n=(n=n+Math.imul(N,G)|0)+Math.imul(k,q)|0,o=o+Math.imul(k,G)|0,i=i+Math.imul(E,V)|0,n=(n=n+Math.imul(E,X)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,X)|0,i=i+Math.imul(T,Y)|0,n=(n=n+Math.imul(T,W)|0)+Math.imul(B,Y)|0,o=o+Math.imul(B,W)|0,i=i+Math.imul(x,Q)|0,n=(n=n+Math.imul(x,tt)|0)+Math.imul(A,Q)|0,o=o+Math.imul(A,tt)|0,i=i+Math.imul(M,rt)|0,n=(n=n+Math.imul(M,it)|0)+Math.imul(b,rt)|0,o=o+Math.imul(b,it)|0,i=i+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,i=i+Math.imul(p,ut)|0,n=(n=n+Math.imul(p,ht)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,ht)|0;var At=(h+(i=i+Math.imul(c,ct)|0)|0)+((8191&(n=(n=n+Math.imul(c,lt)|0)+Math.imul(l,ct)|0))<<13)|0;h=((o=o+Math.imul(l,lt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,i=Math.imul(R,K),n=(n=Math.imul(R,D))+Math.imul(j,K)|0,o=Math.imul(j,D),i=i+Math.imul(C,q)|0,n=(n=n+Math.imul(C,G)|0)+Math.imul(F,q)|0,o=o+Math.imul(F,G)|0,i=i+Math.imul(N,V)|0,n=(n=n+Math.imul(N,X)|0)+Math.imul(k,V)|0,o=o+Math.imul(k,X)|0,i=i+Math.imul(E,Y)|0,n=(n=n+Math.imul(E,W)|0)+Math.imul(I,Y)|0,o=o+Math.imul(I,W)|0,i=i+Math.imul(T,Q)|0,n=(n=n+Math.imul(T,tt)|0)+Math.imul(B,Q)|0,o=o+Math.imul(B,tt)|0,i=i+Math.imul(x,rt)|0,n=(n=n+Math.imul(x,it)|0)+Math.imul(A,rt)|0,o=o+Math.imul(A,it)|0,i=i+Math.imul(M,ot)|0,n=(n=n+Math.imul(M,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,i=i+Math.imul(g,ut)|0,n=(n=n+Math.imul(g,ht)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,ht)|0,i=i+Math.imul(p,ct)|0,n=(n=n+Math.imul(p,lt)|0)+Math.imul(m,ct)|0,o=o+Math.imul(m,lt)|0;var Pt=(h+(i=i+Math.imul(c,pt)|0)|0)+((8191&(n=(n=n+Math.imul(c,mt)|0)+Math.imul(l,pt)|0))<<13)|0;h=((o=o+Math.imul(l,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,i=Math.imul(R,q),n=(n=Math.imul(R,G))+Math.imul(j,q)|0,o=Math.imul(j,G),i=i+Math.imul(C,V)|0,n=(n=n+Math.imul(C,X)|0)+Math.imul(F,V)|0,o=o+Math.imul(F,X)|0,i=i+Math.imul(N,Y)|0,n=(n=n+Math.imul(N,W)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,W)|0,i=i+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,i=i+Math.imul(T,rt)|0,n=(n=n+Math.imul(T,it)|0)+Math.imul(B,rt)|0,o=o+Math.imul(B,it)|0,i=i+Math.imul(x,ot)|0,n=(n=n+Math.imul(x,st)|0)+Math.imul(A,ot)|0,o=o+Math.imul(A,st)|0,i=i+Math.imul(M,ut)|0,n=(n=n+Math.imul(M,ht)|0)+Math.imul(b,ut)|0,o=o+Math.imul(b,ht)|0,i=i+Math.imul(g,ct)|0,n=(n=n+Math.imul(g,lt)|0)+Math.imul(y,ct)|0,o=o+Math.imul(y,lt)|0;var Tt=(h+(i=i+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;h=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,i=Math.imul(R,V),n=(n=Math.imul(R,X))+Math.imul(j,V)|0,o=Math.imul(j,X),i=i+Math.imul(C,Y)|0,n=(n=n+Math.imul(C,W)|0)+Math.imul(F,Y)|0,o=o+Math.imul(F,W)|0,i=i+Math.imul(N,Q)|0,n=(n=n+Math.imul(N,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,i=i+Math.imul(E,rt)|0,n=(n=n+Math.imul(E,it)|0)+Math.imul(I,rt)|0,o=o+Math.imul(I,it)|0,i=i+Math.imul(T,ot)|0,n=(n=n+Math.imul(T,st)|0)+Math.imul(B,ot)|0,o=o+Math.imul(B,st)|0,i=i+Math.imul(x,ut)|0,n=(n=n+Math.imul(x,ht)|0)+Math.imul(A,ut)|0,o=o+Math.imul(A,ht)|0,i=i+Math.imul(M,ct)|0,n=(n=n+Math.imul(M,lt)|0)+Math.imul(b,ct)|0,o=o+Math.imul(b,lt)|0;var Bt=(h+(i=i+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(y,pt)|0))<<13)|0;h=((o=o+Math.imul(y,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,i=Math.imul(R,Y),n=(n=Math.imul(R,W))+Math.imul(j,Y)|0,o=Math.imul(j,W),i=i+Math.imul(C,Q)|0,n=(n=n+Math.imul(C,tt)|0)+Math.imul(F,Q)|0,o=o+Math.imul(F,tt)|0,i=i+Math.imul(N,rt)|0,n=(n=n+Math.imul(N,it)|0)+Math.imul(k,rt)|0,o=o+Math.imul(k,it)|0,i=i+Math.imul(E,ot)|0,n=(n=n+Math.imul(E,st)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,st)|0,i=i+Math.imul(T,ut)|0,n=(n=n+Math.imul(T,ht)|0)+Math.imul(B,ut)|0,o=o+Math.imul(B,ht)|0,i=i+Math.imul(x,ct)|0,n=(n=n+Math.imul(x,lt)|0)+Math.imul(A,ct)|0,o=o+Math.imul(A,lt)|0;var St=(h+(i=i+Math.imul(M,pt)|0)|0)+((8191&(n=(n=n+Math.imul(M,mt)|0)+Math.imul(b,pt)|0))<<13)|0;h=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,i=Math.imul(R,Q),n=(n=Math.imul(R,tt))+Math.imul(j,Q)|0,o=Math.imul(j,tt),i=i+Math.imul(C,rt)|0,n=(n=n+Math.imul(C,it)|0)+Math.imul(F,rt)|0,o=o+Math.imul(F,it)|0,i=i+Math.imul(N,ot)|0,n=(n=n+Math.imul(N,st)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,st)|0,i=i+Math.imul(E,ut)|0,n=(n=n+Math.imul(E,ht)|0)+Math.imul(I,ut)|0,o=o+Math.imul(I,ht)|0,i=i+Math.imul(T,ct)|0,n=(n=n+Math.imul(T,lt)|0)+Math.imul(B,ct)|0,o=o+Math.imul(B,lt)|0;var Et=(h+(i=i+Math.imul(x,pt)|0)|0)+((8191&(n=(n=n+Math.imul(x,mt)|0)+Math.imul(A,pt)|0))<<13)|0;h=((o=o+Math.imul(A,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,i=Math.imul(R,rt),n=(n=Math.imul(R,it))+Math.imul(j,rt)|0,o=Math.imul(j,it),i=i+Math.imul(C,ot)|0,n=(n=n+Math.imul(C,st)|0)+Math.imul(F,ot)|0,o=o+Math.imul(F,st)|0,i=i+Math.imul(N,ut)|0,n=(n=n+Math.imul(N,ht)|0)+Math.imul(k,ut)|0,o=o+Math.imul(k,ht)|0,i=i+Math.imul(E,ct)|0,n=(n=n+Math.imul(E,lt)|0)+Math.imul(I,ct)|0,o=o+Math.imul(I,lt)|0;var It=(h+(i=i+Math.imul(T,pt)|0)|0)+((8191&(n=(n=n+Math.imul(T,mt)|0)+Math.imul(B,pt)|0))<<13)|0;h=((o=o+Math.imul(B,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,i=Math.imul(R,ot),n=(n=Math.imul(R,st))+Math.imul(j,ot)|0,o=Math.imul(j,st),i=i+Math.imul(C,ut)|0,n=(n=n+Math.imul(C,ht)|0)+Math.imul(F,ut)|0,o=o+Math.imul(F,ht)|0,i=i+Math.imul(N,ct)|0,n=(n=n+Math.imul(N,lt)|0)+Math.imul(k,ct)|0,o=o+Math.imul(k,lt)|0;var Lt=(h+(i=i+Math.imul(E,pt)|0)|0)+((8191&(n=(n=n+Math.imul(E,mt)|0)+Math.imul(I,pt)|0))<<13)|0;h=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,i=Math.imul(R,ut),n=(n=Math.imul(R,ht))+Math.imul(j,ut)|0,o=Math.imul(j,ht),i=i+Math.imul(C,ct)|0,n=(n=n+Math.imul(C,lt)|0)+Math.imul(F,ct)|0,o=o+Math.imul(F,lt)|0;var Nt=(h+(i=i+Math.imul(N,pt)|0)|0)+((8191&(n=(n=n+Math.imul(N,mt)|0)+Math.imul(k,pt)|0))<<13)|0;h=((o=o+Math.imul(k,mt)|0)+(n>>>13)|0)+(Nt>>>26)|0,Nt&=67108863,i=Math.imul(R,ct),n=(n=Math.imul(R,lt))+Math.imul(j,ct)|0,o=Math.imul(j,lt);var kt=(h+(i=i+Math.imul(C,pt)|0)|0)+((8191&(n=(n=n+Math.imul(C,mt)|0)+Math.imul(F,pt)|0))<<13)|0;h=((o=o+Math.imul(F,mt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863;var Ot=(h+(i=Math.imul(R,pt))|0)+((8191&(n=(n=Math.imul(R,mt))+Math.imul(j,pt)|0))<<13)|0;return h=((o=Math.imul(j,mt))+(n>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,u[0]=vt,u[1]=gt,u[2]=yt,u[3]=wt,u[4]=Mt,u[5]=bt,u[6]=_t,u[7]=xt,u[8]=At,u[9]=Pt,u[10]=Tt,u[11]=Bt,u[12]=St,u[13]=Et,u[14]=It,u[15]=Lt,u[16]=Nt,u[17]=kt,u[18]=Ot,0!==h&&(u[19]=h,r.length++),r};function g(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var i=0,n=0,o=0;o<r.length-1;o++){var s=n;n=0;for(var a=67108863&i,u=Math.min(o,e.length-1),h=Math.max(0,o-t.length+1);h<=u;h++){var f=o-h,c=(0|t.words[f])*(0|e.words[h]),l=67108863&c;a=67108863&(l=l+a|0),n+=(s=(s=s+(c/67108864|0)|0)+(l>>>26)|0)>>>26,s&=67108863}r.words[o]=a,i=s,s=n}return 0!==i?r.words[o]=i:r.length--,r._strip()}function y(t,e,r){return g(t,e,r)}function w(t,e){this.x=t,this.y=e}Math.imul||(v=m),o.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?v(this,t,e):r<63?m(this,t,e):r<1024?g(this,t,e):y(this,t,e)},w.prototype.makeRBT=function(t){for(var e=new Array(t),r=o.prototype._countBits(t)-1,i=0;i<t;i++)e[i]=this.revBin(i,r,t);return e},w.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var i=0,n=0;n<e;n++)i|=(1&t)<<e-n-1,t>>=1;return i},w.prototype.permute=function(t,e,r,i,n,o){for(var s=0;s<o;s++)i[s]=e[t[s]],n[s]=r[t[s]]},w.prototype.transform=function(t,e,r,i,n,o){this.permute(o,t,e,r,i,n);for(var s=1;s<n;s<<=1)for(var a=s<<1,u=Math.cos(2*Math.PI/a),h=Math.sin(2*Math.PI/a),f=0;f<n;f+=a)for(var c=u,l=h,d=0;d<s;d++){var p=r[f+d],m=i[f+d],v=r[f+d+s],g=i[f+d+s],y=c*v-l*g;g=c*g+l*v,v=y,r[f+d]=p+v,i[f+d]=m+g,r[f+d+s]=p-v,i[f+d+s]=m-g,d!==a&&(y=u*c-h*l,l=u*l+h*c,c=y)}},w.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),i=1&r,n=0;for(r=r/2|0;r;r>>>=1)n++;return 1<<n+1+i},w.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var i=0;i<r/2;i++){var n=t[i];t[i]=t[r-i-1],t[r-i-1]=n,n=e[i],e[i]=-e[r-i-1],e[r-i-1]=-n}},w.prototype.normalize13b=function(t,e){for(var r=0,i=0;i<e/2;i++){var n=8192*Math.round(t[2*i+1]/e)+Math.round(t[2*i]/e)+r;t[i]=67108863&n,r=n<67108864?0:n/67108864|0}return t},w.prototype.convert13b=function(t,e,r,n){for(var o=0,s=0;s<e;s++)o+=0|t[s],r[2*s]=8191&o,o>>>=13,r[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<n;++s)r[s]=0;i(0===o),i(0==(-8192&o))},w.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},w.prototype.mulp=function(t,e,r){var i=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(i),o=this.stub(i),s=new Array(i),a=new Array(i),u=new Array(i),h=new Array(i),f=new Array(i),c=new Array(i),l=r.words;l.length=i,this.convert13b(t.words,t.length,s,i),this.convert13b(e.words,e.length,h,i),this.transform(s,o,a,u,i,n),this.transform(h,o,f,c,i,n);for(var d=0;d<i;d++){var p=a[d]*f[d]-u[d]*c[d];u[d]=a[d]*c[d]+u[d]*f[d],a[d]=p}return this.conjugate(a,u,i),this.transform(a,u,l,o,i,n),this.conjugate(l,o,i),this.normalize13b(l,i),r.negative=t.negative^e.negative,r.length=t.length+e.length,r._strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),y(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){var e=t<0;e&&(t=-t),i("number"==typeof t),i(t<67108864);for(var r=0,n=0;n<this.length;n++){var o=(0|this.words[n])*t,s=(67108863&o)+(67108863&r);r>>=26,r+=o/67108864|0,r+=s>>>26,this.words[n]=67108863&s}return 0!==r&&(this.words[n]=r,this.length++),e?this.ineg():this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var i=r/26|0,n=r%26;e[r]=t.words[i]>>>n&1}return e}(t);if(0===e.length)return new o(1);for(var r=this,i=0;i<e.length&&0===e[i];i++,r=r.sqr());if(++i<e.length)for(var n=r.sqr();i<e.length;i++,n=n.sqr())0!==e[i]&&(r=r.mul(n));return r},o.prototype.iushln=function(t){i("number"==typeof t&&t>=0);var e,r=t%26,n=(t-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var s=0;for(e=0;e<this.length;e++){var a=this.words[e]&o,u=(0|this.words[e])-a<<r;this.words[e]=u|s,s=a>>>26-r}s&&(this.words[e]=s,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this._strip()},o.prototype.ishln=function(t){return i(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,r){var n;i("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),a=67108863^67108863>>>o<<o,u=r;if(n-=s,n=Math.max(0,n),u){for(var h=0;h<s;h++)u.words[h]=this.words[h];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,h=0;h<this.length;h++)this.words[h]=this.words[h+s];else this.words[0]=0,this.length=1;var f=0;for(h=this.length-1;h>=0&&(0!==f||h>=n);h--){var c=0|this.words[h];this.words[h]=f<<26-o|c>>>o,f=c&a}return u&&0!==f&&(u.words[u.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},o.prototype.ishrn=function(t,e,r){return i(0===this.negative),this.iushrn(t,e,r)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){i("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,n=1<<e;return!(this.length<=r)&&!!(this.words[r]&n)},o.prototype.imaskn=function(t){i("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(i(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this._strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return i("number"==typeof t),i(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<=t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(i("number"==typeof t),i(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this._strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,r){var n,o,s=t.length+r;this._expand(s);var a=0;for(n=0;n<t.length;n++){o=(0|this.words[n+r])+a;var u=(0|t.words[n])*e;a=((o-=67108863&u)>>26)-(u/67108864|0),this.words[n+r]=67108863&o}for(;n<this.length-r;n++)a=(o=(0|this.words[n+r])+a)>>26,this.words[n+r]=67108863&o;if(0===a)return this._strip();for(i(-1===a),a=0,n=0;n<this.length;n++)a=(o=-(0|this.words[n])+a)>>26,this.words[n]=67108863&o;return this.negative=1,this._strip()},o.prototype._wordDiv=function(t,e){var r=(this.length,t.length),i=this.clone(),n=t,s=0|n.words[n.length-1];0!==(r=26-this._countBits(s))&&(n=n.ushln(r),i.iushln(r),s=0|n.words[n.length-1]);var a,u=i.length-n.length;if("mod"!==e){(a=new o(null)).length=u+1,a.words=new Array(a.length);for(var h=0;h<a.length;h++)a.words[h]=0}var f=i.clone()._ishlnsubmul(n,1,u);0===f.negative&&(i=f,a&&(a.words[u]=1));for(var c=u-1;c>=0;c--){var l=67108864*(0|i.words[n.length+c])+(0|i.words[n.length+c-1]);for(l=Math.min(l/s|0,67108863),i._ishlnsubmul(n,l,c);0!==i.negative;)l--,i.negative=0,i._ishlnsubmul(n,1,c),i.isZero()||(i.negative^=1);a&&(a.words[c]=l)}return a&&a._strip(),i._strip(),"div"!==e&&0!==r&&i.iushrn(r),{div:a||null,mod:i}},o.prototype.divmod=function(t,e,r){return i(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(a=this.neg().divmod(t,e),"mod"!==e&&(n=a.div.neg()),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.iadd(t)),{div:n,mod:s}):0===this.negative&&0!==t.negative?(a=this.divmod(t.neg(),e),"mod"!==e&&(n=a.div.neg()),{div:n,mod:a.mod}):0!=(this.negative&t.negative)?(a=this.neg().divmod(t.neg(),e),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.isub(t)),{div:a.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modrn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modrn(t.words[0]))}:this._wordDiv(t,e);var n,s,a},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,i=t.ushrn(1),n=t.andln(1),o=r.cmp(i);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modrn=function(t){var e=t<0;e&&(t=-t),i(t<=67108863);for(var r=(1<<26)%t,n=0,o=this.length-1;o>=0;o--)n=(r*n+(0|this.words[o]))%t;return e?-n:n},o.prototype.modn=function(t){return this.modrn(t)},o.prototype.idivn=function(t){var e=t<0;e&&(t=-t),i(t<=67108863);for(var r=0,n=this.length-1;n>=0;n--){var o=(0|this.words[n])+67108864*r;this.words[n]=o/t|0,r=o%t}return this._strip(),e?this.ineg():this},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){i(0===t.negative),i(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n=new o(1),s=new o(0),a=new o(0),u=new o(1),h=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++h;for(var f=r.clone(),c=e.clone();!e.isZero();){for(var l=0,d=1;0==(e.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(e.iushrn(l);l-- >0;)(n.isOdd()||s.isOdd())&&(n.iadd(f),s.isub(c)),n.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(r.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(a.isOdd()||u.isOdd())&&(a.iadd(f),u.isub(c)),a.iushrn(1),u.iushrn(1);e.cmp(r)>=0?(e.isub(r),n.isub(a),s.isub(u)):(r.isub(e),a.isub(n),u.isub(s))}return{a:a,b:u,gcd:r.iushln(h)}},o.prototype._invmp=function(t){i(0===t.negative),i(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n,s=new o(1),a=new o(0),u=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var h=0,f=1;0==(e.words[0]&f)&&h<26;++h,f<<=1);if(h>0)for(e.iushrn(h);h-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var c=0,l=1;0==(r.words[0]&l)&&c<26;++c,l<<=1);if(c>0)for(r.iushrn(c);c-- >0;)a.isOdd()&&a.iadd(u),a.iushrn(1);e.cmp(r)>=0?(e.isub(r),s.isub(a)):(r.isub(e),a.isub(s))}return(n=0===e.cmpn(1)?s:a).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var i=0;e.isEven()&&r.isEven();i++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var n=e.cmp(r);if(n<0){var o=e;e=r,r=o}else if(0===n||0===r.cmpn(1))break;e.isub(r)}return r.iushln(i)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){i("number"==typeof t);var e=t%26,r=(t-e)/26,n=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=n,this;for(var o=n,s=r;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this._strip(),this.length>1)e=1;else{r&&(t=-t),i(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var i=0|this.words[r],n=0|t.words[r];if(i!==n){i<n?e=-1:i>n&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new T(t)},o.prototype.toRed=function(t){return i(!this.red,"Already a number in reduction context"),i(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return i(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return i(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return i(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return i(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return i(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return i(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return i(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return i(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return i(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return i(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return i(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return i(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return i(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var M={k256:null,p224:null,p192:null,p25519:null};function b(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function _(){b.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function x(){b.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function A(){b.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function P(){b.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function T(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else i(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function B(t){T.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}b.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},b.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var i=e<this.n?-1:r.ucmp(this.p);return 0===i?(r.words[0]=0,r.length=1):i>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},b.prototype.split=function(t,e){t.iushrn(this.n,0,e)},b.prototype.imulK=function(t){return t.imul(this.k)},n(_,b),_.prototype.split=function(t,e){for(var r=4194303,i=Math.min(t.length,9),n=0;n<i;n++)e.words[n]=t.words[n];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,n=10;n<t.length;n++){var s=0|t.words[n];t.words[n-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[n-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},_.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var i=0|t.words[r];e+=977*i,t.words[r]=67108863&e,e=64*i+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(x,b),n(A,b),n(P,b),P.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var i=19*(0|t.words[r])+e,n=67108863&i;i>>>=26,t.words[r]=n,e=i}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(M[t])return M[t];var e;if("k256"===t)e=new _;else if("p224"===t)e=new x;else if("p192"===t)e=new A;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new P}return M[t]=e,e},T.prototype._verify1=function(t){i(0===t.negative,"red works only with positives"),i(t.red,"red works only with red numbers")},T.prototype._verify2=function(t,e){i(0==(t.negative|e.negative),"red works only with positives"),i(t.red&&t.red===e.red,"red works only with red numbers")},T.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):(f(t,t.umod(this.m)._forceRed(this)),t)},T.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},T.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},T.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},T.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},T.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},T.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},T.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},T.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},T.prototype.isqr=function(t){return this.imul(t,t.clone())},T.prototype.sqr=function(t){return this.mul(t,t)},T.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(i(e%2==1),3===e){var r=this.m.add(new o(1)).iushrn(2);return this.pow(t,r)}for(var n=this.m.subn(1),s=0;!n.isZero()&&0===n.andln(1);)s++,n.iushrn(1);i(!n.isZero());var a=new o(1).toRed(this),u=a.redNeg(),h=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,h).cmp(u);)f.redIAdd(u);for(var c=this.pow(f,n),l=this.pow(t,n.addn(1).iushrn(1)),d=this.pow(t,n),p=s;0!==d.cmp(a);){for(var m=d,v=0;0!==m.cmp(a);v++)m=m.redSqr();i(v<p);var g=this.pow(c,new o(1).iushln(p-v-1));l=l.redMul(g),c=g.redSqr(),d=d.redMul(c),p=v}return l},T.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},T.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=t;for(var i=2;i<r.length;i++)r[i]=this.mul(r[i-1],t);var n=r[0],s=0,a=0,u=e.bitLength()%26;for(0===u&&(u=26),i=e.length-1;i>=0;i--){for(var h=e.words[i],f=u-1;f>=0;f--){var c=h>>f&1;n!==r[0]&&(n=this.sqr(n)),0!==c||0!==s?(s<<=1,s|=c,(4===++a||0===i&&0===f)&&(n=this.mul(n,r[s]),a=0,s=0)):a=0}u=26}return n},T.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},T.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new B(t)},n(B,T),B.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},B.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},B.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(i).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},B.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var r=t.mul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(i).iushrn(this.shift),s=n;return n.cmp(this.m)>=0?s=n.isub(this.m):n.cmpn(0)<0&&(s=n.iadd(this.m)),s._forceRed(this)},B.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=r.nmd(t),this)},54090:function(t,e,r){"use strict";var i=r(23085).Buffer,n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,n,o=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.isZeroAddress=e.zeroAddress=e.importPublic=e.privateToAddress=e.privateToPublic=e.publicToAddress=e.pubToAddress=e.isValidPublic=e.isValidPrivate=e.generateAddress2=e.generateAddress=e.isValidChecksumAddress=e.toChecksumAddress=e.isValidAddress=e.Account=void 0;var s=o(r(69282)),a=r(71856),u=r(95053),h=r(90433),f=r(32924),c=r(69611),l=r(28691),d=r(31012),p=r(27445),m=function(){function t(t,e,r,i){void 0===t&&(t=new a.BN(0)),void 0===e&&(e=new a.BN(0)),void 0===r&&(r=f.KECCAK256_RLP),void 0===i&&(i=f.KECCAK256_NULL),this.nonce=t,this.balance=e,this.stateRoot=r,this.codeHash=i,this._validate()}return t.fromAccountData=function(e){var r=e.nonce,i=e.balance,n=e.stateRoot,o=e.codeHash;return new t(r?new a.BN((0,c.toBuffer)(r)):void 0,i?new a.BN((0,c.toBuffer)(i)):void 0,n?(0,c.toBuffer)(n):void 0,o?(0,c.toBuffer)(o):void 0)},t.fromRlpSerializedAccount=function(t){var e=a.rlp.decode(t);if(!Array.isArray(e))throw new Error("Invalid serialized account input. Must be array");return this.fromValuesArray(e)},t.fromValuesArray=function(e){var r=n(e,4),i=r[0],o=r[1],s=r[2],u=r[3];return new t(new a.BN(i),new a.BN(o),s,u)},t.prototype._validate=function(){if(this.nonce.lt(new a.BN(0)))throw new Error("nonce must be greater than zero");if(this.balance.lt(new a.BN(0)))throw new Error("balance must be greater than zero");if(32!==this.stateRoot.length)throw new Error("stateRoot must have a length of 32");if(32!==this.codeHash.length)throw new Error("codeHash must have a length of 32")},t.prototype.raw=function(){return[(0,p.bnToUnpaddedBuffer)(this.nonce),(0,p.bnToUnpaddedBuffer)(this.balance),this.stateRoot,this.codeHash]},t.prototype.serialize=function(){return a.rlp.encode(this.raw())},t.prototype.isContract=function(){return!this.codeHash.equals(f.KECCAK256_NULL)},t.prototype.isEmpty=function(){return this.balance.isZero()&&this.nonce.isZero()&&this.codeHash.equals(f.KECCAK256_NULL)},t}();e.Account=m;e.isValidAddress=function(t){try{(0,d.assertIsString)(t)}catch(t){return!1}return/^0x[0-9a-fA-F]{40}$/.test(t)};e.toChecksumAddress=function(t,e){(0,d.assertIsHexString)(t);var r=(0,h.stripHexPrefix)(t).toLowerCase(),i="";e&&(i=(0,p.toType)(e,p.TypeOutput.BN).toString()+"0x");for(var n=(0,l.keccakFromString)(i+r).toString("hex"),o="0x",s=0;s<r.length;s++)parseInt(n[s],16)>=8?o+=r[s].toUpperCase():o+=r[s];return o};e.isValidChecksumAddress=function(t,r){return(0,e.isValidAddress)(t)&&(0,e.toChecksumAddress)(t,r)===t};e.generateAddress=function(t,e){(0,d.assertIsBuffer)(t),(0,d.assertIsBuffer)(e);var r=new a.BN(e);return r.isZero()?(0,l.rlphash)([t,null]).slice(-20):(0,l.rlphash)([t,i.from(r.toArray())]).slice(-20)};e.generateAddress2=function(t,e,r){return(0,d.assertIsBuffer)(t),(0,d.assertIsBuffer)(e),(0,d.assertIsBuffer)(r),(0,s.default)(20===t.length),(0,s.default)(32===e.length),(0,l.keccak256)(i.concat([i.from("ff","hex"),t,e,(0,l.keccak256)(r)])).slice(-20)};e.isValidPrivate=function(t){return(0,u.privateKeyVerify)(t)};e.isValidPublic=function(t,e){return void 0===e&&(e=!1),(0,d.assertIsBuffer)(t),64===t.length?(0,u.publicKeyVerify)(i.concat([i.from([4]),t])):!!e&&(0,u.publicKeyVerify)(t)};e.pubToAddress=function(t,e){return void 0===e&&(e=!1),(0,d.assertIsBuffer)(t),e&&64!==t.length&&(t=i.from((0,u.publicKeyConvert)(t,!1).slice(1))),(0,s.default)(64===t.length),(0,l.keccak)(t).slice(-20)},e.publicToAddress=e.pubToAddress;e.privateToPublic=function(t){return(0,d.assertIsBuffer)(t),i.from((0,u.publicKeyCreate)(t,!1)).slice(1)};e.privateToAddress=function(t){return(0,e.publicToAddress)((0,e.privateToPublic)(t))};e.importPublic=function(t){return(0,d.assertIsBuffer)(t),64!==t.length&&(t=i.from((0,u.publicKeyConvert)(t,!1).slice(1))),t};e.zeroAddress=function(){var t=(0,c.zeros)(20);return(0,c.bufferToHex)(t)};e.isZeroAddress=function(t){try{(0,d.assertIsString)(t)}catch(t){return!1}return(0,e.zeroAddress)()===t}},95797:function(t,e,r){"use strict";var i=r(23085).Buffer,n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Address=void 0;var o=n(r(69282)),s=r(71856),a=r(69611),u=r(54090),h=function(){function t(t){(0,o.default)(20===t.length,"Invalid address length"),this.buf=t}return t.zero=function(){return new t((0,a.zeros)(20))},t.fromString=function(e){return(0,o.default)((0,u.isValidAddress)(e),"Invalid address"),new t((0,a.toBuffer)(e))},t.fromPublicKey=function(e){return(0,o.default)(i.isBuffer(e),"Public key should be Buffer"),new t((0,u.pubToAddress)(e))},t.fromPrivateKey=function(e){return(0,o.default)(i.isBuffer(e),"Private key should be Buffer"),new t((0,u.privateToAddress)(e))},t.generate=function(e,r){return(0,o.default)(s.BN.isBN(r)),new t((0,u.generateAddress)(e.buf,r.toArrayLike(i)))},t.generate2=function(e,r,n){return(0,o.default)(i.isBuffer(r)),(0,o.default)(i.isBuffer(n)),new t((0,u.generateAddress2)(e.buf,r,n))},t.prototype.equals=function(t){return this.buf.equals(t.buf)},t.prototype.isZero=function(){return this.equals(t.zero())},t.prototype.isPrecompileOrSystemAddress=function(){var t=new s.BN(this.buf),e=new s.BN(0),r=new s.BN("ffff","hex");return t.gte(e)&&t.lte(r)},t.prototype.toString=function(){return"0x"+this.buf.toString("hex")},t.prototype.toBuffer=function(){return i.from(this.buf)},t}();e.Address=h},69611:function(t,e,r){"use strict";var i=r(23085).Buffer,n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],i=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,n,o=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s};Object.defineProperty(e,"__esModule",{value:!0}),e.bufArrToArr=e.arrToBufArr=e.validateNoLeadingZeroes=e.baToJSON=e.toUtf8=e.addHexPrefix=e.toUnsigned=e.fromSigned=e.bufferToHex=e.bufferToInt=e.toBuffer=e.unpadHexString=e.unpadArray=e.unpadBuffer=e.setLengthRight=e.setLengthLeft=e.zeros=e.intToBuffer=e.intToHex=void 0;var s=r(71856),a=r(90433),u=r(31012);e.intToHex=function(t){if(!Number.isSafeInteger(t)||t<0)throw new Error("Received an invalid integer type: ".concat(t));return"0x".concat(t.toString(16))};e.intToBuffer=function(t){var r=(0,e.intToHex)(t);return i.from((0,a.padToEven)(r.slice(2)),"hex")};e.zeros=function(t){return i.allocUnsafe(t).fill(0)};var h=function(t,r,i){var n=(0,e.zeros)(r);return i?t.length<r?(t.copy(n),n):t.slice(0,r):t.length<r?(t.copy(n,r-t.length),n):t.slice(-r)};e.setLengthLeft=function(t,e){return(0,u.assertIsBuffer)(t),h(t,e,!1)};e.setLengthRight=function(t,e){return(0,u.assertIsBuffer)(t),h(t,e,!0)};var f=function(t){for(var e=t[0];t.length>0&&"0"===e.toString();)e=(t=t.slice(1))[0];return t};e.unpadBuffer=function(t){return(0,u.assertIsBuffer)(t),f(t)};e.unpadArray=function(t){return(0,u.assertIsArray)(t),f(t)};e.unpadHexString=function(t){return(0,u.assertIsHexString)(t),t=(0,a.stripHexPrefix)(t),f(t)};e.toBuffer=function(t){if(null==t)return i.allocUnsafe(0);if(i.isBuffer(t))return i.from(t);if(Array.isArray(t)||t instanceof Uint8Array)return i.from(t);if("string"==typeof t){if(!(0,a.isHexString)(t))throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(t));return i.from((0,a.padToEven)((0,a.stripHexPrefix)(t)),"hex")}if("number"==typeof t)return(0,e.intToBuffer)(t);if(s.BN.isBN(t)){if(t.isNeg())throw new Error("Cannot convert negative BN to buffer. Given: ".concat(t));return t.toArrayLike(i)}if(t.toArray)return i.from(t.toArray());if(t.toBuffer)return i.from(t.toBuffer());throw new Error("invalid type")};e.bufferToInt=function(t){return new s.BN((0,e.toBuffer)(t)).toNumber()};e.bufferToHex=function(t){return"0x"+(t=(0,e.toBuffer)(t)).toString("hex")};e.fromSigned=function(t){return new s.BN(t).fromTwos(256)};e.toUnsigned=function(t){return i.from(t.toTwos(256).toArray())};e.addHexPrefix=function(t){return"string"!=typeof t||(0,a.isHexPrefixed)(t)?t:"0x"+t};e.toUtf8=function(t){if((t=(0,a.stripHexPrefix)(t)).length%2!=0)throw new Error("Invalid non-even hex string input for toUtf8() provided");return i.from(t.replace(/^(00)+|(00)+$/g,""),"hex").toString("utf8")};e.baToJSON=function(t){if(i.isBuffer(t))return"0x".concat(t.toString("hex"));if(t instanceof Array){for(var r=[],n=0;n<t.length;n++)r.push((0,e.baToJSON)(t[n]));return r}};e.validateNoLeadingZeroes=function(t){var e,r;try{for(var i=n(Object.entries(t)),s=i.next();!s.done;s=i.next()){var a=o(s.value,2),u=a[0],h=a[1];if(void 0!==h&&h.length>0&&0===h[0])throw new Error("".concat(u," cannot have leading zeroes, received: ").concat(h.toString("hex")))}}catch(t){e={error:t}}finally{try{s&&!s.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}},e.arrToBufArr=function t(e){return Array.isArray(e)?e.map((function(e){return t(e)})):i.from(e)},e.bufArrToArr=function t(e){return Array.isArray(e)?e.map((function(e){return t(e)})):Uint8Array.from(null!=e?e:[])}},32924:function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.KECCAK256_RLP=e.KECCAK256_RLP_S=e.KECCAK256_RLP_ARRAY=e.KECCAK256_RLP_ARRAY_S=e.KECCAK256_NULL=e.KECCAK256_NULL_S=e.TWO_POW256=e.MAX_INTEGER=e.MAX_UINT64=void 0;var i=r(48764),n=r(71856);e.MAX_UINT64=new n.BN("ffffffffffffffff",16),e.MAX_INTEGER=new n.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),e.TWO_POW256=new n.BN("10000000000000000000000000000000000000000000000000000000000000000",16),e.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",e.KECCAK256_NULL=i.Buffer.from(e.KECCAK256_NULL_S,"hex"),e.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",e.KECCAK256_RLP_ARRAY=i.Buffer.from(e.KECCAK256_RLP_ARRAY_S,"hex"),e.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",e.KECCAK256_RLP=i.Buffer.from(e.KECCAK256_RLP_S,"hex")},71856:function(t,e,r){"use strict";var i=this&&this.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&i(e,t,r);return n(e,t),e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.rlp=e.BN=void 0;var a=s(r(14081));e.BN=a.default;var u=o(r(51675));e.rlp=u},28691:function(t,e,r){"use strict";var i=r(23085).Buffer;Object.defineProperty(e,"__esModule",{value:!0}),e.rlphash=e.ripemd160FromArray=e.ripemd160FromString=e.ripemd160=e.sha256FromArray=e.sha256FromString=e.sha256=e.keccakFromArray=e.keccakFromHexString=e.keccakFromString=e.keccak256=e.keccak=void 0;var n=r(82192),o=r(23482),s=r(71856),a=r(69611),u=r(31012);e.keccak=function(t,e){switch(void 0===e&&(e=256),(0,u.assertIsBuffer)(t),e){case 224:return(0,n.keccak224)(t);case 256:return(0,n.keccak256)(t);case 384:return(0,n.keccak384)(t);case 512:return(0,n.keccak512)(t);default:throw new Error("Invald algorithm: keccak".concat(e))}};e.keccak256=function(t){return(0,e.keccak)(t)};e.keccakFromString=function(t,r){void 0===r&&(r=256),(0,u.assertIsString)(t);var n=i.from(t,"utf8");return(0,e.keccak)(n,r)};e.keccakFromHexString=function(t,r){return void 0===r&&(r=256),(0,u.assertIsHexString)(t),(0,e.keccak)((0,a.toBuffer)(t),r)};e.keccakFromArray=function(t,r){return void 0===r&&(r=256),(0,u.assertIsArray)(t),(0,e.keccak)((0,a.toBuffer)(t),r)};var h=function(t){return t=(0,a.toBuffer)(t),o("sha256").update(t).digest()};e.sha256=function(t){return(0,u.assertIsBuffer)(t),h(t)};e.sha256FromString=function(t){return(0,u.assertIsString)(t),h(t)};e.sha256FromArray=function(t){return(0,u.assertIsArray)(t),h(t)};var f=function(t,e){t=(0,a.toBuffer)(t);var r=o("rmd160").update(t).digest();return!0===e?(0,a.setLengthLeft)(r,32):r};e.ripemd160=function(t,e){return(0,u.assertIsBuffer)(t),f(t,e)};e.ripemd160FromString=function(t,e){return(0,u.assertIsString)(t),f(t,e)};e.ripemd160FromArray=function(t,e){return(0,u.assertIsArray)(t),f(t,e)};e.rlphash=function(t){return(0,e.keccak)(s.rlp.encode(t))}},31012:function(t,e,r){"use strict";var i=r(23085).Buffer;Object.defineProperty(e,"__esModule",{value:!0}),e.assertIsString=e.assertIsArray=e.assertIsBuffer=e.assertIsHexString=void 0;var n=r(90433);e.assertIsHexString=function(t){if(!(0,n.isHexString)(t)){var e="This method only supports 0x-prefixed hex strings but input was: ".concat(t);throw new Error(e)}};e.assertIsBuffer=function(t){if(!i.isBuffer(t)){var e="This method only supports Buffer but input was: ".concat(t);throw new Error(e)}};e.assertIsArray=function(t){if(!Array.isArray(t)){var e="This method only supports number arrays but input was: ".concat(t);throw new Error(e)}};e.assertIsString=function(t){if("string"!=typeof t){var e="This method only supports strings but input was: ".concat(t);throw new Error(e)}}},77295:function(t,e,r){"use strict";var i=this&&this.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),n=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||i(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),e.isHexString=e.getKeys=e.fromAscii=e.fromUtf8=e.toAscii=e.arrayContainsArray=e.getBinarySize=e.padToEven=e.stripHexPrefix=e.isHexPrefixed=void 0,n(r(32924),e),n(r(54090),e),n(r(95797),e),n(r(28691),e),n(r(77959),e),n(r(69611),e),n(r(88637),e),n(r(71856),e),n(r(27445),e);var o=r(90433);Object.defineProperty(e,"isHexPrefixed",{enumerable:!0,get:function(){return o.isHexPrefixed}}),Object.defineProperty(e,"stripHexPrefix",{enumerable:!0,get:function(){return o.stripHexPrefix}}),Object.defineProperty(e,"padToEven",{enumerable:!0,get:function(){return o.padToEven}}),Object.defineProperty(e,"getBinarySize",{enumerable:!0,get:function(){return o.getBinarySize}}),Object.defineProperty(e,"arrayContainsArray",{enumerable:!0,get:function(){return o.arrayContainsArray}}),Object.defineProperty(e,"toAscii",{enumerable:!0,get:function(){return o.toAscii}}),Object.defineProperty(e,"fromUtf8",{enumerable:!0,get:function(){return o.fromUtf8}}),Object.defineProperty(e,"fromAscii",{enumerable:!0,get:function(){return o.fromAscii}}),Object.defineProperty(e,"getKeys",{enumerable:!0,get:function(){return o.getKeys}}),Object.defineProperty(e,"isHexString",{enumerable:!0,get:function(){return o.isHexString}})},90433:function(t,e,r){"use strict";var i=r(23085).Buffer;function n(t){if("string"!=typeof t)throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof t));return"0"===t[0]&&"x"===t[1]}Object.defineProperty(e,"__esModule",{value:!0}),e.isHexString=e.getKeys=e.fromAscii=e.fromUtf8=e.toAscii=e.arrayContainsArray=e.getBinarySize=e.padToEven=e.stripHexPrefix=e.isHexPrefixed=void 0,e.isHexPrefixed=n;function o(t){var e=t;if("string"!=typeof e)throw new Error("[padToEven] value must be type 'string', received ".concat(typeof e));return e.length%2&&(e="0".concat(e)),e}e.stripHexPrefix=function(t){if("string"!=typeof t)throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof t));return n(t)?t.slice(2):t},e.padToEven=o,e.getBinarySize=function(t){if("string"!=typeof t)throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof t));return i.byteLength(t,"utf8")},e.arrayContainsArray=function(t,e,r){if(!0!==Array.isArray(t))throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof t,"'"));if(!0!==Array.isArray(e))throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof e,"'"));return e[r?"some":"every"]((function(e){return t.indexOf(e)>=0}))},e.toAscii=function(t){var e="",r=0,i=t.length;for("0x"===t.substring(0,2)&&(r=2);r<i;r+=2){var n=parseInt(t.substr(r,2),16);e+=String.fromCharCode(n)}return e},e.fromUtf8=function(t){var e=i.from(t,"utf8");return"0x".concat(o(e.toString("hex")).replace(/^0+|0+$/g,""))},e.fromAscii=function(t){for(var e="",r=0;r<t.length;r++){var i=t.charCodeAt(r).toString(16);e+=i.length<2?"0".concat(i):i}return"0x".concat(e)},e.getKeys=function(t,e,r){if(!Array.isArray(t))throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof t));if("string"!=typeof e)throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof t));for(var i=[],n=0;n<t.length;n++){var o=t[n][e];if(r&&!o)o="";else if("string"!=typeof o)throw new Error("invalid abi - expected type 'string', received ".concat(typeof o));i.push(o)}return i},e.isHexString=function(t,e){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/))&&(!e||t.length===2+2*e)}},88637:function(t,e,r){"use strict";var i=r(23085).Buffer,n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.defineProperties=void 0;var o=n(r(69282)),s=r(90433),a=r(71856),u=r(69611);e.defineProperties=function(t,e,r){if(t.raw=[],t._fields=[],t.toJSON=function(e){if(void 0===e&&(e=!1),e){var r={};return t._fields.forEach((function(e){r[e]="0x".concat(t[e].toString("hex"))})),r}return(0,u.baToJSON)(t.raw)},t.serialize=function(){return a.rlp.encode(t.raw)},e.forEach((function(e,r){function n(){return t.raw[r]}function s(n){"00"!==(n=(0,u.toBuffer)(n)).toString("hex")||e.allowZero||(n=i.allocUnsafe(0)),e.allowLess&&e.length?(n=(0,u.unpadBuffer)(n),(0,o.default)(e.length>=n.length,"The field ".concat(e.name," must not have more ").concat(e.length," bytes"))):e.allowZero&&0===n.length||!e.length||(0,o.default)(e.length===n.length,"The field ".concat(e.name," must have byte length of ").concat(e.length)),t.raw[r]=n}t._fields.push(e.name),Object.defineProperty(t,e.name,{enumerable:!0,configurable:!0,get:n,set:s}),e.default&&(t[e.name]=e.default),e.alias&&Object.defineProperty(t,e.alias,{enumerable:!1,configurable:!0,set:s,get:n})})),r)if("string"==typeof r&&(r=i.from((0,s.stripHexPrefix)(r),"hex")),i.isBuffer(r)&&(r=a.rlp.decode(r)),Array.isArray(r)){if(r.length>t._fields.length)throw new Error("wrong number of fields in data");r.forEach((function(e,r){t[t._fields[r]]=(0,u.toBuffer)(e)}))}else{if("object"!=typeof r)throw new Error("invalid data");var n=Object.keys(r);e.forEach((function(e){-1!==n.indexOf(e.name)&&(t[e.name]=r[e.name]),-1!==n.indexOf(e.alias)&&(t[e.alias]=r[e.alias])}))}}},77959:function(t,e,r){"use strict";var i=r(23085).Buffer;Object.defineProperty(e,"__esModule",{value:!0}),e.hashPersonalMessage=e.isValidSignature=e.fromRpcSig=e.toCompactSig=e.toRpcSig=e.ecrecover=e.ecsign=void 0;var n=r(95053),o=r(71856),s=r(69611),a=r(28691),u=r(31012),h=r(27445);function f(t,e){var r=(0,h.toType)(t,h.TypeOutput.BN);if(!e)return r.subn(27);var i=(0,h.toType)(e,h.TypeOutput.BN);return r.sub(i.muln(2).addn(35))}function c(t){var e=new o.BN(t);return e.eqn(0)||e.eqn(1)}e.ecsign=function(t,e,r){var o=(0,n.ecdsaSign)(t,e),s=o.signature,a=o.recid,u=i.from(s.slice(0,32)),f=i.from(s.slice(32,64));if(!r||"number"==typeof r){if(r&&!Number.isSafeInteger(r))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");return{r:u,s:f,v:r?a+(2*r+35):a+27}}return{r:u,s:f,v:(0,h.toType)(r,h.TypeOutput.BN).muln(2).addn(35).addn(a).toArrayLike(i)}};e.ecrecover=function(t,e,r,o,a){var u=i.concat([(0,s.setLengthLeft)(r,32),(0,s.setLengthLeft)(o,32)],64),h=f(e,a);if(!c(h))throw new Error("Invalid signature v value");var l=(0,n.ecdsaRecover)(u,h.toNumber(),t);return i.from((0,n.publicKeyConvert)(l,!1).slice(1))};e.toRpcSig=function(t,e,r,n){if(!c(f(t,n)))throw new Error("Invalid signature v value");return(0,s.bufferToHex)(i.concat([(0,s.setLengthLeft)(e,32),(0,s.setLengthLeft)(r,32),(0,s.toBuffer)(t)]))};e.toCompactSig=function(t,e,r,n){if(!c(f(t,n)))throw new Error("Invalid signature v value");var o=(0,h.toType)(t,h.TypeOutput.Number),a=r;return(o>28&&o%2==1||1===o||28===o)&&((a=i.from(r))[0]|=128),(0,s.bufferToHex)(i.concat([(0,s.setLengthLeft)(e,32),(0,s.setLengthLeft)(a,32)]))};e.fromRpcSig=function(t){var e,r,i,n=(0,s.toBuffer)(t);if(n.length>=65)e=n.slice(0,32),r=n.slice(32,64),i=(0,s.bufferToInt)(n.slice(64));else{if(64!==n.length)throw new Error("Invalid signature length");e=n.slice(0,32),r=n.slice(32,64),i=(0,s.bufferToInt)(n.slice(32,33))>>7,r[0]&=127}return i<27&&(i+=27),{v:i,r:e,s:r}};e.isValidSignature=function(t,e,r,i,n){void 0===i&&(i=!0);var s=new o.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),a=new o.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);if(32!==e.length||32!==r.length)return!1;if(!c(f(t,n)))return!1;var u=new o.BN(e),h=new o.BN(r);return!(u.isZero()||u.gt(a)||h.isZero()||h.gt(a))&&(!i||1!==h.cmp(s))};e.hashPersonalMessage=function(t){(0,u.assertIsBuffer)(t);var e=i.from("Ethereum Signed Message:\n".concat(t.length),"utf-8");return(0,a.keccak)(i.concat([e,t]))}},27445:function(t,e,r){"use strict";var i=r(23085).Buffer;Object.defineProperty(e,"__esModule",{value:!0}),e.toType=e.TypeOutput=e.bnToRlp=e.bnToUnpaddedBuffer=e.bnToHex=void 0;var n,o=r(71856),s=r(90433),a=r(69611);function u(t){return(0,a.unpadBuffer)(t.toArrayLike(i))}e.bnToHex=function(t){return"0x".concat(t.toString(16))},e.bnToUnpaddedBuffer=u,e.bnToRlp=function(t){return u(t)},function(t){t[t.Number=0]="Number",t[t.BN=1]="BN",t[t.Buffer=2]="Buffer",t[t.PrefixedHexString=3]="PrefixedHexString"}(n=e.TypeOutput||(e.TypeOutput={})),e.toType=function(t,e){if(null===t)return null;if(void 0!==t){if("string"==typeof t&&!(0,s.isHexString)(t))throw new Error("A string must be provided with a 0x-prefix, given: ".concat(t));if("number"==typeof t&&!Number.isSafeInteger(t))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");var r=(0,a.toBuffer)(t);if(e===n.Buffer)return r;if(e===n.BN)return new o.BN(r);if(e===n.Number){var i=new o.BN(r),u=new o.BN(Number.MAX_SAFE_INTEGER.toString());if(i.gt(u))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");return i.toNumber()}return"0x".concat(r.toString("hex"))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
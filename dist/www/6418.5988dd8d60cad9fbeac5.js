"use strict";(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[6418],{66418:function(e,i,d){d.r(i);var r=d(85893),s=d(67294),c=d(77044),l=d(3283),n=d.n(l);const t=()=>{const{account:e,library:i}=(0,c.Ge)(),[d,l]=s.useState(),t=new(n())(n().givenProvider);return s.useEffect((()=>{if(e&&i){let i=!1;return t.eth.getBalance(e).then((e=>{var d=t.utils.fromWei(e,"ether");i||l(d)})).catch((()=>{i||l("NaN")})),()=>{l(void 0)}}}),[e,i]),(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("p",{id:"title",children:["ETH: ",null===d?"Error":d?`${d}`:""]},void 0)},void 0)};i.default=()=>{const{account:e,library:i}=(0,c.Ge)();return e&&i?(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("div",{id:"footer",children:(0,r.jsxs)("div",{className:"row",children:[(0,r.jsx)("div",{className:"col-3",children:(0,r.jsx)("p",{id:"title",children:"Wallet Connected"},void 0)},void 0),(0,r.jsx)("div",{className:"col-3",children:(0,r.jsx)(t,{},void 0)},void 0)]},void 0)},void 0)},void 0):(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("div",{id:"footer",children:(0,r.jsx)("div",{className:"row",children:(0,r.jsx)("div",{className:"ml-5 col-3",children:(0,r.jsx)("p",{id:"title",children:"Welcome to HugiRIS"},void 0)},void 0)},void 0)},void 0)},void 0)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQxOC41OTg4ZGQ4ZDYwY2FkOWZiZWFjNS5qcyIsIm1hcHBpbmdzIjoiZ0xBTUEsTUFBTUEsRUFBYSxLQUNmLE1BQU0sUUFBRUMsRUFBTyxRQUFFQyxJQUFZLFdBQ3RCQyxFQUFZQyxHQUFpQixhQUM5QkMsRUFBTyxJQUFJLElBQUosQ0FBUyxtQkEwQnRCLE9BeEJBLGFBQWdCLEtBQ1osR0FBTUosR0FBYUMsRUFBUyxDQUN4QixJQUFJSSxHQUFRLEVBZ0JaLE9BZEFELEVBQUtFLElBQ0FDLFdBQVdQLEdBQ1hRLE1BQU1DLElBQ0gsSUFBSUMsRUFBVU4sRUFBS08sTUFBTUMsUUFBUUgsRUFBSyxTQUNqQ0osR0FDREYsRUFBY08sTUFHckJHLE9BQU0sS0FDRVIsR0FDREYsRUFBYyxVQUluQixLQUNIQSxPQUFjVyxPQUd2QixDQUFDZCxFQUFTQyxLQUdULCtCQUNJLGVBQUdjLEdBQUcsUUFBTyxrQkFBc0IsT0FBZmIsRUFBc0IsUUFBVUEsRUFBYSxHQUFHQSxJQUFlLFVBQUUsU0FBSyxJQStFdEcsVUFuQ2UsS0FDWCxNQUFNLFFBQUVGLEVBQU8sUUFBRUMsSUFBWSxVQUM3QixPQUFLRCxHQUFZQyxHQWNULCtCQUNJLGdCQUFLYyxHQUFHLFNBQVEsVUFDWixpQkFBS0MsVUFBVSxNQUFLLFdBQ2hCLGdCQUFLQSxVQUFVLFFBQU8sVUFDbEIsY0FBR0QsR0FBRyxRQUFPLDJDQUFxQixJQUt0QyxnQkFBS0MsVUFBVSxRQUFPLFVBQ2xCLFNBQUNqQixFQUFVLGlCQUFHLFVBQ1osU0FDSixTQUNKLElBekJWLCtCQUNJLGdCQUFLZ0IsR0FBRyxTQUFRLFVBQ1osZ0JBQUtDLFVBQVUsTUFBSyxVQUNoQixnQkFBS0EsVUFBVSxhQUFZLFVBQ3ZCLGNBQUdELEdBQUcsUUFBTyw2Q0FBdUIsU0FDbEMsU0FDSixTQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9zcmMvY29tcG9uZW50cy9Gb290ZXIvRm9vdGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLy8gaW1wb3J0IHsgTGluaywgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IHVzZVdlYjNSZWFjdCB9IGZyb20gJ0B3ZWIzLXJlYWN0L2NvcmUnO1xuaW1wb3J0IFdlYjMgZnJvbSAnd2ViMyc7XG5pbXBvcnQgJy4vaW5kZXguY3NzJztcblxuY29uc3QgRVRIQmFsYW5jZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IGFjY291bnQsIGxpYnJhcnkgfSA9IHVzZVdlYjNSZWFjdCgpO1xuICAgIGNvbnN0IFtldGhiYWxhbmNlLCBzZXRFdGhiYWxhbmNlXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZz4oKTtcbiAgICBjb25zdCB3ZWIzID0gbmV3IFdlYjMoV2ViMy5naXZlblByb3ZpZGVyKTtcblxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKTogYW55ID0+IHtcbiAgICAgICAgaWYgKCEhYWNjb3VudCAmJiAhIWxpYnJhcnkpIHtcbiAgICAgICAgICAgIGxldCBzdGFsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICB3ZWIzLmV0aFxuICAgICAgICAgICAgICAgIC5nZXRCYWxhbmNlKGFjY291bnQpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHdlaTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiYWxhbmNlID0gd2ViMy51dGlscy5mcm9tV2VpKHdlaSwgJ2V0aGVyJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3RhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEV0aGJhbGFuY2UoYmFsYW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3RhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEV0aGJhbGFuY2UoJ05hTicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0RXRoYmFsYW5jZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sIFthY2NvdW50LCBsaWJyYXJ5XSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPHAgaWQ9XCJ0aXRsZVwiPkVUSDoge2V0aGJhbGFuY2UgPT09IG51bGwgPyAnRXJyb3InIDogZXRoYmFsYW5jZSA/IGAke2V0aGJhbGFuY2V9YCA6ICcnfTwvcD5cbiAgICAgICAgPC8+XG4gICAgKTtcbn07XG5cbi8vIGNvbnN0IEJUQ0JhbGFuY2UgPSAoKSA9PiB7XG4vLyAgICAgY29uc3QgeyBhY2NvdW50LCBsaWJyYXJ5LCBjaGFpbklkIH0gPSB1c2VXZWIzUmVhY3QoKTtcbi8vICAgICBjb25zdCBbYnRjYmFsYW5jZSwgc2V0QnRjYmFsYW5jZV0gPSBSZWFjdC51c2VTdGF0ZTxudW1iZXI+KCk7XG4vLyAgICAgY29uc3Qgd2ViMyA9IG5ldyBXZWIzKCdodHRwczovL2JzYy1kYXRhc2VlZDEuYmluYW5jZS5vcmc6NDQzJyk7XG5cbi8vICAgICBjb25zdCBBZGRyZXNzID0gJzB4NWFGMDNEYmREODI3M0E4MUI5ZTcxM0FGODIxRDI1ZTgxOWQzMTg5NCc7XG4vLyAgICAgY29uc3QgQml0Y29pbkFCSSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVxdWlyZSgnLi9CaXRjb2luQUJJLmpzb24nKSkpO1xuLy8gICAgIGNvbnN0IEJUQ2NvbnRyYWN0ID0gbmV3IHdlYjMuZXRoLkNvbnRyYWN0KEJpdGNvaW5BQkksIEFkZHJlc3MpO1xuLy8gICAgIFJlYWN0LnVzZUVmZmVjdCgoKTogYW55ID0+IHtcbi8vICAgICAgICAgaWYgKCEhYWNjb3VudCAmJiAhIWxpYnJhcnkpIHtcbi8vICAgICAgICAgICAgIGxldCBzdGFsZSA9IGZhbHNlO1xuXG4vLyAgICAgICAgICAgICBCVENjb250cmFjdC5tZXRob2RzXG4vLyAgICAgICAgICAgICAgICAgLmJhbGFuY2VPZihhY2NvdW50KVxuLy8gICAgICAgICAgICAgICAgIC5jYWxsKClcbi8vICAgICAgICAgICAgICAgICAudGhlbigoYmFsYW5jZTogYW55KSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhbGUpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHNldEJ0Y2JhbGFuY2UoYmFsYW5jZSk7XG4vLyAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICB9KVxuLy8gICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhbGUpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHNldEJ0Y2JhbGFuY2UoTmFOKTtcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIH0pO1xuXG4vLyAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuLy8gICAgICAgICAgICAgICAgIHNldEJ0Y2JhbGFuY2UodW5kZWZpbmVkKTtcbi8vICAgICAgICAgICAgIH07XG4vLyAgICAgICAgIH1cbi8vICAgICB9LCBbYWNjb3VudCwgbGlicmFyeSwgY2hhaW5JZCwgQlRDY29udHJhY3QubWV0aG9kc10pO1xuLy8gICAgIC8vIGNvbnNvbGUubG9nKGJ0Y2JhbGFuY2UpO1xuLy8gICAgIHJldHVybiAoXG4vLyAgICAgICAgIDw+XG4vLyAgICAgICAgICAgICA8cCBpZD1cInRpdGxlXCI+QlRDOiB7YnRjYmFsYW5jZSA9PT0gbnVsbCA/ICdFcnJvcicgOiBidGNiYWxhbmNlID8gYCR7YnRjYmFsYW5jZX1gIDogJyd9PC9wPlxuLy8gICAgICAgICA8Lz5cbi8vICAgICApO1xuLy8gfTtcblxuY29uc3QgRm9vdGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgYWNjb3VudCwgbGlicmFyeSB9ID0gdXNlV2ViM1JlYWN0KCk7XG4gICAgaWYgKCFhY2NvdW50IHx8ICFsaWJyYXJ5KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJmb290ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWwtNSBjb2wtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGlkPVwidGl0bGVcIj5XZWxjb21lIHRvIEh1Z2lSSVM8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZm9vdGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgaWQ9XCJ0aXRsZVwiPldhbGxldCBDb25uZWN0ZWQ8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsvKiA8ZGl2IGNsYXNzTmFtZT1cImNvbC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJUQ0JhbGFuY2UgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAqL31cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RVRIQmFsYW5jZSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9vdGVyO1xuIl0sIm5hbWVzIjpbIkVUSEJhbGFuY2UiLCJhY2NvdW50IiwibGlicmFyeSIsImV0aGJhbGFuY2UiLCJzZXRFdGhiYWxhbmNlIiwid2ViMyIsInN0YWxlIiwiZXRoIiwiZ2V0QmFsYW5jZSIsInRoZW4iLCJ3ZWkiLCJiYWxhbmNlIiwidXRpbHMiLCJmcm9tV2VpIiwiY2F0Y2giLCJ1bmRlZmluZWQiLCJpZCIsImNsYXNzTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=
(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[5187],{13048:function(r,t,e){var o=e(89509).Buffer,n=e(62318);r.exports=function(r,t,e,i){if(o.isBuffer(r)||(r=o.from(r,"binary")),t&&(o.isBuffer(t)||(t=o.from(t,"binary")),8!==t.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var a=e/8,y=o.alloc(a),p=o.alloc(i||0),f=o.alloc(0);a>0||i>0;){var c=new n;c.update(f),c.update(r),t&&c.update(t),f=c.digest();var u=0;if(a>0){var l=y.length-a;u=Math.min(a,f.length),f.copy(y,l,0,u),a-=u}if(u<f.length&&i>0){var s=p.length-i,d=Math.min(i,f.length-u);f.copy(p,s,u,u+d),i-=d}}return f.fill(0),{key:y,iv:p}}},4445:function(r){r.exports=a,a.default=a,a.stable=c,a.stableStringify=c;var t="[...]",e="[Circular]",o=[],n=[];function i(){return{depthLimit:Number.MAX_SAFE_INTEGER,edgesLimit:Number.MAX_SAFE_INTEGER}}function a(r,t,e,a){var y;void 0===a&&(a=i()),p(r,"",0,[],void 0,0,a);try{y=0===n.length?JSON.stringify(r,t,e):JSON.stringify(r,l(t),e)}catch(r){return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]")}finally{for(;0!==o.length;){var f=o.pop();4===f.length?Object.defineProperty(f[0],f[1],f[3]):f[0][f[1]]=f[2]}}return y}function y(r,t,e,i){var a=Object.getOwnPropertyDescriptor(i,e);void 0!==a.get?a.configurable?(Object.defineProperty(i,e,{value:r}),o.push([i,e,t,a])):n.push([t,e,r]):(i[e]=r,o.push([i,e,t]))}function p(r,o,n,i,a,f,c){var u;if(f+=1,"object"==typeof r&&null!==r){for(u=0;u<i.length;u++)if(i[u]===r)return void y(e,r,o,a);if(void 0!==c.depthLimit&&f>c.depthLimit)return void y(t,r,o,a);if(void 0!==c.edgesLimit&&n+1>c.edgesLimit)return void y(t,r,o,a);if(i.push(r),Array.isArray(r))for(u=0;u<r.length;u++)p(r[u],u,u,i,r,f,c);else{var l=Object.keys(r);for(u=0;u<l.length;u++){var s=l[u];p(r[s],s,u,i,r,f,c)}}i.pop()}}function f(r,t){return r<t?-1:r>t?1:0}function c(r,t,e,a){void 0===a&&(a=i());var y,p=u(r,"",0,[],void 0,0,a)||r;try{y=0===n.length?JSON.stringify(p,t,e):JSON.stringify(p,l(t),e)}catch(r){return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]")}finally{for(;0!==o.length;){var f=o.pop();4===f.length?Object.defineProperty(f[0],f[1],f[3]):f[0][f[1]]=f[2]}}return y}function u(r,n,i,a,p,c,l){var s;if(c+=1,"object"==typeof r&&null!==r){for(s=0;s<a.length;s++)if(a[s]===r)return void y(e,r,n,p);try{if("function"==typeof r.toJSON)return}catch(r){return}if(void 0!==l.depthLimit&&c>l.depthLimit)return void y(t,r,n,p);if(void 0!==l.edgesLimit&&i+1>l.edgesLimit)return void y(t,r,n,p);if(a.push(r),Array.isArray(r))for(s=0;s<r.length;s++)u(r[s],s,s,a,r,c,l);else{var d={},A=Object.keys(r).sort(f);for(s=0;s<A.length;s++){var g=A[s];u(r[g],g,s,a,r,c,l),d[g]=r[g]}if(void 0===p)return d;o.push([p,n,r]),p[n]=d}a.pop()}}function l(r){return r=void 0!==r?r:function(r,t){return t},function(t,e){if(n.length>0)for(var o=0;o<n.length;o++){var i=n[o];if(i[1]===t&&i[0]===e){e=i[2],n.splice(o,1);break}}return r.call(this,t,e)}}},49804:function(r){var t=Object.prototype.hasOwnProperty,e=Object.prototype.toString;r.exports=function(r,o,n){if("[object Function]"!==e.call(o))throw new TypeError("iterator must be a function");var i=r.length;if(i===+i)for(var a=0;a<i;a++)o.call(n,r[a],a,r);else for(var y in r)t.call(r,y)&&o.call(n,r[y],y,r)}},17648:function(r){"use strict";var t="Function.prototype.bind called on incompatible ",e=Array.prototype.slice,o=Object.prototype.toString,n="[object Function]";r.exports=function(r){var i=this;if("function"!=typeof i||o.call(i)!==n)throw new TypeError(t+i);for(var a,y=e.call(arguments,1),p=function(){if(this instanceof a){var t=i.apply(this,y.concat(e.call(arguments)));return Object(t)===t?t:this}return i.apply(r,y.concat(e.call(arguments)))},f=Math.max(0,i.length-y.length),c=[],u=0;u<f;u++)c.push("$"+u);if(a=Function("binder","return function ("+c.join(",")+"){ return binder.apply(this,arguments); }")(p),i.prototype){var l=function(){};l.prototype=i.prototype,a.prototype=new l,l.prototype=null}return a}},58612:function(r,t,e){"use strict";var o=e(17648);r.exports=Function.prototype.bind||o},40210:function(r,t,e){"use strict";var o,n=SyntaxError,i=Function,a=TypeError,y=function(r){try{return i('"use strict"; return ('+r+").constructor;")()}catch(r){}},p=Object.getOwnPropertyDescriptor;if(p)try{p({},"")}catch(r){p=null}var f=function(){throw new a},c=p?function(){try{return f}catch(r){try{return p(arguments,"callee").get}catch(r){return f}}}():f,u=e(41405)(),l=Object.getPrototypeOf||function(r){return r.__proto__},s={},d="undefined"==typeof Uint8Array?o:l(Uint8Array),A={"%AggregateError%":"undefined"==typeof AggregateError?o:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?o:ArrayBuffer,"%ArrayIteratorPrototype%":u?l([][Symbol.iterator]()):o,"%AsyncFromSyncIteratorPrototype%":o,"%AsyncFunction%":s,"%AsyncGenerator%":s,"%AsyncGeneratorFunction%":s,"%AsyncIteratorPrototype%":s,"%Atomics%":"undefined"==typeof Atomics?o:Atomics,"%BigInt%":"undefined"==typeof BigInt?o:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?o:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?o:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?o:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?o:FinalizationRegistry,"%Function%":i,"%GeneratorFunction%":s,"%Int8Array%":"undefined"==typeof Int8Array?o:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?o:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?o:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":u?l(l([][Symbol.iterator]())):o,"%JSON%":"object"==typeof JSON?JSON:o,"%Map%":"undefined"==typeof Map?o:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&u?l((new Map)[Symbol.iterator]()):o,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?o:Promise,"%Proxy%":"undefined"==typeof Proxy?o:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?o:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?o:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&u?l((new Set)[Symbol.iterator]()):o,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?o:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":u?l(""[Symbol.iterator]()):o,"%Symbol%":u?Symbol:o,"%SyntaxError%":n,"%ThrowTypeError%":c,"%TypedArray%":d,"%TypeError%":a,"%Uint8Array%":"undefined"==typeof Uint8Array?o:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?o:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?o:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?o:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?o:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?o:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?o:WeakSet},g=function r(t){var e;if("%AsyncFunction%"===t)e=y("async function () {}");else if("%GeneratorFunction%"===t)e=y("function* () {}");else if("%AsyncGeneratorFunction%"===t)e=y("async function* () {}");else if("%AsyncGenerator%"===t){var o=r("%AsyncGeneratorFunction%");o&&(e=o.prototype)}else if("%AsyncIteratorPrototype%"===t){var n=r("%AsyncGenerator%");n&&(e=l(n.prototype))}return A[t]=e,e},h={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},v=e(58612),P=e(17642),m=v.call(Function.call,Array.prototype.concat),b=v.call(Function.apply,Array.prototype.splice),S=v.call(Function.call,String.prototype.replace),E=v.call(Function.call,String.prototype.slice),w=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,F=/\\(\\)?/g,I=function(r){var t=E(r,0,1),e=E(r,-1);if("%"===t&&"%"!==e)throw new n("invalid intrinsic syntax, expected closing `%`");if("%"===e&&"%"!==t)throw new n("invalid intrinsic syntax, expected opening `%`");var o=[];return S(r,w,(function(r,t,e,n){o[o.length]=e?S(n,F,"$1"):t||r})),o},O=function(r,t){var e,o=r;if(P(h,o)&&(o="%"+(e=h[o])[0]+"%"),P(A,o)){var i=A[o];if(i===s&&(i=g(o)),void 0===i&&!t)throw new a("intrinsic "+r+" exists, but is not available. Please file an issue!");return{alias:e,name:o,value:i}}throw new n("intrinsic "+r+" does not exist!")};r.exports=function(r,t){if("string"!=typeof r||0===r.length)throw new a("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new a('"allowMissing" argument must be a boolean');var e=I(r),o=e.length>0?e[0]:"",i=O("%"+o+"%",t),y=i.name,f=i.value,c=!1,u=i.alias;u&&(o=u[0],b(e,m([0,1],u)));for(var l=1,s=!0;l<e.length;l+=1){var d=e[l],g=E(d,0,1),h=E(d,-1);if(('"'===g||"'"===g||"`"===g||'"'===h||"'"===h||"`"===h)&&g!==h)throw new n("property names with quotes must have matching quotes");if("constructor"!==d&&s||(c=!0),P(A,y="%"+(o+="."+d)+"%"))f=A[y];else if(null!=f){if(!(d in f)){if(!t)throw new a("base intrinsic for "+r+" exists, but the property is not available.");return}if(p&&l+1>=e.length){var v=p(f,d);f=(s=!!v)&&"get"in v&&!("originalValue"in v.get)?v.get:f[d]}else s=P(f,d),f=f[d];s&&!c&&(A[y]=f)}}return f}},58908:function(r,t,e){var o;o="undefined"!=typeof window?window:void 0!==e.g?e.g:"undefined"!=typeof self?self:{},r.exports=o}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/*! For license information please see vendors-c87e6db1.a8cde73e4e5533b9a8b1.js.LICENSE.txt */
(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[2827],{284:function(e){var t=function(){if("object"==typeof self&&self)return self;if("object"==typeof window&&window)return window;throw new Error("Unable to resolve global `this`")};e.exports=function(){if(this)return this;if("object"==typeof globalThis&&globalThis)return globalThis;try{Object.defineProperty(Object.prototype,"__global__",{get:function(){return this},configurable:!0})}catch(e){return t()}try{return __global__||t()}finally{delete Object.prototype.__global__}}()},8091:function(e){"use strict";function t(e,t){if(null==e)throw new TypeError("Cannot convert first argument to object");for(var r=Object(e),n=1;n<arguments.length;n++){var s=arguments[n];if(null!=s)for(var o=Object.keys(Object(s)),i=0,a=o.length;i<a;i++){var c=o[i],u=Object.getOwnPropertyDescriptor(s,c);void 0!==u&&u.enumerable&&(r[c]=s[c])}}return r}e.exports={assign:t,polyfill:function(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:t})}}},53786:function(e){"use strict";const t=(e,t)=>function(){const r=t.promiseModule,n=new Array(arguments.length);for(let e=0;e<arguments.length;e++)n[e]=arguments[e];return new r(((r,s)=>{t.errorFirst?n.push((function(e,n){if(t.multiArgs){const t=new Array(arguments.length-1);for(let e=1;e<arguments.length;e++)t[e-1]=arguments[e];e?(t.unshift(e),s(t)):r(t)}else e?s(e):r(n)})):n.push((function(e){if(t.multiArgs){const e=new Array(arguments.length-1);for(let t=0;t<arguments.length;t++)e[t]=arguments[t];r(e)}else r(e)})),e.apply(this,n)}))};e.exports=(e,r)=>{r=Object.assign({exclude:[/.+(Sync|Stream)$/],errorFirst:!0,promiseModule:Promise},r);const n=e=>{const t=t=>"string"==typeof t?e===t:t.test(e);return r.include?r.include.some(t):!r.exclude.some(t)};let s;s="function"==typeof e?function(){return r.excludeMain?e.apply(this,arguments):t(e,r).apply(this,arguments)}:Object.create(Object.getPrototypeOf(e));for(const o in e){const i=e[o];s[o]="function"==typeof i&&n(o)?t(i,r):i}return s}},55850:function(e,t,r){r(75682),r(53786);const n=r(37253),s=(e,t)=>e+t,o=["sync","latest"];function i(e){return Number.parseInt(e,16)}e.exports=class extends n{constructor(e={}){super(),this._blockResetDuration=e.blockResetDuration||2e4,this._blockResetTimeout,this._currentBlock=null,this._isRunning=!1,this._onNewListener=this._onNewListener.bind(this),this._onRemoveListener=this._onRemoveListener.bind(this),this._resetCurrentBlock=this._resetCurrentBlock.bind(this),this._setupInternalEvents()}isRunning(){return this._isRunning}getCurrentBlock(){return this._currentBlock}async getLatestBlock(){if(this._currentBlock)return this._currentBlock;return await new Promise((e=>this.once("latest",e)))}removeAllListeners(e){e?super.removeAllListeners(e):super.removeAllListeners(),this._setupInternalEvents(),this._onRemoveListener()}_start(){}_end(){}_setupInternalEvents(){this.removeListener("newListener",this._onNewListener),this.removeListener("removeListener",this._onRemoveListener),this.on("newListener",this._onNewListener),this.on("removeListener",this._onRemoveListener)}_onNewListener(e,t){o.includes(e)&&this._maybeStart()}_onRemoveListener(e,t){this._getBlockTrackerEventCount()>0||this._maybeEnd()}_maybeStart(){this._isRunning||(this._isRunning=!0,this._cancelBlockResetTimeout(),this._start())}_maybeEnd(){this._isRunning&&(this._isRunning=!1,this._setupBlockResetTimeout(),this._end())}_getBlockTrackerEventCount(){return o.map((e=>this.listenerCount(e))).reduce(s)}_newPotentialLatest(e){const t=this._currentBlock;t&&i(e)<=i(t)||this._setCurrentBlock(e)}_setCurrentBlock(e){const t=this._currentBlock;this._currentBlock=e,this.emit("latest",e),this.emit("sync",{oldBlock:t,newBlock:e})}_setupBlockResetTimeout(){this._cancelBlockResetTimeout(),this._blockResetTimeout=setTimeout(this._resetCurrentBlock,this._blockResetDuration),this._blockResetTimeout.unref&&this._blockResetTimeout.unref()}_cancelBlockResetTimeout(){clearTimeout(this._blockResetTimeout)}_resetCurrentBlock(){this._currentBlock=null}}},75012:function(e,t,r){var n=r(25108);const s=r(53786),o=r(55850);function i(e,t){return new Promise((r=>{const n=setTimeout(r,e);n.unref&&t&&n.unref()}))}e.exports=class extends o{constructor(e={}){if(!e.provider)throw new Error("PollingBlockTracker - no provider specified.");const t=e.pollingInterval||2e4,r=e.retryTimeout||t/10,n=void 0===e.keepEventLoopActive||e.keepEventLoopActive,s=e.setSkipCacheFlag||!1;super(Object.assign({blockResetDuration:t},e)),this._provider=e.provider,this._pollingInterval=t,this._retryTimeout=r,this._keepEventLoopActive=n,this._setSkipCacheFlag=s}async checkForLatestBlock(){return await this._updateLatestBlock(),await this.getLatestBlock()}_start(){this._performSync().catch((e=>this.emit("error",e)))}async _performSync(){for(;this._isRunning;)try{await this._updateLatestBlock(),await i(this._pollingInterval,!this._keepEventLoopActive)}catch(e){const t=new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${e.stack}`);try{this.emit("error",t)}catch(e){n.error(t)}await i(this._retryTimeout,!this._keepEventLoopActive)}}async _updateLatestBlock(){const e=await this._fetchLatestBlock();this._newPotentialLatest(e)}async _fetchLatestBlock(){const e={jsonrpc:"2.0",id:1,method:"eth_blockNumber",params:[]};this._setSkipCacheFlag&&(e.skipCache=!0);const t=await s((t=>this._provider.sendAsync(e,t)))();if(t.error)throw new Error(`PollingBlockTracker - encountered error fetching block:\n${t.error}`);return t.result}}},59873:function(e,t,r){var n=r(23085).Buffer,s=r(50455).keccak_256,o=r(94742);function i(e){return e?o.toUnicode(e,{useStd3ASCII:!0,transitional:!1}):e}t.hash=function(e){for(var t="",r=0;r<32;r++)t+="00";if(name=i(e),name){var o=name.split(".");for(r=o.length-1;r>=0;r--){var a=s(o[r]);t=s(new n(t+a,"hex"))}}return"0x"+t},t.normalize=i},50455:function(e,t,r){var n=r(34155);!function(){"use strict";var t="object"==typeof window?window:{};!t.JS_SHA3_NO_NODE_JS&&"object"==typeof n&&n.versions&&n.versions.node&&(t=r.g);for(var s=!t.JS_SHA3_NO_COMMON_JS&&e.exports,o="0123456789abcdef".split(""),i=[0,8,16,24],a=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],c=[224,256,384,512],u=["hex","buffer","arrayBuffer","array"],l=function(e,t,r){return function(n){return new v(e,t,e).update(n)[r]()}},d=function(e,t,r){return function(n,s){return new v(e,t,s).update(n)[r]()}},h=function(e,t){var r=l(e,t,"hex");r.create=function(){return new v(e,t,e)},r.update=function(e){return r.create().update(e)};for(var n=0;n<u.length;++n){var s=u[n];r[s]=l(e,t,s)}return r},p=[{name:"keccak",padding:[1,256,65536,16777216],bits:c,createMethod:h},{name:"sha3",padding:[6,1536,393216,100663296],bits:c,createMethod:h},{name:"shake",padding:[31,7936,2031616,520093696],bits:[128,256],createMethod:function(e,t){var r=d(e,t,"hex");r.create=function(r){return new v(e,t,r)},r.update=function(e,t){return r.create(t).update(e)};for(var n=0;n<u.length;++n){var s=u[n];r[s]=d(e,t,s)}return r}}],f={},m=[],g=0;g<p.length;++g)for(var y=p[g],_=y.bits,b=0;b<_.length;++b){var w=y.name+"_"+_[b];m.push(w),f[w]=y.createMethod(_[b],y.padding)}function v(e,t,r){this.blocks=[],this.s=[],this.padding=t,this.outputBits=r,this.reset=!0,this.block=0,this.start=0,this.blockCount=1600-(e<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var n=0;n<50;++n)this.s[n]=0}v.prototype.update=function(e){var t="string"!=typeof e;t&&e.constructor===ArrayBuffer&&(e=new Uint8Array(e));for(var r,n,s=e.length,o=this.blocks,a=this.byteCount,c=this.blockCount,u=0,l=this.s;u<s;){if(this.reset)for(this.reset=!1,o[0]=this.block,r=1;r<c+1;++r)o[r]=0;if(t)for(r=this.start;u<s&&r<a;++u)o[r>>2]|=e[u]<<i[3&r++];else for(r=this.start;u<s&&r<a;++u)(n=e.charCodeAt(u))<128?o[r>>2]|=n<<i[3&r++]:n<2048?(o[r>>2]|=(192|n>>6)<<i[3&r++],o[r>>2]|=(128|63&n)<<i[3&r++]):n<55296||n>=57344?(o[r>>2]|=(224|n>>12)<<i[3&r++],o[r>>2]|=(128|n>>6&63)<<i[3&r++],o[r>>2]|=(128|63&n)<<i[3&r++]):(n=65536+((1023&n)<<10|1023&e.charCodeAt(++u)),o[r>>2]|=(240|n>>18)<<i[3&r++],o[r>>2]|=(128|n>>12&63)<<i[3&r++],o[r>>2]|=(128|n>>6&63)<<i[3&r++],o[r>>2]|=(128|63&n)<<i[3&r++]);if(this.lastByteIndex=r,r>=a){for(this.start=r-a,this.block=o[c],r=0;r<c;++r)l[r]^=o[r];k(l),this.reset=!0}else this.start=r}return this},v.prototype.finalize=function(){var e=this.blocks,t=this.lastByteIndex,r=this.blockCount,n=this.s;if(e[t>>2]|=this.padding[3&t],this.lastByteIndex===this.byteCount)for(e[0]=e[r],t=1;t<r+1;++t)e[t]=0;for(e[r-1]|=2147483648,t=0;t<r;++t)n[t]^=e[t];k(n)},v.prototype.toString=v.prototype.hex=function(){this.finalize();for(var e,t=this.blockCount,r=this.s,n=this.outputBlocks,s=this.extraBytes,i=0,a=0,c="";a<n;){for(i=0;i<t&&a<n;++i,++a)e=r[i],c+=o[e>>4&15]+o[15&e]+o[e>>12&15]+o[e>>8&15]+o[e>>20&15]+o[e>>16&15]+o[e>>28&15]+o[e>>24&15];a%t==0&&(k(r),i=0)}return s&&(e=r[i],s>0&&(c+=o[e>>4&15]+o[15&e]),s>1&&(c+=o[e>>12&15]+o[e>>8&15]),s>2&&(c+=o[e>>20&15]+o[e>>16&15])),c},v.prototype.arrayBuffer=function(){this.finalize();var e,t=this.blockCount,r=this.s,n=this.outputBlocks,s=this.extraBytes,o=0,i=0,a=this.outputBits>>3;e=s?new ArrayBuffer(n+1<<2):new ArrayBuffer(a);for(var c=new Uint32Array(e);i<n;){for(o=0;o<t&&i<n;++o,++i)c[i]=r[o];i%t==0&&k(r)}return s&&(c[o]=r[o],e=e.slice(0,a)),e},v.prototype.buffer=v.prototype.arrayBuffer,v.prototype.digest=v.prototype.array=function(){this.finalize();for(var e,t,r=this.blockCount,n=this.s,s=this.outputBlocks,o=this.extraBytes,i=0,a=0,c=[];a<s;){for(i=0;i<r&&a<s;++i,++a)e=a<<2,t=n[i],c[e]=255&t,c[e+1]=t>>8&255,c[e+2]=t>>16&255,c[e+3]=t>>24&255;a%r==0&&k(n)}return o&&(e=a<<2,t=n[i],o>0&&(c[e]=255&t),o>1&&(c[e+1]=t>>8&255),o>2&&(c[e+2]=t>>16&255)),c};var k=function(e){var t,r,n,s,o,i,c,u,l,d,h,p,f,m,g,y,_,b,w,v,k,B,R,E,C,x,P,j,I,F,M,O,T,A,S,L,N,H,q,J,z,U,D,V,$,W,G,Q,K,X,Y,Z,ee,te,re,ne,se,oe,ie,ae,ce,ue,le;for(n=0;n<48;n+=2)s=e[0]^e[10]^e[20]^e[30]^e[40],o=e[1]^e[11]^e[21]^e[31]^e[41],i=e[2]^e[12]^e[22]^e[32]^e[42],c=e[3]^e[13]^e[23]^e[33]^e[43],u=e[4]^e[14]^e[24]^e[34]^e[44],l=e[5]^e[15]^e[25]^e[35]^e[45],d=e[6]^e[16]^e[26]^e[36]^e[46],h=e[7]^e[17]^e[27]^e[37]^e[47],t=(p=e[8]^e[18]^e[28]^e[38]^e[48])^(i<<1|c>>>31),r=(f=e[9]^e[19]^e[29]^e[39]^e[49])^(c<<1|i>>>31),e[0]^=t,e[1]^=r,e[10]^=t,e[11]^=r,e[20]^=t,e[21]^=r,e[30]^=t,e[31]^=r,e[40]^=t,e[41]^=r,t=s^(u<<1|l>>>31),r=o^(l<<1|u>>>31),e[2]^=t,e[3]^=r,e[12]^=t,e[13]^=r,e[22]^=t,e[23]^=r,e[32]^=t,e[33]^=r,e[42]^=t,e[43]^=r,t=i^(d<<1|h>>>31),r=c^(h<<1|d>>>31),e[4]^=t,e[5]^=r,e[14]^=t,e[15]^=r,e[24]^=t,e[25]^=r,e[34]^=t,e[35]^=r,e[44]^=t,e[45]^=r,t=u^(p<<1|f>>>31),r=l^(f<<1|p>>>31),e[6]^=t,e[7]^=r,e[16]^=t,e[17]^=r,e[26]^=t,e[27]^=r,e[36]^=t,e[37]^=r,e[46]^=t,e[47]^=r,t=d^(s<<1|o>>>31),r=h^(o<<1|s>>>31),e[8]^=t,e[9]^=r,e[18]^=t,e[19]^=r,e[28]^=t,e[29]^=r,e[38]^=t,e[39]^=r,e[48]^=t,e[49]^=r,m=e[0],g=e[1],W=e[11]<<4|e[10]>>>28,G=e[10]<<4|e[11]>>>28,j=e[20]<<3|e[21]>>>29,I=e[21]<<3|e[20]>>>29,ae=e[31]<<9|e[30]>>>23,ce=e[30]<<9|e[31]>>>23,U=e[40]<<18|e[41]>>>14,D=e[41]<<18|e[40]>>>14,A=e[2]<<1|e[3]>>>31,S=e[3]<<1|e[2]>>>31,y=e[13]<<12|e[12]>>>20,_=e[12]<<12|e[13]>>>20,Q=e[22]<<10|e[23]>>>22,K=e[23]<<10|e[22]>>>22,F=e[33]<<13|e[32]>>>19,M=e[32]<<13|e[33]>>>19,ue=e[42]<<2|e[43]>>>30,le=e[43]<<2|e[42]>>>30,te=e[5]<<30|e[4]>>>2,re=e[4]<<30|e[5]>>>2,L=e[14]<<6|e[15]>>>26,N=e[15]<<6|e[14]>>>26,b=e[25]<<11|e[24]>>>21,w=e[24]<<11|e[25]>>>21,X=e[34]<<15|e[35]>>>17,Y=e[35]<<15|e[34]>>>17,O=e[45]<<29|e[44]>>>3,T=e[44]<<29|e[45]>>>3,E=e[6]<<28|e[7]>>>4,C=e[7]<<28|e[6]>>>4,ne=e[17]<<23|e[16]>>>9,se=e[16]<<23|e[17]>>>9,H=e[26]<<25|e[27]>>>7,q=e[27]<<25|e[26]>>>7,v=e[36]<<21|e[37]>>>11,k=e[37]<<21|e[36]>>>11,Z=e[47]<<24|e[46]>>>8,ee=e[46]<<24|e[47]>>>8,V=e[8]<<27|e[9]>>>5,$=e[9]<<27|e[8]>>>5,x=e[18]<<20|e[19]>>>12,P=e[19]<<20|e[18]>>>12,oe=e[29]<<7|e[28]>>>25,ie=e[28]<<7|e[29]>>>25,J=e[38]<<8|e[39]>>>24,z=e[39]<<8|e[38]>>>24,B=e[48]<<14|e[49]>>>18,R=e[49]<<14|e[48]>>>18,e[0]=m^~y&b,e[1]=g^~_&w,e[10]=E^~x&j,e[11]=C^~P&I,e[20]=A^~L&H,e[21]=S^~N&q,e[30]=V^~W&Q,e[31]=$^~G&K,e[40]=te^~ne&oe,e[41]=re^~se&ie,e[2]=y^~b&v,e[3]=_^~w&k,e[12]=x^~j&F,e[13]=P^~I&M,e[22]=L^~H&J,e[23]=N^~q&z,e[32]=W^~Q&X,e[33]=G^~K&Y,e[42]=ne^~oe&ae,e[43]=se^~ie&ce,e[4]=b^~v&B,e[5]=w^~k&R,e[14]=j^~F&O,e[15]=I^~M&T,e[24]=H^~J&U,e[25]=q^~z&D,e[34]=Q^~X&Z,e[35]=K^~Y&ee,e[44]=oe^~ae&ue,e[45]=ie^~ce&le,e[6]=v^~B&m,e[7]=k^~R&g,e[16]=F^~O&E,e[17]=M^~T&C,e[26]=J^~U&A,e[27]=z^~D&S,e[36]=X^~Z&V,e[37]=Y^~ee&$,e[46]=ae^~ue&te,e[47]=ce^~le&re,e[8]=B^~m&y,e[9]=R^~g&_,e[18]=O^~E&x,e[19]=T^~C&P,e[28]=U^~A&L,e[29]=D^~S&N,e[38]=Z^~V&W,e[39]=ee^~$&G,e[48]=ue^~te&ne,e[49]=le^~re&se,e[0]^=a[n],e[1]^=a[n+1]};if(s)e.exports=f;else for(g=0;g<m.length;++g)t[m[g]]=f[m[g]]}()},23256:function(e,t,r){const n=r(76622);e.exports=class extends n{constructor(){super(),this.allResults=[]}async update(){throw new Error("BaseFilterWithHistory - no update method specified")}addResults(e){this.allResults=this.allResults.concat(e),super.addResults(e)}addInitialResults(e){this.allResults=this.allResults.concat(e),super.addInitialResults(e)}getAllResults(){return this.allResults}}},76622:function(e,t,r){const n=r(19394).default;e.exports=class extends n{constructor(){super(),this.updates=[]}async initialize(){}async update(){throw new Error("BaseFilter - no update method specified")}addResults(e){this.updates=this.updates.concat(e),e.forEach((e=>this.emit("update",e)))}addInitialResults(e){}getChangesAndClear(){const e=this.updates;return this.updates=[],e}}},72785:function(e,t,r){const n=r(76622),s=r(40207),{incrementHexInt:o}=r(98112);e.exports=class extends n{constructor({provider:e,params:t}){super(),this.type="block",this.provider=e}async update({oldBlock:e,newBlock:t}){const r=t,n=o(e),i=(await s({provider:this.provider,fromBlock:n,toBlock:r})).map((e=>e.hash));this.addResults(i)}}},40207:function(e){function t(e){return null==e?e:Number.parseInt(e,16)}function r(e){if(null==e)return e;return"0x"+e.toString(16)}e.exports=async function({provider:e,fromBlock:n,toBlock:s}){n||(n=s);const o=t(n),i=t(s),a=Array(i-o+1).fill().map(((e,t)=>o+t)).map(r);return await Promise.all(a.map((t=>function(e,t,r){return new Promise(((n,s)=>{e.sendAsync({id:1,jsonrpc:"2.0",method:t,params:r},((e,t)=>{if(e)return s(e);n(t.result)}))}))}(e,"eth_getBlockByNumber",[t,!1]))))}},98112:function(e){function t(e){return e.sort(((e,t)=>"latest"===e||"earliest"===t?1:"latest"===t||"earliest"===e?-1:r(e)-r(t)))}function r(e){return null==e?e:Number.parseInt(e,16)}function n(e){if(null==e)return e;let t=e.toString(16);return t.length%2&&(t="0"+t),"0x"+t}function s(){return Math.floor(16*Math.random()).toString(16)}e.exports={minBlockRef:function(...e){return t(e)[0]},maxBlockRef:function(...e){const r=t(e);return r[r.length-1]},sortBlockRefs:t,bnToHex:function(e){return"0x"+e.toString(16)},blockRefIsNumber:function(e){return e&&!["earliest","latest","pending"].includes(e)},hexToInt:r,incrementHexInt:function(e){if(null==e)return e;return n(r(e)+1)},intToHex:n,unsafeRandomBytes:function(e){let t="0x";for(let r=0;r<e;r++)t+=s(),t+=s();return t}}},98406:function(e,t,r){var n=r(25108);const s=r(48125).WU,{createAsyncMiddleware:o}=r(18320),i=r(57688),a=r(81663),c=r(72785),u=r(25792),{intToHex:l,hexToInt:d}=r(98112);function h(e){return p((async(...t)=>{const r=await e(...t);return l(r.id)}))}function p(e){return o((async(t,r)=>{const n=await e.apply(null,t.params);r.result=n}))}function f(e,t){const r=[];for(let t in e)r.push(e[t]);return r}e.exports=function({blockTracker:e,provider:t}){let r=0,o={};const m=new s,g=function({mutex:e}){return t=>async(r,n,s,o)=>{(await e.acquire())(),t(r,n,s,o)}}({mutex:m}),y=i({eth_newFilter:g(h(b)),eth_newBlockFilter:g(h(w)),eth_newPendingTransactionFilter:g(h(v)),eth_uninstallFilter:g(p(R)),eth_getFilterChanges:g(p(k)),eth_getFilterLogs:g(p(B))}),_=async({oldBlock:e,newBlock:t})=>{if(0===o.length)return;const r=await m.acquire();try{await Promise.all(f(o).map((async r=>{try{await r.update({oldBlock:e,newBlock:t})}catch(e){n.error(e)}})))}catch(e){n.error(e)}r()};return y.newLogFilter=b,y.newBlockFilter=w,y.newPendingTransactionFilter=v,y.uninstallFilter=R,y.getFilterChanges=k,y.getFilterLogs=B,y.destroy=()=>{!async function(){const e=f(o).length;o={},C({prevFilterCount:e,newFilterCount:0})}()},y;async function b(e){const r=new a({provider:t,params:e});await E(r);return r}async function w(){const e=new c({provider:t});await E(e);return e}async function v(){const e=new u({provider:t});await E(e);return e}async function k(e){const t=d(e),r=o[t];if(!r)throw new Error(`No filter for index "${t}"`);return r.getChangesAndClear()}async function B(e){const t=d(e),r=o[t];if(!r)throw new Error(`No filter for index "${t}"`);return"log"===r.type?results=r.getAllResults():results=[],results}async function R(e){const t=d(e),r=o[t],n=Boolean(r);return n&&await async function(e){const t=f(o).length;delete o[e];const r=f(o).length;C({prevFilterCount:t,newFilterCount:r})}(t),n}async function E(t){const n=f(o).length,s=await e.getLatestBlock();await t.initialize({currentBlock:s}),r++,o[r]=t,t.id=r,t.idHex=l(r);return C({prevFilterCount:n,newFilterCount:f(o).length}),r}function C({prevFilterCount:t,newFilterCount:r}){0===t&&r>0?e.on("sync",_):t>0&&0===r&&e.removeListener("sync",_)}}},81663:function(e,t,r){const n=r(75682),s=r(6417),o=r(23256),{bnToHex:i,hexToInt:a,incrementHexInt:c,minBlockRef:u,blockRefIsNumber:l}=r(98112);e.exports=class extends o{constructor({provider:e,params:t}){super(),this.type="log",this.ethQuery=new n(e),this.params=Object.assign({fromBlock:"latest",toBlock:"latest",address:void 0,topics:[]},t),this.params.address&&(Array.isArray(this.params.address)||(this.params.address=[this.params.address]),this.params.address=this.params.address.map((e=>e.toLowerCase())))}async initialize({currentBlock:e}){let t=this.params.fromBlock;["latest","pending"].includes(t)&&(t=e),"earliest"===t&&(t="0x0"),this.params.fromBlock=t;const r=u(this.params.toBlock,e),n=Object.assign({},this.params,{toBlock:r}),s=await this._fetchLogs(n);this.addInitialResults(s)}async update({oldBlock:e,newBlock:t}){const r=t;let n;n=e?c(e):t;const s=Object.assign({},this.params,{fromBlock:n,toBlock:r}),o=(await this._fetchLogs(s)).filter((e=>this.matchLog(e)));this.addResults(o)}async _fetchLogs(e){return await s((t=>this.ethQuery.getLogs(e,t)))()}matchLog(e){if(a(this.params.fromBlock)>=a(e.blockNumber))return!1;if(l(this.params.toBlock)&&a(this.params.toBlock)<=a(e.blockNumber))return!1;const t=e.address&&e.address.toLowerCase();if(this.params.address&&t&&!this.params.address.includes(t))return!1;return this.params.topics.every(((t,r)=>{let n=e.topics[r];if(!n)return!1;n=n.toLowerCase();let s=Array.isArray(t)?t:[t];if(s.includes(null))return!0;s=s.map((e=>e.toLowerCase()));return s.includes(n)}))}}},25232:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EthereumProviderError=t.EthereumRpcError=void 0;const n=r(4445);class s extends Error{constructor(e,t,r){if(!Number.isInteger(e))throw new Error('"code" must be an integer.');if(!t||"string"!=typeof t)throw new Error('"message" must be a nonempty string.');super(t),this.code=e,void 0!==r&&(this.data=r)}serialize(){const e={code:this.code,message:this.message};return void 0!==this.data&&(e.data=this.data),this.stack&&(e.stack=this.stack),e}toString(){return n.default(this.serialize(),o,2)}}t.EthereumRpcError=s;function o(e,t){if("[Circular]"!==t)return t}t.EthereumProviderError=class extends s{constructor(e,t,r){if(!function(e){return Number.isInteger(e)&&e>=1e3&&e<=4999}(e))throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');super(e,t,r)}}},14142:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.errorValues=t.errorCodes=void 0,t.errorCodes={rpc:{invalidInput:-32e3,resourceNotFound:-32001,resourceUnavailable:-32002,transactionRejected:-32003,methodNotSupported:-32004,limitExceeded:-32005,parse:-32700,invalidRequest:-32600,methodNotFound:-32601,invalidParams:-32602,internal:-32603},provider:{userRejectedRequest:4001,unauthorized:4100,unsupportedMethod:4200,disconnected:4900,chainDisconnected:4901}},t.errorValues={"-32700":{standard:"JSON RPC 2.0",message:"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."},"-32600":{standard:"JSON RPC 2.0",message:"The JSON sent is not a valid Request object."},"-32601":{standard:"JSON RPC 2.0",message:"The method does not exist / is not available."},"-32602":{standard:"JSON RPC 2.0",message:"Invalid method parameter(s)."},"-32603":{standard:"JSON RPC 2.0",message:"Internal JSON-RPC error."},"-32000":{standard:"EIP-1474",message:"Invalid input."},"-32001":{standard:"EIP-1474",message:"Resource not found."},"-32002":{standard:"EIP-1474",message:"Resource unavailable."},"-32003":{standard:"EIP-1474",message:"Transaction rejected."},"-32004":{standard:"EIP-1474",message:"Method not supported."},"-32005":{standard:"EIP-1474",message:"Request limit exceeded."},4001:{standard:"EIP-1193",message:"User rejected the request."},4100:{standard:"EIP-1193",message:"The requested account and/or method has not been authorized by the user."},4200:{standard:"EIP-1193",message:"The requested method is not supported by this Ethereum provider."},4900:{standard:"EIP-1193",message:"The provider is disconnected from all chains."},4901:{standard:"EIP-1193",message:"The provider is disconnected from the specified chain."}}},26339:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ethErrors=void 0;const n=r(25232),s=r(31299),o=r(14142);function i(e,t){const[r,o]=c(t);return new n.EthereumRpcError(e,r||s.getMessageFromCode(e),o)}function a(e,t){const[r,o]=c(t);return new n.EthereumProviderError(e,r||s.getMessageFromCode(e),o)}function c(e){if(e){if("string"==typeof e)return[e];if("object"==typeof e&&!Array.isArray(e)){const{message:t,data:r}=e;if(t&&"string"!=typeof t)throw new Error("Must specify string message.");return[t||void 0,r]}}return[]}t.ethErrors={rpc:{parse:e=>i(o.errorCodes.rpc.parse,e),invalidRequest:e=>i(o.errorCodes.rpc.invalidRequest,e),invalidParams:e=>i(o.errorCodes.rpc.invalidParams,e),methodNotFound:e=>i(o.errorCodes.rpc.methodNotFound,e),internal:e=>i(o.errorCodes.rpc.internal,e),server:e=>{if(!e||"object"!=typeof e||Array.isArray(e))throw new Error("Ethereum RPC Server errors must provide single object argument.");const{code:t}=e;if(!Number.isInteger(t)||t>-32005||t<-32099)throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');return i(t,e)},invalidInput:e=>i(o.errorCodes.rpc.invalidInput,e),resourceNotFound:e=>i(o.errorCodes.rpc.resourceNotFound,e),resourceUnavailable:e=>i(o.errorCodes.rpc.resourceUnavailable,e),transactionRejected:e=>i(o.errorCodes.rpc.transactionRejected,e),methodNotSupported:e=>i(o.errorCodes.rpc.methodNotSupported,e),limitExceeded:e=>i(o.errorCodes.rpc.limitExceeded,e)},provider:{userRejectedRequest:e=>a(o.errorCodes.provider.userRejectedRequest,e),unauthorized:e=>a(o.errorCodes.provider.unauthorized,e),unsupportedMethod:e=>a(o.errorCodes.provider.unsupportedMethod,e),disconnected:e=>a(o.errorCodes.provider.disconnected,e),chainDisconnected:e=>a(o.errorCodes.provider.chainDisconnected,e),custom:e=>{if(!e||"object"!=typeof e||Array.isArray(e))throw new Error("Ethereum Provider custom errors must provide single object argument.");const{code:t,message:r,data:s}=e;if(!r||"string"!=typeof r)throw new Error('"message" must be a nonempty string');return new n.EthereumProviderError(t,r,s)}}}},69313:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getMessageFromCode=t.serializeError=t.EthereumProviderError=t.EthereumRpcError=t.ethErrors=t.errorCodes=void 0;const n=r(25232);Object.defineProperty(t,"EthereumRpcError",{enumerable:!0,get:function(){return n.EthereumRpcError}}),Object.defineProperty(t,"EthereumProviderError",{enumerable:!0,get:function(){return n.EthereumProviderError}});const s=r(31299);Object.defineProperty(t,"serializeError",{enumerable:!0,get:function(){return s.serializeError}}),Object.defineProperty(t,"getMessageFromCode",{enumerable:!0,get:function(){return s.getMessageFromCode}});const o=r(26339);Object.defineProperty(t,"ethErrors",{enumerable:!0,get:function(){return o.ethErrors}});const i=r(14142);Object.defineProperty(t,"errorCodes",{enumerable:!0,get:function(){return i.errorCodes}})},31299:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.serializeError=t.isValidCode=t.getMessageFromCode=t.JSON_RPC_SERVER_ERROR_MESSAGE=void 0;const n=r(14142),s=r(25232),o=n.errorCodes.rpc.internal,i={code:o,message:a(o)};function a(e,r="Unspecified error message. This is a bug, please report it."){if(Number.isInteger(e)){const r=e.toString();if(d(n.errorValues,r))return n.errorValues[r].message;if(u(e))return t.JSON_RPC_SERVER_ERROR_MESSAGE}return r}function c(e){if(!Number.isInteger(e))return!1;const t=e.toString();return!!n.errorValues[t]||!!u(e)}function u(e){return e>=-32099&&e<=-32e3}function l(e){return e&&"object"==typeof e&&!Array.isArray(e)?Object.assign({},e):e}function d(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.JSON_RPC_SERVER_ERROR_MESSAGE="Unspecified server error.",t.getMessageFromCode=a,t.isValidCode=c,t.serializeError=function(e,{fallbackError:t=i,shouldIncludeStack:r=!1}={}){var n,o;if(!t||!Number.isInteger(t.code)||"string"!=typeof t.message)throw new Error("Must provide fallback error with integer number code and string message.");if(e instanceof s.EthereumRpcError)return e.serialize();const u={};if(e&&"object"==typeof e&&!Array.isArray(e)&&d(e,"code")&&c(e.code)){const t=e;u.code=t.code,t.message&&"string"==typeof t.message?(u.message=t.message,d(t,"data")&&(u.data=t.data)):(u.message=a(u.code),u.data={originalError:l(e)})}else{u.code=t.code;const r=null===(n=e)||void 0===n?void 0:n.message;u.message=r&&"string"==typeof r?r:t.message,u.data={originalError:l(e)}}const h=null===(o=e)||void 0===o?void 0:o.stack;return r&&e&&h&&"string"==typeof h&&(u.stack=h),u}},36739:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.JsonRpcEngine=void 0;const s=n(r(19394)),o=r(69313);class i extends s.default{constructor(){super(),this._middleware=[]}push(e){this._middleware.push(e)}handle(e,t){if(t&&"function"!=typeof t)throw new Error('"callback" must be a function if provided.');return Array.isArray(e)?t?this._handleBatch(e,t):this._handleBatch(e):t?this._handle(e,t):this._promiseHandle(e)}asMiddleware(){return async(e,t,r,n)=>{try{const[s,o,a]=await i._runAllMiddleware(e,t,this._middleware);return o?(await i._runReturnHandlers(a),n(s)):r((async e=>{try{await i._runReturnHandlers(a)}catch(t){return e(t)}return e()}))}catch(e){return n(e)}}}async _handleBatch(e,t){try{const r=await Promise.all(e.map(this._promiseHandle.bind(this)));return t?t(null,r):r}catch(e){if(t)return t(e);throw e}}_promiseHandle(e){return new Promise((t=>{this._handle(e,((e,r)=>{t(r)}))}))}async _handle(e,t){if(!e||Array.isArray(e)||"object"!=typeof e){const r=new o.EthereumRpcError(o.errorCodes.rpc.invalidRequest,"Requests must be plain objects. Received: "+typeof e,{request:e});return t(r,{id:void 0,jsonrpc:"2.0",error:r})}if("string"!=typeof e.method){const r=new o.EthereumRpcError(o.errorCodes.rpc.invalidRequest,"Must specify a string method. Received: "+typeof e.method,{request:e});return t(r,{id:e.id,jsonrpc:"2.0",error:r})}const r=Object.assign({},e),n={id:r.id,jsonrpc:r.jsonrpc};let s=null;try{await this._processRequest(r,n)}catch(e){s=e}return s&&(delete n.result,n.error||(n.error=o.serializeError(s))),t(s,n)}async _processRequest(e,t){const[r,n,s]=await i._runAllMiddleware(e,t,this._middleware);if(i._checkForCompletion(e,t,n),await i._runReturnHandlers(s),r)throw r}static async _runAllMiddleware(e,t,r){const n=[];let s=null,o=!1;for(const a of r)if([s,o]=await i._runMiddleware(e,t,a,n),o)break;return[s,o,n.reverse()]}static _runMiddleware(e,t,r,n){return new Promise((s=>{const i=e=>{const r=e||t.error;r&&(t.error=o.serializeError(r)),s([r,!0])},c=r=>{t.error?i(t.error):(r&&("function"!=typeof r&&i(new o.EthereumRpcError(o.errorCodes.rpc.internal,`JsonRpcEngine: "next" return handlers must be functions. Received "${typeof r}" for request:\n${a(e)}`,{request:e})),n.push(r)),s([null,!1]))};try{r(e,t,c,i)}catch(e){i(e)}}))}static async _runReturnHandlers(e){for(const t of e)await new Promise(((e,r)=>{t((t=>t?r(t):e()))}))}static _checkForCompletion(e,t,r){if(!("result"in t)&&!("error"in t))throw new o.EthereumRpcError(o.errorCodes.rpc.internal,`JsonRpcEngine: Response has no error or result for request:\n${a(e)}`,{request:e});if(!r)throw new o.EthereumRpcError(o.errorCodes.rpc.internal,`JsonRpcEngine: Nothing ended request:\n${a(e)}`,{request:e})}}function a(e){return JSON.stringify(e,null,2)}t.JsonRpcEngine=i},1152:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createAsyncMiddleware=void 0,t.createAsyncMiddleware=function(e){return async(t,r,n,s)=>{let o;const i=new Promise((e=>{o=e}));let a=null,c=!1;const u=async()=>{c=!0,n((e=>{a=e,o()})),await i};try{await e(t,r,u),c?(await i,a(null)):s(null)}catch(e){a?a(e):s(e)}}}},64980:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createScaffoldMiddleware=void 0,t.createScaffoldMiddleware=function(e){return(t,r,n,s)=>{const o=e[t.method];return void 0===o?n():"function"==typeof o?o(t,r,n,s):(r.result=o,s())}}},51084:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getUniqueId=void 0;const r=4294967295;let n=Math.floor(Math.random()*r);t.getUniqueId=function(){return n=(n+1)%r,n}},28104:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createIdRemapMiddleware=void 0;const n=r(51084);t.createIdRemapMiddleware=function(){return(e,t,r,s)=>{const o=e.id,i=n.getUniqueId();e.id=i,t.id=i,r((r=>{e.id=o,t.id=o,r()}))}}},18320:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(28104),t),s(r(1152),t),s(r(64980),t),s(r(51084),t),s(r(36739),t),s(r(18175),t)},18175:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMiddleware=void 0;const n=r(36739);t.mergeMiddleware=function(e){const t=new n.JsonRpcEngine;return e.forEach((e=>t.push(e))),t.asMiddleware()}},6417:function(e){"use strict";const t=(e,t,r,n)=>function(...s){return new(0,t.promiseModule)(((o,i)=>{t.multiArgs?s.push(((...e)=>{t.errorFirst?e[0]?i(e):(e.shift(),o(e)):o(e)})):t.errorFirst?s.push(((e,t)=>{e?i(e):o(t)})):s.push(o);const a=this===r?n:this;Reflect.apply(e,a,s)}))},r=new WeakMap;e.exports=(e,n)=>{n={exclude:[/.+(?:Sync|Stream)$/],errorFirst:!0,promiseModule:Promise,...n};const s=typeof e;if(null===e||"object"!==s&&"function"!==s)throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${null===e?"null":s}\``);const o=new WeakMap,i=new Proxy(e,{apply(e,r,s){const a=o.get(e);if(a)return Reflect.apply(a,r,s);const c=n.excludeMain?e:t(e,n,i,e);return o.set(e,c),Reflect.apply(c,r,s)},get(e,s){const a=e[s];if(!((e,t)=>{let s=r.get(e);if(s||(s={},r.set(e,s)),t in s)return s[t];const o=e=>"string"==typeof e||"symbol"==typeof t?t===e:e.test(t),i=Reflect.getOwnPropertyDescriptor(e,t),a=void 0===i||i.writable||i.configurable,c=(n.include?n.include.some(o):!n.exclude.some(o))&&a;return s[t]=c,c})(e,s)||a===Function.prototype[s])return a;const c=o.get(a);if(c)return c;if("function"==typeof a){const r=t(a,n,i,e);return o.set(a,r),r}return a}});return i}},68961:function(e,t,r){const n=r(19394).default,s=r(57688),{createAsyncMiddleware:o}=r(18320),i=r(98406),{unsafeRandomBytes:a,incrementHexInt:c}=r(98112),u=r(40207);function l(e){return{hash:e.hash,parentHash:e.parentHash,sha3Uncles:e.sha3Uncles,miner:e.miner,stateRoot:e.stateRoot,transactionsRoot:e.transactionsRoot,receiptsRoot:e.receiptsRoot,logsBloom:e.logsBloom,difficulty:e.difficulty,number:e.number,gasLimit:e.gasLimit,gasUsed:e.gasUsed,nonce:e.nonce,mixHash:e.mixHash,timestamp:e.timestamp,extraData:e.extraData}}e.exports=function({blockTracker:e,provider:t}){const r={},d=i({blockTracker:e,provider:t});let h=!1;const p=new n,f=s({eth_subscribe:o((async function(n,s){if(h)throw new Error("SubscriptionManager - attempting to use after destroying");const o=n.params[0],i=a(16);let p;switch(o){case"newHeads":p=f({subId:i});break;case"logs":const e=n.params[1];p=g({subId:i,filter:await d.newLogFilter(e)});break;default:throw new Error(`SubscriptionManager - unsupported subscription type "${o}"`)}return r[i]=p,void(s.result=i);function f({subId:r}){const n={type:o,destroy:async()=>{e.removeListener("sync",n.update)},update:async({oldBlock:e,newBlock:n})=>{const s=n,o=c(e);(await u({provider:t,fromBlock:o,toBlock:s})).map(l).forEach((e=>{m(r,e)}))}};return e.on("sync",n.update),n}function g({subId:e,filter:t}){t.on("update",(t=>m(e,t)));return{type:o,destroy:async()=>await d.uninstallFilter(t.idHex)}}})),eth_unsubscribe:o((async function(e,t){if(h)throw new Error("SubscriptionManager - attempting to use after destroying");const n=e.params[0],s=r[n];if(!s)return void(t.result=!1);delete r[n],await s.destroy(),t.result=!0}))});return f.destroy=function(){p.removeAllListeners();for(const e in r)r[e].destroy(),delete r[e];h=!0},{events:p,middleware:f};function m(e,t){p.emit("notification",{jsonrpc:"2.0",method:"eth_subscription",params:{subscription:e,result:t}})}}},25792:function(e,t,r){const n=r(76622),s=r(40207),{incrementHexInt:o}=r(98112);e.exports=class extends n{constructor({provider:e}){super(),this.type="tx",this.provider=e}async update({oldBlock:e}){const t=e,r=o(e),n=await s({provider:this.provider,fromBlock:r,toBlock:t}),i=[];for(const e of n)i.push(...e.transactions);this.addResults(i)}}},37870:function(e,t,r){const n=r(91625),s=r(21497),o=[void 0,null,"<nil>"];e.exports=function(e={}){const{blockTracker:t}=e;if(!t)throw new Error("createBlockCacheMiddleware - No BlockTracker specified");const r=new i,o={perma:r,block:r,fork:r};return s((async(e,s,i)=>{if(e.skipCache)return i();const a=n.cacheTypeForPayload(e),c=o[a];if(!c)return i();if(!c.canCacheRequest(e))return i();let u,l=n.blockTagForPayload(e);if(l||(l="latest"),"earliest"===l)u="0x00";else if("latest"===l){const e=await t.getLatestBlock();r.clearBefore(e),u=e}else u=l;const d=await c.get(e,u);void 0===d?(await i(),await c.set(e,u,s.result)):s.result=d}))};class i{constructor(){this.cache={}}getBlockCacheForPayload(e,t){const r=Number.parseInt(t,16);let n=this.cache[r];if(!n){const e={};this.cache[r]=e,n=e}return n}async get(e,t){const r=this.getBlockCacheForPayload(e,t);if(!r)return;return r[n.cacheIdentifierForPayload(e,!0)]}async set(e,t,r){if(!this.canCacheResult(e,r))return;this.getBlockCacheForPayload(e,t)[n.cacheIdentifierForPayload(e,!0)]=r}canCacheRequest(e){if(!n.canCache(e))return!1;return"pending"!==n.blockTagForPayload(e)}canCacheResult(e,t){if(!o.includes(t))return!!(!["eth_getTransactionByHash","eth_getTransactionReceipt"].includes(e.method)||t&&t.blockHash&&"0x0000000000000000000000000000000000000000000000000000000000000000"!==t.blockHash)}clearBefore(e){const t=this,r=Number.parseInt(e,16);Object.keys(t.cache).map(Number).filter((e=>e<r)).forEach((e=>delete t.cache[e]))}}},91625:function(e,t,r){const n=r(67266);function s(e){return"never"!==a(e)}function o(e){const t=i(e);return t>=e.params.length?e.params:"eth_getBlockByNumber"===e.method?e.params.slice(1):e.params.slice(0,t)}function i(e){switch(e.method){case"eth_getStorageAt":return 2;case"eth_getBalance":case"eth_getCode":case"eth_getTransactionCount":case"eth_call":return 1;case"eth_getBlockByNumber":return 0;default:return}}function a(e){switch(e.method){case"web3_clientVersion":case"web3_sha3":case"eth_protocolVersion":case"eth_getBlockTransactionCountByHash":case"eth_getUncleCountByBlockHash":case"eth_getCode":case"eth_getBlockByHash":case"eth_getTransactionByHash":case"eth_getTransactionByBlockHashAndIndex":case"eth_getTransactionReceipt":case"eth_getUncleByBlockHashAndIndex":case"eth_getCompilers":case"eth_compileLLL":case"eth_compileSolidity":case"eth_compileSerpent":case"shh_version":case"test_permaCache":return"perma";case"eth_getBlockByNumber":case"eth_getBlockTransactionCountByNumber":case"eth_getUncleCountByBlockNumber":case"eth_getTransactionByBlockNumberAndIndex":case"eth_getUncleByBlockNumberAndIndex":case"test_forkCache":return"fork";case"eth_gasPrice":case"eth_blockNumber":case"eth_getBalance":case"eth_getStorageAt":case"eth_getTransactionCount":case"eth_call":case"eth_estimateGas":case"eth_getFilterLogs":case"eth_getLogs":case"test_blockCache":return"block";case"net_version":case"net_peerCount":case"net_listening":case"eth_syncing":case"eth_sign":case"eth_coinbase":case"eth_mining":case"eth_hashrate":case"eth_accounts":case"eth_sendTransaction":case"eth_sendRawTransaction":case"eth_newFilter":case"eth_newBlockFilter":case"eth_newPendingTransactionFilter":case"eth_uninstallFilter":case"eth_getFilterChanges":case"eth_getWork":case"eth_submitWork":case"eth_submitHashrate":case"db_putString":case"db_getString":case"db_putHex":case"db_getHex":case"shh_post":case"shh_newIdentity":case"shh_hasIdentity":case"shh_newGroup":case"shh_addToGroup":case"shh_newFilter":case"shh_uninstallFilter":case"shh_getFilterChanges":case"shh_getMessages":case"test_neverCache":return"never"}}e.exports={cacheIdentifierForPayload:function(e,t){const r=t?o(e):e.params;return s(e)?e.method+":"+n(r):null},canCache:s,blockTagForPayload:function(e){let t=i(e);if(t>=e.params.length)return null;return e.params[t]},paramsWithoutBlockTag:o,blockTagParamIndex:i,cacheTypeForPayload:a}},57688:function(e,t,r){e.exports=r(52121)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
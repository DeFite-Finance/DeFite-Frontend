!function(){"use strict";var e,n,t,r,o,i={7108:function(e,n,t){var r=t(85893),o=t(67294),i=t(73935),a=t(25108),c=t(34155);const s=Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function l(e,n){navigator.serviceWorker.register(e).then((e=>{e.onupdatefound=()=>{const t=e.installing;null!=t&&(t.onstatechange=()=>{"installed"===t.state&&(navigator.serviceWorker.controller?(a.log("New content is available and will be used when all tabs for this page are closed. See https://cra.link/PWA."),n&&n.onUpdate&&n.onUpdate(e)):(a.log("Content is cached for offline use."),n&&n.onSuccess&&n.onSuccess(e)))})}})).catch((e=>{a.error("Error during service worker registration:",e)}))}var u=e=>{e&&e instanceof Function&&t.e(216).then(t.bind(t,82131)).then((({getCLS:n,getFID:t,getFCP:r,getLCP:o,getTTFB:i})=>{n(e),t(e),r(e),o(e),i(e)}))},d=t(73727);const f=(0,o.lazy)((()=>Promise.all([t.e(216),t.e(629)]).then(t.bind(t,11758)))),h=(0,o.lazy)((()=>Promise.all([t.e(216),t.e(49)]).then(t.bind(t,42052))));i.render((0,r.jsx)(r.Fragment,{children:(0,r.jsx)(o.StrictMode,{children:(0,r.jsx)(d.VK,{children:(0,r.jsx)(o.Suspense,{fallback:(0,r.jsx)("div",{id:"loading",children:(0,r.jsx)("span",{id:"loading-text",children:"Flying to iRIS ..."},void 0)},void 0),children:(0,r.jsx)(f,{children:(0,r.jsx)(h,{},void 0)},void 0)},void 0)},void 0)},void 0)},void 0),document.getElementById("root")),function(e){if("serviceWorker"in navigator){if(new URL(c.env.PUBLIC_URL,window.location.href).origin!==window.location.origin)return;window.addEventListener("load",(()=>{const n=`${c.env.PUBLIC_URL}/service-worker.js`;s?(!function(e,n){fetch(e,{headers:{"Service-Worker":"script"}}).then((t=>{const r=t.headers.get("content-type");404===t.status||null!=r&&-1===r.indexOf("javascript")?navigator.serviceWorker.ready.then((e=>{e.unregister().then((()=>{window.location.reload()}))})):l(e,n)})).catch((()=>{a.log("No internet connection found. App is running in offline mode.")}))}(n,e),navigator.serviceWorker.ready.then((()=>{a.log("This web app is being served cache-first by a service worker. To learn more, visit https://cra.link/PWA")}))):l(n,e)}))}}(),u()}},a={};function c(e){var n=a[e];if(void 0!==n)return n.exports;var t=a[e]={id:e,loaded:!1,exports:{}};return i[e].call(t.exports,t,t.exports,c),t.loaded=!0,t.exports}c.m=i,c.amdO={},e=[],c.O=function(n,t,r,o){if(!t){var i=1/0;for(u=0;u<e.length;u++){t=e[u][0],r=e[u][1],o=e[u][2];for(var a=!0,s=0;s<t.length;s++)(!1&o||i>=o)&&Object.keys(c.O).every((function(e){return c.O[e](t[s])}))?t.splice(s--,1):(a=!1,o<i&&(i=o));if(a){e.splice(u--,1);var l=r();void 0!==l&&(n=l)}}return n}o=o||0;for(var u=e.length;u>0&&e[u-1][2]>o;u--)e[u]=e[u-1];e[u]=[t,r,o]},c.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return c.d(n,{a:n}),n},c.d=function(e,n){for(var t in n)c.o(n,t)&&!c.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},c.f={},c.e=function(e){return Promise.all(Object.keys(c.f).reduce((function(n,t){return c.f[t](e,n),n}),[]))},c.u=function(e){return e+"."+{49:"e09332c520b9cfc76819",285:"737f3dd83d35dc2b18b9",418:"0551acf7705f35e5bcc1",428:"c7dd9c90abcc35c0728b",563:"b7a978e289f0521b4aa4",629:"f1ae622b740f3748eb3e",823:"683a101806cac8e7d2b0",827:"8ab14a581acc9c7ae201"}[e]+".js"},c.miniCssF=function(e){return"css/"+e+".css"},c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n={},t="hugiris-nft:",c.l=function(e,r,o,i){if(n[e])n[e].push(r);else{var a,s;if(void 0!==o)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var d=l[u];if(d.getAttribute("src")==e||d.getAttribute("data-webpack")==t+o){a=d;break}}a||(s=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,c.nc&&a.setAttribute("nonce",c.nc),a.setAttribute("data-webpack",t+o),a.src=e),n[e]=[r];var f=function(t,r){a.onerror=a.onload=null,clearTimeout(h);var o=n[e];if(delete n[e],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((function(e){return e(r)})),t)return t(r)},h=setTimeout(f.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),s&&document.head.appendChild(a)}},c.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},function(){var e;c.g.importScripts&&(e=c.g.location+"");var n=c.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=e}(),r=function(e){return new Promise((function(n,t){var r=c.miniCssF(e),o=c.p+r;if(function(e,n){for(var t=document.getElementsByTagName("link"),r=0;r<t.length;r++){var o=(a=t[r]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===n))return a}var i=document.getElementsByTagName("style");for(r=0;r<i.length;r++){var a;if((o=(a=i[r]).getAttribute("data-href"))===e||o===n)return a}}(r,o))return n();!function(e,n,t,r){var o=document.createElement("link");o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=function(i){if(o.onerror=o.onload=null,"load"===i.type)t();else{var a=i&&("load"===i.type?"missing":i.type),c=i&&i.target&&i.target.href||n,s=new Error("Loading CSS chunk "+e+" failed.\n("+c+")");s.code="CSS_CHUNK_LOAD_FAILED",s.type=a,s.request=c,o.parentNode.removeChild(o),r(s)}},o.href=n,document.head.appendChild(o)}(e,o,n,t)}))},o={179:0},c.f.miniCss=function(e,n){o[e]?n.push(o[e]):0!==o[e]&&{418:1,428:1,823:1,827:1}[e]&&n.push(o[e]=r(e).then((function(){o[e]=0}),(function(n){throw delete o[e],n})))},function(){var e={179:0};c.f.j=function(n,t){var r=c.o(e,n)?e[n]:void 0;if(0!==r)if(r)t.push(r[2]);else{var o=new Promise((function(t,o){r=e[n]=[t,o]}));t.push(r[2]=o);var i=c.p+c.u(n),a=new Error;c.l(i,(function(t){if(c.o(e,n)&&(0!==(r=e[n])&&(e[n]=void 0),r)){var o=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;a.message="Loading chunk "+n+" failed.\n("+o+": "+i+")",a.name="ChunkLoadError",a.type=o,a.request=i,r[1](a)}}),"chunk-"+n,n)}},c.O.j=function(n){return 0===e[n]};var n=function(n,t){var r,o,i=t[0],a=t[1],s=t[2],l=0;if(i.some((function(n){return 0!==e[n]}))){for(r in a)c.o(a,r)&&(c.m[r]=a[r]);if(s)var u=s(c)}for(n&&n(t);l<i.length;l++)o=i[l],c.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return c.O(u)},t=self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))}();var s=c.O(void 0,[216],(function(){return c(7108)}));s=c.O(s)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
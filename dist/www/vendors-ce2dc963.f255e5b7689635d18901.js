(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[4245],{26939:function(e,t,n){"use strict";n.d(t,{Q:function(){return s}});var r=n(17187),o=n(53653);var s=function(e){var t,n;function r(t){var n,r=(void 0===t?{}:t).supportedChainIds;return(n=e.call(this)||this).supportedChainIds=r,n}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var s=r.prototype;return s.emitUpdate=function(e){this.emit(o._.Update,e)},s.emitError=function(e){this.emit(o._.Error,e)},s.emitDeactivate=function(){this.emit(o._.Deactivate)},r}(r.EventEmitter)},77044:function(e,t,n){"use strict";n.d(t,{Uu:function(){return b},Ht:function(){return E},Ge:function(){return R}});var r=n(67294),o=n(2177),s=n(53653),i=n(93286),a=n(38197);function c(){return c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c.apply(this,arguments)}function u(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,l(e,t)}function h(e){return h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},h(e)}function l(e,t){return l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},l(e,t)}function p(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function d(e,t,n){return d=p()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&l(o,n.prototype),o},d.apply(null,arguments)}function f(e){var t="function"==typeof Map?new Map:void 0;return f=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return d(e,arguments,h(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),l(r,e)},f(e)}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));function m(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}function v(e){if("string"==typeof e){e=e.replace(/^Ox/,"0x");var t=Number.parseInt(e,"0x"===e.trim().substring(0,2)?16:10);return Number.isNaN(t)&&(0,o.Z)(!1),t}return Number.isInteger(e)||(0,o.Z)(!1),e}function y(e){"string"==typeof e&&e.match(/^(0x)?[0-9a-fA-F]{40}$/)||(0,o.Z)(!1);for(var t="0x"===e.substring(0,2)?e:"0x"+e,n=t.toLowerCase().substring(2).split(""),r=new Uint8Array(40),s=0;s<40;s++)r[s]=n[s].charCodeAt(0);for(var c=(0,i.lE)((0,a.w)(r)),u=0;u<40;u+=2)c[u>>1]>>4>=8&&(n[u]=n[u].toUpperCase()),(15&c[u>>1])>=8&&(n[u+1]=n[u+1].toUpperCase());var h="0x"+n.join("");return t.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&t!==h&&(0,o.Z)(!1),h}var g,w=function(e,t){try{var n=function(n){return Promise.resolve(Promise.all([void 0===t.chainId?e.getChainId():t.chainId,void 0===t.account?e.getAccount():t.account])).then((function(t){var r=t[0],o=t[1],s=v(r);if(e.supportedChainIds&&!e.supportedChainIds.includes(s))throw new b(s,e.supportedChainIds);var i=null===o?o:y(o);return{provider:n,chainId:s,account:i}}))},r=void 0===t.provider;return Promise.resolve(r?Promise.resolve(e.getProvider()).then(n):n(t.provider))}catch(e){return Promise.reject(e)}},_=function(e){function t(){var t;return(t=e.call(this)||this).name=t.constructor.name,t}return u(t,e),t}(f(Error)),b=function(e){function t(t,n){var r;return(r=e.call(this)||this).name=r.constructor.name,r.message="Unsupported chain id: "+t+". Supported chain ids are: "+n+".",r}return u(t,e),t}(f(Error));function C(e,t){var n=t.type,r=t.payload;switch(n){case g.ACTIVATE_CONNECTOR:return{connector:r.connector,provider:r.provider,chainId:r.chainId,account:r.account,onError:r.onError};case g.UPDATE:var o=r.provider,s=r.chainId,i=r.account;return c({},e,void 0===o?{}:{provider:o},void 0===s?{}:{chainId:s},void 0===i?{}:{account:i});case g.UPDATE_FROM_ERROR:var a=r.provider,u=r.chainId,h=r.account;return c({},e,void 0===a?{}:{provider:a},void 0===u?{}:{chainId:u},void 0===h?{}:{account:h},{error:void 0});case g.ERROR:var l=r.error;return{connector:e.connector,error:l,onError:e.onError};case g.ERROR_FROM_ACTIVATION:return{connector:r.connector,error:r.error};case g.DEACTIVATE_CONNECTOR:return{}}}!function(e){e[e.ACTIVATE_CONNECTOR=0]="ACTIVATE_CONNECTOR",e[e.UPDATE=1]="UPDATE",e[e.UPDATE_FROM_ERROR=2]="UPDATE_FROM_ERROR",e[e.ERROR=3]="ERROR",e[e.ERROR_FROM_ACTIVATION=4]="ERROR_FROM_ACTIVATION",e[e.DEACTIVATE_CONNECTOR=5]="DEACTIVATE_CONNECTOR"}(g||(g={}));var P="primary",k={};function T(e){k[e]&&(0,o.Z)(!1),k[e]=(0,r.createContext)({activate:function(){try{return(0,o.Z)(!1),Promise.resolve()}catch(e){return Promise.reject(e)}},setError:function(){(0,o.Z)(!1)},deactivate:function(){(0,o.Z)(!1)},active:!1}),k[e].displayName="Web3ReactContext - "+e;var t=k[e].Provider;return function(e){var n=e.getLibrary,o=e.children,i=function(){var e=(0,r.useReducer)(C,{}),t=e[0],n=e[1],o=t.connector,i=t.provider,a=t.chainId,u=t.account,h=t.onError,l=t.error,p=(0,r.useRef)(-1);p.current+=1;var d=(0,r.useCallback)((function(e,t,r){void 0===r&&(r=!1);try{var o=p.current,s=!1;return Promise.resolve(m((function(){return Promise.resolve(e.activate().then((function(e){return s=!0,e}))).then((function(r){return Promise.resolve(w(e,r)).then((function(r){if(p.current>o)throw new _;n({type:g.ACTIVATE_CONNECTOR,payload:c({connector:e},r,{onError:t})})}))}))}),(function(o){if(o instanceof _)s&&e.deactivate();else{if(r)throw s&&e.deactivate(),o;t?(s&&e.deactivate(),t(o)):n({type:g.ERROR_FROM_ACTIVATION,payload:{connector:e,error:o}})}})))}catch(e){return Promise.reject(e)}}),[]),f=(0,r.useCallback)((function(e){n({type:g.ERROR,payload:{error:e}})}),[]),P=(0,r.useCallback)((function(){n({type:g.DEACTIVATE_CONNECTOR})}),[]),k=(0,r.useCallback)((function(e){try{if(!o)throw Error("This should never happen, it's just so Typescript stops complaining");var t=p.current;return Promise.resolve(function(){if(l)return m((function(){return Promise.resolve(w(o,e)).then((function(e){if(p.current>t)throw new _;n({type:g.UPDATE_FROM_ERROR,payload:e})}))}),(function(e){e instanceof _||(h?h(e):n({type:g.ERROR,payload:{error:e}}))}));var r=void 0===e.chainId?void 0:v(e.chainId);if(void 0!==r&&o.supportedChainIds&&!o.supportedChainIds.includes(r)){var s=new b(r,o.supportedChainIds);h?h(s):n({type:g.ERROR,payload:{error:s}})}else{var i="string"==typeof e.account?y(e.account):e.account;n({type:g.UPDATE,payload:{provider:e.provider,chainId:r,account:i}})}}())}catch(e){return Promise.reject(e)}}),[o,l,h]),T=(0,r.useCallback)((function(e){h?h(e):n({type:g.ERROR,payload:{error:e}})}),[h]),E=(0,r.useCallback)((function(){n({type:g.DEACTIVATE_CONNECTOR})}),[]);return(0,r.useEffect)((function(){return function(){o&&o.deactivate()}}),[o]),(0,r.useEffect)((function(){return o&&o.on(s._.Update,k).on(s._.Error,T).on(s._.Deactivate,E),function(){o&&o.off(s._.Update,k).off(s._.Error,T).off(s._.Deactivate,E)}}),[o,k,T,E]),{connector:o,provider:i,chainId:a,account:u,activate:d,setError:f,deactivate:P,error:l}}(),a=i.connector,u=i.provider,h=i.chainId,l=i.account,p=i.activate,d=i.setError,f=i.deactivate,P=i.error,k=void 0!==a&&void 0!==h&&void 0!==l&&!P,T=(0,r.useMemo)((function(){return k&&void 0!==h&&Number.isInteger(h)&&a?n(u,a):void 0}),[k,n,u,a,h]),E={connector:a,library:T,chainId:h,account:l,activate:p,setError:d,deactivate:f,active:k,error:P};return r.createElement(t,{value:E},o)}}var E=T(P);function R(e){return(0,r.useContext)(function(e){return void 0===e&&(e=P),Object.keys(k).includes(e)||(0,o.Z)(!1),k[e]}(e))}},30950:function(e,t,n){"use strict";n.d(t,{_k:function(){return v},A5:function(){return f},ab:function(){return m}});var r=n(26939);function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function s(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function i(e){return i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},i(e)}function a(e,t){return a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},a(e,t)}function c(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function u(e,t,n){return u=c()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&a(o,n.prototype),o},u.apply(null,arguments)}function h(e){var t="function"==typeof Map?new Map:void 0;return h=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return u(e,arguments,i(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),a(r,e)},h(e)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));function p(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}function d(e){return e.hasOwnProperty("result")?e.result:e}var f=function(e){function t(){var t;return(t=e.call(this)||this).name=t.constructor.name,t.message="No Ethereum provider was found on window.ethereum.",t}return s(t,e),t}(h(Error)),m=function(e){function t(){var t;return(t=e.call(this)||this).name=t.constructor.name,t.message="The user rejected the request.",t}return s(t,e),t}(h(Error)),v=function(e){function t(t){var n;return(n=e.call(this,t)||this).handleNetworkChanged=n.handleNetworkChanged.bind(l(n)),n.handleChainChanged=n.handleChainChanged.bind(l(n)),n.handleAccountsChanged=n.handleAccountsChanged.bind(l(n)),n.handleClose=n.handleClose.bind(l(n)),n}s(t,e);var n=t.prototype;return n.handleChainChanged=function(e){this.emitUpdate({chainId:e,provider:window.ethereum})},n.handleAccountsChanged=function(e){0===e.length?this.emitDeactivate():this.emitUpdate({account:e[0]})},n.handleClose=function(e,t){this.emitDeactivate()},n.handleNetworkChanged=function(e){this.emitUpdate({chainId:e,provider:window.ethereum})},n.activate=function(){try{var e,t=function(t){if(n)return t;function r(){return o({provider:window.ethereum},e?{account:e}:{})}var s=function(){if(!e)return Promise.resolve(window.ethereum.enable().then((function(e){return e&&d(e)[0]}))).then((function(t){e=t}))}();return s&&s.then?s.then(r):r()},n=!1,r=this;if(!window.ethereum)throw new f;window.ethereum.on&&(window.ethereum.on("chainChanged",r.handleChainChanged),window.ethereum.on("accountsChanged",r.handleAccountsChanged),window.ethereum.on("close",r.handleClose),window.ethereum.on("networkChanged",r.handleNetworkChanged)),window.ethereum.isMetaMask&&(window.ethereum.autoRefreshOnNetworkChange=!1);var s=p((function(){return Promise.resolve(window.ethereum.send("eth_requestAccounts").then((function(e){return d(e)[0]}))).then((function(t){e=t}))}),(function(e){if(4001===e.code)throw new m}));return Promise.resolve(s&&s.then?s.then(t):t(s))}catch(e){return Promise.reject(e)}},n.getProvider=function(){try{return Promise.resolve(window.ethereum)}catch(e){return Promise.reject(e)}},n.getChainId=function(){try{var e,t=function(){function t(){if(!e)try{e=d(window.ethereum.send({method:"net_version"}))}catch(e){}return e||(e=window.ethereum.isDapper?d(window.ethereum.cachedResults.net_version):window.ethereum.chainId||window.ethereum.netVersion||window.ethereum.networkVersion||window.ethereum._chainId),e}var n=function(){if(!e){var t=p((function(){return Promise.resolve(window.ethereum.send("net_version").then(d)).then((function(t){e=t}))}),(function(){}));if(t&&t.then)return t.then((function(){}))}}();return n&&n.then?n.then(t):t()};if(!window.ethereum)throw new f;var n=p((function(){return Promise.resolve(window.ethereum.send("eth_chainId").then(d)).then((function(t){e=t}))}),(function(){}));return Promise.resolve(n&&n.then?n.then(t):t())}catch(e){return Promise.reject(e)}},n.getAccount=function(){try{var e,t=function(){function t(){return e||(e=d(window.ethereum.send({method:"eth_accounts"}))[0]),e}var n=function(){if(!e){var t=p((function(){return Promise.resolve(window.ethereum.enable().then((function(e){return d(e)[0]}))).then((function(t){e=t}))}),(function(){}));if(t&&t.then)return t.then((function(){}))}}();return n&&n.then?n.then(t):t()};if(!window.ethereum)throw new f;var n=p((function(){return Promise.resolve(window.ethereum.send("eth_accounts").then((function(e){return d(e)[0]}))).then((function(t){e=t}))}),(function(){}));return Promise.resolve(n&&n.then?n.then(t):t())}catch(e){return Promise.reject(e)}},n.deactivate=function(){window.ethereum&&window.ethereum.removeListener&&(window.ethereum.removeListener("chainChanged",this.handleChainChanged),window.ethereum.removeListener("accountsChanged",this.handleAccountsChanged),window.ethereum.removeListener("close",this.handleClose),window.ethereum.removeListener("networkChanged",this.handleNetworkChanged))},n.isAuthorized=function(){try{return window.ethereum?Promise.resolve(p((function(){return Promise.resolve(window.ethereum.send("eth_accounts").then((function(e){return d(e).length>0})))}),(function(){return!1}))):Promise.resolve(!1)}catch(e){return Promise.reject(e)}},t}(r.Q)},53653:function(e,t,n){"use strict";var r;n.d(t,{_:function(){return r}}),function(e){e.Update="Web3ReactUpdate",e.Error="Web3ReactError",e.Deactivate="Web3ReactDeactivate"}(r||(r={}))},83929:function(e,t,n){"use strict";n.d(t,{ab:function(){return l},zw:function(){return p}});var r=n(26939);function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,i(e,t)}function s(e){return s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},s(e)}function i(e,t){return i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},i(e,t)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function c(e,t,n){return c=a()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&i(o,n.prototype),o},c.apply(null,arguments)}function u(e){var t="function"==typeof Map?new Map:void 0;return u=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return c(e,arguments,s(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),i(r,e)},u(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var l=function(e){function t(){var t;return(t=e.call(this)||this).name=t.constructor.name,t.message="The user rejected the request.",t}return o(t,e),t}(u(Error));var p=function(e){function t(t){var n,r,o,s;return(n=e.call(this,{supportedChainIds:(r=t,o=r.supportedChainIds,s=r.rpc,o||(s?Object.keys(s).map((function(e){return Number(e)})):void 0))})||this).config=t,n.handleChainChanged=n.handleChainChanged.bind(h(n)),n.handleAccountsChanged=n.handleAccountsChanged.bind(h(n)),n.handleDisconnect=n.handleDisconnect.bind(h(n)),n}o(t,e);var r=t.prototype;return r.handleChainChanged=function(e){this.emitUpdate({chainId:e})},r.handleAccountsChanged=function(e){this.emitUpdate({account:e[0]})},r.handleDisconnect=function(){this.emitDeactivate(),this.walletConnectProvider&&(this.walletConnectProvider.stop(),this.walletConnectProvider.removeListener("chainChanged",this.handleChainChanged),this.walletConnectProvider.removeListener("accountsChanged",this.handleAccountsChanged),this.walletConnectProvider=void 0),this.emitDeactivate()},r.activate=function(){try{var e=this,t=function(){function t(){return Promise.resolve(e.walletConnectProvider.enable().then((function(e){return e[0]})).catch((function(e){if("User closed modal"===e.message)throw new l;throw e}))).then((function(t){return e.walletConnectProvider.on("disconnect",e.handleDisconnect),e.walletConnectProvider.on("chainChanged",e.handleChainChanged),e.walletConnectProvider.on("accountsChanged",e.handleAccountsChanged),{provider:e.walletConnectProvider,account:t}}))}var n=function(){if(!e.walletConnectProvider.wc.connected)return Promise.resolve(e.walletConnectProvider.wc.createSession({chainId:e.supportedChainIds&&e.supportedChainIds.length>0?e.supportedChainIds[0]:1})).then((function(){e.emit("URI_AVAILABLE",e.walletConnectProvider.wc.uri)}))}();return n&&n.then?n.then(t):t()},r=function(){if(!e.walletConnectProvider)return Promise.resolve(Promise.all([n.e(4658),n.e(3738),n.e(944),n.e(813),n.e(9521),n.e(4912),n.e(9557),n.e(8384),n.e(2827),n.e(1715),n.e(9806),n.e(3278),n.e(1565),n.e(4735),n.e(4625),n.e(2329),n.e(6882),n.e(1106),n.e(5187),n.e(2972),n.e(4581),n.e(2506),n.e(8825),n.e(8490),n.e(1680),n.e(3964),n.e(7715),n.e(9842),n.e(5526),n.e(1771),n.e(8811),n.e(4211),n.e(2492),n.e(3923),n.e(483),n.e(9920),n.e(5457),n.e(7010),n.e(7219),n.e(8059),n.e(4245),n.e(3707),n.e(4962),n.e(6563)]).then(n.bind(n,72485)).then((function(e){var t;return null!=(t=null==e?void 0:e.default)?t:e}))).then((function(t){e.walletConnectProvider=new t(e.config)}))}();return Promise.resolve(r&&r.then?r.then(t):t())}catch(e){return Promise.reject(e)}},r.getProvider=function(){try{return Promise.resolve(this.walletConnectProvider)}catch(e){return Promise.reject(e)}},r.getChainId=function(){try{return Promise.resolve(this.walletConnectProvider.send("eth_chainId"))}catch(e){return Promise.reject(e)}},r.getAccount=function(){try{return Promise.resolve(this.walletConnectProvider.send("eth_accounts").then((function(e){return e[0]})))}catch(e){return Promise.reject(e)}},r.deactivate=function(){this.walletConnectProvider&&(this.walletConnectProvider.stop(),this.walletConnectProvider.removeListener("disconnect",this.handleDisconnect),this.walletConnectProvider.removeListener("chainChanged",this.handleChainChanged),this.walletConnectProvider.removeListener("accountsChanged",this.handleAccountsChanged))},r.close=function(){try{var e;return Promise.resolve(null==(e=this.walletConnectProvider)?void 0:e.close()).then((function(){}))}catch(e){return Promise.reject(e)}},t}(r.Q)},12906:function(e,t,n){var r=n(25108);const o=n(17187).EventEmitter,s=n(89539).inherits,i=n(21964),a=n(75012),c=n(94005),u=n(94282),h=n(52698),l=(n(6496),n(39728)),p=function(){};function d(e){const t=this;o.call(t),t.setMaxListeners(30),e=e||{};const n={sendAsync:t._handleAsync.bind(t)},r=e.blockTrackerProvider||n;t._blockTracker=e.blockTracker||new a({provider:r,pollingInterval:e.pollingInterval||4e3,setSkipCacheFlag:!0}),t._ready=new h,t.currentBlock=null,t._providers=[]}e.exports=d,s(d,o),d.prototype.start=function(e=p){const t=this;t._ready.go(),t._blockTracker.on("latest",(e=>{t._getBlockByNumberWithRetry(e,((e,n)=>{if(e)return void this.emit("error",e);if(!n)return r.log(n),void this.emit("error",new Error("Could not find block"));const o=(s=n,{number:i.toBuffer(s.number),hash:i.toBuffer(s.hash),parentHash:i.toBuffer(s.parentHash),nonce:i.toBuffer(s.nonce),mixHash:i.toBuffer(s.mixHash),sha3Uncles:i.toBuffer(s.sha3Uncles),logsBloom:i.toBuffer(s.logsBloom),transactionsRoot:i.toBuffer(s.transactionsRoot),stateRoot:i.toBuffer(s.stateRoot),receiptsRoot:i.toBuffer(s.receiptRoot||s.receiptsRoot),miner:i.toBuffer(s.miner),difficulty:i.toBuffer(s.difficulty),totalDifficulty:i.toBuffer(s.totalDifficulty),size:i.toBuffer(s.size),extraData:i.toBuffer(s.extraData),gasLimit:i.toBuffer(s.gasLimit),gasUsed:i.toBuffer(s.gasUsed),timestamp:i.toBuffer(s.timestamp),transactions:s.transactions});var s;t._setCurrentBlock(o),t.emit("rawBlock",n),t.emit("latest",n)}))})),t._blockTracker.on("sync",t.emit.bind(t,"sync")),t._blockTracker.on("error",t.emit.bind(t,"error")),t._running=!0,t.emit("start")},d.prototype.stop=function(){const e=this;e._blockTracker.removeAllListeners(),e._running=!1,e.emit("stop")},d.prototype.isRunning=function(){return this._running},d.prototype.addProvider=function(e,t){const n=this;"number"==typeof t?n._providers.splice(t,0,e):n._providers.push(e),e.setEngine(this)},d.prototype.removeProvider=function(e){const t=this._providers.indexOf(e);if(t<0)throw new Error("Provider not found.");this._providers.splice(t,1)},d.prototype.send=function(e){throw new Error("Web3ProviderEngine does not support synchronous requests.")},d.prototype.sendAsync=function(e,t){const n=this;n._ready.await((function(){Array.isArray(e)?c(e,n._handleAsync.bind(n),t):n._handleAsync(e,t)}))},d.prototype._getBlockByNumberWithRetry=function(e,t){const n=this;let r=5;return void o();function o(){n._getBlockByNumber(e,s)}function s(e,n){return e?t(e):n?void t(null,n):r>0?(r--,void setTimeout((function(){o()}),1e3)):void t(null,null)}},d.prototype._getBlockByNumber=function(e,t){const n=l({method:"eth_getBlockByNumber",params:[e,!1],skipCache:!0});this._handleAsync(n,((e,n)=>e?t(e):t(null,n.result)))},d.prototype._handleAsync=function(e,t){var n=this,r=-1,o=null,s=null,i=[];function a(n,r){s=n,o=r,u(i,(function(e,t){e?e(s,o,t):t()}),(function(){var n={id:e.id,jsonrpc:e.jsonrpc,result:o};null!=s?(n.error={message:s.stack||s.message||s,code:-32e3},t(s,n)):t(null,n)}))}!function t(o){if(r+=1,i.unshift(o),r>=n._providers.length)a(new Error('Request for method "'+e.method+'" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'));else try{n._providers[r].handleRequest(e,t,a)}catch(e){a(e)}}()},d.prototype._setCurrentBlock=function(e){this.currentBlock=e,this.emit("block",e)}},41955:function(e,t,n){const r=n(6403),o=n(37870);e.exports=class extends r{constructor(e){super((({blockTracker:t})=>o(Object.assign({blockTracker:t},e))))}}},28260:function(e,t,n){const r=n(6403),o=n(98406);e.exports=class extends r{constructor(){super((({blockTracker:e,provider:t,engine:n})=>o({blockTracker:e,provider:t})))}}},2110:function(e,t,n){const r=n(89539).inherits,o=n(30398);function s(e){e=e||{},this.staticResponses=e}e.exports=s,r(s,o),s.prototype.handleRequest=function(e,t,n){var r=this.staticResponses[e.method];"function"==typeof r?r(e,t,n):void 0!==r?setTimeout((()=>n(null,r))):t()}},78747:function(e,t,n){var r=n(25108);const o=n(7879),s=n(80047),i=n(89539).inherits,a=n(21964),c=n(2843),u=n(47529),h=n(80045),l=n(30398),p=n(28372),d=/^[0-9A-Fa-f]+$/g;function f(e){const t=this;t.nonceLock=h(1),e.getAccounts&&(t.getAccounts=e.getAccounts),e.processTransaction&&(t.processTransaction=e.processTransaction),e.processMessage&&(t.processMessage=e.processMessage),e.processPersonalMessage&&(t.processPersonalMessage=e.processPersonalMessage),e.processTypedMessage&&(t.processTypedMessage=e.processTypedMessage),t.approveTransaction=e.approveTransaction||t.autoApprove,t.approveMessage=e.approveMessage||t.autoApprove,t.approvePersonalMessage=e.approvePersonalMessage||t.autoApprove,t.approveDecryptMessage=e.approveDecryptMessage||t.autoApprove,t.approveEncryptionPublicKey=e.approveEncryptionPublicKey||t.autoApprove,t.approveTypedMessage=e.approveTypedMessage||t.autoApprove,e.signTransaction&&(t.signTransaction=e.signTransaction||w("signTransaction")),e.signMessage&&(t.signMessage=e.signMessage||w("signMessage")),e.signPersonalMessage&&(t.signPersonalMessage=e.signPersonalMessage||w("signPersonalMessage")),e.decryptMessage&&(t.decryptMessage=e.decryptMessage||w("decryptMessage")),e.encryptionPublicKey&&(t.encryptionPublicKey=e.encryptionPublicKey||w("encryptionPublicKey")),e.signTypedMessage&&(t.signTypedMessage=e.signTypedMessage||w("signTypedMessage")),e.recoverPersonalSignature&&(t.recoverPersonalSignature=e.recoverPersonalSignature),e.publishTransaction&&(t.publishTransaction=e.publishTransaction),t.estimateGas=e.estimateGas||t.estimateGas,t.getGasPrice=e.getGasPrice||t.getGasPrice}function m(e){return e.toLowerCase()}function v(e){const t=a.addHexPrefix(e);return a.isValidAddress(t)}function y(e){const t=a.addHexPrefix(e);return!a.isValidAddress(t)&&g(e)}function g(e){if(!("string"==typeof e))return!1;if(!("0x"===e.slice(0,2)))return!1;return e.slice(2).match(d)}function w(e){return function(t,n){n(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "'+e+'" fn in constructor options'))}}e.exports=f,i(f,l),f.prototype.handleRequest=function(e,t,n){const s=this;let i,a,c,h,l;switch(s._parityRequests={},s._parityRequestCount=0,e.method){case"eth_coinbase":return void s.getAccounts((function(e,t){if(e)return n(e);let r=t[0]||null;n(null,r)}));case"eth_accounts":return void s.getAccounts((function(e,t){if(e)return n(e);n(null,t)}));case"eth_sendTransaction":return i=e.params[0],void o([e=>s.validateTransaction(i,e),e=>s.processTransaction(i,e)],n);case"eth_signTransaction":return i=e.params[0],void o([e=>s.validateTransaction(i,e),e=>s.processSignTransaction(i,e)],n);case"eth_sign":return l=e.params[0],h=e.params[1],c=e.params[2]||{},a=u(c,{from:l,data:h}),void o([e=>s.validateMessage(a,e),e=>s.processMessage(a,e)],n);case"personal_sign":return function(){const t=e.params[0];if(y(e.params[1])&&v(t)){let t="The eth_personalSign method requires params ordered ";t+="[message, address]. This was previously handled incorrectly, ",t+="and has been corrected automatically. ",t+="Please switch this param order for smooth behavior in the future.",r.warn(t),l=e.params[0],h=e.params[1]}else h=e.params[0],l=e.params[1];c=e.params[2]||{},a=u(c,{from:l,data:h}),o([e=>s.validatePersonalMessage(a,e),e=>s.processPersonalMessage(a,e)],n)}();case"eth_decryptMessage":return function(){const t=e.params[0];if(y(e.params[1])&&v(t)){let t="The eth_decryptMessage method requires params ordered ";t+="[message, address]. This was previously handled incorrectly, ",t+="and has been corrected automatically. ",t+="Please switch this param order for smooth behavior in the future.",r.warn(t),l=e.params[0],h=e.params[1]}else h=e.params[0],l=e.params[1];c=e.params[2]||{},a=u(c,{from:l,data:h}),o([e=>s.validateDecryptMessage(a,e),e=>s.processDecryptMessage(a,e)],n)}();case"encryption_public_key":return function(){const t=e.params[0];o([e=>s.validateEncryptionPublicKey(t,e),e=>s.processEncryptionPublicKey(t,e)],n)}();case"personal_ecRecover":return function(){h=e.params[0];let t=e.params[1];c=e.params[2]||{},a=u(c,{sig:t,data:h}),s.recoverPersonalSignature(a,n)}();case"eth_signTypedData":case"eth_signTypedData_v3":case"eth_signTypedData_v4":return function(){const t=e.params[0],r=e.params[1];v(t)?(l=t,h=r):(h=t,l=r),c=e.params[2]||{},a=u(c,{from:l,data:h}),o([e=>s.validateTypedMessage(a,e),e=>s.processTypedMessage(a,e)],n)}();case"parity_postTransaction":return i=e.params[0],void s.parityPostTransaction(i,n);case"parity_postSign":return l=e.params[0],h=e.params[1],void s.parityPostSign(l,h,n);case"parity_checkRequest":return function(){const t=e.params[0];s.parityCheckRequest(t,n)}();case"parity_defaultAccount":return void s.getAccounts((function(e,t){if(e)return n(e);const r=t[0]||null;n(null,r)}));default:return void t()}},f.prototype.getAccounts=function(e){e(null,[])},f.prototype.processTransaction=function(e,t){const n=this;o([t=>n.approveTransaction(e,t),(e,t)=>n.checkApproval("transaction",e,t),t=>n.finalizeAndSubmitTx(e,t)],t)},f.prototype.processSignTransaction=function(e,t){const n=this;o([t=>n.approveTransaction(e,t),(e,t)=>n.checkApproval("transaction",e,t),t=>n.finalizeTx(e,t)],t)},f.prototype.processMessage=function(e,t){const n=this;o([t=>n.approveMessage(e,t),(e,t)=>n.checkApproval("message",e,t),t=>n.signMessage(e,t)],t)},f.prototype.processPersonalMessage=function(e,t){const n=this;o([t=>n.approvePersonalMessage(e,t),(e,t)=>n.checkApproval("message",e,t),t=>n.signPersonalMessage(e,t)],t)},f.prototype.processDecryptMessage=function(e,t){const n=this;o([t=>n.approveDecryptMessage(e,t),(e,t)=>n.checkApproval("decryptMessage",e,t),t=>n.decryptMessage(e,t)],t)},f.prototype.processEncryptionPublicKey=function(e,t){const n=this;o([t=>n.approveEncryptionPublicKey(e,t),(e,t)=>n.checkApproval("encryptionPublicKey",e,t),t=>n.encryptionPublicKey(e,t)],t)},f.prototype.processTypedMessage=function(e,t){const n=this;o([t=>n.approveTypedMessage(e,t),(e,t)=>n.checkApproval("message",e,t),t=>n.signTypedMessage(e,t)],t)},f.prototype.autoApprove=function(e,t){t(null,!0)},f.prototype.checkApproval=function(e,t,n){n(t?null:new Error("User denied "+e+" signature."))},f.prototype.parityPostTransaction=function(e,t){const n=this,r=`0x${n._parityRequestCount.toString(16)}`;n._parityRequestCount++,n.emitPayload({method:"eth_sendTransaction",params:[e]},(function(e,t){if(e)return void(n._parityRequests[r]={error:e});const o=t.result;n._parityRequests[r]=o})),t(null,r)},f.prototype.parityPostSign=function(e,t,n){const r=this,o=`0x${r._parityRequestCount.toString(16)}`;r._parityRequestCount++,r.emitPayload({method:"eth_sign",params:[e,t]},(function(e,t){if(e)return void(r._parityRequests[o]={error:e});const n=t.result;r._parityRequests[o]=n})),n(null,o)},f.prototype.parityCheckRequest=function(e,t){const n=this._parityRequests[e]||null;return n?n.error?t(n.error):void t(null,n):t(null,null)},f.prototype.recoverPersonalSignature=function(e,t){let n;try{n=c.recoverPersonalSignature(e)}catch(e){return t(e)}t(null,n)},f.prototype.validateTransaction=function(e,t){if(void 0===e.from)return t(new Error("Undefined address - from address required to sign transaction."));this.validateSender(e.from,(function(n,r){return n?t(n):r?void t():t(new Error(`Unknown address - unable to sign transaction for this address: "${e.from}"`))}))},f.prototype.validateMessage=function(e,t){if(void 0===e.from)return t(new Error("Undefined address - from address required to sign message."));this.validateSender(e.from,(function(n,r){return n?t(n):r?void t():t(new Error(`Unknown address - unable to sign message for this address: "${e.from}"`))}))},f.prototype.validatePersonalMessage=function(e,t){return void 0===e.from?t(new Error("Undefined address - from address required to sign personal message.")):void 0===e.data?t(new Error("Undefined message - message required to sign personal message.")):g(e.data)?void this.validateSender(e.from,(function(n,r){return n?t(n):r?void t():t(new Error(`Unknown address - unable to sign message for this address: "${e.from}"`))})):t(new Error("HookedWalletSubprovider - validateMessage - message was not encoded as hex."))},f.prototype.validateDecryptMessage=function(e,t){return void 0===e.from?t(new Error("Undefined address - from address required to decrypt message.")):void 0===e.data?t(new Error("Undefined message - message required to decrypt message.")):g(e.data)?void this.validateSender(e.from,(function(n,r){return n?t(n):r?void t():t(new Error(`Unknown address - unable to decrypt message for this address: "${e.from}"`))})):t(new Error("HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex."))},f.prototype.validateEncryptionPublicKey=function(e,t){this.validateSender(e,(function(n,r){return n?t(n):r?void t():t(new Error(`Unknown address - unable to obtain encryption public key for this address: "${e}"`))}))},f.prototype.validateTypedMessage=function(e,t){return void 0===e.from?t(new Error("Undefined address - from address required to sign typed data.")):void 0===e.data?t(new Error("Undefined data - message required to sign typed data.")):void this.validateSender(e.from,(function(n,r){return n?t(n):r?void t():t(new Error(`Unknown address - unable to sign message for this address: "${e.from}"`))}))},f.prototype.validateSender=function(e,t){if(!e)return t(null,!1);this.getAccounts((function(n,r){if(n)return t(n);const o=-1!==r.map(m).indexOf(e.toLowerCase());t(null,o)}))},f.prototype.finalizeAndSubmitTx=function(e,t){const n=this;n.nonceLock.take((function(){o([n.fillInTxExtras.bind(n,e),n.signTransaction.bind(n),n.publishTransaction.bind(n)],(function(e,r){if(n.nonceLock.leave(),e)return t(e);t(null,r)}))}))},f.prototype.finalizeTx=function(e,t){const n=this;n.nonceLock.take((function(){o([n.fillInTxExtras.bind(n,e),n.signTransaction.bind(n)],(function(r,o){if(n.nonceLock.leave(),r)return t(r);t(null,{raw:o,tx:e})}))}))},f.prototype.publishTransaction=function(e,t){this.emitPayload({method:"eth_sendRawTransaction",params:[e]},(function(e,n){if(e)return t(e);t(null,n.result)}))},f.prototype.estimateGas=function(e,t){p(this.engine,e,t)},f.prototype.getGasPrice=function(e){this.emitPayload({method:"eth_gasPrice",params:[]},(function(t,n){if(t)return e(t);e(null,n.result)}))},f.prototype.fillInTxExtras=function(e,t){const n=this,r=e.from,o={};void 0===e.gasPrice&&(o.gasPrice=n.getGasPrice.bind(n)),void 0===e.nonce&&(o.nonce=n.emitPayload.bind(n,{method:"eth_getTransactionCount",params:[r,"pending"]})),void 0===e.gas&&(o.gas=n.estimateGas.bind(n,function(e){return{from:e.from,to:e.to,value:e.value,data:e.data,gas:e.gas,gasPrice:e.gasPrice,nonce:e.nonce}}(e))),s(o,(function(n,r){if(n)return t(n);const o={};r.gasPrice&&(o.gasPrice=r.gasPrice),r.nonce&&(o.nonce=r.nonce.result),r.gas&&(o.gas=r.gas),t(null,u(e,o))}))}},6403:function(e,t,n){const r=n(30398);e.exports=class extends r{constructor(e){if(super(),!e)throw new Error("JsonRpcEngineMiddlewareSubprovider - no constructorFn specified");this._constructorFn=e}setEngine(e){if(this.middleware)throw new Error("JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice");const t=e._blockTracker,n=this._constructorFn({engine:e,provider:e,blockTracker:t});if(!n)throw new Error("JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware");if("function"!=typeof n)throw new Error("JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function");this.middleware=n}handleRequest(e,t,n){const r={id:e.id};this.middleware(e,r,(function(e){t(((t,n,o)=>{t?(delete r.result,r.error={message:t.message||t}):r.result=n,e?e(o):o()}))}),(function(e){if(e)return n(e);n(null,r.result)}))}}},3621:function(e,t,n){var r=n(23085).Buffer;const o=n(89539).inherits,s=n(29847),i=n(21964),a=n(30398),c=n(6496).blockTagForPayload;function u(e){this.nonceCache={}}e.exports=u,o(u,a),u.prototype.handleRequest=function(e,t,n){const o=this;switch(e.method){case"eth_getTransactionCount":var a=c(e),u=e.params[0].toLowerCase(),h=o.nonceCache[u];return void("pending"===a?h?n(null,h):t((function(e,t,n){if(e)return n();void 0===o.nonceCache[u]&&(o.nonceCache[u]=t),n()})):t());case"eth_sendRawTransaction":return void t((function(t,n,a){if(t)return a();var c=e.params[0],u=(i.stripHexPrefix(c),r.from(i.stripHexPrefix(c),"hex"),new s(r.from(i.stripHexPrefix(c),"hex"))),h="0x"+u.getSenderAddress().toString("hex").toLowerCase(),l=i.bufferToInt(u.nonce),p=(++l).toString(16);p.length%2&&(p="0"+p),p="0x"+p,o.nonceCache[h]=p,a()}));case"evm_revert":return o.nonceCache={},void t();default:return void t()}}},30398:function(e,t,n){const r=n(39728);function o(){}e.exports=o,o.prototype.setEngine=function(e){const t=this;t.engine||(t.engine=e,e.on("block",(function(e){t.currentBlock=e})),e.on("start",(function(){t.start()})),e.on("stop",(function(){t.stop()})))},o.prototype.handleRequest=function(e,t,n){throw new Error("Subproviders should override `handleRequest`.")},o.prototype.emitPayload=function(e,t){this.engine.sendAsync(r(e),t)},o.prototype.stop=function(){},o.prototype.start=function(){}},78191:function(e,t,n){const r=n(6403),o=n(68961);e.exports=class extends r{constructor(){super((({blockTracker:e,provider:t,engine:n})=>{const{events:r,middleware:s}=o({blockTracker:e,provider:t});return r.on("notification",(e=>n.emit("data",null,e))),s}))}}},39728:function(e,t,n){const r=n(88620),o=n(47529);e.exports=function(e){return o({id:r(),jsonrpc:"2.0",params:[]},e)}},28372:function(e,t,n){const r=n(39728);e.exports=function(e,t,n){e.sendAsync(r({method:"eth_estimateGas",params:[t]}),(function(e,t){if(e)return"no contract code at given address"===e.message?n(null,"0xcf08"):n(e);n(null,t.result)}))}},88620:function(e){e.exports=function(){return Math.floor(Number.MAX_SAFE_INTEGER*Math.random())}},6496:function(e,t,n){const r=n(67266);function o(e){return"never"!==a(e)}function s(e){var t=i(e);return t>=e.params.length?e.params:"eth_getBlockByNumber"===e.method?e.params.slice(1):e.params.slice(0,t)}function i(e){switch(e.method){case"eth_getStorageAt":return 2;case"eth_getBalance":case"eth_getCode":case"eth_getTransactionCount":case"eth_call":case"eth_estimateGas":return 1;case"eth_getBlockByNumber":return 0;default:return}}function a(e){switch(e.method){case"web3_clientVersion":case"web3_sha3":case"eth_protocolVersion":case"eth_getBlockTransactionCountByHash":case"eth_getUncleCountByBlockHash":case"eth_getCode":case"eth_getBlockByHash":case"eth_getTransactionByHash":case"eth_getTransactionByBlockHashAndIndex":case"eth_getTransactionReceipt":case"eth_getUncleByBlockHashAndIndex":case"eth_getCompilers":case"eth_compileLLL":case"eth_compileSolidity":case"eth_compileSerpent":case"shh_version":return"perma";case"eth_getBlockByNumber":case"eth_getBlockTransactionCountByNumber":case"eth_getUncleCountByBlockNumber":case"eth_getTransactionByBlockNumberAndIndex":case"eth_getUncleByBlockNumberAndIndex":return"fork";case"eth_gasPrice":case"eth_getBalance":case"eth_getStorageAt":case"eth_getTransactionCount":case"eth_call":case"eth_estimateGas":case"eth_getFilterLogs":case"eth_getLogs":case"eth_blockNumber":return"block";case"net_version":case"net_peerCount":case"net_listening":case"eth_syncing":case"eth_sign":case"eth_coinbase":case"eth_mining":case"eth_hashrate":case"eth_accounts":case"eth_sendTransaction":case"eth_sendRawTransaction":case"eth_newFilter":case"eth_newBlockFilter":case"eth_newPendingTransactionFilter":case"eth_uninstallFilter":case"eth_getFilterChanges":case"eth_getWork":case"eth_submitWork":case"eth_submitHashrate":case"db_putString":case"db_getString":case"db_putHex":case"db_getHex":case"shh_post":case"shh_newIdentity":case"shh_hasIdentity":case"shh_newGroup":case"shh_addToGroup":case"shh_newFilter":case"shh_uninstallFilter":case"shh_getFilterChanges":case"shh_getMessages":return"never"}}e.exports={cacheIdentifierForPayload:function(e,t={}){if(!o(e))return null;const{includeBlockRef:n}=t,i=n?e.params:s(e);return e.method+":"+r(i)},canCache:o,blockTagForPayload:function(e){var t=i(e);if(t>=e.params.length)return null;return e.params[t]},paramsWithoutBlockTag:s,blockTagParamIndex:i,cacheTypeForPayload:a}},52698:function(e,t,n){const r=n(17187).EventEmitter,o=n(89539).inherits;function s(){r.call(this),this.isLocked=!0}e.exports=s,o(s,r),s.prototype.go=function(){this.isLocked=!1,this.emit("unlock")},s.prototype.stop=function(){this.isLocked=!0,this.emit("lock")},s.prototype.await=function(e){const t=this;t.isLocked?t.once("unlock",e):setTimeout(e)}},34351:function(e,t,n){var r=n(84390).errors,o=n(59536).XMLHttpRequest,s=n(8501),i=n(79267),a=function(e,t){t=t||{},this.withCredentials=t.withCredentials||!1,this.timeout=t.timeout||0,this.headers=t.headers,this.agent=t.agent,this.connected=!1;const n=!1!==t.keepAlive;this.host=e||"http://localhost:8545",this.agent||("https"===this.host.substring(0,5)?this.httpsAgent=new i.Agent({keepAlive:n}):this.httpAgent=new s.Agent({keepAlive:n}))};a.prototype._prepareRequest=function(){var e;if("undefined"!=typeof XMLHttpRequest)e=new XMLHttpRequest;else{e=new o;var t={httpsAgent:this.httpsAgent,httpAgent:this.httpAgent,baseUrl:this.baseUrl};this.agent&&(t.httpsAgent=this.agent.https,t.httpAgent=this.agent.http,t.baseUrl=this.agent.baseUrl),e.nodejsSet(t)}return e.open("POST",this.host,!0),e.setRequestHeader("Content-Type","application/json"),e.timeout=this.timeout,e.withCredentials=this.withCredentials,this.headers&&this.headers.forEach((function(t){e.setRequestHeader(t.name,t.value)})),e},a.prototype.send=function(e,t){var n=this,o=this._prepareRequest();o.onreadystatechange=function(){if(4===o.readyState&&1!==o.timeout){var e=o.responseText,s=null;try{e=JSON.parse(e)}catch(e){s=r.InvalidResponse(o.responseText)}n.connected=!0,t(s,e)}},o.ontimeout=function(){n.connected=!1,t(r.ConnectionTimeout(this.timeout))};try{o.send(JSON.stringify(e))}catch(e){this.connected=!1,t(r.InvalidConnection(this.host))}},a.prototype.disconnect=function(){},a.prototype.supportsSubscriptions=function(){return!1},e.exports=a},73097:function(e,t,n){"use strict";var r=n(84390).errors,o=n(43455),s=function(e,t){var n=this;this.responseCallbacks={},this.notificationCallbacks=[],this.path=e,this.connected=!1,this.connection=t.connect({path:this.path}),this.addDefaultEvents();var r=function(e){var t=null;Array.isArray(e)?e.forEach((function(e){n.responseCallbacks[e.id]&&(t=e.id)})):t=e.id,t||-1===e.method.indexOf("_subscription")?n.responseCallbacks[t]&&(n.responseCallbacks[t](null,e),delete n.responseCallbacks[t]):n.notificationCallbacks.forEach((function(t){"function"==typeof t&&t(e)}))};"Socket"===t.constructor.name?o(this.connection).done(r):this.connection.on("data",(function(e){n._parseResponse(e.toString()).forEach(r)}))};s.prototype.addDefaultEvents=function(){var e=this;this.connection.on("connect",(function(){e.connected=!0})),this.connection.on("close",(function(){e.connected=!1})),this.connection.on("error",(function(){e._timeout()})),this.connection.on("end",(function(){e._timeout()})),this.connection.on("timeout",(function(){e._timeout()}))},s.prototype._parseResponse=function(e){var t=this,n=[];return e.replace(/\}[\n\r]?\{/g,"}|--|{").replace(/\}\][\n\r]?\[\{/g,"}]|--|[{").replace(/\}[\n\r]?\[\{/g,"}|--|[{").replace(/\}\][\n\r]?\{/g,"}]|--|{").split("|--|").forEach((function(e){t.lastChunk&&(e=t.lastChunk+e);var o=null;try{o=JSON.parse(e)}catch(n){return t.lastChunk=e,clearTimeout(t.lastChunkTimeout),void(t.lastChunkTimeout=setTimeout((function(){throw t._timeout(),r.InvalidResponse(e)}),15e3))}clearTimeout(t.lastChunkTimeout),t.lastChunk=null,o&&n.push(o)})),n},s.prototype._addResponseCallback=function(e,t){var n=e.id||e[0].id,r=e.method||e[0].method;this.responseCallbacks[n]=t,this.responseCallbacks[n].method=r},s.prototype._timeout=function(){for(var e in this.responseCallbacks)this.responseCallbacks.hasOwnProperty(e)&&(this.responseCallbacks[e](r.InvalidConnection("on IPC")),delete this.responseCallbacks[e])},s.prototype.reconnect=function(){this.connection.connect({path:this.path})},s.prototype.send=function(e,t){this.connection.writable||this.connection.connect({path:this.path}),this.connection.write(JSON.stringify(e)),this._addResponseCallback(e,t)},s.prototype.on=function(e,t){if("function"!=typeof t)throw new Error("The second parameter callback must be a function.");if("data"===e)this.notificationCallbacks.push(t);else this.connection.on(e,t)},s.prototype.once=function(e,t){if("function"!=typeof t)throw new Error("The second parameter callback must be a function.");this.connection.once(e,t)},s.prototype.removeListener=function(e,t){var n=this;if("data"===e)this.notificationCallbacks.forEach((function(e,r){e===t&&n.notificationCallbacks.splice(r,1)}));else this.connection.removeListener(e,t)},s.prototype.removeAllListeners=function(e){if("data"===e)this.notificationCallbacks=[];else this.connection.removeAllListeners(e)},s.prototype.reset=function(){this._timeout(),this.notificationCallbacks=[],this.connection.removeAllListeners("error"),this.connection.removeAllListeners("end"),this.connection.removeAllListeners("timeout"),this.addDefaultEvents()},s.prototype.supportsSubscriptions=function(){return!0},e.exports=s},91057:function(e,t,n){var r=n(34155),o=n(23085).Buffer,s="[object process]"===Object.prototype.toString.call(void 0!==r?r:0),i="undefined"!=typeof navigator&&"ReactNative"===navigator.product,a=null,c=null;if(s||i){a=function(e){return o.from(e).toString("base64")};var u=n(8575);if(u.URL){var h=u.URL;c=function(e){return new h(e)}}else c=n(8575).parse}else a=btoa.bind(window),c=function(e){return new URL(e)};e.exports={parseURL:c,btoa:a}},69556:function(e,t,n){"use strict";var r=n(26729),o=n(91057),s=n(84390).errors,i=n(45840).w3cwebsocket,a=function(e,t){r.call(this),t=t||{},this.url=e,this._customTimeout=t.timeout||15e3,this.headers=t.headers||{},this.protocol=t.protocol||void 0,this.reconnectOptions=Object.assign({auto:!1,delay:5e3,maxAttempts:!1,onTimeout:!1},t.reconnect),this.clientConfig=t.clientConfig||void 0,this.requestOptions=t.requestOptions||void 0,this.DATA="data",this.CLOSE="close",this.ERROR="error",this.CONNECT="connect",this.RECONNECT="reconnect",this.connection=null,this.requestQueue=new Map,this.responseQueue=new Map,this.reconnectAttempts=0,this.reconnecting=!1;var n=o.parseURL(e);n.username&&n.password&&(this.headers.authorization="Basic "+o.btoa(n.username+":"+n.password)),n.auth&&(this.headers.authorization="Basic "+o.btoa(n.auth)),Object.defineProperty(this,"connected",{get:function(){return this.connection&&this.connection.readyState===this.connection.OPEN},enumerable:!0}),this.connect()};(a.prototype=Object.create(r.prototype)).constructor=a,a.prototype.connect=function(){this.connection=new i(this.url,this.protocol,void 0,this.headers,this.requestOptions,this.clientConfig),this._addSocketListeners()},a.prototype._onMessage=function(e){var t=this;this._parseResponse("string"==typeof e.data?e.data:"").forEach((function(e){if(e.method&&-1!==e.method.indexOf("_subscription"))t.emit(t.DATA,e);else{var n=e.id;Array.isArray(e)&&(n=e[0].id),t.responseQueue.has(n)&&(void 0!==t.responseQueue.get(n).callback&&t.responseQueue.get(n).callback(!1,e),t.responseQueue.delete(n))}}))},a.prototype._onConnect=function(){if(this.emit(this.CONNECT),this.reconnectAttempts=0,this.reconnecting=!1,this.requestQueue.size>0){var e=this;this.requestQueue.forEach((function(t,n){e.send(t.payload,t.callback),e.requestQueue.delete(n)}))}},a.prototype._onClose=function(e){var t=this;!this.reconnectOptions.auto||[1e3,1001].includes(e.code)&&!1!==e.wasClean?(this.emit(this.CLOSE,e),this.requestQueue.size>0&&this.requestQueue.forEach((function(n,r){n.callback(s.ConnectionNotOpenError(e)),t.requestQueue.delete(r)})),this.responseQueue.size>0&&this.responseQueue.forEach((function(n,r){n.callback(s.InvalidConnection("on WS",e)),t.responseQueue.delete(r)})),this._removeSocketListeners(),this.removeAllListeners()):this.reconnect()},a.prototype._addSocketListeners=function(){this.connection.addEventListener("message",this._onMessage.bind(this)),this.connection.addEventListener("open",this._onConnect.bind(this)),this.connection.addEventListener("close",this._onClose.bind(this))},a.prototype._removeSocketListeners=function(){this.connection.removeEventListener("message",this._onMessage),this.connection.removeEventListener("open",this._onConnect),this.connection.removeEventListener("close",this._onClose)},a.prototype._parseResponse=function(e){var t=this,n=[];return e.replace(/\}[\n\r]?\{/g,"}|--|{").replace(/\}\][\n\r]?\[\{/g,"}]|--|[{").replace(/\}[\n\r]?\[\{/g,"}|--|[{").replace(/\}\][\n\r]?\{/g,"}]|--|{").split("|--|").forEach((function(e){t.lastChunk&&(e=t.lastChunk+e);var r=null;try{r=JSON.parse(e)}catch(n){return t.lastChunk=e,clearTimeout(t.lastChunkTimeout),void(t.lastChunkTimeout=setTimeout((function(){t.reconnectOptions.auto&&t.reconnectOptions.onTimeout?t.reconnect():(t.emit(t.ERROR,s.ConnectionTimeout(t._customTimeout)),t.requestQueue.size>0&&t.requestQueue.forEach((function(e,n){e.callback(s.ConnectionTimeout(t._customTimeout)),t.requestQueue.delete(n)})))}),t._customTimeout))}clearTimeout(t.lastChunkTimeout),t.lastChunk=null,r&&n.push(r)})),n},a.prototype.send=function(e,t){var n=e.id,r={payload:e,callback:t};if(Array.isArray(e)&&(n=e[0].id),this.connection.readyState===this.connection.CONNECTING||this.reconnecting)this.requestQueue.set(n,r);else{if(this.connection.readyState!==this.connection.OPEN)return this.requestQueue.delete(n),this.emit(this.ERROR,s.ConnectionNotOpenError()),void r.callback(s.ConnectionNotOpenError());this.responseQueue.set(n,r),this.requestQueue.delete(n);try{this.connection.send(JSON.stringify(r.payload))}catch(e){r.callback(e),this.responseQueue.delete(n)}}},a.prototype.reset=function(){this.responseQueue.clear(),this.requestQueue.clear(),this.removeAllListeners(),this._removeSocketListeners(),this._addSocketListeners()},a.prototype.disconnect=function(e,t){this._removeSocketListeners(),this.connection.close(e||1e3,t)},a.prototype.supportsSubscriptions=function(){return!0},a.prototype.reconnect=function(){var e=this;this.reconnecting=!0,this.responseQueue.size>0&&this.responseQueue.forEach((function(t,n){t.callback(s.PendingRequestsOnReconnectingError()),e.responseQueue.delete(n)})),!this.reconnectOptions.maxAttempts||this.reconnectAttempts<this.reconnectOptions.maxAttempts?setTimeout((function(){e.reconnectAttempts++,e._removeSocketListeners(),e.emit(e.RECONNECT,e.reconnectAttempts),e.connect()}),this.reconnectOptions.delay):(this.emit(this.ERROR,s.MaxAttemptsReachedOnReconnectingError()),this.reconnecting=!1,this.requestQueue.size>0&&this.requestQueue.forEach((function(t,n){t.callback(s.MaxAttemptsReachedOnReconnectingError()),e.requestQueue.delete(n)})))},e.exports=a},9886:function(e,t,n){"use strict";var r=n(92928),o=n(96602).subscriptions,s=n(93952),i=n(11324),a=function(){var e=this;r.packageInit(this,arguments);var t=this.setRequestManager;this.setRequestManager=function(n){return t(n),e.net.setRequestManager(n),!0};var n=this.setProvider;this.setProvider=function(){n.apply(e,arguments),e.setRequestManager(e._requestManager)},this.net=new i(this),[new o({name:"subscribe",type:"shh",subscriptions:{messages:{params:1}}}),new s({name:"getVersion",call:"shh_version",params:0}),new s({name:"getInfo",call:"shh_info",params:0}),new s({name:"setMaxMessageSize",call:"shh_setMaxMessageSize",params:1}),new s({name:"setMinPoW",call:"shh_setMinPoW",params:1}),new s({name:"markTrustedPeer",call:"shh_markTrustedPeer",params:1}),new s({name:"newKeyPair",call:"shh_newKeyPair",params:0}),new s({name:"addPrivateKey",call:"shh_addPrivateKey",params:1}),new s({name:"deleteKeyPair",call:"shh_deleteKeyPair",params:1}),new s({name:"hasKeyPair",call:"shh_hasKeyPair",params:1}),new s({name:"getPublicKey",call:"shh_getPublicKey",params:1}),new s({name:"getPrivateKey",call:"shh_getPrivateKey",params:1}),new s({name:"newSymKey",call:"shh_newSymKey",params:0}),new s({name:"addSymKey",call:"shh_addSymKey",params:1}),new s({name:"generateSymKeyFromPassword",call:"shh_generateSymKeyFromPassword",params:1}),new s({name:"hasSymKey",call:"shh_hasSymKey",params:1}),new s({name:"getSymKey",call:"shh_getSymKey",params:1}),new s({name:"deleteSymKey",call:"shh_deleteSymKey",params:1}),new s({name:"newMessageFilter",call:"shh_newMessageFilter",params:1}),new s({name:"getFilterMessages",call:"shh_getFilterMessages",params:1}),new s({name:"deleteMessageFilter",call:"shh_deleteMessageFilter",params:1}),new s({name:"post",call:"shh_post",params:1,inputFormatter:[null]}),new s({name:"unsubscribe",call:"shh_unsubscribe",params:1})].forEach((function(t){t.attachToObject(e),t.setRequestManager(e._requestManager)}))};a.prototype.clearSubscriptions=function(){this._requestManager.clearSubscriptions()},r.addProviders(a),e.exports=a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
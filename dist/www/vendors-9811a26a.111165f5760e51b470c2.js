(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[9806],{46877:function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(339);function i(e){return"string"==typeof e&&(!!/^(0x)?[0-9a-f]{512}$/i.test(e)&&!(!/^(0x)?[0-9a-f]{512}$/.test(e)&&!/^(0x)?[0-9A-F]{512}$/.test(e)))}function o(e,r){"object"==typeof r&&r.constructor===Uint8Array&&(r=n.bytesToHex(r));const t=n.keccak256(r).replace("0x","");for(let r=0;r<12;r+=4){const n=(parseInt(t.substr(r,2),16)<<8)+parseInt(t.substr(r+2,2),16)&2047,i=1<<n%4;if((a(e.charCodeAt(e.length-1-Math.floor(n/4)))&i)!==i)return!1}return!0}function a(e){if(e>=48&&e<=57)return e-48;if(e>=65&&e<=70)return e-55;if(e>=97&&e<=102)return e-87;throw new Error("invalid bloom")}function f(e){return"string"==typeof e&&(!!/^(0x)?[0-9a-f]{64}$/i.test(e)&&!(!/^(0x)?[0-9a-f]{64}$/.test(e)&&!/^(0x)?[0-9A-F]{64}$/.test(e)))}function s(e){return"string"==typeof e&&(!!e.match(/^(0x)?[0-9a-fA-F]{40}$/)||!!e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/))}r.isBloom=i,r.isInBloom=o,r.isUserEthereumAddressInBloom=function(e,r){if(!i(e))throw new Error("Invalid bloom given");if(!s(r))throw new Error(`Invalid ethereum address given: "${r}"`);return o(e,n.padLeft(r,64))},r.isContractAddressInBloom=function(e,r){if(!i(e))throw new Error("Invalid bloom given");if(!s(r))throw new Error(`Invalid contract address given: "${r}"`);return o(e,r)},r.isTopicInBloom=function(e,r){if(!i(e))throw new Error("Invalid bloom given");if(!f(r))throw new Error("Invalid topic");return o(e,r)},r.isTopic=f,r.isAddress=s},339:function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(91094);function i(e){if(null==e)throw new Error("cannot convert null value to array");if("string"==typeof e){const r=e.match(/^(0x)?[0-9a-fA-F]*$/);if(!r)throw new Error("invalid hexidecimal string");if("0x"!==r[1])throw new Error("hex string must have 0x prefix");(e=e.substring(2)).length%2&&(e="0"+e);const t=[];for(let r=0;r<e.length;r+=2)t.push(parseInt(e.substr(r,2),16));return o(new Uint8Array(t))}if(function(e){if(!e||parseInt(String(e.length))!=e.length||"string"==typeof e)return!1;for(let r=0;r<e.length;r++){const t=e[r];if(t<0||t>=256||parseInt(String(t))!=t)return!1}return!0}(e))return o(new Uint8Array(e));throw new Error("invalid arrayify value")}function o(e){return void 0!==e.slice||(e.slice=()=>{const r=Array.prototype.slice.call(arguments);return o(new Uint8Array(Array.prototype.slice.apply(e,r)))}),e}r.keccak256=function(e){return"0x"+n.keccak_256(i(e))},r.padLeft=(e,r)=>{const t=/^0x/i.test(e)||"number"==typeof e,n=r-(e=e.toString().replace(/^0x/i,"")).length+1>=0?r-e.length+1:0;return(t?"0x":"")+new Array(n).join("0")+e},r.bytesToHex=function(e){const r=[];for(let t=0;t<e.length;t++)r.push((e[t]>>>4).toString(16)),r.push((15&e[t]).toString(16));return`0x${r.join("").replace(/^0+/,"")}`},r.toByteArray=i},75443:function(e,r,t){"use strict";var n=t(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.createHashFunction=function(e){return function(r){var t=e();return t.update(r),n.from(t.digest())}}},82192:function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t(75443),i=t(95811);r.keccak224=n.createHashFunction((function(){return i("keccak224")})),r.keccak256=n.createHashFunction((function(){return i("keccak256")})),r.keccak384=n.createHashFunction((function(){return i("keccak384")})),r.keccak512=n.createHashFunction((function(){return i("keccak512")}))},90472:function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t(61798);r.getRandomBytes=function(e){return new Promise((function(r,t){n(e,(function(e,n){e?t(e):r(n)}))}))},r.getRandomBytesSync=function(e){return n(e)}},95053:function(e,r,t){"use strict";var n=this&&this.__awaiter||function(e,r,t,n){return new(t||(t=Promise))((function(i,o){function a(e){try{s(n.next(e))}catch(e){o(e)}}function f(e){try{s(n.throw(e))}catch(e){o(e)}}function s(e){var r;e.done?i(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(a,f)}s((n=n.apply(e,r||[])).next())}))},i=this&&this.__generator||function(e,r){var t,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function f(o){return function(f){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=r.call(e,a)}catch(e){o=[6,e],n=0}finally{t=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,f])}}};Object.defineProperty(r,"__esModule",{value:!0});var o=t(17221),a=t(90472);r.createPrivateKey=function(){return n(this,void 0,void 0,(function(){var e;return i(this,(function(r){switch(r.label){case 0:return[4,a.getRandomBytes(32)];case 1:return e=r.sent(),o.privateKeyVerify(e)?[2,e]:[3,0];case 2:return[2]}}))}))},r.createPrivateKeySync=function(){for(;;){var e=a.getRandomBytesSync(32);if(o.privateKeyVerify(e))return e}},function(e){for(var t in e)r.hasOwnProperty(t)||(r[t]=e[t])}(t(17221))},68142:function(e,r,t){e.exports=t(75437)},75437:function(e,r,t){var n=t(23085).Buffer;const i=t(86589),o=t(13550);var a=function(){};function f(e){return e.startsWith("int[")?"int256"+e.slice(3):"int"===e?"int256":e.startsWith("uint[")?"uint256"+e.slice(4):"uint"===e?"uint256":e.startsWith("fixed[")?"fixed128x128"+e.slice(5):"fixed"===e?"fixed128x128":e.startsWith("ufixed[")?"ufixed128x128"+e.slice(6):"ufixed"===e?"ufixed128x128":e}function s(e){return parseInt(/^\D+(\d+)$/.exec(e)[1],10)}function u(e){var r=/^\D+(\d+)x(\d+)$/.exec(e);return[parseInt(r[1],10),parseInt(r[2],10)]}function c(e){var r=e.match(/(.*)\[(.*?)\]$/);return r?""===r[2]?"dynamic":parseInt(r[2],10):null}function d(e){var r=typeof e;if("string"===r)return i.isHexPrefixed(e)?new o(i.stripHexPrefix(e),16):new o(e,10);if("number"===r)return new o(e);if(e.toArray)return e;throw new Error("Argument is not a number")}function l(e){var r=/^(\w+)\((.*)\)$/.exec(e);if(3!==r.length)throw new Error("Invalid method signature");var t=/^(.+)\):\((.+)$/.exec(r[2]);if(null!==t&&3===t.length)return{method:r[1],args:t[1].split(","),retargs:t[2].split(",")};var n=r[2].split(",");return 1===n.length&&""===n[0]&&(n=[]),{method:r[1],args:n}}function h(e,r){var t,a,f,l;if("address"===e)return h("uint160",d(r));if("bool"===e)return h("uint8",r?1:0);if("string"===e)return h("bytes",n.from(r,"utf8"));if(g(e)){if(void 0===r.length)throw new Error("Not an array?");if("dynamic"!==(t=c(e))&&0!==t&&r.length>t)throw new Error("Elements exceed array size: "+t);for(l in f=[],e=e.slice(0,e.lastIndexOf("[")),"string"==typeof r&&(r=JSON.parse(r)),r)f.push(h(e,r[l]));if("dynamic"===t){var p=h("uint256",r.length);f.unshift(p)}return n.concat(f)}if("bytes"===e)return r=n.from(r),f=n.concat([h("uint256",r.length),r]),r.length%32!=0&&(f=n.concat([f,i.zeros(32-r.length%32)])),f;if(e.startsWith("bytes")){if((t=s(e))<1||t>32)throw new Error("Invalid bytes<N> width: "+t);return i.setLengthRight(r,32)}if(e.startsWith("uint")){if((t=s(e))%8||t<8||t>256)throw new Error("Invalid uint<N> width: "+t);if((a=d(r)).bitLength()>t)throw new Error("Supplied uint exceeds width: "+t+" vs "+a.bitLength());if(a<0)throw new Error("Supplied uint is negative");return a.toArrayLike(n,"be",32)}if(e.startsWith("int")){if((t=s(e))%8||t<8||t>256)throw new Error("Invalid int<N> width: "+t);if((a=d(r)).bitLength()>t)throw new Error("Supplied int exceeds width: "+t+" vs "+a.bitLength());return a.toTwos(256).toArrayLike(n,"be",32)}if(e.startsWith("ufixed")){if(t=u(e),(a=d(r))<0)throw new Error("Supplied ufixed is negative");return h("uint256",a.mul(new o(2).pow(new o(t[1]))))}if(e.startsWith("fixed"))return t=u(e),h("int256",d(r).mul(new o(2).pow(new o(t[1]))));throw new Error("Unsupported or invalid type: "+e)}function p(e,r,t){var i,a,f,s;if("string"==typeof e&&(e=v(e)),"address"===e.name)return p(e.rawType,r,t).toArrayLike(n,"be",20).toString("hex");if("bool"===e.name)return p(e.rawType,r,t).toString()===new o(1).toString();if("string"===e.name){var u=p(e.rawType,r,t);return n.from(u,"utf8").toString()}if(e.isArray){for(f=[],i=e.size,"dynamic"===e.size&&(t=p("uint256",r,t).toNumber(),i=p("uint256",r,t).toNumber(),t+=32),s=0;s<i;s++){var c=p(e.subArray,r,t);f.push(c),t+=e.subArray.memoryUsage}return f}if("bytes"===e.name)return t=p("uint256",r,t).toNumber(),i=p("uint256",r,t).toNumber(),r.slice(t+32,t+32+i);if(e.name.startsWith("bytes"))return r.slice(t,t+e.size);if(e.name.startsWith("uint")){if((a=new o(r.slice(t,t+32),16,"be")).bitLength()>e.size)throw new Error("Decoded int exceeds width: "+e.size+" vs "+a.bitLength());return a}if(e.name.startsWith("int")){if((a=new o(r.slice(t,t+32),16,"be").fromTwos(256)).bitLength()>e.size)throw new Error("Decoded uint exceeds width: "+e.size+" vs "+a.bitLength());return a}if(e.name.startsWith("ufixed")){if(i=new o(2).pow(new o(e.size[1])),!(a=p("uint256",r,t)).mod(i).isZero())throw new Error("Decimals not supported yet");return a.div(i)}if(e.name.startsWith("fixed")){if(i=new o(2).pow(new o(e.size[1])),!(a=p("int256",r,t)).mod(i).isZero())throw new Error("Decimals not supported yet");return a.div(i)}throw new Error("Unsupported or invalid type: "+e.name)}function v(e){var r,t,n;if(g(e)){r=c(e);var i=e.slice(0,e.lastIndexOf("["));return i=v(i),t={isArray:!0,name:e,size:r,memoryUsage:"dynamic"===r?32:i.memoryUsage*r,subArray:i}}switch(e){case"address":n="uint160";break;case"bool":n="uint8";break;case"string":n="bytes"}if(t={rawType:n,name:e,memoryUsage:32},e.startsWith("bytes")&&"bytes"!==e||e.startsWith("uint")||e.startsWith("int")?t.size=s(e):(e.startsWith("ufixed")||e.startsWith("fixed"))&&(t.size=u(e)),e.startsWith("bytes")&&"bytes"!==e&&(t.size<1||t.size>32))throw new Error("Invalid bytes<N> width: "+t.size);if((e.startsWith("uint")||e.startsWith("int"))&&(t.size%8||t.size<8||t.size>256))throw new Error("Invalid int/uint<N> width: "+t.size);return t}function y(e){return"string"===e||"bytes"===e||"dynamic"===c(e)}function g(e){return e.lastIndexOf("]")===e.length-1}function m(e,r){return e.startsWith("address")||e.startsWith("bytes")?"0x"+r.toString("hex"):r.toString()}a.eventID=function(e,r){var t=e+"("+r.map(f).join(",")+")";return i.keccak256(n.from(t))},a.methodID=function(e,r){return a.eventID(e,r).slice(0,4)},a.rawEncode=function(e,r){var t=[],i=[],o=0;e.forEach((function(e){if(g(e)){var r=c(e);o+="dynamic"!==r?32*r:32}else o+=32}));for(var a=0;a<e.length;a++){var s=f(e[a]),u=h(s,r[a]);y(s)?(t.push(h("uint256",o)),i.push(u),o+=u.length):t.push(u)}return n.concat(t.concat(i))},a.rawDecode=function(e,r){var t=[];r=n.from(r);for(var i=0,o=0;o<e.length;o++){var a=v(f(e[o])),s=p(a,r,i);i+=a.memoryUsage,t.push(s)}return t},a.simpleEncode=function(e){var r=Array.prototype.slice.call(arguments).slice(1),t=l(e);if(r.length!==t.args.length)throw new Error("Argument count mismatch");return n.concat([a.methodID(t.method,t.args),a.rawEncode(t.args,r)])},a.simpleDecode=function(e,r){var t=l(e);if(!t.retargs)throw new Error("No return values in method");return a.rawDecode(t.retargs,r)},a.stringify=function(e,r){var t=[];for(var n in e){var i=e[n],o=r[n];o=/^[^\[]+\[.*\]$/.test(i)?o.map((function(e){return m(i,e)})).join(", "):m(i,o),t.push(o)}return t},a.solidityHexValue=function(e,r,t){var o,f;if(g(e)){var u=e.replace(/\[.*?\]/,"");if(!g(u)){var l=c(e);if("dynamic"!==l&&0!==l&&r.length>l)throw new Error("Elements exceed array size: "+l)}var h=r.map((function(e){return a.solidityHexValue(u,e,256)}));return n.concat(h)}if("bytes"===e)return r;if("string"===e)return n.from(r,"utf8");if("bool"===e){t=t||8;var p=Array(t/4).join("0");return n.from(r?p+"1":p+"0","hex")}if("address"===e){var v=20;return t&&(v=t/8),i.setLengthLeft(r,v)}if(e.startsWith("bytes")){if((o=s(e))<1||o>32)throw new Error("Invalid bytes<N> width: "+o);return i.setLengthRight(r,o)}if(e.startsWith("uint")){if((o=s(e))%8||o<8||o>256)throw new Error("Invalid uint<N> width: "+o);if((f=d(r)).bitLength()>o)throw new Error("Supplied uint exceeds width: "+o+" vs "+f.bitLength());return t=t||o,f.toArrayLike(n,"be",t/8)}if(e.startsWith("int")){if((o=s(e))%8||o<8||o>256)throw new Error("Invalid int<N> width: "+o);if((f=d(r)).bitLength()>o)throw new Error("Supplied int exceeds width: "+o+" vs "+f.bitLength());return t=t||o,f.toTwos(o).toArrayLike(n,"be",t/8)}throw new Error("Unsupported or invalid type: "+e)},a.solidityPack=function(e,r){if(e.length!==r.length)throw new Error("Number of types are not matching the values");for(var t=[],i=0;i<e.length;i++){var o=f(e[i]),s=r[i];t.push(a.solidityHexValue(o,s,null))}return n.concat(t)},a.soliditySHA3=function(e,r){return i.keccak256(a.solidityPack(e,r))},a.soliditySHA256=function(e,r){return i.sha256(a.solidityPack(e,r))},a.solidityRIPEMD160=function(e,r){return i.ripemd160(a.solidityPack(e,r),!0)},a.fromSerpent=function(e){for(var r,t=[],n=0;n<e.length;n++){var i=e[n];if("s"===i)t.push("bytes");else if("b"===i){for(var o="bytes",a=n+1;a<e.length&&((r=e[a])>="0"&&r<="9");)o+=e[a]-"0",a++;n=a-1,t.push(o)}else if("i"===i)t.push("int256");else{if("a"!==i)throw new Error("Unsupported or invalid type: "+i);t.push("int256[]")}}return t},a.toSerpent=function(e){for(var r=[],t=0;t<e.length;t++){var n=e[t];if("bytes"===n)r.push("s");else if(n.startsWith("bytes"))r.push("b"+s(n));else if("int256"===n)r.push("i");else{if("int256[]"!==n)throw new Error("Unsupported or invalid type: "+n);r.push("a")}}return r.join("")},e.exports=a},30248:function(e,r,t){"use strict";var n=t(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.importPublic=r.privateToPublic=r.privateToAddress=r.publicToAddress=r.pubToAddress=r.isValidPublic=r.isValidPrivate=r.isPrecompiled=r.generateAddress2=r.generateAddress=r.isValidChecksumAddress=r.toChecksumAddress=r.isZeroAddress=r.isValidAddress=r.zeroAddress=void 0;var i=t(69282),o=t(80884),a=t(83230),f=t(13550),s=t(77124),u=t(91550);r.zeroAddress=function(){var e=s.zeros(20);return s.bufferToHex(e)},r.isValidAddress=function(e){return/^0x[0-9a-fA-F]{40}$/.test(e)},r.isZeroAddress=function(e){return r.zeroAddress()===s.addHexPrefix(e)},r.toChecksumAddress=function(e,r){e=o.stripHexPrefix(e).toLowerCase();for(var t=void 0!==r?r.toString()+"0x":"",n=u.keccak(t+e).toString("hex"),i="0x",a=0;a<e.length;a++)parseInt(n[a],16)>=8?i+=e[a].toUpperCase():i+=e[a];return i},r.isValidChecksumAddress=function(e,t){return r.isValidAddress(e)&&r.toChecksumAddress(e,t)===e},r.generateAddress=function(e,r){e=s.toBuffer(e);var t=new f(r);return t.isZero()?u.rlphash([e,null]).slice(-20):u.rlphash([e,n.from(t.toArray())]).slice(-20)},r.generateAddress2=function(e,r,t){var o=s.toBuffer(e),a=s.toBuffer(r),f=s.toBuffer(t);return i(20===o.length),i(32===a.length),u.keccak256(n.concat([n.from("ff","hex"),o,a,u.keccak256(f)])).slice(-20)},r.isPrecompiled=function(e){var r=s.unpad(e);return 1===r.length&&r[0]>=1&&r[0]<=8},r.isValidPrivate=function(e){return a.privateKeyVerify(e)},r.isValidPublic=function(e,r){return void 0===r&&(r=!1),64===e.length?a.publicKeyVerify(n.concat([n.from([4]),e])):!!r&&a.publicKeyVerify(e)},r.pubToAddress=function(e,r){return void 0===r&&(r=!1),e=s.toBuffer(e),r&&64!==e.length&&(e=a.publicKeyConvert(e,!1).slice(1)),i(64===e.length),u.keccak(e).slice(-20)},r.publicToAddress=r.pubToAddress,r.privateToAddress=function(e){return r.publicToAddress(r.privateToPublic(e))},r.privateToPublic=function(e){return e=s.toBuffer(e),a.publicKeyCreate(e,!1).slice(1)},r.importPublic=function(e){return 64!==(e=s.toBuffer(e)).length&&(e=a.publicKeyConvert(e,!1).slice(1)),e}},77124:function(e,r,t){"use strict";var n=t(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.baToJSON=r.addHexPrefix=r.toUnsigned=r.fromSigned=r.bufferToHex=r.bufferToInt=r.toBuffer=r.stripZeros=r.unpad=r.setLengthRight=r.setLength=r.setLengthLeft=r.zeros=void 0;var i=t(80884),o=t(13550);r.zeros=function(e){return n.allocUnsafe(e).fill(0)},r.setLengthLeft=function(e,t,n){void 0===n&&(n=!1);var i=r.zeros(t);return e=r.toBuffer(e),n?e.length<t?(e.copy(i),i):e.slice(0,t):e.length<t?(e.copy(i,t-e.length),i):e.slice(-t)},r.setLength=r.setLengthLeft,r.setLengthRight=function(e,t){return r.setLength(e,t,!0)},r.unpad=function(e){for(var r=(e=i.stripHexPrefix(e))[0];e.length>0&&"0"===r.toString();)r=(e=e.slice(1))[0];return e},r.stripZeros=r.unpad,r.toBuffer=function(e){if(!n.isBuffer(e))if(Array.isArray(e))e=n.from(e);else if("string"==typeof e){if(!i.isHexString(e))throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: "+e);e=n.from(i.padToEven(i.stripHexPrefix(e)),"hex")}else if("number"==typeof e)e=i.intToBuffer(e);else if(null==e)e=n.allocUnsafe(0);else if(o.isBN(e))e=e.toArrayLike(n);else{if(!e.toArray)throw new Error("invalid type");e=n.from(e.toArray())}return e},r.bufferToInt=function(e){return new o(r.toBuffer(e)).toNumber()},r.bufferToHex=function(e){return"0x"+(e=r.toBuffer(e)).toString("hex")},r.fromSigned=function(e){return new o(e).fromTwos(256)},r.toUnsigned=function(e){return n.from(e.toTwos(256).toArray())},r.addHexPrefix=function(e){return"string"!=typeof e||i.isHexPrefixed(e)?e:"0x"+e},r.baToJSON=function(e){if(n.isBuffer(e))return"0x"+e.toString("hex");if(e instanceof Array){for(var t=[],i=0;i<e.length;i++)t.push(r.baToJSON(e[i]));return t}}},46649:function(e,r,t){"use strict";var n=t(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.KECCAK256_RLP=r.KECCAK256_RLP_S=r.KECCAK256_RLP_ARRAY=r.KECCAK256_RLP_ARRAY_S=r.KECCAK256_NULL=r.KECCAK256_NULL_S=r.TWO_POW256=r.MAX_INTEGER=void 0;var i=t(13550);r.MAX_INTEGER=new i("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),r.TWO_POW256=new i("10000000000000000000000000000000000000000000000000000000000000000",16),r.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",r.KECCAK256_NULL=n.from(r.KECCAK256_NULL_S,"hex"),r.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",r.KECCAK256_RLP_ARRAY=n.from(r.KECCAK256_RLP_ARRAY_S,"hex"),r.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",r.KECCAK256_RLP=n.from(r.KECCAK256_RLP_S,"hex")},91550:function(e,r,t){"use strict";var n=t(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.rlphash=r.ripemd160=r.sha256=r.keccak256=r.keccak=void 0;var i=t(82192),o=i.keccak224,a=i.keccak384,f=i.keccak256,s=i.keccak512,u=t(23482),c=t(80884),d=t(51675),l=t(77124);r.keccak=function(e,r){switch(void 0===r&&(r=256),e="string"!=typeof e||c.isHexString(e)?l.toBuffer(e):n.from(e,"utf8"),r||(r=256),r){case 224:return o(e);case 256:return f(e);case 384:return a(e);case 512:return s(e);default:throw new Error("Invald algorithm: keccak"+r)}},r.keccak256=function(e){return r.keccak(e)},r.sha256=function(e){return e=l.toBuffer(e),u("sha256").update(e).digest()},r.ripemd160=function(e,r){e=l.toBuffer(e);var t=u("rmd160").update(e).digest();return!0===r?l.setLength(t,32):t},r.rlphash=function(e){return r.keccak(d.encode(e))}},86589:function(e,r,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,r,t,n){void 0===n&&(n=t),Object.defineProperty(e,n,{enumerable:!0,get:function(){return r[t]}})}:function(e,r,t,n){void 0===n&&(n=t),e[n]=r[t]}),i=this&&this.__exportStar||function(e,r){for(var t in e)"default"===t||r.hasOwnProperty(t)||n(r,e,t)};Object.defineProperty(r,"__esModule",{value:!0}),r.secp256k1=r.rlp=r.BN=void 0;var o=t(83230);r.secp256k1=o;var a=t(80884),f=t(13550);r.BN=f;var s=t(51675);r.rlp=s,Object.assign(r,a),i(t(46649),r),i(t(30248),r),i(t(91550),r),i(t(86232),r),i(t(77124),r),i(t(81113),r)},81113:function(e,r,t){"use strict";var n=t(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.defineProperties=void 0;var i=t(69282),o=t(80884),a=t(51675),f=t(77124);r.defineProperties=function(e,r,t){if(e.raw=[],e._fields=[],e.toJSON=function(r){if(void 0===r&&(r=!1),r){var t={};return e._fields.forEach((function(r){t[r]="0x"+e[r].toString("hex")})),t}return f.baToJSON(e.raw)},e.serialize=function(){return a.encode(e.raw)},r.forEach((function(r,t){function o(){return e.raw[t]}function a(o){"00"!==(o=f.toBuffer(o)).toString("hex")||r.allowZero||(o=n.allocUnsafe(0)),r.allowLess&&r.length?(o=f.stripZeros(o),i(r.length>=o.length,"The field "+r.name+" must not have more "+r.length+" bytes")):r.allowZero&&0===o.length||!r.length||i(r.length===o.length,"The field "+r.name+" must have byte length of "+r.length),e.raw[t]=o}e._fields.push(r.name),Object.defineProperty(e,r.name,{enumerable:!0,configurable:!0,get:o,set:a}),r.default&&(e[r.name]=r.default),r.alias&&Object.defineProperty(e,r.alias,{enumerable:!1,configurable:!0,set:a,get:o})})),t)if("string"==typeof t&&(t=n.from(o.stripHexPrefix(t),"hex")),n.isBuffer(t)&&(t=a.decode(t)),Array.isArray(t)){if(t.length>e._fields.length)throw new Error("wrong number of fields in data");t.forEach((function(r,t){e[e._fields[t]]=f.toBuffer(r)}))}else{if("object"!=typeof t)throw new Error("invalid data");var s=Object.keys(t);r.forEach((function(r){-1!==s.indexOf(r.name)&&(e[r.name]=t[r.name]),-1!==s.indexOf(r.alias)&&(e[r.alias]=t[r.alias])}))}}},83230:function(e,r,t){"use strict";var n=t(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.ecdhUnsafe=r.ecdh=r.recover=r.verify=r.sign=r.signatureImportLax=r.signatureImport=r.signatureExport=r.signatureNormalize=r.publicKeyCombine=r.publicKeyTweakMul=r.publicKeyTweakAdd=r.publicKeyVerify=r.publicKeyConvert=r.publicKeyCreate=r.privateKeyTweakMul=r.privateKeyTweakAdd=r.privateKeyModInverse=r.privateKeyNegate=r.privateKeyImport=r.privateKeyExport=r.privateKeyVerify=void 0;var i=t(95053),o=t(78427),a=t(33646);r.privateKeyVerify=function(e){return 32===e.length&&i.privateKeyVerify(Uint8Array.from(e))},r.privateKeyExport=function(e,r){if(32!==e.length)throw new RangeError("private key length is invalid");var t=o.privateKeyExport(e,r);return a.privateKeyExport(e,t,r)},r.privateKeyImport=function(e){if(null!==(e=a.privateKeyImport(e))&&32===e.length&&r.privateKeyVerify(e))return e;throw new Error("couldn't import from DER format")},r.privateKeyNegate=function(e){return n.from(i.privateKeyNegate(Uint8Array.from(e)))},r.privateKeyModInverse=function(e){if(32!==e.length)throw new Error("private key length is invalid");return n.from(o.privateKeyModInverse(Uint8Array.from(e)))},r.privateKeyTweakAdd=function(e,r){return n.from(i.privateKeyTweakAdd(Uint8Array.from(e),r))},r.privateKeyTweakMul=function(e,r){return n.from(i.privateKeyTweakMul(Uint8Array.from(e),Uint8Array.from(r)))},r.publicKeyCreate=function(e,r){return n.from(i.publicKeyCreate(Uint8Array.from(e),r))},r.publicKeyConvert=function(e,r){return n.from(i.publicKeyConvert(Uint8Array.from(e),r))},r.publicKeyVerify=function(e){return(33===e.length||65===e.length)&&i.publicKeyVerify(Uint8Array.from(e))},r.publicKeyTweakAdd=function(e,r,t){return n.from(i.publicKeyTweakAdd(Uint8Array.from(e),Uint8Array.from(r),t))},r.publicKeyTweakMul=function(e,r,t){return n.from(i.publicKeyTweakMul(Uint8Array.from(e),Uint8Array.from(r),t))},r.publicKeyCombine=function(e,r){var t=[];return e.forEach((function(e){t.push(Uint8Array.from(e))})),n.from(i.publicKeyCombine(t,r))},r.signatureNormalize=function(e){return n.from(i.signatureNormalize(Uint8Array.from(e)))},r.signatureExport=function(e){return n.from(i.signatureExport(Uint8Array.from(e)))},r.signatureImport=function(e){return n.from(i.signatureImport(Uint8Array.from(e)))},r.signatureImportLax=function(e){if(0===e.length)throw new RangeError("signature length is invalid");var r=a.signatureImportLax(e);if(null===r)throw new Error("couldn't parse DER signature");return o.signatureImport(r)},r.sign=function(e,r,t){if(null===t)throw new TypeError("options should be an Object");var o=void 0;if(t){if(o={},null===t.data)throw new TypeError("options.data should be a Buffer");if(t.data){if(32!=t.data.length)throw new RangeError("options.data length is invalid");o.data=new Uint8Array(t.data)}if(null===t.noncefn)throw new TypeError("options.noncefn should be a Function");t.noncefn&&(o.noncefn=function(e,r,i,o,a){var f=null!=i?n.from(i):null,s=null!=o?n.from(o):null,u=n.from("");return t.noncefn&&(u=t.noncefn(n.from(e),n.from(r),f,s,a)),new Uint8Array(u)})}var a=i.ecdsaSign(Uint8Array.from(e),Uint8Array.from(r),o);return{signature:n.from(a.signature),recovery:a.recid}},r.verify=function(e,r,t){return i.ecdsaVerify(Uint8Array.from(r),Uint8Array.from(e),t)},r.recover=function(e,r,t,o){return n.from(i.ecdsaRecover(Uint8Array.from(r),t,Uint8Array.from(e),o))},r.ecdh=function(e,r){return n.from(i.ecdh(Uint8Array.from(e),Uint8Array.from(r),{}))},r.ecdhUnsafe=function(e,r,t){if(33!==e.length&&65!==e.length)throw new RangeError("public key length is invalid");if(32!==r.length)throw new RangeError("private key length is invalid");return n.from(o.ecdhUnsafe(Uint8Array.from(e),Uint8Array.from(r),t))}},33646:function(e,r,t){"use strict";var n=t(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0});var i=n.from([48,129,211,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,133,48,129,130,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,33,2,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,36,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),o=n.from([48,130,1,19,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,165,48,129,162,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,65,4,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,72,58,218,119,38,163,196,101,93,164,251,252,14,17,8,168,253,23,180,72,166,133,84,25,156,71,208,143,251,16,212,184,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,68,3,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);r.privateKeyExport=function(e,r,t){void 0===t&&(t=!0);var a=n.from(t?i:o);return e.copy(a,t?8:9),r.copy(a,t?181:214),a},r.privateKeyImport=function(e){var r=e.length,t=0;if(r<t+1||48!==e[t])return null;if(r<(t+=1)+1||!(128&e[t]))return null;var n=127&e[t];if(n<1||n>2)return null;if(r<(t+=1)+n)return null;var i=e[t+n-1]|(n>1?e[t+n-2]<<8:0);return r<(t+=n)+i||r<t+3||2!==e[t]||1!==e[t+1]||1!==e[t+2]||r<(t+=3)+2||4!==e[t]||e[t+1]>32||r<t+2+e[t+1]?null:e.slice(t+2,t+2+e[t+1])},r.signatureImportLax=function(e){var r=n.alloc(32,0),t=n.alloc(32,0),i=e.length,o=0;if(48!==e[o++])return null;var a=e[o++];if(128&a&&(o+=a-128)>i)return null;if(2!==e[o++])return null;var f=e[o++];if(128&f){if(o+(a=f-128)>i)return null;for(;a>0&&0===e[o];o+=1,a-=1);for(f=0;a>0;o+=1,a-=1)f=(f<<8)+e[o]}if(f>i-o)return null;var s=o;if(o+=f,2!==e[o++])return null;var u=e[o++];if(128&u){if(o+(a=u-128)>i)return null;for(;a>0&&0===e[o];o+=1,a-=1);for(u=0;a>0;o+=1,a-=1)u=(u<<8)+e[o]}if(u>i-o)return null;var c=o;for(o+=u;f>0&&0===e[s];f-=1,s+=1);if(f>32)return null;var d=e.slice(s,s+f);for(d.copy(r,32-d.length);u>0&&0===e[c];u-=1,c+=1);if(u>32)return null;var l=e.slice(c,c+u);return l.copy(t,32-l.length),{r:r,s:t}}},78427:function(e,r,t){"use strict";var n=t(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0});var i=t(13550),o=new(0,t(86266).ec)("secp256k1"),a=o.curve;r.privateKeyExport=function(e,r){void 0===r&&(r=!0);var t=new i(e);if(t.ucmp(a.n)>=0)throw new Error("couldn't export to DER format");var n=o.g.mul(t);return f(n.getX(),n.getY(),r)},r.privateKeyModInverse=function(e){var r=new i(e);if(r.ucmp(a.n)>=0||r.isZero())throw new Error("private key range is invalid");return r.invm(a.n).toArrayLike(n,"be",32)},r.signatureImport=function(e){var r=new i(e.r);r.ucmp(a.n)>=0&&(r=new i(0));var t=new i(e.s);return t.ucmp(a.n)>=0&&(t=new i(0)),n.concat([r.toArrayLike(n,"be",32),t.toArrayLike(n,"be",32)])},r.ecdhUnsafe=function(e,r,t){void 0===t&&(t=!0);var n=o.keyFromPublic(e),s=new i(r);if(s.ucmp(a.n)>=0||s.isZero())throw new Error("scalar was invalid (zero or overflow)");var u=n.pub.mul(s);return f(u.getX(),u.getY(),t)};var f=function(e,r,t){var i;return t?((i=n.alloc(33))[0]=r.isOdd()?3:2,e.toArrayLike(n,"be",32).copy(i,1)):((i=n.alloc(65))[0]=4,e.toArrayLike(n,"be",32).copy(i,1),r.toArrayLike(n,"be",32).copy(i,33)),i}},86232:function(e,r,t){"use strict";var n=t(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.hashPersonalMessage=r.isValidSignature=r.fromRpcSig=r.toRpcSig=r.ecrecover=r.ecsign=void 0;var i=t(83230),o=t(13550),a=t(77124),f=t(91550);function s(e,r){return r?e-(2*r+35):e-27}function u(e){return 0===e||1===e}r.ecsign=function(e,r,t){var n=i.sign(e,r),o=n.recovery;return{r:n.signature.slice(0,32),s:n.signature.slice(32,64),v:t?o+(2*t+35):o+27}},r.ecrecover=function(e,r,t,o,f){var c=n.concat([a.setLength(t,32),a.setLength(o,32)],64),d=s(r,f);if(!u(d))throw new Error("Invalid signature v value");var l=i.recover(e,c,d);return i.publicKeyConvert(l,!1).slice(1)},r.toRpcSig=function(e,r,t,i){if(!u(s(e,i)))throw new Error("Invalid signature v value");return a.bufferToHex(n.concat([a.setLengthLeft(r,32),a.setLengthLeft(t,32),a.toBuffer(e)]))},r.fromRpcSig=function(e){var r=a.toBuffer(e);if(65!==r.length)throw new Error("Invalid signature length");var t=r[64];return t<27&&(t+=27),{v:t,r:r.slice(0,32),s:r.slice(32,64)}},r.isValidSignature=function(e,r,t,n,i){void 0===n&&(n=!0);var a=new o("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),f=new o("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);if(32!==r.length||32!==t.length)return!1;if(!u(s(e,i)))return!1;var c=new o(r),d=new o(t);return!(c.isZero()||c.gt(f)||d.isZero()||d.gt(f))&&(!n||1!==d.cmp(a))},r.hashPersonalMessage=function(e){var r=n.from("Ethereum Signed Message:\n"+e.length.toString(),"utf-8");return f.keccak(n.concat([r,e]))}},16523:function(e){"use strict";e.exports=JSON.parse('{"genesisGasLimit":{"v":5000,"d":"Gas limit of the Genesis block."},"genesisDifficulty":{"v":17179869184,"d":"Difficulty of the Genesis block."},"genesisNonce":{"v":"0x0000000000000042","d":"the geneis nonce"},"genesisExtraData":{"v":"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa","d":"extra data "},"genesisHash":{"v":"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3","d":"genesis hash"},"genesisStateRoot":{"v":"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544","d":"the genesis state root"},"minGasLimit":{"v":5000,"d":"Minimum the gas limit may ever be."},"gasLimitBoundDivisor":{"v":1024,"d":"The bound divisor of the gas limit, used in update calculations."},"minimumDifficulty":{"v":131072,"d":"The minimum that the difficulty may ever be."},"difficultyBoundDivisor":{"v":2048,"d":"The bound divisor of the difficulty, used in the update calculations."},"durationLimit":{"v":13,"d":"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."},"maximumExtraDataSize":{"v":32,"d":"Maximum size extra data may be after Genesis."},"epochDuration":{"v":30000,"d":"Duration between proof-of-work epochs."},"stackLimit":{"v":1024,"d":"Maximum size of VM stack allowed."},"callCreateDepth":{"v":1024,"d":"Maximum depth of call/create stack."},"tierStepGas":{"v":[0,2,3,5,8,10,20],"d":"Once per operation, for a selection of them."},"expGas":{"v":10,"d":"Once per EXP instuction."},"expByteGas":{"v":10,"d":"Times ceil(log256(exponent)) for the EXP instruction."},"sha3Gas":{"v":30,"d":"Once per SHA3 operation."},"sha3WordGas":{"v":6,"d":"Once per word of the SHA3 operation\'s data."},"sloadGas":{"v":50,"d":"Once per SLOAD operation."},"sstoreSetGas":{"v":20000,"d":"Once per SSTORE operation if the zeroness changes from zero."},"sstoreResetGas":{"v":5000,"d":"Once per SSTORE operation if the zeroness does not change from zero."},"sstoreRefundGas":{"v":15000,"d":"Once per SSTORE operation if the zeroness changes to zero."},"jumpdestGas":{"v":1,"d":"Refunded gas, once per SSTORE operation if the zeroness changes to zero."},"logGas":{"v":375,"d":"Per LOG* operation."},"logDataGas":{"v":8,"d":"Per byte in a LOG* operation\'s data."},"logTopicGas":{"v":375,"d":"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."},"createGas":{"v":32000,"d":"Once per CREATE operation & contract-creation transaction."},"callGas":{"v":40,"d":"Once per CALL operation & message call transaction."},"callStipend":{"v":2300,"d":"Free gas given at beginning of call."},"callValueTransferGas":{"v":9000,"d":"Paid for CALL when the value transfor is non-zero."},"callNewAccountGas":{"v":25000,"d":"Paid for CALL when the destination address didn\'t exist prior."},"suicideRefundGas":{"v":24000,"d":"Refunded following a suicide operation."},"memoryGas":{"v":3,"d":"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."},"quadCoeffDiv":{"v":512,"d":"Divisor for the quadratic particle of the memory cost equation."},"createDataGas":{"v":200,"d":""},"txGas":{"v":21000,"d":"Per transaction. NOTE: Not payable on data of calls between transactions."},"txCreation":{"v":32000,"d":"the cost of creating a contract via tx"},"txDataZeroGas":{"v":4,"d":"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."},"txDataNonZeroGas":{"v":68,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."},"copyGas":{"v":3,"d":"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."},"ecrecoverGas":{"v":3000,"d":""},"sha256Gas":{"v":60,"d":""},"sha256WordGas":{"v":12,"d":""},"ripemd160Gas":{"v":600,"d":""},"ripemd160WordGas":{"v":120,"d":""},"identityGas":{"v":15,"d":""},"identityWordGas":{"v":3,"d":""},"minerReward":{"v":"5000000000000000000","d":"the amount a miner get rewarded for mining a block"},"ommerReward":{"v":"625000000000000000","d":"The amount of wei a miner of an uncle block gets for being inculded in the blockchain"},"niblingReward":{"v":"156250000000000000","d":"the amount a miner gets for inculding a uncle"},"homeSteadForkNumber":{"v":1150000,"d":"the block that the Homestead fork started at"},"homesteadRepriceForkNumber":{"v":2463000,"d":"the block that the Homestead Reprice (EIP150) fork started at"},"timebombPeriod":{"v":100000,"d":"Exponential difficulty timebomb period"},"freeBlockPeriod":{"v":2}}')}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
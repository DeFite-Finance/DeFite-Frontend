/*! For license information please see vendors-91c40cd8.a6f99d87581ffcf0ec22.js.LICENSE.txt */
(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[1680],{23085:function(t,r,i){"use strict";var e=i(25108);const n=i(79742),o=i(80645),h="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;r.Buffer=f,r.SlowBuffer=function(t){+t!=t&&(t=0);return f.alloc(+t)},r.INSPECT_MAX_BYTES=50;const s=2147483647;function u(t){if(t>s)throw new RangeError('The value "'+t+'" is invalid for option "size"');const r=new Uint8Array(t);return Object.setPrototypeOf(r,f.prototype),r}function f(t,r,i){if("number"==typeof t){if("string"==typeof r)throw new TypeError('The "string" argument must be of type string. Received type number');return p(t)}return a(t,r,i)}function a(t,r,i){if("string"==typeof t)return function(t,r){"string"==typeof r&&""!==r||(r="utf8");if(!f.isEncoding(r))throw new TypeError("Unknown encoding: "+r);const i=0|g(t,r);let e=u(i);const n=e.write(t,r);n!==i&&(e=e.slice(0,n));return e}(t,r);if(ArrayBuffer.isView(t))return function(t){if(W(t,Uint8Array)){const r=new Uint8Array(t);return m(r.buffer,r.byteOffset,r.byteLength)}return c(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(W(t,ArrayBuffer)||t&&W(t.buffer,ArrayBuffer))return m(t,r,i);if("undefined"!=typeof SharedArrayBuffer&&(W(t,SharedArrayBuffer)||t&&W(t.buffer,SharedArrayBuffer)))return m(t,r,i);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const e=t.valueOf&&t.valueOf();if(null!=e&&e!==t)return f.from(e,r,i);const n=function(t){if(f.isBuffer(t)){const r=0|d(t.length),i=u(r);return 0===i.length||t.copy(i,0,0,r),i}if(void 0!==t.length)return"number"!=typeof t.length||X(t.length)?u(0):c(t);if("Buffer"===t.type&&Array.isArray(t.data))return c(t.data)}(t);if(n)return n;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return f.from(t[Symbol.toPrimitive]("string"),r,i);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function p(t){return l(t),u(t<0?0:0|d(t))}function c(t){const r=t.length<0?0:0|d(t.length),i=u(r);for(let e=0;e<r;e+=1)i[e]=255&t[e];return i}function m(t,r,i){if(r<0||t.byteLength<r)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<r+(i||0))throw new RangeError('"length" is outside of buffer bounds');let e;return e=void 0===r&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,r):new Uint8Array(t,r,i),Object.setPrototypeOf(e,f.prototype),e}function d(t){if(t>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|t}function g(t,r){if(f.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||W(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const i=t.length,e=arguments.length>2&&!0===arguments[2];if(!e&&0===i)return 0;let n=!1;for(;;)switch(r){case"ascii":case"latin1":case"binary":return i;case"utf8":case"utf-8":return V(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*i;case"hex":return i>>>1;case"base64":return H(t).length;default:if(n)return e?-1:V(t).length;r=(""+r).toLowerCase(),n=!0}}function y(t,r,i){let e=!1;if((void 0===r||r<0)&&(r=0),r>this.length)return"";if((void 0===i||i>this.length)&&(i=this.length),i<=0)return"";if((i>>>=0)<=(r>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return U(this,r,i);case"utf8":case"utf-8":return O(this,r,i);case"ascii":return R(this,r,i);case"latin1":case"binary":return k(this,r,i);case"base64":return I(this,r,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,r,i);default:if(e)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),e=!0}}function w(t,r,i){const e=t[r];t[r]=t[i],t[i]=e}function v(t,r,i,e,n){if(0===t.length)return-1;if("string"==typeof i?(e=i,i=0):i>2147483647?i=2147483647:i<-2147483648&&(i=-2147483648),X(i=+i)&&(i=n?0:t.length-1),i<0&&(i=t.length+i),i>=t.length){if(n)return-1;i=t.length-1}else if(i<0){if(!n)return-1;i=0}if("string"==typeof r&&(r=f.from(r,e)),f.isBuffer(r))return 0===r.length?-1:M(t,r,i,e,n);if("number"==typeof r)return r&=255,"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(t,r,i):Uint8Array.prototype.lastIndexOf.call(t,r,i):M(t,[r],i,e,n);throw new TypeError("val must be string, number or Buffer")}function M(t,r,i,e,n){let o,h=1,s=t.length,u=r.length;if(void 0!==e&&("ucs2"===(e=String(e).toLowerCase())||"ucs-2"===e||"utf16le"===e||"utf-16le"===e)){if(t.length<2||r.length<2)return-1;h=2,s/=2,u/=2,i/=2}function f(t,r){return 1===h?t[r]:t.readUInt16BE(r*h)}if(n){let e=-1;for(o=i;o<s;o++)if(f(t,o)===f(r,-1===e?0:o-e)){if(-1===e&&(e=o),o-e+1===u)return e*h}else-1!==e&&(o-=o-e),e=-1}else for(i+u>s&&(i=s-u),o=i;o>=0;o--){let i=!0;for(let e=0;e<u;e++)if(f(t,o+e)!==f(r,e)){i=!1;break}if(i)return o}return-1}function b(t,r,i,e){i=Number(i)||0;const n=t.length-i;e?(e=Number(e))>n&&(e=n):e=n;const o=r.length;let h;for(e>o/2&&(e=o/2),h=0;h<e;++h){const e=parseInt(r.substr(2*h,2),16);if(X(e))return h;t[i+h]=e}return h}function B(t,r,i,e){return K(V(r,t.length-i),t,i,e)}function E(t,r,i,e){return K(function(t){const r=[];for(let i=0;i<t.length;++i)r.push(255&t.charCodeAt(i));return r}(r),t,i,e)}function _(t,r,i,e){return K(H(r),t,i,e)}function A(t,r,i,e){return K(function(t,r){let i,e,n;const o=[];for(let h=0;h<t.length&&!((r-=2)<0);++h)i=t.charCodeAt(h),e=i>>8,n=i%256,o.push(n),o.push(e);return o}(r,t.length-i),t,i,e)}function I(t,r,i){return 0===r&&i===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(r,i))}function O(t,r,i){i=Math.min(t.length,i);const e=[];let n=r;for(;n<i;){const r=t[n];let o=null,h=r>239?4:r>223?3:r>191?2:1;if(n+h<=i){let i,e,s,u;switch(h){case 1:r<128&&(o=r);break;case 2:i=t[n+1],128==(192&i)&&(u=(31&r)<<6|63&i,u>127&&(o=u));break;case 3:i=t[n+1],e=t[n+2],128==(192&i)&&128==(192&e)&&(u=(15&r)<<12|(63&i)<<6|63&e,u>2047&&(u<55296||u>57343)&&(o=u));break;case 4:i=t[n+1],e=t[n+2],s=t[n+3],128==(192&i)&&128==(192&e)&&128==(192&s)&&(u=(15&r)<<18|(63&i)<<12|(63&e)<<6|63&s,u>65535&&u<1114112&&(o=u))}}null===o?(o=65533,h=1):o>65535&&(o-=65536,e.push(o>>>10&1023|55296),o=56320|1023&o),e.push(o),n+=h}return function(t){const r=t.length;if(r<=S)return String.fromCharCode.apply(String,t);let i="",e=0;for(;e<r;)i+=String.fromCharCode.apply(String,t.slice(e,e+=S));return i}(e)}r.kMaxLength=s,f.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),r={foo:function(){return 42}};return Object.setPrototypeOf(r,Uint8Array.prototype),Object.setPrototypeOf(t,r),42===t.foo()}catch(t){return!1}}(),f.TYPED_ARRAY_SUPPORT||void 0===e||"function"!=typeof e.error||e.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(f.prototype,"parent",{enumerable:!0,get:function(){if(f.isBuffer(this))return this.buffer}}),Object.defineProperty(f.prototype,"offset",{enumerable:!0,get:function(){if(f.isBuffer(this))return this.byteOffset}}),f.poolSize=8192,f.from=function(t,r,i){return a(t,r,i)},Object.setPrototypeOf(f.prototype,Uint8Array.prototype),Object.setPrototypeOf(f,Uint8Array),f.alloc=function(t,r,i){return function(t,r,i){return l(t),t<=0?u(t):void 0!==r?"string"==typeof i?u(t).fill(r,i):u(t).fill(r):u(t)}(t,r,i)},f.allocUnsafe=function(t){return p(t)},f.allocUnsafeSlow=function(t){return p(t)},f.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==f.prototype},f.compare=function(t,r){if(W(t,Uint8Array)&&(t=f.from(t,t.offset,t.byteLength)),W(r,Uint8Array)&&(r=f.from(r,r.offset,r.byteLength)),!f.isBuffer(t)||!f.isBuffer(r))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===r)return 0;let i=t.length,e=r.length;for(let n=0,o=Math.min(i,e);n<o;++n)if(t[n]!==r[n]){i=t[n],e=r[n];break}return i<e?-1:e<i?1:0},f.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},f.concat=function(t,r){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return f.alloc(0);let i;if(void 0===r)for(r=0,i=0;i<t.length;++i)r+=t[i].length;const e=f.allocUnsafe(r);let n=0;for(i=0;i<t.length;++i){let r=t[i];if(W(r,Uint8Array))n+r.length>e.length?(f.isBuffer(r)||(r=f.from(r)),r.copy(e,n)):Uint8Array.prototype.set.call(e,r,n);else{if(!f.isBuffer(r))throw new TypeError('"list" argument must be an Array of Buffers');r.copy(e,n)}n+=r.length}return e},f.byteLength=g,f.prototype._isBuffer=!0,f.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let r=0;r<t;r+=2)w(this,r,r+1);return this},f.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let r=0;r<t;r+=4)w(this,r,r+3),w(this,r+1,r+2);return this},f.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let r=0;r<t;r+=8)w(this,r,r+7),w(this,r+1,r+6),w(this,r+2,r+5),w(this,r+3,r+4);return this},f.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?O(this,0,t):y.apply(this,arguments)},f.prototype.toLocaleString=f.prototype.toString,f.prototype.equals=function(t){if(!f.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===f.compare(this,t)},f.prototype.inspect=function(){let t="";const i=r.INSPECT_MAX_BYTES;return t=this.toString("hex",0,i).replace(/(.{2})/g,"$1 ").trim(),this.length>i&&(t+=" ... "),"<Buffer "+t+">"},h&&(f.prototype[h]=f.prototype.inspect),f.prototype.compare=function(t,r,i,e,n){if(W(t,Uint8Array)&&(t=f.from(t,t.offset,t.byteLength)),!f.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===r&&(r=0),void 0===i&&(i=t?t.length:0),void 0===e&&(e=0),void 0===n&&(n=this.length),r<0||i>t.length||e<0||n>this.length)throw new RangeError("out of range index");if(e>=n&&r>=i)return 0;if(e>=n)return-1;if(r>=i)return 1;if(this===t)return 0;let o=(n>>>=0)-(e>>>=0),h=(i>>>=0)-(r>>>=0);const s=Math.min(o,h),u=this.slice(e,n),a=t.slice(r,i);for(let t=0;t<s;++t)if(u[t]!==a[t]){o=u[t],h=a[t];break}return o<h?-1:h<o?1:0},f.prototype.includes=function(t,r,i){return-1!==this.indexOf(t,r,i)},f.prototype.indexOf=function(t,r,i){return v(this,t,r,i,!0)},f.prototype.lastIndexOf=function(t,r,i){return v(this,t,r,i,!1)},f.prototype.write=function(t,r,i,e){if(void 0===r)e="utf8",i=this.length,r=0;else if(void 0===i&&"string"==typeof r)e=r,i=this.length,r=0;else{if(!isFinite(r))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");r>>>=0,isFinite(i)?(i>>>=0,void 0===e&&(e="utf8")):(e=i,i=void 0)}const n=this.length-r;if((void 0===i||i>n)&&(i=n),t.length>0&&(i<0||r<0)||r>this.length)throw new RangeError("Attempt to write outside buffer bounds");e||(e="utf8");let o=!1;for(;;)switch(e){case"hex":return b(this,t,r,i);case"utf8":case"utf-8":return B(this,t,r,i);case"ascii":case"latin1":case"binary":return E(this,t,r,i);case"base64":return _(this,t,r,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,r,i);default:if(o)throw new TypeError("Unknown encoding: "+e);e=(""+e).toLowerCase(),o=!0}},f.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const S=4096;function R(t,r,i){let e="";i=Math.min(t.length,i);for(let n=r;n<i;++n)e+=String.fromCharCode(127&t[n]);return e}function k(t,r,i){let e="";i=Math.min(t.length,i);for(let n=r;n<i;++n)e+=String.fromCharCode(t[n]);return e}function U(t,r,i){const e=t.length;(!r||r<0)&&(r=0),(!i||i<0||i>e)&&(i=e);let n="";for(let e=r;e<i;++e)n+=J[t[e]];return n}function x(t,r,i){const e=t.slice(r,i);let n="";for(let t=0;t<e.length-1;t+=2)n+=String.fromCharCode(e[t]+256*e[t+1]);return n}function j(t,r,i){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+r>i)throw new RangeError("Trying to access beyond buffer length")}function T(t,r,i,e,n,o){if(!f.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(r>n||r<o)throw new RangeError('"value" argument is out of bounds');if(i+e>t.length)throw new RangeError("Index out of range")}function L(t,r,i,e,n){z(r,e,n,t,i,7);let o=Number(r&BigInt(4294967295));t[i++]=o,o>>=8,t[i++]=o,o>>=8,t[i++]=o,o>>=8,t[i++]=o;let h=Number(r>>BigInt(32)&BigInt(4294967295));return t[i++]=h,h>>=8,t[i++]=h,h>>=8,t[i++]=h,h>>=8,t[i++]=h,i}function $(t,r,i,e,n){z(r,e,n,t,i,7);let o=Number(r&BigInt(4294967295));t[i+7]=o,o>>=8,t[i+6]=o,o>>=8,t[i+5]=o,o>>=8,t[i+4]=o;let h=Number(r>>BigInt(32)&BigInt(4294967295));return t[i+3]=h,h>>=8,t[i+2]=h,h>>=8,t[i+1]=h,h>>=8,t[i]=h,i+8}function N(t,r,i,e,n,o){if(i+e>t.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("Index out of range")}function P(t,r,i,e,n){return r=+r,i>>>=0,n||N(t,0,i,4),o.write(t,r,i,e,23,4),i+4}function q(t,r,i,e,n){return r=+r,i>>>=0,n||N(t,0,i,8),o.write(t,r,i,e,52,8),i+8}f.prototype.slice=function(t,r){const i=this.length;(t=~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),(r=void 0===r?i:~~r)<0?(r+=i)<0&&(r=0):r>i&&(r=i),r<t&&(r=t);const e=this.subarray(t,r);return Object.setPrototypeOf(e,f.prototype),e},f.prototype.readUintLE=f.prototype.readUIntLE=function(t,r,i){t>>>=0,r>>>=0,i||j(t,r,this.length);let e=this[t],n=1,o=0;for(;++o<r&&(n*=256);)e+=this[t+o]*n;return e},f.prototype.readUintBE=f.prototype.readUIntBE=function(t,r,i){t>>>=0,r>>>=0,i||j(t,r,this.length);let e=this[t+--r],n=1;for(;r>0&&(n*=256);)e+=this[t+--r]*n;return e},f.prototype.readUint8=f.prototype.readUInt8=function(t,r){return t>>>=0,r||j(t,1,this.length),this[t]},f.prototype.readUint16LE=f.prototype.readUInt16LE=function(t,r){return t>>>=0,r||j(t,2,this.length),this[t]|this[t+1]<<8},f.prototype.readUint16BE=f.prototype.readUInt16BE=function(t,r){return t>>>=0,r||j(t,2,this.length),this[t]<<8|this[t+1]},f.prototype.readUint32LE=f.prototype.readUInt32LE=function(t,r){return t>>>=0,r||j(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},f.prototype.readUint32BE=f.prototype.readUInt32BE=function(t,r){return t>>>=0,r||j(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},f.prototype.readBigUInt64LE=Q((function(t){D(t>>>=0,"offset");const r=this[t],i=this[t+7];void 0!==r&&void 0!==i||Y(t,this.length-8);const e=r+256*this[++t]+65536*this[++t]+this[++t]*2**24,n=this[++t]+256*this[++t]+65536*this[++t]+i*2**24;return BigInt(e)+(BigInt(n)<<BigInt(32))})),f.prototype.readBigUInt64BE=Q((function(t){D(t>>>=0,"offset");const r=this[t],i=this[t+7];void 0!==r&&void 0!==i||Y(t,this.length-8);const e=r*2**24+65536*this[++t]+256*this[++t]+this[++t],n=this[++t]*2**24+65536*this[++t]+256*this[++t]+i;return(BigInt(e)<<BigInt(32))+BigInt(n)})),f.prototype.readIntLE=function(t,r,i){t>>>=0,r>>>=0,i||j(t,r,this.length);let e=this[t],n=1,o=0;for(;++o<r&&(n*=256);)e+=this[t+o]*n;return n*=128,e>=n&&(e-=Math.pow(2,8*r)),e},f.prototype.readIntBE=function(t,r,i){t>>>=0,r>>>=0,i||j(t,r,this.length);let e=r,n=1,o=this[t+--e];for(;e>0&&(n*=256);)o+=this[t+--e]*n;return n*=128,o>=n&&(o-=Math.pow(2,8*r)),o},f.prototype.readInt8=function(t,r){return t>>>=0,r||j(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},f.prototype.readInt16LE=function(t,r){t>>>=0,r||j(t,2,this.length);const i=this[t]|this[t+1]<<8;return 32768&i?4294901760|i:i},f.prototype.readInt16BE=function(t,r){t>>>=0,r||j(t,2,this.length);const i=this[t+1]|this[t]<<8;return 32768&i?4294901760|i:i},f.prototype.readInt32LE=function(t,r){return t>>>=0,r||j(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},f.prototype.readInt32BE=function(t,r){return t>>>=0,r||j(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},f.prototype.readBigInt64LE=Q((function(t){D(t>>>=0,"offset");const r=this[t],i=this[t+7];void 0!==r&&void 0!==i||Y(t,this.length-8);const e=this[t+4]+256*this[t+5]+65536*this[t+6]+(i<<24);return(BigInt(e)<<BigInt(32))+BigInt(r+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),f.prototype.readBigInt64BE=Q((function(t){D(t>>>=0,"offset");const r=this[t],i=this[t+7];void 0!==r&&void 0!==i||Y(t,this.length-8);const e=(r<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(e)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+i)})),f.prototype.readFloatLE=function(t,r){return t>>>=0,r||j(t,4,this.length),o.read(this,t,!0,23,4)},f.prototype.readFloatBE=function(t,r){return t>>>=0,r||j(t,4,this.length),o.read(this,t,!1,23,4)},f.prototype.readDoubleLE=function(t,r){return t>>>=0,r||j(t,8,this.length),o.read(this,t,!0,52,8)},f.prototype.readDoubleBE=function(t,r){return t>>>=0,r||j(t,8,this.length),o.read(this,t,!1,52,8)},f.prototype.writeUintLE=f.prototype.writeUIntLE=function(t,r,i,e){if(t=+t,r>>>=0,i>>>=0,!e){T(this,t,r,i,Math.pow(2,8*i)-1,0)}let n=1,o=0;for(this[r]=255&t;++o<i&&(n*=256);)this[r+o]=t/n&255;return r+i},f.prototype.writeUintBE=f.prototype.writeUIntBE=function(t,r,i,e){if(t=+t,r>>>=0,i>>>=0,!e){T(this,t,r,i,Math.pow(2,8*i)-1,0)}let n=i-1,o=1;for(this[r+n]=255&t;--n>=0&&(o*=256);)this[r+n]=t/o&255;return r+i},f.prototype.writeUint8=f.prototype.writeUInt8=function(t,r,i){return t=+t,r>>>=0,i||T(this,t,r,1,255,0),this[r]=255&t,r+1},f.prototype.writeUint16LE=f.prototype.writeUInt16LE=function(t,r,i){return t=+t,r>>>=0,i||T(this,t,r,2,65535,0),this[r]=255&t,this[r+1]=t>>>8,r+2},f.prototype.writeUint16BE=f.prototype.writeUInt16BE=function(t,r,i){return t=+t,r>>>=0,i||T(this,t,r,2,65535,0),this[r]=t>>>8,this[r+1]=255&t,r+2},f.prototype.writeUint32LE=f.prototype.writeUInt32LE=function(t,r,i){return t=+t,r>>>=0,i||T(this,t,r,4,4294967295,0),this[r+3]=t>>>24,this[r+2]=t>>>16,this[r+1]=t>>>8,this[r]=255&t,r+4},f.prototype.writeUint32BE=f.prototype.writeUInt32BE=function(t,r,i){return t=+t,r>>>=0,i||T(this,t,r,4,4294967295,0),this[r]=t>>>24,this[r+1]=t>>>16,this[r+2]=t>>>8,this[r+3]=255&t,r+4},f.prototype.writeBigUInt64LE=Q((function(t,r=0){return L(this,t,r,BigInt(0),BigInt("0xffffffffffffffff"))})),f.prototype.writeBigUInt64BE=Q((function(t,r=0){return $(this,t,r,BigInt(0),BigInt("0xffffffffffffffff"))})),f.prototype.writeIntLE=function(t,r,i,e){if(t=+t,r>>>=0,!e){const e=Math.pow(2,8*i-1);T(this,t,r,i,e-1,-e)}let n=0,o=1,h=0;for(this[r]=255&t;++n<i&&(o*=256);)t<0&&0===h&&0!==this[r+n-1]&&(h=1),this[r+n]=(t/o>>0)-h&255;return r+i},f.prototype.writeIntBE=function(t,r,i,e){if(t=+t,r>>>=0,!e){const e=Math.pow(2,8*i-1);T(this,t,r,i,e-1,-e)}let n=i-1,o=1,h=0;for(this[r+n]=255&t;--n>=0&&(o*=256);)t<0&&0===h&&0!==this[r+n+1]&&(h=1),this[r+n]=(t/o>>0)-h&255;return r+i},f.prototype.writeInt8=function(t,r,i){return t=+t,r>>>=0,i||T(this,t,r,1,127,-128),t<0&&(t=255+t+1),this[r]=255&t,r+1},f.prototype.writeInt16LE=function(t,r,i){return t=+t,r>>>=0,i||T(this,t,r,2,32767,-32768),this[r]=255&t,this[r+1]=t>>>8,r+2},f.prototype.writeInt16BE=function(t,r,i){return t=+t,r>>>=0,i||T(this,t,r,2,32767,-32768),this[r]=t>>>8,this[r+1]=255&t,r+2},f.prototype.writeInt32LE=function(t,r,i){return t=+t,r>>>=0,i||T(this,t,r,4,2147483647,-2147483648),this[r]=255&t,this[r+1]=t>>>8,this[r+2]=t>>>16,this[r+3]=t>>>24,r+4},f.prototype.writeInt32BE=function(t,r,i){return t=+t,r>>>=0,i||T(this,t,r,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[r]=t>>>24,this[r+1]=t>>>16,this[r+2]=t>>>8,this[r+3]=255&t,r+4},f.prototype.writeBigInt64LE=Q((function(t,r=0){return L(this,t,r,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),f.prototype.writeBigInt64BE=Q((function(t,r=0){return $(this,t,r,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),f.prototype.writeFloatLE=function(t,r,i){return P(this,t,r,!0,i)},f.prototype.writeFloatBE=function(t,r,i){return P(this,t,r,!1,i)},f.prototype.writeDoubleLE=function(t,r,i){return q(this,t,r,!0,i)},f.prototype.writeDoubleBE=function(t,r,i){return q(this,t,r,!1,i)},f.prototype.copy=function(t,r,i,e){if(!f.isBuffer(t))throw new TypeError("argument should be a Buffer");if(i||(i=0),e||0===e||(e=this.length),r>=t.length&&(r=t.length),r||(r=0),e>0&&e<i&&(e=i),e===i)return 0;if(0===t.length||0===this.length)return 0;if(r<0)throw new RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw new RangeError("Index out of range");if(e<0)throw new RangeError("sourceEnd out of bounds");e>this.length&&(e=this.length),t.length-r<e-i&&(e=t.length-r+i);const n=e-i;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(r,i,e):Uint8Array.prototype.set.call(t,this.subarray(i,e),r),n},f.prototype.fill=function(t,r,i,e){if("string"==typeof t){if("string"==typeof r?(e=r,r=0,i=this.length):"string"==typeof i&&(e=i,i=this.length),void 0!==e&&"string"!=typeof e)throw new TypeError("encoding must be a string");if("string"==typeof e&&!f.isEncoding(e))throw new TypeError("Unknown encoding: "+e);if(1===t.length){const r=t.charCodeAt(0);("utf8"===e&&r<128||"latin1"===e)&&(t=r)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(r<0||this.length<r||this.length<i)throw new RangeError("Out of range index");if(i<=r)return this;let n;if(r>>>=0,i=void 0===i?this.length:i>>>0,t||(t=0),"number"==typeof t)for(n=r;n<i;++n)this[n]=t;else{const o=f.isBuffer(t)?t:f.from(t,e),h=o.length;if(0===h)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(n=0;n<i-r;++n)this[n+r]=o[n%h]}return this};const C={};function Z(t,r,i){C[t]=class extends i{constructor(){super(),Object.defineProperty(this,"message",{value:r.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function F(t){let r="",i=t.length;const e="-"===t[0]?1:0;for(;i>=e+4;i-=3)r=`_${t.slice(i-3,i)}${r}`;return`${t.slice(0,i)}${r}`}function z(t,r,i,e,n,o){if(t>i||t<r){const e="bigint"==typeof r?"n":"";let n;throw n=o>3?0===r||r===BigInt(0)?`>= 0${e} and < 2${e} ** ${8*(o+1)}${e}`:`>= -(2${e} ** ${8*(o+1)-1}${e}) and < 2 ** ${8*(o+1)-1}${e}`:`>= ${r}${e} and <= ${i}${e}`,new C.ERR_OUT_OF_RANGE("value",n,t)}!function(t,r,i){D(r,"offset"),void 0!==t[r]&&void 0!==t[r+i]||Y(r,t.length-(i+1))}(e,n,o)}function D(t,r){if("number"!=typeof t)throw new C.ERR_INVALID_ARG_TYPE(r,"number",t)}function Y(t,r,i){if(Math.floor(t)!==t)throw D(t,i),new C.ERR_OUT_OF_RANGE(i||"offset","an integer",t);if(r<0)throw new C.ERR_BUFFER_OUT_OF_BOUNDS;throw new C.ERR_OUT_OF_RANGE(i||"offset",`>= ${i?1:0} and <= ${r}`,t)}Z("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),Z("ERR_INVALID_ARG_TYPE",(function(t,r){return`The "${t}" argument must be of type number. Received type ${typeof r}`}),TypeError),Z("ERR_OUT_OF_RANGE",(function(t,r,i){let e=`The value of "${t}" is out of range.`,n=i;return Number.isInteger(i)&&Math.abs(i)>2**32?n=F(String(i)):"bigint"==typeof i&&(n=String(i),(i>BigInt(2)**BigInt(32)||i<-(BigInt(2)**BigInt(32)))&&(n=F(n)),n+="n"),e+=` It must be ${r}. Received ${n}`,e}),RangeError);const G=/[^+/0-9A-Za-z-_]/g;function V(t,r){let i;r=r||1/0;const e=t.length;let n=null;const o=[];for(let h=0;h<e;++h){if(i=t.charCodeAt(h),i>55295&&i<57344){if(!n){if(i>56319){(r-=3)>-1&&o.push(239,191,189);continue}if(h+1===e){(r-=3)>-1&&o.push(239,191,189);continue}n=i;continue}if(i<56320){(r-=3)>-1&&o.push(239,191,189),n=i;continue}i=65536+(n-55296<<10|i-56320)}else n&&(r-=3)>-1&&o.push(239,191,189);if(n=null,i<128){if((r-=1)<0)break;o.push(i)}else if(i<2048){if((r-=2)<0)break;o.push(i>>6|192,63&i|128)}else if(i<65536){if((r-=3)<0)break;o.push(i>>12|224,i>>6&63|128,63&i|128)}else{if(!(i<1114112))throw new Error("Invalid code point");if((r-=4)<0)break;o.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}}return o}function H(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(G,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function K(t,r,i,e){let n;for(n=0;n<e&&!(n+i>=r.length||n>=t.length);++n)r[n+i]=t[n];return n}function W(t,r){return t instanceof r||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===r.name}function X(t){return t!=t}const J=function(){const t="0123456789abcdef",r=new Array(256);for(let i=0;i<16;++i){const e=16*i;for(let n=0;n<16;++n)r[e+n]=t[i]+t[n]}return r}();function Q(t){return"undefined"==typeof BigInt?tt:t}function tt(){throw new Error("BigInt not supported")}},45033:function(t,r,i){!function(t,r){"use strict";function e(t,r){if(!t)throw new Error(r||"Assertion failed")}function n(t,r){t.super_=r;var i=function(){};i.prototype=r.prototype,t.prototype=new i,t.prototype.constructor=t}function o(t,r,i){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==r&&"be"!==r||(i=r,r=10),this._init(t||0,r||10,i||"be"))}var h;"object"==typeof t?t.exports=o:r.BN=o,o.BN=o,o.wordSize=26;try{h=i(48764).Buffer}catch(t){}function s(t,r,i){for(var e=0,n=Math.min(t.length,i),o=r;o<n;o++){var h=t.charCodeAt(o)-48;e<<=4,e|=h>=49&&h<=54?h-49+10:h>=17&&h<=22?h-17+10:15&h}return e}function u(t,r,i,e){for(var n=0,o=Math.min(t.length,i),h=r;h<o;h++){var s=t.charCodeAt(h)-48;n*=e,n+=s>=49?s-49+10:s>=17?s-17+10:s}return n}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,r){return t.cmp(r)>0?t:r},o.min=function(t,r){return t.cmp(r)<0?t:r},o.prototype._init=function(t,r,i){if("number"==typeof t)return this._initNumber(t,r,i);if("object"==typeof t)return this._initArray(t,r,i);"hex"===r&&(r=16),e(r===(0|r)&&r>=2&&r<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&n++,16===r?this._parseHex(t,n):this._parseBase(t,r,n),"-"===t[0]&&(this.negative=1),this.strip(),"le"===i&&this._initArray(this.toArray(),r,i)},o.prototype._initNumber=function(t,r,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(e(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),r,i)},o.prototype._initArray=function(t,r,i){if(e("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,h,s=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)h=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)h=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(t,r){this.length=Math.ceil((t.length-r)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var e,n,o=0;for(i=t.length-6,e=0;i>=r;i-=6)n=s(t,i,i+6),this.words[e]|=n<<o&67108863,this.words[e+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,e++);i+6!==r&&(n=s(t,r,i+6),this.words[e]|=n<<o&67108863,this.words[e+1]|=n>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,r,i){this.words=[0],this.length=1;for(var e=0,n=1;n<=67108863;n*=r)e++;e--,n=n/r|0;for(var o=t.length-i,h=o%e,s=Math.min(o,o-h)+i,f=0,a=i;a<s;a+=e)f=u(t,a,a+e,r),this.imuln(n),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f);if(0!==h){var l=1;for(f=u(t,a,t.length,r),a=0;a<h;a++)l*=r;this.imuln(l),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var r=0;r<this.length;r++)t.words[r]=this.words[r];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var f=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],a=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function p(t,r,i){i.negative=r.negative^t.negative;var e=t.length+r.length|0;i.length=e,e=e-1|0;var n=0|t.words[0],o=0|r.words[0],h=n*o,s=67108863&h,u=h/67108864|0;i.words[0]=s;for(var f=1;f<e;f++){for(var a=u>>>26,l=67108863&u,p=Math.min(f,r.length-1),c=Math.max(0,f-t.length+1);c<=p;c++){var m=f-c|0;a+=(h=(n=0|t.words[m])*(o=0|r.words[c])+l)/67108864|0,l=67108863&h}i.words[f]=0|l,u=0|a}return 0!==u?i.words[f]=0|u:i.length--,i.strip()}o.prototype.toString=function(t,r){var i;if(r=0|r||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,h=0;h<this.length;h++){var s=this.words[h],u=(16777215&(s<<n|o)).toString(16);i=0!==(o=s>>>24-n&16777215)||h!==this.length-1?f[6-u.length]+u+i:u+i,(n+=2)>=26&&(n-=26,h--)}for(0!==o&&(i=o.toString(16)+i);i.length%r!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var p=a[t],c=l[t];i="";var m=this.clone();for(m.negative=0;!m.isZero();){var d=m.modn(c).toString(t);i=(m=m.idivn(c)).isZero()?d+i:f[p-d.length]+d+i}for(this.isZero()&&(i="0"+i);i.length%r!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}e(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&e(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,r){return e(void 0!==h),this.toArrayLike(h,t,r)},o.prototype.toArray=function(t,r){return this.toArrayLike(Array,t,r)},o.prototype.toArrayLike=function(t,r,i){var n=this.byteLength(),o=i||Math.max(1,n);e(n<=o,"byte array longer than desired length"),e(o>0,"Requested array length <= 0"),this.strip();var h,s,u="le"===r,f=new t(o),a=this.clone();if(u){for(s=0;!a.isZero();s++)h=a.andln(255),a.iushrn(8),f[s]=h;for(;s<o;s++)f[s]=0}else{for(s=0;s<o-n;s++)f[s]=0;for(s=0;!a.isZero();s++)h=a.andln(255),a.iushrn(8),f[o-s-1]=h}return f},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var r=t,i=0;return r>=4096&&(i+=13,r>>>=13),r>=64&&(i+=7,r>>>=7),r>=8&&(i+=4,r>>>=4),r>=2&&(i+=2,r>>>=2),i+r},o.prototype._zeroBits=function(t){if(0===t)return 26;var r=t,i=0;return 0==(8191&r)&&(i+=13,r>>>=13),0==(127&r)&&(i+=7,r>>>=7),0==(15&r)&&(i+=4,r>>>=4),0==(3&r)&&(i+=2,r>>>=2),0==(1&r)&&i++,i},o.prototype.bitLength=function(){var t=this.words[this.length-1],r=this._countBits(t);return 26*(this.length-1)+r},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,r=0;r<this.length;r++){var i=this._zeroBits(this.words[r]);if(t+=i,26!==i)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]|t.words[r];return this.strip()},o.prototype.ior=function(t){return e(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var r;r=this.length>t.length?t:this;for(var i=0;i<r.length;i++)this.words[i]=this.words[i]&t.words[i];return this.length=r.length,this.strip()},o.prototype.iand=function(t){return e(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var r,i;this.length>t.length?(r=this,i=t):(r=t,i=this);for(var e=0;e<i.length;e++)this.words[e]=r.words[e]^i.words[e];if(this!==r)for(;e<r.length;e++)this.words[e]=r.words[e];return this.length=r.length,this.strip()},o.prototype.ixor=function(t){return e(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){e("number"==typeof t&&t>=0);var r=0|Math.ceil(t/26),i=t%26;this._expand(r),i>0&&r--;for(var n=0;n<r;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,r){e("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=r?this.words[i]|1<<n:this.words[i]&~(1<<n),this.strip()},o.prototype.iadd=function(t){var r,i,e;if(0!==this.negative&&0===t.negative)return this.negative=0,r=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,r=this.isub(t),t.negative=1,r._normSign();this.length>t.length?(i=this,e=t):(i=t,e=this);for(var n=0,o=0;o<e.length;o++)r=(0|i.words[o])+(0|e.words[o])+n,this.words[o]=67108863&r,n=r>>>26;for(;0!==n&&o<i.length;o++)r=(0|i.words[o])+n,this.words[o]=67108863&r,n=r>>>26;if(this.length=i.length,0!==n)this.words[this.length]=n,this.length++;else if(i!==this)for(;o<i.length;o++)this.words[o]=i.words[o];return this},o.prototype.add=function(t){var r;return 0!==t.negative&&0===this.negative?(t.negative=0,r=this.sub(t),t.negative^=1,r):0===t.negative&&0!==this.negative?(this.negative=0,r=t.sub(this),this.negative=1,r):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var r=this.iadd(t);return t.negative=1,r._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var i,e,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(i=this,e=t):(i=t,e=this);for(var o=0,h=0;h<e.length;h++)o=(r=(0|i.words[h])-(0|e.words[h])+o)>>26,this.words[h]=67108863&r;for(;0!==o&&h<i.length;h++)o=(r=(0|i.words[h])+o)>>26,this.words[h]=67108863&r;if(0===o&&h<i.length&&i!==this)for(;h<i.length;h++)this.words[h]=i.words[h];return this.length=Math.max(this.length,h),i!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var c=function(t,r,i){var e,n,o,h=t.words,s=r.words,u=i.words,f=0,a=0|h[0],l=8191&a,p=a>>>13,c=0|h[1],m=8191&c,d=c>>>13,g=0|h[2],y=8191&g,w=g>>>13,v=0|h[3],M=8191&v,b=v>>>13,B=0|h[4],E=8191&B,_=B>>>13,A=0|h[5],I=8191&A,O=A>>>13,S=0|h[6],R=8191&S,k=S>>>13,U=0|h[7],x=8191&U,j=U>>>13,T=0|h[8],L=8191&T,$=T>>>13,N=0|h[9],P=8191&N,q=N>>>13,C=0|s[0],Z=8191&C,F=C>>>13,z=0|s[1],D=8191&z,Y=z>>>13,G=0|s[2],V=8191&G,H=G>>>13,K=0|s[3],W=8191&K,X=K>>>13,J=0|s[4],Q=8191&J,tt=J>>>13,rt=0|s[5],it=8191&rt,et=rt>>>13,nt=0|s[6],ot=8191&nt,ht=nt>>>13,st=0|s[7],ut=8191&st,ft=st>>>13,at=0|s[8],lt=8191&at,pt=at>>>13,ct=0|s[9],mt=8191&ct,dt=ct>>>13;i.negative=t.negative^r.negative,i.length=19;var gt=(f+(e=Math.imul(l,Z))|0)+((8191&(n=(n=Math.imul(l,F))+Math.imul(p,Z)|0))<<13)|0;f=((o=Math.imul(p,F))+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,e=Math.imul(m,Z),n=(n=Math.imul(m,F))+Math.imul(d,Z)|0,o=Math.imul(d,F);var yt=(f+(e=e+Math.imul(l,D)|0)|0)+((8191&(n=(n=n+Math.imul(l,Y)|0)+Math.imul(p,D)|0))<<13)|0;f=((o=o+Math.imul(p,Y)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,e=Math.imul(y,Z),n=(n=Math.imul(y,F))+Math.imul(w,Z)|0,o=Math.imul(w,F),e=e+Math.imul(m,D)|0,n=(n=n+Math.imul(m,Y)|0)+Math.imul(d,D)|0,o=o+Math.imul(d,Y)|0;var wt=(f+(e=e+Math.imul(l,V)|0)|0)+((8191&(n=(n=n+Math.imul(l,H)|0)+Math.imul(p,V)|0))<<13)|0;f=((o=o+Math.imul(p,H)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,e=Math.imul(M,Z),n=(n=Math.imul(M,F))+Math.imul(b,Z)|0,o=Math.imul(b,F),e=e+Math.imul(y,D)|0,n=(n=n+Math.imul(y,Y)|0)+Math.imul(w,D)|0,o=o+Math.imul(w,Y)|0,e=e+Math.imul(m,V)|0,n=(n=n+Math.imul(m,H)|0)+Math.imul(d,V)|0,o=o+Math.imul(d,H)|0;var vt=(f+(e=e+Math.imul(l,W)|0)|0)+((8191&(n=(n=n+Math.imul(l,X)|0)+Math.imul(p,W)|0))<<13)|0;f=((o=o+Math.imul(p,X)|0)+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,e=Math.imul(E,Z),n=(n=Math.imul(E,F))+Math.imul(_,Z)|0,o=Math.imul(_,F),e=e+Math.imul(M,D)|0,n=(n=n+Math.imul(M,Y)|0)+Math.imul(b,D)|0,o=o+Math.imul(b,Y)|0,e=e+Math.imul(y,V)|0,n=(n=n+Math.imul(y,H)|0)+Math.imul(w,V)|0,o=o+Math.imul(w,H)|0,e=e+Math.imul(m,W)|0,n=(n=n+Math.imul(m,X)|0)+Math.imul(d,W)|0,o=o+Math.imul(d,X)|0;var Mt=(f+(e=e+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(p,Q)|0))<<13)|0;f=((o=o+Math.imul(p,tt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,e=Math.imul(I,Z),n=(n=Math.imul(I,F))+Math.imul(O,Z)|0,o=Math.imul(O,F),e=e+Math.imul(E,D)|0,n=(n=n+Math.imul(E,Y)|0)+Math.imul(_,D)|0,o=o+Math.imul(_,Y)|0,e=e+Math.imul(M,V)|0,n=(n=n+Math.imul(M,H)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,H)|0,e=e+Math.imul(y,W)|0,n=(n=n+Math.imul(y,X)|0)+Math.imul(w,W)|0,o=o+Math.imul(w,X)|0,e=e+Math.imul(m,Q)|0,n=(n=n+Math.imul(m,tt)|0)+Math.imul(d,Q)|0,o=o+Math.imul(d,tt)|0;var bt=(f+(e=e+Math.imul(l,it)|0)|0)+((8191&(n=(n=n+Math.imul(l,et)|0)+Math.imul(p,it)|0))<<13)|0;f=((o=o+Math.imul(p,et)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,e=Math.imul(R,Z),n=(n=Math.imul(R,F))+Math.imul(k,Z)|0,o=Math.imul(k,F),e=e+Math.imul(I,D)|0,n=(n=n+Math.imul(I,Y)|0)+Math.imul(O,D)|0,o=o+Math.imul(O,Y)|0,e=e+Math.imul(E,V)|0,n=(n=n+Math.imul(E,H)|0)+Math.imul(_,V)|0,o=o+Math.imul(_,H)|0,e=e+Math.imul(M,W)|0,n=(n=n+Math.imul(M,X)|0)+Math.imul(b,W)|0,o=o+Math.imul(b,X)|0,e=e+Math.imul(y,Q)|0,n=(n=n+Math.imul(y,tt)|0)+Math.imul(w,Q)|0,o=o+Math.imul(w,tt)|0,e=e+Math.imul(m,it)|0,n=(n=n+Math.imul(m,et)|0)+Math.imul(d,it)|0,o=o+Math.imul(d,et)|0;var Bt=(f+(e=e+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,ht)|0)+Math.imul(p,ot)|0))<<13)|0;f=((o=o+Math.imul(p,ht)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,e=Math.imul(x,Z),n=(n=Math.imul(x,F))+Math.imul(j,Z)|0,o=Math.imul(j,F),e=e+Math.imul(R,D)|0,n=(n=n+Math.imul(R,Y)|0)+Math.imul(k,D)|0,o=o+Math.imul(k,Y)|0,e=e+Math.imul(I,V)|0,n=(n=n+Math.imul(I,H)|0)+Math.imul(O,V)|0,o=o+Math.imul(O,H)|0,e=e+Math.imul(E,W)|0,n=(n=n+Math.imul(E,X)|0)+Math.imul(_,W)|0,o=o+Math.imul(_,X)|0,e=e+Math.imul(M,Q)|0,n=(n=n+Math.imul(M,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,e=e+Math.imul(y,it)|0,n=(n=n+Math.imul(y,et)|0)+Math.imul(w,it)|0,o=o+Math.imul(w,et)|0,e=e+Math.imul(m,ot)|0,n=(n=n+Math.imul(m,ht)|0)+Math.imul(d,ot)|0,o=o+Math.imul(d,ht)|0;var Et=(f+(e=e+Math.imul(l,ut)|0)|0)+((8191&(n=(n=n+Math.imul(l,ft)|0)+Math.imul(p,ut)|0))<<13)|0;f=((o=o+Math.imul(p,ft)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,e=Math.imul(L,Z),n=(n=Math.imul(L,F))+Math.imul($,Z)|0,o=Math.imul($,F),e=e+Math.imul(x,D)|0,n=(n=n+Math.imul(x,Y)|0)+Math.imul(j,D)|0,o=o+Math.imul(j,Y)|0,e=e+Math.imul(R,V)|0,n=(n=n+Math.imul(R,H)|0)+Math.imul(k,V)|0,o=o+Math.imul(k,H)|0,e=e+Math.imul(I,W)|0,n=(n=n+Math.imul(I,X)|0)+Math.imul(O,W)|0,o=o+Math.imul(O,X)|0,e=e+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,tt)|0)+Math.imul(_,Q)|0,o=o+Math.imul(_,tt)|0,e=e+Math.imul(M,it)|0,n=(n=n+Math.imul(M,et)|0)+Math.imul(b,it)|0,o=o+Math.imul(b,et)|0,e=e+Math.imul(y,ot)|0,n=(n=n+Math.imul(y,ht)|0)+Math.imul(w,ot)|0,o=o+Math.imul(w,ht)|0,e=e+Math.imul(m,ut)|0,n=(n=n+Math.imul(m,ft)|0)+Math.imul(d,ut)|0,o=o+Math.imul(d,ft)|0;var _t=(f+(e=e+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,pt)|0)+Math.imul(p,lt)|0))<<13)|0;f=((o=o+Math.imul(p,pt)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,e=Math.imul(P,Z),n=(n=Math.imul(P,F))+Math.imul(q,Z)|0,o=Math.imul(q,F),e=e+Math.imul(L,D)|0,n=(n=n+Math.imul(L,Y)|0)+Math.imul($,D)|0,o=o+Math.imul($,Y)|0,e=e+Math.imul(x,V)|0,n=(n=n+Math.imul(x,H)|0)+Math.imul(j,V)|0,o=o+Math.imul(j,H)|0,e=e+Math.imul(R,W)|0,n=(n=n+Math.imul(R,X)|0)+Math.imul(k,W)|0,o=o+Math.imul(k,X)|0,e=e+Math.imul(I,Q)|0,n=(n=n+Math.imul(I,tt)|0)+Math.imul(O,Q)|0,o=o+Math.imul(O,tt)|0,e=e+Math.imul(E,it)|0,n=(n=n+Math.imul(E,et)|0)+Math.imul(_,it)|0,o=o+Math.imul(_,et)|0,e=e+Math.imul(M,ot)|0,n=(n=n+Math.imul(M,ht)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,ht)|0,e=e+Math.imul(y,ut)|0,n=(n=n+Math.imul(y,ft)|0)+Math.imul(w,ut)|0,o=o+Math.imul(w,ft)|0,e=e+Math.imul(m,lt)|0,n=(n=n+Math.imul(m,pt)|0)+Math.imul(d,lt)|0,o=o+Math.imul(d,pt)|0;var At=(f+(e=e+Math.imul(l,mt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(p,mt)|0))<<13)|0;f=((o=o+Math.imul(p,dt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,e=Math.imul(P,D),n=(n=Math.imul(P,Y))+Math.imul(q,D)|0,o=Math.imul(q,Y),e=e+Math.imul(L,V)|0,n=(n=n+Math.imul(L,H)|0)+Math.imul($,V)|0,o=o+Math.imul($,H)|0,e=e+Math.imul(x,W)|0,n=(n=n+Math.imul(x,X)|0)+Math.imul(j,W)|0,o=o+Math.imul(j,X)|0,e=e+Math.imul(R,Q)|0,n=(n=n+Math.imul(R,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,e=e+Math.imul(I,it)|0,n=(n=n+Math.imul(I,et)|0)+Math.imul(O,it)|0,o=o+Math.imul(O,et)|0,e=e+Math.imul(E,ot)|0,n=(n=n+Math.imul(E,ht)|0)+Math.imul(_,ot)|0,o=o+Math.imul(_,ht)|0,e=e+Math.imul(M,ut)|0,n=(n=n+Math.imul(M,ft)|0)+Math.imul(b,ut)|0,o=o+Math.imul(b,ft)|0,e=e+Math.imul(y,lt)|0,n=(n=n+Math.imul(y,pt)|0)+Math.imul(w,lt)|0,o=o+Math.imul(w,pt)|0;var It=(f+(e=e+Math.imul(m,mt)|0)|0)+((8191&(n=(n=n+Math.imul(m,dt)|0)+Math.imul(d,mt)|0))<<13)|0;f=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,e=Math.imul(P,V),n=(n=Math.imul(P,H))+Math.imul(q,V)|0,o=Math.imul(q,H),e=e+Math.imul(L,W)|0,n=(n=n+Math.imul(L,X)|0)+Math.imul($,W)|0,o=o+Math.imul($,X)|0,e=e+Math.imul(x,Q)|0,n=(n=n+Math.imul(x,tt)|0)+Math.imul(j,Q)|0,o=o+Math.imul(j,tt)|0,e=e+Math.imul(R,it)|0,n=(n=n+Math.imul(R,et)|0)+Math.imul(k,it)|0,o=o+Math.imul(k,et)|0,e=e+Math.imul(I,ot)|0,n=(n=n+Math.imul(I,ht)|0)+Math.imul(O,ot)|0,o=o+Math.imul(O,ht)|0,e=e+Math.imul(E,ut)|0,n=(n=n+Math.imul(E,ft)|0)+Math.imul(_,ut)|0,o=o+Math.imul(_,ft)|0,e=e+Math.imul(M,lt)|0,n=(n=n+Math.imul(M,pt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,pt)|0;var Ot=(f+(e=e+Math.imul(y,mt)|0)|0)+((8191&(n=(n=n+Math.imul(y,dt)|0)+Math.imul(w,mt)|0))<<13)|0;f=((o=o+Math.imul(w,dt)|0)+(n>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,e=Math.imul(P,W),n=(n=Math.imul(P,X))+Math.imul(q,W)|0,o=Math.imul(q,X),e=e+Math.imul(L,Q)|0,n=(n=n+Math.imul(L,tt)|0)+Math.imul($,Q)|0,o=o+Math.imul($,tt)|0,e=e+Math.imul(x,it)|0,n=(n=n+Math.imul(x,et)|0)+Math.imul(j,it)|0,o=o+Math.imul(j,et)|0,e=e+Math.imul(R,ot)|0,n=(n=n+Math.imul(R,ht)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,ht)|0,e=e+Math.imul(I,ut)|0,n=(n=n+Math.imul(I,ft)|0)+Math.imul(O,ut)|0,o=o+Math.imul(O,ft)|0,e=e+Math.imul(E,lt)|0,n=(n=n+Math.imul(E,pt)|0)+Math.imul(_,lt)|0,o=o+Math.imul(_,pt)|0;var St=(f+(e=e+Math.imul(M,mt)|0)|0)+((8191&(n=(n=n+Math.imul(M,dt)|0)+Math.imul(b,mt)|0))<<13)|0;f=((o=o+Math.imul(b,dt)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,e=Math.imul(P,Q),n=(n=Math.imul(P,tt))+Math.imul(q,Q)|0,o=Math.imul(q,tt),e=e+Math.imul(L,it)|0,n=(n=n+Math.imul(L,et)|0)+Math.imul($,it)|0,o=o+Math.imul($,et)|0,e=e+Math.imul(x,ot)|0,n=(n=n+Math.imul(x,ht)|0)+Math.imul(j,ot)|0,o=o+Math.imul(j,ht)|0,e=e+Math.imul(R,ut)|0,n=(n=n+Math.imul(R,ft)|0)+Math.imul(k,ut)|0,o=o+Math.imul(k,ft)|0,e=e+Math.imul(I,lt)|0,n=(n=n+Math.imul(I,pt)|0)+Math.imul(O,lt)|0,o=o+Math.imul(O,pt)|0;var Rt=(f+(e=e+Math.imul(E,mt)|0)|0)+((8191&(n=(n=n+Math.imul(E,dt)|0)+Math.imul(_,mt)|0))<<13)|0;f=((o=o+Math.imul(_,dt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,e=Math.imul(P,it),n=(n=Math.imul(P,et))+Math.imul(q,it)|0,o=Math.imul(q,et),e=e+Math.imul(L,ot)|0,n=(n=n+Math.imul(L,ht)|0)+Math.imul($,ot)|0,o=o+Math.imul($,ht)|0,e=e+Math.imul(x,ut)|0,n=(n=n+Math.imul(x,ft)|0)+Math.imul(j,ut)|0,o=o+Math.imul(j,ft)|0,e=e+Math.imul(R,lt)|0,n=(n=n+Math.imul(R,pt)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,pt)|0;var kt=(f+(e=e+Math.imul(I,mt)|0)|0)+((8191&(n=(n=n+Math.imul(I,dt)|0)+Math.imul(O,mt)|0))<<13)|0;f=((o=o+Math.imul(O,dt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,e=Math.imul(P,ot),n=(n=Math.imul(P,ht))+Math.imul(q,ot)|0,o=Math.imul(q,ht),e=e+Math.imul(L,ut)|0,n=(n=n+Math.imul(L,ft)|0)+Math.imul($,ut)|0,o=o+Math.imul($,ft)|0,e=e+Math.imul(x,lt)|0,n=(n=n+Math.imul(x,pt)|0)+Math.imul(j,lt)|0,o=o+Math.imul(j,pt)|0;var Ut=(f+(e=e+Math.imul(R,mt)|0)|0)+((8191&(n=(n=n+Math.imul(R,dt)|0)+Math.imul(k,mt)|0))<<13)|0;f=((o=o+Math.imul(k,dt)|0)+(n>>>13)|0)+(Ut>>>26)|0,Ut&=67108863,e=Math.imul(P,ut),n=(n=Math.imul(P,ft))+Math.imul(q,ut)|0,o=Math.imul(q,ft),e=e+Math.imul(L,lt)|0,n=(n=n+Math.imul(L,pt)|0)+Math.imul($,lt)|0,o=o+Math.imul($,pt)|0;var xt=(f+(e=e+Math.imul(x,mt)|0)|0)+((8191&(n=(n=n+Math.imul(x,dt)|0)+Math.imul(j,mt)|0))<<13)|0;f=((o=o+Math.imul(j,dt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,e=Math.imul(P,lt),n=(n=Math.imul(P,pt))+Math.imul(q,lt)|0,o=Math.imul(q,pt);var jt=(f+(e=e+Math.imul(L,mt)|0)|0)+((8191&(n=(n=n+Math.imul(L,dt)|0)+Math.imul($,mt)|0))<<13)|0;f=((o=o+Math.imul($,dt)|0)+(n>>>13)|0)+(jt>>>26)|0,jt&=67108863;var Tt=(f+(e=Math.imul(P,mt))|0)+((8191&(n=(n=Math.imul(P,dt))+Math.imul(q,mt)|0))<<13)|0;return f=((o=Math.imul(q,dt))+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,u[0]=gt,u[1]=yt,u[2]=wt,u[3]=vt,u[4]=Mt,u[5]=bt,u[6]=Bt,u[7]=Et,u[8]=_t,u[9]=At,u[10]=It,u[11]=Ot,u[12]=St,u[13]=Rt,u[14]=kt,u[15]=Ut,u[16]=xt,u[17]=jt,u[18]=Tt,0!==f&&(u[19]=f,i.length++),i};function m(t,r,i){return(new d).mulp(t,r,i)}function d(t,r){this.x=t,this.y=r}Math.imul||(c=p),o.prototype.mulTo=function(t,r){var i,e=this.length+t.length;return i=10===this.length&&10===t.length?c(this,t,r):e<63?p(this,t,r):e<1024?function(t,r,i){i.negative=r.negative^t.negative,i.length=t.length+r.length;for(var e=0,n=0,o=0;o<i.length-1;o++){var h=n;n=0;for(var s=67108863&e,u=Math.min(o,r.length-1),f=Math.max(0,o-t.length+1);f<=u;f++){var a=o-f,l=(0|t.words[a])*(0|r.words[f]),p=67108863&l;s=67108863&(p=p+s|0),n+=(h=(h=h+(l/67108864|0)|0)+(p>>>26)|0)>>>26,h&=67108863}i.words[o]=s,e=h,h=n}return 0!==e?i.words[o]=e:i.length--,i.strip()}(this,t,r):m(this,t,r),i},d.prototype.makeRBT=function(t){for(var r=new Array(t),i=o.prototype._countBits(t)-1,e=0;e<t;e++)r[e]=this.revBin(e,i,t);return r},d.prototype.revBin=function(t,r,i){if(0===t||t===i-1)return t;for(var e=0,n=0;n<r;n++)e|=(1&t)<<r-n-1,t>>=1;return e},d.prototype.permute=function(t,r,i,e,n,o){for(var h=0;h<o;h++)e[h]=r[t[h]],n[h]=i[t[h]]},d.prototype.transform=function(t,r,i,e,n,o){this.permute(o,t,r,i,e,n);for(var h=1;h<n;h<<=1)for(var s=h<<1,u=Math.cos(2*Math.PI/s),f=Math.sin(2*Math.PI/s),a=0;a<n;a+=s)for(var l=u,p=f,c=0;c<h;c++){var m=i[a+c],d=e[a+c],g=i[a+c+h],y=e[a+c+h],w=l*g-p*y;y=l*y+p*g,g=w,i[a+c]=m+g,e[a+c]=d+y,i[a+c+h]=m-g,e[a+c+h]=d-y,c!==s&&(w=u*l-f*p,p=u*p+f*l,l=w)}},d.prototype.guessLen13b=function(t,r){var i=1|Math.max(r,t),e=1&i,n=0;for(i=i/2|0;i;i>>>=1)n++;return 1<<n+1+e},d.prototype.conjugate=function(t,r,i){if(!(i<=1))for(var e=0;e<i/2;e++){var n=t[e];t[e]=t[i-e-1],t[i-e-1]=n,n=r[e],r[e]=-r[i-e-1],r[i-e-1]=-n}},d.prototype.normalize13b=function(t,r){for(var i=0,e=0;e<r/2;e++){var n=8192*Math.round(t[2*e+1]/r)+Math.round(t[2*e]/r)+i;t[e]=67108863&n,i=n<67108864?0:n/67108864|0}return t},d.prototype.convert13b=function(t,r,i,n){for(var o=0,h=0;h<r;h++)o+=0|t[h],i[2*h]=8191&o,o>>>=13,i[2*h+1]=8191&o,o>>>=13;for(h=2*r;h<n;++h)i[h]=0;e(0===o),e(0==(-8192&o))},d.prototype.stub=function(t){for(var r=new Array(t),i=0;i<t;i++)r[i]=0;return r},d.prototype.mulp=function(t,r,i){var e=2*this.guessLen13b(t.length,r.length),n=this.makeRBT(e),o=this.stub(e),h=new Array(e),s=new Array(e),u=new Array(e),f=new Array(e),a=new Array(e),l=new Array(e),p=i.words;p.length=e,this.convert13b(t.words,t.length,h,e),this.convert13b(r.words,r.length,f,e),this.transform(h,o,s,u,e,n),this.transform(f,o,a,l,e,n);for(var c=0;c<e;c++){var m=s[c]*a[c]-u[c]*l[c];u[c]=s[c]*l[c]+u[c]*a[c],s[c]=m}return this.conjugate(s,u,e),this.transform(s,u,p,o,e,n),this.conjugate(p,o,e),this.normalize13b(p,e),i.negative=t.negative^r.negative,i.length=t.length+r.length,i.strip()},o.prototype.mul=function(t){var r=new o(null);return r.words=new Array(this.length+t.length),this.mulTo(t,r)},o.prototype.mulf=function(t){var r=new o(null);return r.words=new Array(this.length+t.length),m(this,t,r)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){e("number"==typeof t),e(t<67108864);for(var r=0,i=0;i<this.length;i++){var n=(0|this.words[i])*t,o=(67108863&n)+(67108863&r);r>>=26,r+=n/67108864|0,r+=o>>>26,this.words[i]=67108863&o}return 0!==r&&(this.words[i]=r,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var r=function(t){for(var r=new Array(t.bitLength()),i=0;i<r.length;i++){var e=i/26|0,n=i%26;r[i]=(t.words[e]&1<<n)>>>n}return r}(t);if(0===r.length)return new o(1);for(var i=this,e=0;e<r.length&&0===r[e];e++,i=i.sqr());if(++e<r.length)for(var n=i.sqr();e<r.length;e++,n=n.sqr())0!==r[e]&&(i=i.mul(n));return i},o.prototype.iushln=function(t){e("number"==typeof t&&t>=0);var r,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var h=0;for(r=0;r<this.length;r++){var s=this.words[r]&o,u=(0|this.words[r])-s<<i;this.words[r]=u|h,h=s>>>26-i}h&&(this.words[r]=h,this.length++)}if(0!==n){for(r=this.length-1;r>=0;r--)this.words[r+n]=this.words[r];for(r=0;r<n;r++)this.words[r]=0;this.length+=n}return this.strip()},o.prototype.ishln=function(t){return e(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,r,i){var n;e("number"==typeof t&&t>=0),n=r?(r-r%26)/26:0;var o=t%26,h=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,u=i;if(n-=h,n=Math.max(0,n),u){for(var f=0;f<h;f++)u.words[f]=this.words[f];u.length=h}if(0===h);else if(this.length>h)for(this.length-=h,f=0;f<this.length;f++)this.words[f]=this.words[f+h];else this.words[0]=0,this.length=1;var a=0;for(f=this.length-1;f>=0&&(0!==a||f>=n);f--){var l=0|this.words[f];this.words[f]=a<<26-o|l>>>o,a=l&s}return u&&0!==a&&(u.words[u.length++]=a),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,r,i){return e(0===this.negative),this.iushrn(t,r,i)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){e("number"==typeof t&&t>=0);var r=t%26,i=(t-r)/26,n=1<<r;return!(this.length<=i)&&!!(this.words[i]&n)},o.prototype.imaskn=function(t){e("number"==typeof t&&t>=0);var r=t%26,i=(t-r)/26;if(e(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==r&&i++,this.length=Math.min(i,this.length),0!==r){var n=67108863^67108863>>>r<<r;this.words[this.length-1]&=n}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return e("number"==typeof t),e(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var r=0;r<this.length&&this.words[r]>=67108864;r++)this.words[r]-=67108864,r===this.length-1?this.words[r+1]=1:this.words[r+1]++;return this.length=Math.max(this.length,r+1),this},o.prototype.isubn=function(t){if(e("number"==typeof t),e(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var r=0;r<this.length&&this.words[r]<0;r++)this.words[r]+=67108864,this.words[r+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,r,i){var n,o,h=t.length+i;this._expand(h);var s=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+s;var u=(0|t.words[n])*r;s=((o-=67108863&u)>>26)-(u/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)s=(o=(0|this.words[n+i])+s)>>26,this.words[n+i]=67108863&o;if(0===s)return this.strip();for(e(-1===s),s=0,n=0;n<this.length;n++)s=(o=-(0|this.words[n])+s)>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,r){var i=(this.length,t.length),e=this.clone(),n=t,h=0|n.words[n.length-1];0!==(i=26-this._countBits(h))&&(n=n.ushln(i),e.iushln(i),h=0|n.words[n.length-1]);var s,u=e.length-n.length;if("mod"!==r){(s=new o(null)).length=u+1,s.words=new Array(s.length);for(var f=0;f<s.length;f++)s.words[f]=0}var a=e.clone()._ishlnsubmul(n,1,u);0===a.negative&&(e=a,s&&(s.words[u]=1));for(var l=u-1;l>=0;l--){var p=67108864*(0|e.words[n.length+l])+(0|e.words[n.length+l-1]);for(p=Math.min(p/h|0,67108863),e._ishlnsubmul(n,p,l);0!==e.negative;)p--,e.negative=0,e._ishlnsubmul(n,1,l),e.isZero()||(e.negative^=1);s&&(s.words[l]=p)}return s&&s.strip(),e.strip(),"div"!==r&&0!==i&&e.iushrn(i),{div:s||null,mod:e}},o.prototype.divmod=function(t,r,i){return e(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,r),"mod"!==r&&(n=s.div.neg()),"div"!==r&&(h=s.mod.neg(),i&&0!==h.negative&&h.iadd(t)),{div:n,mod:h}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),r),"mod"!==r&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),r),"div"!==r&&(h=s.mod.neg(),i&&0!==h.negative&&h.isub(t)),{div:s.div,mod:h}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===r?{div:this.divn(t.words[0]),mod:null}:"mod"===r?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,r);var n,h,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var r=this.divmod(t);if(r.mod.isZero())return r.div;var i=0!==r.div.negative?r.mod.isub(t):r.mod,e=t.ushrn(1),n=t.andln(1),o=i.cmp(e);return o<0||1===n&&0===o?r.div:0!==r.div.negative?r.div.isubn(1):r.div.iaddn(1)},o.prototype.modn=function(t){e(t<=67108863);for(var r=(1<<26)%t,i=0,n=this.length-1;n>=0;n--)i=(r*i+(0|this.words[n]))%t;return i},o.prototype.idivn=function(t){e(t<=67108863);for(var r=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*r;this.words[i]=n/t|0,r=n%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){e(0===t.negative),e(!t.isZero());var r=this,i=t.clone();r=0!==r.negative?r.umod(t):r.clone();for(var n=new o(1),h=new o(0),s=new o(0),u=new o(1),f=0;r.isEven()&&i.isEven();)r.iushrn(1),i.iushrn(1),++f;for(var a=i.clone(),l=r.clone();!r.isZero();){for(var p=0,c=1;0==(r.words[0]&c)&&p<26;++p,c<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(n.isOdd()||h.isOdd())&&(n.iadd(a),h.isub(l)),n.iushrn(1),h.iushrn(1);for(var m=0,d=1;0==(i.words[0]&d)&&m<26;++m,d<<=1);if(m>0)for(i.iushrn(m);m-- >0;)(s.isOdd()||u.isOdd())&&(s.iadd(a),u.isub(l)),s.iushrn(1),u.iushrn(1);r.cmp(i)>=0?(r.isub(i),n.isub(s),h.isub(u)):(i.isub(r),s.isub(n),u.isub(h))}return{a:s,b:u,gcd:i.iushln(f)}},o.prototype._invmp=function(t){e(0===t.negative),e(!t.isZero());var r=this,i=t.clone();r=0!==r.negative?r.umod(t):r.clone();for(var n,h=new o(1),s=new o(0),u=i.clone();r.cmpn(1)>0&&i.cmpn(1)>0;){for(var f=0,a=1;0==(r.words[0]&a)&&f<26;++f,a<<=1);if(f>0)for(r.iushrn(f);f-- >0;)h.isOdd()&&h.iadd(u),h.iushrn(1);for(var l=0,p=1;0==(i.words[0]&p)&&l<26;++l,p<<=1);if(l>0)for(i.iushrn(l);l-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);r.cmp(i)>=0?(r.isub(i),h.isub(s)):(i.isub(r),s.isub(h))}return(n=0===r.cmpn(1)?h:s).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var r=this.clone(),i=t.clone();r.negative=0,i.negative=0;for(var e=0;r.isEven()&&i.isEven();e++)r.iushrn(1),i.iushrn(1);for(;;){for(;r.isEven();)r.iushrn(1);for(;i.isEven();)i.iushrn(1);var n=r.cmp(i);if(n<0){var o=r;r=i,i=o}else if(0===n||0===i.cmpn(1))break;r.isub(i)}return i.iushln(e)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){e("number"==typeof t);var r=t%26,i=(t-r)/26,n=1<<r;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,h=i;0!==o&&h<this.length;h++){var s=0|this.words[h];o=(s+=o)>>>26,s&=67108863,this.words[h]=s}return 0!==o&&(this.words[h]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var r,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)r=1;else{i&&(t=-t),e(t<=67108863,"Number is too big");var n=0|this.words[0];r=n===t?0:n<t?-1:1}return 0!==this.negative?0|-r:r},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var r=this.ucmp(t);return 0!==this.negative?0|-r:r},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var r=0,i=this.length-1;i>=0;i--){var e=0|this.words[i],n=0|t.words[i];if(e!==n){e<n?r=-1:e>n&&(r=1);break}}return r},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new B(t)},o.prototype.toRed=function(t){return e(!this.red,"Already a number in reduction context"),e(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return e(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return e(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return e(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return e(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return e(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return e(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return e(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return e(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return e(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return e(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return e(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return e(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return e(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return e(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return e(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function y(t,r){this.name=t,this.p=new o(r,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function w(){y.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function v(){y.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function M(){y.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function b(){y.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function B(t){if("string"==typeof t){var r=o._prime(t);this.m=r.p,this.prime=r}else e(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function E(t){B.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}y.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},y.prototype.ireduce=function(t){var r,i=t;do{this.split(i,this.tmp),r=(i=(i=this.imulK(i)).iadd(this.tmp)).bitLength()}while(r>this.n);var e=r<this.n?-1:i.ucmp(this.p);return 0===e?(i.words[0]=0,i.length=1):e>0?i.isub(this.p):i.strip(),i},y.prototype.split=function(t,r){t.iushrn(this.n,0,r)},y.prototype.imulK=function(t){return t.imul(this.k)},n(w,y),w.prototype.split=function(t,r){for(var i=4194303,e=Math.min(t.length,9),n=0;n<e;n++)r.words[n]=t.words[n];if(r.length=e,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(r.words[r.length++]=o&i,n=10;n<t.length;n++){var h=0|t.words[n];t.words[n-10]=(h&i)<<4|o>>>22,o=h}o>>>=22,t.words[n-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},w.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var r=0,i=0;i<t.length;i++){var e=0|t.words[i];r+=977*e,t.words[i]=67108863&r,r=64*e+(r/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(v,y),n(M,y),n(b,y),b.prototype.imulK=function(t){for(var r=0,i=0;i<t.length;i++){var e=19*(0|t.words[i])+r,n=67108863&e;e>>>=26,t.words[i]=n,r=e}return 0!==r&&(t.words[t.length++]=r),t},o._prime=function(t){if(g[t])return g[t];var r;if("k256"===t)r=new w;else if("p224"===t)r=new v;else if("p192"===t)r=new M;else{if("p25519"!==t)throw new Error("Unknown prime "+t);r=new b}return g[t]=r,r},B.prototype._verify1=function(t){e(0===t.negative,"red works only with positives"),e(t.red,"red works only with red numbers")},B.prototype._verify2=function(t,r){e(0==(t.negative|r.negative),"red works only with positives"),e(t.red&&t.red===r.red,"red works only with red numbers")},B.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},B.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},B.prototype.add=function(t,r){this._verify2(t,r);var i=t.add(r);return i.cmp(this.m)>=0&&i.isub(this.m),i._forceRed(this)},B.prototype.iadd=function(t,r){this._verify2(t,r);var i=t.iadd(r);return i.cmp(this.m)>=0&&i.isub(this.m),i},B.prototype.sub=function(t,r){this._verify2(t,r);var i=t.sub(r);return i.cmpn(0)<0&&i.iadd(this.m),i._forceRed(this)},B.prototype.isub=function(t,r){this._verify2(t,r);var i=t.isub(r);return i.cmpn(0)<0&&i.iadd(this.m),i},B.prototype.shl=function(t,r){return this._verify1(t),this.imod(t.ushln(r))},B.prototype.imul=function(t,r){return this._verify2(t,r),this.imod(t.imul(r))},B.prototype.mul=function(t,r){return this._verify2(t,r),this.imod(t.mul(r))},B.prototype.isqr=function(t){return this.imul(t,t.clone())},B.prototype.sqr=function(t){return this.mul(t,t)},B.prototype.sqrt=function(t){if(t.isZero())return t.clone();var r=this.m.andln(3);if(e(r%2==1),3===r){var i=this.m.add(new o(1)).iushrn(2);return this.pow(t,i)}for(var n=this.m.subn(1),h=0;!n.isZero()&&0===n.andln(1);)h++,n.iushrn(1);e(!n.isZero());var s=new o(1).toRed(this),u=s.redNeg(),f=this.m.subn(1).iushrn(1),a=this.m.bitLength();for(a=new o(2*a*a).toRed(this);0!==this.pow(a,f).cmp(u);)a.redIAdd(u);for(var l=this.pow(a,n),p=this.pow(t,n.addn(1).iushrn(1)),c=this.pow(t,n),m=h;0!==c.cmp(s);){for(var d=c,g=0;0!==d.cmp(s);g++)d=d.redSqr();e(g<m);var y=this.pow(l,new o(1).iushln(m-g-1));p=p.redMul(y),l=y.redSqr(),c=c.redMul(l),m=g}return p},B.prototype.invm=function(t){var r=t._invmp(this.m);return 0!==r.negative?(r.negative=0,this.imod(r).redNeg()):this.imod(r)},B.prototype.pow=function(t,r){if(r.isZero())return new o(1);if(0===r.cmpn(1))return t.clone();var i=new Array(16);i[0]=new o(1).toRed(this),i[1]=t;for(var e=2;e<i.length;e++)i[e]=this.mul(i[e-1],t);var n=i[0],h=0,s=0,u=r.bitLength()%26;for(0===u&&(u=26),e=r.length-1;e>=0;e--){for(var f=r.words[e],a=u-1;a>=0;a--){var l=f>>a&1;n!==i[0]&&(n=this.sqr(n)),0!==l||0!==h?(h<<=1,h|=l,(4===++s||0===e&&0===a)&&(n=this.mul(n,i[h]),s=0,h=0)):s=0}u=26}return n},B.prototype.convertTo=function(t){var r=t.umod(this.m);return r===t?r.clone():r},B.prototype.convertFrom=function(t){var r=t.clone();return r.red=null,r},o.mont=function(t){return new E(t)},n(E,B),E.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},E.prototype.convertFrom=function(t){var r=this.imod(t.mul(this.rinv));return r.red=null,r},E.prototype.imul=function(t,r){if(t.isZero()||r.isZero())return t.words[0]=0,t.length=1,t;var i=t.imul(r),e=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(e).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},E.prototype.mul=function(t,r){if(t.isZero()||r.isZero())return new o(0)._forceRed(this);var i=t.mul(r),e=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(e).iushrn(this.shift),h=n;return n.cmp(this.m)>=0?h=n.isub(this.m):n.cmpn(0)<0&&(h=n.iadd(this.m)),h._forceRed(this)},E.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=i.nmd(t),this)},83206:function(t,r,i){var e=i(45033),n=i(49604);t.exports=function(t){if("string"==typeof t||"number"==typeof t){var r=new e(1),i=String(t).toLowerCase().trim(),o="0x"===i.substr(0,2)||"-0x"===i.substr(0,3),h=n(i);if("-"===h.substr(0,1)&&(h=n(h.slice(1)),r=new e(-1,10)),!(h=""===h?"0":h).match(/^-?[0-9]+$/)&&h.match(/^[0-9A-Fa-f]+$/)||h.match(/^[a-fA-F]+$/)||!0===o&&h.match(/^[0-9A-Fa-f]+$/))return new e(h,16).mul(r);if((h.match(/^-?[0-9]+$/)||""===h)&&!1===o)return new e(h,10).mul(r)}else if("object"==typeof t&&t.toString&&!t.pop&&!t.push&&t.toString(10).match(/^-?[0-9]+$/)&&(t.mul||t.dividedToIntegerBy))return new e(t.toString(10),10);throw new Error("[number-to-bn] while converting number "+JSON.stringify(t)+" to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.")}},27418:function(t){"use strict";var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,e=Object.prototype.propertyIsEnumerable;function n(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var r={},i=0;i<10;i++)r["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(r).map((function(t){return r[t]})).join(""))return!1;var e={};return"abcdefghijklmnopqrst".split("").forEach((function(t){e[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},e)).join("")}catch(t){return!1}}()?Object.assign:function(t,o){for(var h,s,u=n(t),f=1;f<arguments.length;f++){for(var a in h=Object(arguments[f]))i.call(h,a)&&(u[a]=h[a]);if(r){s=r(h);for(var l=0;l<s.length;l++)e.call(h,s[l])&&(u[s[l]]=h[s[l]])}}return u}},24244:function(t){"use strict";var r=function(t){return t!=t};t.exports=function(t,i){return 0===t&&0===i?1/t==1/i:t===i||!(!r(t)||!r(i))}},20609:function(t,r,i){"use strict";var e=i(4289),n=i(55559),o=i(24244),h=i(75624),s=i(52281),u=n(h(),Object);e(u,{getPolyfill:h,implementation:o,shim:s}),t.exports=u},75624:function(t,r,i){"use strict";var e=i(24244);t.exports=function(){return"function"==typeof Object.is?Object.is:e}},52281:function(t,r,i){"use strict";var e=i(75624),n=i(4289);t.exports=function(){var t=e();return n(Object,{is:t},{is:function(){return Object.is!==t}}),t}},18987:function(t,r,i){"use strict";var e;if(!Object.keys){var n=Object.prototype.hasOwnProperty,o=Object.prototype.toString,h=i(21414),s=Object.prototype.propertyIsEnumerable,u=!s.call({toString:null},"toString"),f=s.call((function(){}),"prototype"),a=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],l=function(t){var r=t.constructor;return r&&r.prototype===t},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},c=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!p["$"+t]&&n.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{l(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();e=function(t){var r=null!==t&&"object"==typeof t,i="[object Function]"===o.call(t),e=h(t),s=r&&"[object String]"===o.call(t),p=[];if(!r&&!i&&!e)throw new TypeError("Object.keys called on a non-object");var m=f&&i;if(s&&t.length>0&&!n.call(t,0))for(var d=0;d<t.length;++d)p.push(String(d));if(e&&t.length>0)for(var g=0;g<t.length;++g)p.push(String(g));else for(var y in t)m&&"prototype"===y||!n.call(t,y)||p.push(String(y));if(u)for(var w=function(t){if("undefined"==typeof window||!c)return l(t);try{return l(t)}catch(t){return!1}}(t),v=0;v<a.length;++v)w&&"constructor"===a[v]||!n.call(t,a[v])||p.push(a[v]);return p}}t.exports=e},82215:function(t,r,i){"use strict";var e=Array.prototype.slice,n=i(21414),o=Object.keys,h=o?function(t){return o(t)}:i(18987),s=Object.keys;h.shim=function(){if(Object.keys){var t=function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2);t||(Object.keys=function(t){return n(t)?s(e.call(t)):s(t)})}else Object.keys=h;return Object.keys||h},t.exports=h},21414:function(t){"use strict";var r=Object.prototype.toString;t.exports=function(t){var i=r.call(t),e="[object Arguments]"===i;return e||(e="[object Array]"!==i&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===r.call(t.callee)),e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
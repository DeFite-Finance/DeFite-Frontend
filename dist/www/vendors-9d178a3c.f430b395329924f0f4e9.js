(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[4625],{13864:function(t,r,e){!function(t,r){"use strict";function i(t,r){if(!t)throw new Error(r||"Assertion failed")}function n(t,r){t.super_=r;var e=function(){};e.prototype=r.prototype,t.prototype=new e,t.prototype.constructor=t}function o(t,r,e){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==r&&"be"!==r||(e=r,r=10),this._init(t||0,r||10,e||"be"))}var s;"object"==typeof t?t.exports=o:r.BN=o,o.BN=o,o.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:e(62859).Buffer}catch(t){}function u(t,r){var e=t.charCodeAt(r);return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:void i(!1,"Invalid character in "+t)}function h(t,r,e){var i=u(t,e);return e-1>=r&&(i|=u(t,e-1)<<4),i}function a(t,r,e,n){for(var o=0,s=0,u=Math.min(t.length,e),h=r;h<u;h++){var a=t.charCodeAt(h)-48;o*=n,s=a>=49?a-49+10:a>=17?a-17+10:a,i(a>=0&&s<n,"Invalid character"),o+=s}return o}function f(t,r){t.words=r.words,t.length=r.length,t.negative=r.negative,t.red=r.red}if(o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,r){return t.cmp(r)>0?t:r},o.min=function(t,r){return t.cmp(r)<0?t:r},o.prototype._init=function(t,r,e){if("number"==typeof t)return this._initNumber(t,r,e);if("object"==typeof t)return this._initArray(t,r,e);"hex"===r&&(r=16),i(r===(0|r)&&r>=2&&r<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(n++,this.negative=1),n<t.length&&(16===r?this._parseHex(t,n,e):(this._parseBase(t,r,n),"le"===e&&this._initArray(this.toArray(),r,e)))},o.prototype._initNumber=function(t,r,e){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(i(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===e&&this._initArray(this.toArray(),r,e)},o.prototype._initArray=function(t,r,e){if(i("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,s,u=0;if("be"===e)for(n=t.length-1,o=0;n>=0;n-=3)s=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=s<<u&67108863,this.words[o+1]=s>>>26-u&67108863,(u+=24)>=26&&(u-=26,o++);else if("le"===e)for(n=0,o=0;n<t.length;n+=3)s=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=s<<u&67108863,this.words[o+1]=s>>>26-u&67108863,(u+=24)>=26&&(u-=26,o++);return this._strip()},o.prototype._parseHex=function(t,r,e){this.length=Math.ceil((t.length-r)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var n,o=0,s=0;if("be"===e)for(i=t.length-1;i>=r;i-=2)n=h(t,r,i)<<o,this.words[s]|=67108863&n,o>=18?(o-=18,s+=1,this.words[s]|=n>>>26):o+=8;else for(i=(t.length-r)%2==0?r+1:r;i<t.length;i+=2)n=h(t,r,i)<<o,this.words[s]|=67108863&n,o>=18?(o-=18,s+=1,this.words[s]|=n>>>26):o+=8;this._strip()},o.prototype._parseBase=function(t,r,e){this.words=[0],this.length=1;for(var i=0,n=1;n<=67108863;n*=r)i++;i--,n=n/r|0;for(var o=t.length-e,s=o%i,u=Math.min(o,o-s)+e,h=0,f=e;f<u;f+=i)h=a(t,f,f+i,r),this.imuln(n),this.words[0]+h<67108864?this.words[0]+=h:this._iaddn(h);if(0!==s){var l=1;for(h=a(t,f,t.length,r),f=0;f<s;f++)l*=r;this.imuln(l),this.words[0]+h<67108864?this.words[0]+=h:this._iaddn(h)}this._strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var r=0;r<this.length;r++)t.words[r]=this.words[r];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype._move=function(t){f(t,this)},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{o.prototype[Symbol.for("nodejs.util.inspect.custom")]=l}catch(t){o.prototype.inspect=l}else o.prototype.inspect=l;function l(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var d=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],m=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];o.prototype.toString=function(t,r){var e;if(r=0|r||1,16===(t=t||10)||"hex"===t){e="";for(var n=0,o=0,s=0;s<this.length;s++){var u=this.words[s],h=(16777215&(u<<n|o)).toString(16);e=0!==(o=u>>>24-n&16777215)||s!==this.length-1?d[6-h.length]+h+e:h+e,(n+=2)>=26&&(n-=26,s--)}for(0!==o&&(e=o.toString(16)+e);e.length%r!=0;)e="0"+e;return 0!==this.negative&&(e="-"+e),e}if(t===(0|t)&&t>=2&&t<=36){var a=c[t],f=m[t];e="";var l=this.clone();for(l.negative=0;!l.isZero();){var p=l.modrn(f).toString(t);e=(l=l.idivn(f)).isZero()?p+e:d[a-p.length]+p+e}for(this.isZero()&&(e="0"+e);e.length%r!=0;)e="0"+e;return 0!==this.negative&&(e="-"+e),e}i(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&i(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16,2)},s&&(o.prototype.toBuffer=function(t,r){return this.toArrayLike(s,t,r)}),o.prototype.toArray=function(t,r){return this.toArrayLike(Array,t,r)};function p(t,r,e){e.negative=r.negative^t.negative;var i=t.length+r.length|0;e.length=i,i=i-1|0;var n=0|t.words[0],o=0|r.words[0],s=n*o,u=67108863&s,h=s/67108864|0;e.words[0]=u;for(var a=1;a<i;a++){for(var f=h>>>26,l=67108863&h,d=Math.min(a,r.length-1),c=Math.max(0,a-t.length+1);c<=d;c++){var m=a-c|0;f+=(s=(n=0|t.words[m])*(o=0|r.words[c])+l)/67108864|0,l=67108863&s}e.words[a]=0|l,h=0|f}return 0!==h?e.words[a]=0|h:e.length--,e._strip()}o.prototype.toArrayLike=function(t,r,e){this._strip();var n=this.byteLength(),o=e||Math.max(1,n);i(n<=o,"byte array longer than desired length"),i(o>0,"Requested array length <= 0");var s=function(t,r){return t.allocUnsafe?t.allocUnsafe(r):new t(r)}(t,o);return this["_toArrayLike"+("le"===r?"LE":"BE")](s,n),s},o.prototype._toArrayLikeLE=function(t,r){for(var e=0,i=0,n=0,o=0;n<this.length;n++){var s=this.words[n]<<o|i;t[e++]=255&s,e<t.length&&(t[e++]=s>>8&255),e<t.length&&(t[e++]=s>>16&255),6===o?(e<t.length&&(t[e++]=s>>24&255),i=0,o=0):(i=s>>>24,o+=2)}if(e<t.length)for(t[e++]=i;e<t.length;)t[e++]=0},o.prototype._toArrayLikeBE=function(t,r){for(var e=t.length-1,i=0,n=0,o=0;n<this.length;n++){var s=this.words[n]<<o|i;t[e--]=255&s,e>=0&&(t[e--]=s>>8&255),e>=0&&(t[e--]=s>>16&255),6===o?(e>=0&&(t[e--]=s>>24&255),i=0,o=0):(i=s>>>24,o+=2)}if(e>=0)for(t[e--]=i;e>=0;)t[e--]=0},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var r=t,e=0;return r>=4096&&(e+=13,r>>>=13),r>=64&&(e+=7,r>>>=7),r>=8&&(e+=4,r>>>=4),r>=2&&(e+=2,r>>>=2),e+r},o.prototype._zeroBits=function(t){if(0===t)return 26;var r=t,e=0;return 0==(8191&r)&&(e+=13,r>>>=13),0==(127&r)&&(e+=7,r>>>=7),0==(15&r)&&(e+=4,r>>>=4),0==(3&r)&&(e+=2,r>>>=2),0==(1&r)&&e++,e},o.prototype.bitLength=function(){var t=this.words[this.length-1],r=this._countBits(t);return 26*(this.length-1)+r},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,r=0;r<this.length;r++){var e=this._zeroBits(this.words[r]);if(t+=e,26!==e)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]|t.words[r];return this._strip()},o.prototype.ior=function(t){return i(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var r;r=this.length>t.length?t:this;for(var e=0;e<r.length;e++)this.words[e]=this.words[e]&t.words[e];return this.length=r.length,this._strip()},o.prototype.iand=function(t){return i(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var r,e;this.length>t.length?(r=this,e=t):(r=t,e=this);for(var i=0;i<e.length;i++)this.words[i]=r.words[i]^e.words[i];if(this!==r)for(;i<r.length;i++)this.words[i]=r.words[i];return this.length=r.length,this._strip()},o.prototype.ixor=function(t){return i(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){i("number"==typeof t&&t>=0);var r=0|Math.ceil(t/26),e=t%26;this._expand(r),e>0&&r--;for(var n=0;n<r;n++)this.words[n]=67108863&~this.words[n];return e>0&&(this.words[n]=~this.words[n]&67108863>>26-e),this._strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,r){i("number"==typeof t&&t>=0);var e=t/26|0,n=t%26;return this._expand(e+1),this.words[e]=r?this.words[e]|1<<n:this.words[e]&~(1<<n),this._strip()},o.prototype.iadd=function(t){var r,e,i;if(0!==this.negative&&0===t.negative)return this.negative=0,r=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,r=this.isub(t),t.negative=1,r._normSign();this.length>t.length?(e=this,i=t):(e=t,i=this);for(var n=0,o=0;o<i.length;o++)r=(0|e.words[o])+(0|i.words[o])+n,this.words[o]=67108863&r,n=r>>>26;for(;0!==n&&o<e.length;o++)r=(0|e.words[o])+n,this.words[o]=67108863&r,n=r>>>26;if(this.length=e.length,0!==n)this.words[this.length]=n,this.length++;else if(e!==this)for(;o<e.length;o++)this.words[o]=e.words[o];return this},o.prototype.add=function(t){var r;return 0!==t.negative&&0===this.negative?(t.negative=0,r=this.sub(t),t.negative^=1,r):0===t.negative&&0!==this.negative?(this.negative=0,r=t.sub(this),this.negative=1,r):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var r=this.iadd(t);return t.negative=1,r._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var e,i,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(e=this,i=t):(e=t,i=this);for(var o=0,s=0;s<i.length;s++)o=(r=(0|e.words[s])-(0|i.words[s])+o)>>26,this.words[s]=67108863&r;for(;0!==o&&s<e.length;s++)o=(r=(0|e.words[s])+o)>>26,this.words[s]=67108863&r;if(0===o&&s<e.length&&e!==this)for(;s<e.length;s++)this.words[s]=e.words[s];return this.length=Math.max(this.length,s),e!==this&&(this.negative=1),this._strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var g=function(t,r,e){var i,n,o,s=t.words,u=r.words,h=e.words,a=0,f=0|s[0],l=8191&f,d=f>>>13,c=0|s[1],m=8191&c,p=c>>>13,g=0|s[2],v=8191&g,y=g>>>13,M=0|s[3],w=8191&M,b=M>>>13,_=0|s[4],A=8191&_,x=_>>>13,B=0|s[5],S=8191&B,k=B>>>13,T=0|s[6],E=8191&T,N=T>>>13,P=0|s[7],I=8191&P,L=P>>>13,C=0|s[8],R=8191&C,O=C>>>13,H=0|s[9],K=8191&H,j=H>>>13,Z=0|u[0],q=8191&Z,z=Z>>>13,U=0|u[1],F=8191&U,V=U>>>13,D=0|u[2],X=8191&D,G=D>>>13,J=0|u[3],Y=8191&J,W=J>>>13,$=0|u[4],Q=8191&$,tt=$>>>13,rt=0|u[5],et=8191&rt,it=rt>>>13,nt=0|u[6],ot=8191&nt,st=nt>>>13,ut=0|u[7],ht=8191&ut,at=ut>>>13,ft=0|u[8],lt=8191&ft,dt=ft>>>13,ct=0|u[9],mt=8191&ct,pt=ct>>>13;e.negative=t.negative^r.negative,e.length=19;var gt=(a+(i=Math.imul(l,q))|0)+((8191&(n=(n=Math.imul(l,z))+Math.imul(d,q)|0))<<13)|0;a=((o=Math.imul(d,z))+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,i=Math.imul(m,q),n=(n=Math.imul(m,z))+Math.imul(p,q)|0,o=Math.imul(p,z);var vt=(a+(i=i+Math.imul(l,F)|0)|0)+((8191&(n=(n=n+Math.imul(l,V)|0)+Math.imul(d,F)|0))<<13)|0;a=((o=o+Math.imul(d,V)|0)+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,i=Math.imul(v,q),n=(n=Math.imul(v,z))+Math.imul(y,q)|0,o=Math.imul(y,z),i=i+Math.imul(m,F)|0,n=(n=n+Math.imul(m,V)|0)+Math.imul(p,F)|0,o=o+Math.imul(p,V)|0;var yt=(a+(i=i+Math.imul(l,X)|0)|0)+((8191&(n=(n=n+Math.imul(l,G)|0)+Math.imul(d,X)|0))<<13)|0;a=((o=o+Math.imul(d,G)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,i=Math.imul(w,q),n=(n=Math.imul(w,z))+Math.imul(b,q)|0,o=Math.imul(b,z),i=i+Math.imul(v,F)|0,n=(n=n+Math.imul(v,V)|0)+Math.imul(y,F)|0,o=o+Math.imul(y,V)|0,i=i+Math.imul(m,X)|0,n=(n=n+Math.imul(m,G)|0)+Math.imul(p,X)|0,o=o+Math.imul(p,G)|0;var Mt=(a+(i=i+Math.imul(l,Y)|0)|0)+((8191&(n=(n=n+Math.imul(l,W)|0)+Math.imul(d,Y)|0))<<13)|0;a=((o=o+Math.imul(d,W)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,i=Math.imul(A,q),n=(n=Math.imul(A,z))+Math.imul(x,q)|0,o=Math.imul(x,z),i=i+Math.imul(w,F)|0,n=(n=n+Math.imul(w,V)|0)+Math.imul(b,F)|0,o=o+Math.imul(b,V)|0,i=i+Math.imul(v,X)|0,n=(n=n+Math.imul(v,G)|0)+Math.imul(y,X)|0,o=o+Math.imul(y,G)|0,i=i+Math.imul(m,Y)|0,n=(n=n+Math.imul(m,W)|0)+Math.imul(p,Y)|0,o=o+Math.imul(p,W)|0;var wt=(a+(i=i+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;a=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,i=Math.imul(S,q),n=(n=Math.imul(S,z))+Math.imul(k,q)|0,o=Math.imul(k,z),i=i+Math.imul(A,F)|0,n=(n=n+Math.imul(A,V)|0)+Math.imul(x,F)|0,o=o+Math.imul(x,V)|0,i=i+Math.imul(w,X)|0,n=(n=n+Math.imul(w,G)|0)+Math.imul(b,X)|0,o=o+Math.imul(b,G)|0,i=i+Math.imul(v,Y)|0,n=(n=n+Math.imul(v,W)|0)+Math.imul(y,Y)|0,o=o+Math.imul(y,W)|0,i=i+Math.imul(m,Q)|0,n=(n=n+Math.imul(m,tt)|0)+Math.imul(p,Q)|0,o=o+Math.imul(p,tt)|0;var bt=(a+(i=i+Math.imul(l,et)|0)|0)+((8191&(n=(n=n+Math.imul(l,it)|0)+Math.imul(d,et)|0))<<13)|0;a=((o=o+Math.imul(d,it)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,i=Math.imul(E,q),n=(n=Math.imul(E,z))+Math.imul(N,q)|0,o=Math.imul(N,z),i=i+Math.imul(S,F)|0,n=(n=n+Math.imul(S,V)|0)+Math.imul(k,F)|0,o=o+Math.imul(k,V)|0,i=i+Math.imul(A,X)|0,n=(n=n+Math.imul(A,G)|0)+Math.imul(x,X)|0,o=o+Math.imul(x,G)|0,i=i+Math.imul(w,Y)|0,n=(n=n+Math.imul(w,W)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,W)|0,i=i+Math.imul(v,Q)|0,n=(n=n+Math.imul(v,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,i=i+Math.imul(m,et)|0,n=(n=n+Math.imul(m,it)|0)+Math.imul(p,et)|0,o=o+Math.imul(p,it)|0;var _t=(a+(i=i+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,st)|0)+Math.imul(d,ot)|0))<<13)|0;a=((o=o+Math.imul(d,st)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,i=Math.imul(I,q),n=(n=Math.imul(I,z))+Math.imul(L,q)|0,o=Math.imul(L,z),i=i+Math.imul(E,F)|0,n=(n=n+Math.imul(E,V)|0)+Math.imul(N,F)|0,o=o+Math.imul(N,V)|0,i=i+Math.imul(S,X)|0,n=(n=n+Math.imul(S,G)|0)+Math.imul(k,X)|0,o=o+Math.imul(k,G)|0,i=i+Math.imul(A,Y)|0,n=(n=n+Math.imul(A,W)|0)+Math.imul(x,Y)|0,o=o+Math.imul(x,W)|0,i=i+Math.imul(w,Q)|0,n=(n=n+Math.imul(w,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,i=i+Math.imul(v,et)|0,n=(n=n+Math.imul(v,it)|0)+Math.imul(y,et)|0,o=o+Math.imul(y,it)|0,i=i+Math.imul(m,ot)|0,n=(n=n+Math.imul(m,st)|0)+Math.imul(p,ot)|0,o=o+Math.imul(p,st)|0;var At=(a+(i=i+Math.imul(l,ht)|0)|0)+((8191&(n=(n=n+Math.imul(l,at)|0)+Math.imul(d,ht)|0))<<13)|0;a=((o=o+Math.imul(d,at)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,i=Math.imul(R,q),n=(n=Math.imul(R,z))+Math.imul(O,q)|0,o=Math.imul(O,z),i=i+Math.imul(I,F)|0,n=(n=n+Math.imul(I,V)|0)+Math.imul(L,F)|0,o=o+Math.imul(L,V)|0,i=i+Math.imul(E,X)|0,n=(n=n+Math.imul(E,G)|0)+Math.imul(N,X)|0,o=o+Math.imul(N,G)|0,i=i+Math.imul(S,Y)|0,n=(n=n+Math.imul(S,W)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,W)|0,i=i+Math.imul(A,Q)|0,n=(n=n+Math.imul(A,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,i=i+Math.imul(w,et)|0,n=(n=n+Math.imul(w,it)|0)+Math.imul(b,et)|0,o=o+Math.imul(b,it)|0,i=i+Math.imul(v,ot)|0,n=(n=n+Math.imul(v,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,i=i+Math.imul(m,ht)|0,n=(n=n+Math.imul(m,at)|0)+Math.imul(p,ht)|0,o=o+Math.imul(p,at)|0;var xt=(a+(i=i+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;a=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,i=Math.imul(K,q),n=(n=Math.imul(K,z))+Math.imul(j,q)|0,o=Math.imul(j,z),i=i+Math.imul(R,F)|0,n=(n=n+Math.imul(R,V)|0)+Math.imul(O,F)|0,o=o+Math.imul(O,V)|0,i=i+Math.imul(I,X)|0,n=(n=n+Math.imul(I,G)|0)+Math.imul(L,X)|0,o=o+Math.imul(L,G)|0,i=i+Math.imul(E,Y)|0,n=(n=n+Math.imul(E,W)|0)+Math.imul(N,Y)|0,o=o+Math.imul(N,W)|0,i=i+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,i=i+Math.imul(A,et)|0,n=(n=n+Math.imul(A,it)|0)+Math.imul(x,et)|0,o=o+Math.imul(x,it)|0,i=i+Math.imul(w,ot)|0,n=(n=n+Math.imul(w,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,i=i+Math.imul(v,ht)|0,n=(n=n+Math.imul(v,at)|0)+Math.imul(y,ht)|0,o=o+Math.imul(y,at)|0,i=i+Math.imul(m,lt)|0,n=(n=n+Math.imul(m,dt)|0)+Math.imul(p,lt)|0,o=o+Math.imul(p,dt)|0;var Bt=(a+(i=i+Math.imul(l,mt)|0)|0)+((8191&(n=(n=n+Math.imul(l,pt)|0)+Math.imul(d,mt)|0))<<13)|0;a=((o=o+Math.imul(d,pt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,i=Math.imul(K,F),n=(n=Math.imul(K,V))+Math.imul(j,F)|0,o=Math.imul(j,V),i=i+Math.imul(R,X)|0,n=(n=n+Math.imul(R,G)|0)+Math.imul(O,X)|0,o=o+Math.imul(O,G)|0,i=i+Math.imul(I,Y)|0,n=(n=n+Math.imul(I,W)|0)+Math.imul(L,Y)|0,o=o+Math.imul(L,W)|0,i=i+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,tt)|0)+Math.imul(N,Q)|0,o=o+Math.imul(N,tt)|0,i=i+Math.imul(S,et)|0,n=(n=n+Math.imul(S,it)|0)+Math.imul(k,et)|0,o=o+Math.imul(k,it)|0,i=i+Math.imul(A,ot)|0,n=(n=n+Math.imul(A,st)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,st)|0,i=i+Math.imul(w,ht)|0,n=(n=n+Math.imul(w,at)|0)+Math.imul(b,ht)|0,o=o+Math.imul(b,at)|0,i=i+Math.imul(v,lt)|0,n=(n=n+Math.imul(v,dt)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,dt)|0;var St=(a+(i=i+Math.imul(m,mt)|0)|0)+((8191&(n=(n=n+Math.imul(m,pt)|0)+Math.imul(p,mt)|0))<<13)|0;a=((o=o+Math.imul(p,pt)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,i=Math.imul(K,X),n=(n=Math.imul(K,G))+Math.imul(j,X)|0,o=Math.imul(j,G),i=i+Math.imul(R,Y)|0,n=(n=n+Math.imul(R,W)|0)+Math.imul(O,Y)|0,o=o+Math.imul(O,W)|0,i=i+Math.imul(I,Q)|0,n=(n=n+Math.imul(I,tt)|0)+Math.imul(L,Q)|0,o=o+Math.imul(L,tt)|0,i=i+Math.imul(E,et)|0,n=(n=n+Math.imul(E,it)|0)+Math.imul(N,et)|0,o=o+Math.imul(N,it)|0,i=i+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,st)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,st)|0,i=i+Math.imul(A,ht)|0,n=(n=n+Math.imul(A,at)|0)+Math.imul(x,ht)|0,o=o+Math.imul(x,at)|0,i=i+Math.imul(w,lt)|0,n=(n=n+Math.imul(w,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var kt=(a+(i=i+Math.imul(v,mt)|0)|0)+((8191&(n=(n=n+Math.imul(v,pt)|0)+Math.imul(y,mt)|0))<<13)|0;a=((o=o+Math.imul(y,pt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,i=Math.imul(K,Y),n=(n=Math.imul(K,W))+Math.imul(j,Y)|0,o=Math.imul(j,W),i=i+Math.imul(R,Q)|0,n=(n=n+Math.imul(R,tt)|0)+Math.imul(O,Q)|0,o=o+Math.imul(O,tt)|0,i=i+Math.imul(I,et)|0,n=(n=n+Math.imul(I,it)|0)+Math.imul(L,et)|0,o=o+Math.imul(L,it)|0,i=i+Math.imul(E,ot)|0,n=(n=n+Math.imul(E,st)|0)+Math.imul(N,ot)|0,o=o+Math.imul(N,st)|0,i=i+Math.imul(S,ht)|0,n=(n=n+Math.imul(S,at)|0)+Math.imul(k,ht)|0,o=o+Math.imul(k,at)|0,i=i+Math.imul(A,lt)|0,n=(n=n+Math.imul(A,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Tt=(a+(i=i+Math.imul(w,mt)|0)|0)+((8191&(n=(n=n+Math.imul(w,pt)|0)+Math.imul(b,mt)|0))<<13)|0;a=((o=o+Math.imul(b,pt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,i=Math.imul(K,Q),n=(n=Math.imul(K,tt))+Math.imul(j,Q)|0,o=Math.imul(j,tt),i=i+Math.imul(R,et)|0,n=(n=n+Math.imul(R,it)|0)+Math.imul(O,et)|0,o=o+Math.imul(O,it)|0,i=i+Math.imul(I,ot)|0,n=(n=n+Math.imul(I,st)|0)+Math.imul(L,ot)|0,o=o+Math.imul(L,st)|0,i=i+Math.imul(E,ht)|0,n=(n=n+Math.imul(E,at)|0)+Math.imul(N,ht)|0,o=o+Math.imul(N,at)|0,i=i+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,dt)|0;var Et=(a+(i=i+Math.imul(A,mt)|0)|0)+((8191&(n=(n=n+Math.imul(A,pt)|0)+Math.imul(x,mt)|0))<<13)|0;a=((o=o+Math.imul(x,pt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,i=Math.imul(K,et),n=(n=Math.imul(K,it))+Math.imul(j,et)|0,o=Math.imul(j,it),i=i+Math.imul(R,ot)|0,n=(n=n+Math.imul(R,st)|0)+Math.imul(O,ot)|0,o=o+Math.imul(O,st)|0,i=i+Math.imul(I,ht)|0,n=(n=n+Math.imul(I,at)|0)+Math.imul(L,ht)|0,o=o+Math.imul(L,at)|0,i=i+Math.imul(E,lt)|0,n=(n=n+Math.imul(E,dt)|0)+Math.imul(N,lt)|0,o=o+Math.imul(N,dt)|0;var Nt=(a+(i=i+Math.imul(S,mt)|0)|0)+((8191&(n=(n=n+Math.imul(S,pt)|0)+Math.imul(k,mt)|0))<<13)|0;a=((o=o+Math.imul(k,pt)|0)+(n>>>13)|0)+(Nt>>>26)|0,Nt&=67108863,i=Math.imul(K,ot),n=(n=Math.imul(K,st))+Math.imul(j,ot)|0,o=Math.imul(j,st),i=i+Math.imul(R,ht)|0,n=(n=n+Math.imul(R,at)|0)+Math.imul(O,ht)|0,o=o+Math.imul(O,at)|0,i=i+Math.imul(I,lt)|0,n=(n=n+Math.imul(I,dt)|0)+Math.imul(L,lt)|0,o=o+Math.imul(L,dt)|0;var Pt=(a+(i=i+Math.imul(E,mt)|0)|0)+((8191&(n=(n=n+Math.imul(E,pt)|0)+Math.imul(N,mt)|0))<<13)|0;a=((o=o+Math.imul(N,pt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,i=Math.imul(K,ht),n=(n=Math.imul(K,at))+Math.imul(j,ht)|0,o=Math.imul(j,at),i=i+Math.imul(R,lt)|0,n=(n=n+Math.imul(R,dt)|0)+Math.imul(O,lt)|0,o=o+Math.imul(O,dt)|0;var It=(a+(i=i+Math.imul(I,mt)|0)|0)+((8191&(n=(n=n+Math.imul(I,pt)|0)+Math.imul(L,mt)|0))<<13)|0;a=((o=o+Math.imul(L,pt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,i=Math.imul(K,lt),n=(n=Math.imul(K,dt))+Math.imul(j,lt)|0,o=Math.imul(j,dt);var Lt=(a+(i=i+Math.imul(R,mt)|0)|0)+((8191&(n=(n=n+Math.imul(R,pt)|0)+Math.imul(O,mt)|0))<<13)|0;a=((o=o+Math.imul(O,pt)|0)+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863;var Ct=(a+(i=Math.imul(K,mt))|0)+((8191&(n=(n=Math.imul(K,pt))+Math.imul(j,mt)|0))<<13)|0;return a=((o=Math.imul(j,pt))+(n>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,h[0]=gt,h[1]=vt,h[2]=yt,h[3]=Mt,h[4]=wt,h[5]=bt,h[6]=_t,h[7]=At,h[8]=xt,h[9]=Bt,h[10]=St,h[11]=kt,h[12]=Tt,h[13]=Et,h[14]=Nt,h[15]=Pt,h[16]=It,h[17]=Lt,h[18]=Ct,0!==a&&(h[19]=a,e.length++),e};function v(t,r,e){e.negative=r.negative^t.negative,e.length=t.length+r.length;for(var i=0,n=0,o=0;o<e.length-1;o++){var s=n;n=0;for(var u=67108863&i,h=Math.min(o,r.length-1),a=Math.max(0,o-t.length+1);a<=h;a++){var f=o-a,l=(0|t.words[f])*(0|r.words[a]),d=67108863&l;u=67108863&(d=d+u|0),n+=(s=(s=s+(l/67108864|0)|0)+(d>>>26)|0)>>>26,s&=67108863}e.words[o]=u,i=s,s=n}return 0!==i?e.words[o]=i:e.length--,e._strip()}function y(t,r,e){return v(t,r,e)}function M(t,r){this.x=t,this.y=r}Math.imul||(g=p),o.prototype.mulTo=function(t,r){var e=this.length+t.length;return 10===this.length&&10===t.length?g(this,t,r):e<63?p(this,t,r):e<1024?v(this,t,r):y(this,t,r)},M.prototype.makeRBT=function(t){for(var r=new Array(t),e=o.prototype._countBits(t)-1,i=0;i<t;i++)r[i]=this.revBin(i,e,t);return r},M.prototype.revBin=function(t,r,e){if(0===t||t===e-1)return t;for(var i=0,n=0;n<r;n++)i|=(1&t)<<r-n-1,t>>=1;return i},M.prototype.permute=function(t,r,e,i,n,o){for(var s=0;s<o;s++)i[s]=r[t[s]],n[s]=e[t[s]]},M.prototype.transform=function(t,r,e,i,n,o){this.permute(o,t,r,e,i,n);for(var s=1;s<n;s<<=1)for(var u=s<<1,h=Math.cos(2*Math.PI/u),a=Math.sin(2*Math.PI/u),f=0;f<n;f+=u)for(var l=h,d=a,c=0;c<s;c++){var m=e[f+c],p=i[f+c],g=e[f+c+s],v=i[f+c+s],y=l*g-d*v;v=l*v+d*g,g=y,e[f+c]=m+g,i[f+c]=p+v,e[f+c+s]=m-g,i[f+c+s]=p-v,c!==u&&(y=h*l-a*d,d=h*d+a*l,l=y)}},M.prototype.guessLen13b=function(t,r){var e=1|Math.max(r,t),i=1&e,n=0;for(e=e/2|0;e;e>>>=1)n++;return 1<<n+1+i},M.prototype.conjugate=function(t,r,e){if(!(e<=1))for(var i=0;i<e/2;i++){var n=t[i];t[i]=t[e-i-1],t[e-i-1]=n,n=r[i],r[i]=-r[e-i-1],r[e-i-1]=-n}},M.prototype.normalize13b=function(t,r){for(var e=0,i=0;i<r/2;i++){var n=8192*Math.round(t[2*i+1]/r)+Math.round(t[2*i]/r)+e;t[i]=67108863&n,e=n<67108864?0:n/67108864|0}return t},M.prototype.convert13b=function(t,r,e,n){for(var o=0,s=0;s<r;s++)o+=0|t[s],e[2*s]=8191&o,o>>>=13,e[2*s+1]=8191&o,o>>>=13;for(s=2*r;s<n;++s)e[s]=0;i(0===o),i(0==(-8192&o))},M.prototype.stub=function(t){for(var r=new Array(t),e=0;e<t;e++)r[e]=0;return r},M.prototype.mulp=function(t,r,e){var i=2*this.guessLen13b(t.length,r.length),n=this.makeRBT(i),o=this.stub(i),s=new Array(i),u=new Array(i),h=new Array(i),a=new Array(i),f=new Array(i),l=new Array(i),d=e.words;d.length=i,this.convert13b(t.words,t.length,s,i),this.convert13b(r.words,r.length,a,i),this.transform(s,o,u,h,i,n),this.transform(a,o,f,l,i,n);for(var c=0;c<i;c++){var m=u[c]*f[c]-h[c]*l[c];h[c]=u[c]*l[c]+h[c]*f[c],u[c]=m}return this.conjugate(u,h,i),this.transform(u,h,d,o,i,n),this.conjugate(d,o,i),this.normalize13b(d,i),e.negative=t.negative^r.negative,e.length=t.length+r.length,e._strip()},o.prototype.mul=function(t){var r=new o(null);return r.words=new Array(this.length+t.length),this.mulTo(t,r)},o.prototype.mulf=function(t){var r=new o(null);return r.words=new Array(this.length+t.length),y(this,t,r)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){var r=t<0;r&&(t=-t),i("number"==typeof t),i(t<67108864);for(var e=0,n=0;n<this.length;n++){var o=(0|this.words[n])*t,s=(67108863&o)+(67108863&e);e>>=26,e+=o/67108864|0,e+=s>>>26,this.words[n]=67108863&s}return 0!==e&&(this.words[n]=e,this.length++),r?this.ineg():this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var r=function(t){for(var r=new Array(t.bitLength()),e=0;e<r.length;e++){var i=e/26|0,n=e%26;r[e]=t.words[i]>>>n&1}return r}(t);if(0===r.length)return new o(1);for(var e=this,i=0;i<r.length&&0===r[i];i++,e=e.sqr());if(++i<r.length)for(var n=e.sqr();i<r.length;i++,n=n.sqr())0!==r[i]&&(e=e.mul(n));return e},o.prototype.iushln=function(t){i("number"==typeof t&&t>=0);var r,e=t%26,n=(t-e)/26,o=67108863>>>26-e<<26-e;if(0!==e){var s=0;for(r=0;r<this.length;r++){var u=this.words[r]&o,h=(0|this.words[r])-u<<e;this.words[r]=h|s,s=u>>>26-e}s&&(this.words[r]=s,this.length++)}if(0!==n){for(r=this.length-1;r>=0;r--)this.words[r+n]=this.words[r];for(r=0;r<n;r++)this.words[r]=0;this.length+=n}return this._strip()},o.prototype.ishln=function(t){return i(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,r,e){var n;i("number"==typeof t&&t>=0),n=r?(r-r%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),u=67108863^67108863>>>o<<o,h=e;if(n-=s,n=Math.max(0,n),h){for(var a=0;a<s;a++)h.words[a]=this.words[a];h.length=s}if(0===s);else if(this.length>s)for(this.length-=s,a=0;a<this.length;a++)this.words[a]=this.words[a+s];else this.words[0]=0,this.length=1;var f=0;for(a=this.length-1;a>=0&&(0!==f||a>=n);a--){var l=0|this.words[a];this.words[a]=f<<26-o|l>>>o,f=l&u}return h&&0!==f&&(h.words[h.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},o.prototype.ishrn=function(t,r,e){return i(0===this.negative),this.iushrn(t,r,e)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){i("number"==typeof t&&t>=0);var r=t%26,e=(t-r)/26,n=1<<r;return!(this.length<=e)&&!!(this.words[e]&n)},o.prototype.imaskn=function(t){i("number"==typeof t&&t>=0);var r=t%26,e=(t-r)/26;if(i(0===this.negative,"imaskn works only with positive numbers"),this.length<=e)return this;if(0!==r&&e++,this.length=Math.min(e,this.length),0!==r){var n=67108863^67108863>>>r<<r;this.words[this.length-1]&=n}return this._strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return i("number"==typeof t),i(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<=t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var r=0;r<this.length&&this.words[r]>=67108864;r++)this.words[r]-=67108864,r===this.length-1?this.words[r+1]=1:this.words[r+1]++;return this.length=Math.max(this.length,r+1),this},o.prototype.isubn=function(t){if(i("number"==typeof t),i(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var r=0;r<this.length&&this.words[r]<0;r++)this.words[r]+=67108864,this.words[r+1]-=1;return this._strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,r,e){var n,o,s=t.length+e;this._expand(s);var u=0;for(n=0;n<t.length;n++){o=(0|this.words[n+e])+u;var h=(0|t.words[n])*r;u=((o-=67108863&h)>>26)-(h/67108864|0),this.words[n+e]=67108863&o}for(;n<this.length-e;n++)u=(o=(0|this.words[n+e])+u)>>26,this.words[n+e]=67108863&o;if(0===u)return this._strip();for(i(-1===u),u=0,n=0;n<this.length;n++)u=(o=-(0|this.words[n])+u)>>26,this.words[n]=67108863&o;return this.negative=1,this._strip()},o.prototype._wordDiv=function(t,r){var e=(this.length,t.length),i=this.clone(),n=t,s=0|n.words[n.length-1];0!==(e=26-this._countBits(s))&&(n=n.ushln(e),i.iushln(e),s=0|n.words[n.length-1]);var u,h=i.length-n.length;if("mod"!==r){(u=new o(null)).length=h+1,u.words=new Array(u.length);for(var a=0;a<u.length;a++)u.words[a]=0}var f=i.clone()._ishlnsubmul(n,1,h);0===f.negative&&(i=f,u&&(u.words[h]=1));for(var l=h-1;l>=0;l--){var d=67108864*(0|i.words[n.length+l])+(0|i.words[n.length+l-1]);for(d=Math.min(d/s|0,67108863),i._ishlnsubmul(n,d,l);0!==i.negative;)d--,i.negative=0,i._ishlnsubmul(n,1,l),i.isZero()||(i.negative^=1);u&&(u.words[l]=d)}return u&&u._strip(),i._strip(),"div"!==r&&0!==e&&i.iushrn(e),{div:u||null,mod:i}},o.prototype.divmod=function(t,r,e){return i(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(u=this.neg().divmod(t,r),"mod"!==r&&(n=u.div.neg()),"div"!==r&&(s=u.mod.neg(),e&&0!==s.negative&&s.iadd(t)),{div:n,mod:s}):0===this.negative&&0!==t.negative?(u=this.divmod(t.neg(),r),"mod"!==r&&(n=u.div.neg()),{div:n,mod:u.mod}):0!=(this.negative&t.negative)?(u=this.neg().divmod(t.neg(),r),"div"!==r&&(s=u.mod.neg(),e&&0!==s.negative&&s.isub(t)),{div:u.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===r?{div:this.divn(t.words[0]),mod:null}:"mod"===r?{div:null,mod:new o(this.modrn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modrn(t.words[0]))}:this._wordDiv(t,r);var n,s,u},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var r=this.divmod(t);if(r.mod.isZero())return r.div;var e=0!==r.div.negative?r.mod.isub(t):r.mod,i=t.ushrn(1),n=t.andln(1),o=e.cmp(i);return o<0||1===n&&0===o?r.div:0!==r.div.negative?r.div.isubn(1):r.div.iaddn(1)},o.prototype.modrn=function(t){var r=t<0;r&&(t=-t),i(t<=67108863);for(var e=(1<<26)%t,n=0,o=this.length-1;o>=0;o--)n=(e*n+(0|this.words[o]))%t;return r?-n:n},o.prototype.modn=function(t){return this.modrn(t)},o.prototype.idivn=function(t){var r=t<0;r&&(t=-t),i(t<=67108863);for(var e=0,n=this.length-1;n>=0;n--){var o=(0|this.words[n])+67108864*e;this.words[n]=o/t|0,e=o%t}return this._strip(),r?this.ineg():this},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){i(0===t.negative),i(!t.isZero());var r=this,e=t.clone();r=0!==r.negative?r.umod(t):r.clone();for(var n=new o(1),s=new o(0),u=new o(0),h=new o(1),a=0;r.isEven()&&e.isEven();)r.iushrn(1),e.iushrn(1),++a;for(var f=e.clone(),l=r.clone();!r.isZero();){for(var d=0,c=1;0==(r.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(r.iushrn(d);d-- >0;)(n.isOdd()||s.isOdd())&&(n.iadd(f),s.isub(l)),n.iushrn(1),s.iushrn(1);for(var m=0,p=1;0==(e.words[0]&p)&&m<26;++m,p<<=1);if(m>0)for(e.iushrn(m);m-- >0;)(u.isOdd()||h.isOdd())&&(u.iadd(f),h.isub(l)),u.iushrn(1),h.iushrn(1);r.cmp(e)>=0?(r.isub(e),n.isub(u),s.isub(h)):(e.isub(r),u.isub(n),h.isub(s))}return{a:u,b:h,gcd:e.iushln(a)}},o.prototype._invmp=function(t){i(0===t.negative),i(!t.isZero());var r=this,e=t.clone();r=0!==r.negative?r.umod(t):r.clone();for(var n,s=new o(1),u=new o(0),h=e.clone();r.cmpn(1)>0&&e.cmpn(1)>0;){for(var a=0,f=1;0==(r.words[0]&f)&&a<26;++a,f<<=1);if(a>0)for(r.iushrn(a);a-- >0;)s.isOdd()&&s.iadd(h),s.iushrn(1);for(var l=0,d=1;0==(e.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(e.iushrn(l);l-- >0;)u.isOdd()&&u.iadd(h),u.iushrn(1);r.cmp(e)>=0?(r.isub(e),s.isub(u)):(e.isub(r),u.isub(s))}return(n=0===r.cmpn(1)?s:u).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var r=this.clone(),e=t.clone();r.negative=0,e.negative=0;for(var i=0;r.isEven()&&e.isEven();i++)r.iushrn(1),e.iushrn(1);for(;;){for(;r.isEven();)r.iushrn(1);for(;e.isEven();)e.iushrn(1);var n=r.cmp(e);if(n<0){var o=r;r=e,e=o}else if(0===n||0===e.cmpn(1))break;r.isub(e)}return e.iushln(i)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){i("number"==typeof t);var r=t%26,e=(t-r)/26,n=1<<r;if(this.length<=e)return this._expand(e+1),this.words[e]|=n,this;for(var o=n,s=e;0!==o&&s<this.length;s++){var u=0|this.words[s];o=(u+=o)>>>26,u&=67108863,this.words[s]=u}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var r,e=t<0;if(0!==this.negative&&!e)return-1;if(0===this.negative&&e)return 1;if(this._strip(),this.length>1)r=1;else{e&&(t=-t),i(t<=67108863,"Number is too big");var n=0|this.words[0];r=n===t?0:n<t?-1:1}return 0!==this.negative?0|-r:r},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var r=this.ucmp(t);return 0!==this.negative?0|-r:r},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var r=0,e=this.length-1;e>=0;e--){var i=0|this.words[e],n=0|t.words[e];if(i!==n){i<n?r=-1:i>n&&(r=1);break}}return r},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new S(t)},o.prototype.toRed=function(t){return i(!this.red,"Already a number in reduction context"),i(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return i(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return i(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return i(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return i(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return i(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return i(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return i(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return i(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return i(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return i(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return i(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return i(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return i(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var w={k256:null,p224:null,p192:null,p25519:null};function b(t,r){this.name=t,this.p=new o(r,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function _(){b.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function A(){b.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function x(){b.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function B(){b.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function S(t){if("string"==typeof t){var r=o._prime(t);this.m=r.p,this.prime=r}else i(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function k(t){S.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}b.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},b.prototype.ireduce=function(t){var r,e=t;do{this.split(e,this.tmp),r=(e=(e=this.imulK(e)).iadd(this.tmp)).bitLength()}while(r>this.n);var i=r<this.n?-1:e.ucmp(this.p);return 0===i?(e.words[0]=0,e.length=1):i>0?e.isub(this.p):void 0!==e.strip?e.strip():e._strip(),e},b.prototype.split=function(t,r){t.iushrn(this.n,0,r)},b.prototype.imulK=function(t){return t.imul(this.k)},n(_,b),_.prototype.split=function(t,r){for(var e=4194303,i=Math.min(t.length,9),n=0;n<i;n++)r.words[n]=t.words[n];if(r.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(r.words[r.length++]=o&e,n=10;n<t.length;n++){var s=0|t.words[n];t.words[n-10]=(s&e)<<4|o>>>22,o=s}o>>>=22,t.words[n-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},_.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var r=0,e=0;e<t.length;e++){var i=0|t.words[e];r+=977*i,t.words[e]=67108863&r,r=64*i+(r/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(A,b),n(x,b),n(B,b),B.prototype.imulK=function(t){for(var r=0,e=0;e<t.length;e++){var i=19*(0|t.words[e])+r,n=67108863&i;i>>>=26,t.words[e]=n,r=i}return 0!==r&&(t.words[t.length++]=r),t},o._prime=function(t){if(w[t])return w[t];var r;if("k256"===t)r=new _;else if("p224"===t)r=new A;else if("p192"===t)r=new x;else{if("p25519"!==t)throw new Error("Unknown prime "+t);r=new B}return w[t]=r,r},S.prototype._verify1=function(t){i(0===t.negative,"red works only with positives"),i(t.red,"red works only with red numbers")},S.prototype._verify2=function(t,r){i(0==(t.negative|r.negative),"red works only with positives"),i(t.red&&t.red===r.red,"red works only with red numbers")},S.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):(f(t,t.umod(this.m)._forceRed(this)),t)},S.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},S.prototype.add=function(t,r){this._verify2(t,r);var e=t.add(r);return e.cmp(this.m)>=0&&e.isub(this.m),e._forceRed(this)},S.prototype.iadd=function(t,r){this._verify2(t,r);var e=t.iadd(r);return e.cmp(this.m)>=0&&e.isub(this.m),e},S.prototype.sub=function(t,r){this._verify2(t,r);var e=t.sub(r);return e.cmpn(0)<0&&e.iadd(this.m),e._forceRed(this)},S.prototype.isub=function(t,r){this._verify2(t,r);var e=t.isub(r);return e.cmpn(0)<0&&e.iadd(this.m),e},S.prototype.shl=function(t,r){return this._verify1(t),this.imod(t.ushln(r))},S.prototype.imul=function(t,r){return this._verify2(t,r),this.imod(t.imul(r))},S.prototype.mul=function(t,r){return this._verify2(t,r),this.imod(t.mul(r))},S.prototype.isqr=function(t){return this.imul(t,t.clone())},S.prototype.sqr=function(t){return this.mul(t,t)},S.prototype.sqrt=function(t){if(t.isZero())return t.clone();var r=this.m.andln(3);if(i(r%2==1),3===r){var e=this.m.add(new o(1)).iushrn(2);return this.pow(t,e)}for(var n=this.m.subn(1),s=0;!n.isZero()&&0===n.andln(1);)s++,n.iushrn(1);i(!n.isZero());var u=new o(1).toRed(this),h=u.redNeg(),a=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,a).cmp(h);)f.redIAdd(h);for(var l=this.pow(f,n),d=this.pow(t,n.addn(1).iushrn(1)),c=this.pow(t,n),m=s;0!==c.cmp(u);){for(var p=c,g=0;0!==p.cmp(u);g++)p=p.redSqr();i(g<m);var v=this.pow(l,new o(1).iushln(m-g-1));d=d.redMul(v),l=v.redSqr(),c=c.redMul(l),m=g}return d},S.prototype.invm=function(t){var r=t._invmp(this.m);return 0!==r.negative?(r.negative=0,this.imod(r).redNeg()):this.imod(r)},S.prototype.pow=function(t,r){if(r.isZero())return new o(1).toRed(this);if(0===r.cmpn(1))return t.clone();var e=new Array(16);e[0]=new o(1).toRed(this),e[1]=t;for(var i=2;i<e.length;i++)e[i]=this.mul(e[i-1],t);var n=e[0],s=0,u=0,h=r.bitLength()%26;for(0===h&&(h=26),i=r.length-1;i>=0;i--){for(var a=r.words[i],f=h-1;f>=0;f--){var l=a>>f&1;n!==e[0]&&(n=this.sqr(n)),0!==l||0!==s?(s<<=1,s|=l,(4===++u||0===i&&0===f)&&(n=this.mul(n,e[s]),u=0,s=0)):u=0}h=26}return n},S.prototype.convertTo=function(t){var r=t.umod(this.m);return r===t?r.clone():r},S.prototype.convertFrom=function(t){var r=t.clone();return r.red=null,r},o.mont=function(t){return new k(t)},n(k,S),k.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},k.prototype.convertFrom=function(t){var r=this.imod(t.mul(this.rinv));return r.red=null,r},k.prototype.imul=function(t,r){if(t.isZero()||r.isZero())return t.words[0]=0,t.length=1,t;var e=t.imul(r),i=e.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=e.isub(i).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},k.prototype.mul=function(t,r){if(t.isZero()||r.isZero())return new o(0)._forceRed(this);var e=t.mul(r),i=e.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=e.isub(i).iushrn(this.shift),s=n;return n.cmp(this.m)>=0?s=n.isub(this.m):n.cmpn(0)<0&&(s=n.iadd(this.m)),s._forceRed(this)},k.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=e.nmd(t),this)},1297:function(t,r,e){"use strict";var i=e(23085).Buffer,n=this&&this.__read||function(t,r){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var i,n,o=e.call(t),s=[];try{for(;(void 0===r||r-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(e=o.return)&&e.call(o)}finally{if(n)throw n.error}}return s},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0}),r.isZeroAddress=r.zeroAddress=r.importPublic=r.privateToAddress=r.privateToPublic=r.publicToAddress=r.pubToAddress=r.isValidPublic=r.isValidPrivate=r.generateAddress2=r.generateAddress=r.isValidChecksumAddress=r.toChecksumAddress=r.isValidAddress=r.Account=void 0;var s=o(e(69282)),u=e(7231),h=e(95053),a=e(92644),f=e(1797),l=e(10215),d=e(39529),c=e(46350),m=e(25309),p=function(){function t(t,r,e,i){void 0===t&&(t=new u.BN(0)),void 0===r&&(r=new u.BN(0)),void 0===e&&(e=f.KECCAK256_RLP),void 0===i&&(i=f.KECCAK256_NULL),this.nonce=t,this.balance=r,this.stateRoot=e,this.codeHash=i,this._validate()}return t.fromAccountData=function(r){var e=r.nonce,i=r.balance,n=r.stateRoot,o=r.codeHash;return new t(e?new u.BN((0,l.toBuffer)(e)):void 0,i?new u.BN((0,l.toBuffer)(i)):void 0,n?(0,l.toBuffer)(n):void 0,o?(0,l.toBuffer)(o):void 0)},t.fromRlpSerializedAccount=function(t){var r=u.rlp.decode(t);if(!Array.isArray(r))throw new Error("Invalid serialized account input. Must be array");return this.fromValuesArray(r)},t.fromValuesArray=function(r){var e=n(r,4),i=e[0],o=e[1],s=e[2],h=e[3];return new t(new u.BN(i),new u.BN(o),s,h)},t.prototype._validate=function(){if(this.nonce.lt(new u.BN(0)))throw new Error("nonce must be greater than zero");if(this.balance.lt(new u.BN(0)))throw new Error("balance must be greater than zero");if(32!==this.stateRoot.length)throw new Error("stateRoot must have a length of 32");if(32!==this.codeHash.length)throw new Error("codeHash must have a length of 32")},t.prototype.raw=function(){return[(0,m.bnToUnpaddedBuffer)(this.nonce),(0,m.bnToUnpaddedBuffer)(this.balance),this.stateRoot,this.codeHash]},t.prototype.serialize=function(){return u.rlp.encode(this.raw())},t.prototype.isContract=function(){return!this.codeHash.equals(f.KECCAK256_NULL)},t.prototype.isEmpty=function(){return this.balance.isZero()&&this.nonce.isZero()&&this.codeHash.equals(f.KECCAK256_NULL)},t}();r.Account=p;r.isValidAddress=function(t){try{(0,c.assertIsString)(t)}catch(t){return!1}return/^0x[0-9a-fA-F]{40}$/.test(t)};r.toChecksumAddress=function(t,r){(0,c.assertIsHexString)(t);var e=(0,a.stripHexPrefix)(t).toLowerCase(),i="";r&&(i=(0,m.toType)(r,m.TypeOutput.BN).toString()+"0x");for(var n=(0,d.keccakFromString)(i+e).toString("hex"),o="0x",s=0;s<e.length;s++)parseInt(n[s],16)>=8?o+=e[s].toUpperCase():o+=e[s];return o};r.isValidChecksumAddress=function(t,e){return(0,r.isValidAddress)(t)&&(0,r.toChecksumAddress)(t,e)===t};r.generateAddress=function(t,r){(0,c.assertIsBuffer)(t),(0,c.assertIsBuffer)(r);var e=new u.BN(r);return e.isZero()?(0,d.rlphash)([t,null]).slice(-20):(0,d.rlphash)([t,i.from(e.toArray())]).slice(-20)};r.generateAddress2=function(t,r,e){return(0,c.assertIsBuffer)(t),(0,c.assertIsBuffer)(r),(0,c.assertIsBuffer)(e),(0,s.default)(20===t.length),(0,s.default)(32===r.length),(0,d.keccak256)(i.concat([i.from("ff","hex"),t,r,(0,d.keccak256)(e)])).slice(-20)};r.isValidPrivate=function(t){return(0,h.privateKeyVerify)(t)};r.isValidPublic=function(t,r){return void 0===r&&(r=!1),(0,c.assertIsBuffer)(t),64===t.length?(0,h.publicKeyVerify)(i.concat([i.from([4]),t])):!!r&&(0,h.publicKeyVerify)(t)};r.pubToAddress=function(t,r){return void 0===r&&(r=!1),(0,c.assertIsBuffer)(t),r&&64!==t.length&&(t=i.from((0,h.publicKeyConvert)(t,!1).slice(1))),(0,s.default)(64===t.length),(0,d.keccak)(t).slice(-20)},r.publicToAddress=r.pubToAddress;r.privateToPublic=function(t){return(0,c.assertIsBuffer)(t),i.from((0,h.publicKeyCreate)(t,!1)).slice(1)};r.privateToAddress=function(t){return(0,r.publicToAddress)((0,r.privateToPublic)(t))};r.importPublic=function(t){return(0,c.assertIsBuffer)(t),64!==t.length&&(t=i.from((0,h.publicKeyConvert)(t,!1).slice(1))),t};r.zeroAddress=function(){var t=(0,l.zeros)(20);return(0,l.bufferToHex)(t)};r.isZeroAddress=function(t){try{(0,c.assertIsString)(t)}catch(t){return!1}return(0,r.zeroAddress)()===t}},9380:function(t,r,e){"use strict";var i=e(23085).Buffer,n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0}),r.Address=void 0;var o=n(e(69282)),s=e(7231),u=e(10215),h=e(1297),a=function(){function t(t){(0,o.default)(20===t.length,"Invalid address length"),this.buf=t}return t.zero=function(){return new t((0,u.zeros)(20))},t.fromString=function(r){return(0,o.default)((0,h.isValidAddress)(r),"Invalid address"),new t((0,u.toBuffer)(r))},t.fromPublicKey=function(r){return(0,o.default)(i.isBuffer(r),"Public key should be Buffer"),new t((0,h.pubToAddress)(r))},t.fromPrivateKey=function(r){return(0,o.default)(i.isBuffer(r),"Private key should be Buffer"),new t((0,h.privateToAddress)(r))},t.generate=function(r,e){return(0,o.default)(s.BN.isBN(e)),new t((0,h.generateAddress)(r.buf,e.toArrayLike(i)))},t.generate2=function(r,e,n){return(0,o.default)(i.isBuffer(e)),(0,o.default)(i.isBuffer(n)),new t((0,h.generateAddress2)(r.buf,e,n))},t.prototype.equals=function(t){return this.buf.equals(t.buf)},t.prototype.isZero=function(){return this.equals(t.zero())},t.prototype.isPrecompileOrSystemAddress=function(){var t=new s.BN(this.buf),r=new s.BN(0),e=new s.BN("ffff","hex");return t.gte(r)&&t.lte(e)},t.prototype.toString=function(){return"0x"+this.buf.toString("hex")},t.prototype.toBuffer=function(){return i.from(this.buf)},t}();r.Address=a},10215:function(t,r,e){"use strict";var i=e(23085).Buffer,n=this&&this.__values||function(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],i=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(t,r){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var i,n,o=e.call(t),s=[];try{for(;(void 0===r||r-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(e=o.return)&&e.call(o)}finally{if(n)throw n.error}}return s};Object.defineProperty(r,"__esModule",{value:!0}),r.bufArrToArr=r.arrToBufArr=r.validateNoLeadingZeroes=r.baToJSON=r.toUtf8=r.addHexPrefix=r.toUnsigned=r.fromSigned=r.bufferToHex=r.bufferToInt=r.toBuffer=r.unpadHexString=r.unpadArray=r.unpadBuffer=r.setLengthRight=r.setLengthLeft=r.zeros=r.intToBuffer=r.intToHex=void 0;var s=e(7231),u=e(92644),h=e(46350);r.intToHex=function(t){if(!Number.isSafeInteger(t)||t<0)throw new Error("Received an invalid integer type: ".concat(t));return"0x".concat(t.toString(16))};r.intToBuffer=function(t){var e=(0,r.intToHex)(t);return i.from((0,u.padToEven)(e.slice(2)),"hex")};r.zeros=function(t){return i.allocUnsafe(t).fill(0)};var a=function(t,e,i){var n=(0,r.zeros)(e);return i?t.length<e?(t.copy(n),n):t.slice(0,e):t.length<e?(t.copy(n,e-t.length),n):t.slice(-e)};r.setLengthLeft=function(t,r){return(0,h.assertIsBuffer)(t),a(t,r,!1)};r.setLengthRight=function(t,r){return(0,h.assertIsBuffer)(t),a(t,r,!0)};var f=function(t){for(var r=t[0];t.length>0&&"0"===r.toString();)r=(t=t.slice(1))[0];return t};r.unpadBuffer=function(t){return(0,h.assertIsBuffer)(t),f(t)};r.unpadArray=function(t){return(0,h.assertIsArray)(t),f(t)};r.unpadHexString=function(t){return(0,h.assertIsHexString)(t),t=(0,u.stripHexPrefix)(t),f(t)};r.toBuffer=function(t){if(null==t)return i.allocUnsafe(0);if(i.isBuffer(t))return i.from(t);if(Array.isArray(t)||t instanceof Uint8Array)return i.from(t);if("string"==typeof t){if(!(0,u.isHexString)(t))throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(t));return i.from((0,u.padToEven)((0,u.stripHexPrefix)(t)),"hex")}if("number"==typeof t)return(0,r.intToBuffer)(t);if(s.BN.isBN(t)){if(t.isNeg())throw new Error("Cannot convert negative BN to buffer. Given: ".concat(t));return t.toArrayLike(i)}if(t.toArray)return i.from(t.toArray());if(t.toBuffer)return i.from(t.toBuffer());throw new Error("invalid type")};r.bufferToInt=function(t){return new s.BN((0,r.toBuffer)(t)).toNumber()};r.bufferToHex=function(t){return"0x"+(t=(0,r.toBuffer)(t)).toString("hex")};r.fromSigned=function(t){return new s.BN(t).fromTwos(256)};r.toUnsigned=function(t){return i.from(t.toTwos(256).toArray())};r.addHexPrefix=function(t){return"string"!=typeof t||(0,u.isHexPrefixed)(t)?t:"0x"+t};r.toUtf8=function(t){if((t=(0,u.stripHexPrefix)(t)).length%2!=0)throw new Error("Invalid non-even hex string input for toUtf8() provided");return i.from(t.replace(/^(00)+|(00)+$/g,""),"hex").toString("utf8")};r.baToJSON=function(t){if(i.isBuffer(t))return"0x".concat(t.toString("hex"));if(t instanceof Array){for(var e=[],n=0;n<t.length;n++)e.push((0,r.baToJSON)(t[n]));return e}};r.validateNoLeadingZeroes=function(t){var r,e;try{for(var i=n(Object.entries(t)),s=i.next();!s.done;s=i.next()){var u=o(s.value,2),h=u[0],a=u[1];if(void 0!==a&&a.length>0&&0===a[0])throw new Error("".concat(h," cannot have leading zeroes, received: ").concat(a.toString("hex")))}}catch(t){r={error:t}}finally{try{s&&!s.done&&(e=i.return)&&e.call(i)}finally{if(r)throw r.error}}},r.arrToBufArr=function t(r){return Array.isArray(r)?r.map((function(r){return t(r)})):i.from(r)},r.bufArrToArr=function t(r){return Array.isArray(r)?r.map((function(r){return t(r)})):Uint8Array.from(null!=r?r:[])}},1797:function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.KECCAK256_RLP=r.KECCAK256_RLP_S=r.KECCAK256_RLP_ARRAY=r.KECCAK256_RLP_ARRAY_S=r.KECCAK256_NULL=r.KECCAK256_NULL_S=r.TWO_POW256=r.MAX_INTEGER=r.MAX_UINT64=void 0;var i=e(48764),n=e(7231);r.MAX_UINT64=new n.BN("ffffffffffffffff",16),r.MAX_INTEGER=new n.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),r.TWO_POW256=new n.BN("10000000000000000000000000000000000000000000000000000000000000000",16),r.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",r.KECCAK256_NULL=i.Buffer.from(r.KECCAK256_NULL_S,"hex"),r.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",r.KECCAK256_RLP_ARRAY=i.Buffer.from(r.KECCAK256_RLP_ARRAY_S,"hex"),r.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",r.KECCAK256_RLP=i.Buffer.from(r.KECCAK256_RLP_S,"hex")},7231:function(t,r,e){"use strict";var i=this&&this.__createBinding||(Object.create?function(t,r,e,i){void 0===i&&(i=e),Object.defineProperty(t,i,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,i){void 0===i&&(i=e),t[i]=r[e]}),n=this&&this.__setModuleDefault||(Object.create?function(t,r){Object.defineProperty(t,"default",{enumerable:!0,value:r})}:function(t,r){t.default=r}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var r={};if(null!=t)for(var e in t)"default"!==e&&Object.prototype.hasOwnProperty.call(t,e)&&i(r,t,e);return n(r,t),r},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0}),r.rlp=r.BN=void 0;var u=s(e(13864));r.BN=u.default;var h=o(e(51675));r.rlp=h},39529:function(t,r,e){"use strict";var i=e(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.rlphash=r.ripemd160FromArray=r.ripemd160FromString=r.ripemd160=r.sha256FromArray=r.sha256FromString=r.sha256=r.keccakFromArray=r.keccakFromHexString=r.keccakFromString=r.keccak256=r.keccak=void 0;var n=e(82192),o=e(23482),s=e(7231),u=e(10215),h=e(46350);r.keccak=function(t,r){switch(void 0===r&&(r=256),(0,h.assertIsBuffer)(t),r){case 224:return(0,n.keccak224)(t);case 256:return(0,n.keccak256)(t);case 384:return(0,n.keccak384)(t);case 512:return(0,n.keccak512)(t);default:throw new Error("Invald algorithm: keccak".concat(r))}};r.keccak256=function(t){return(0,r.keccak)(t)};r.keccakFromString=function(t,e){void 0===e&&(e=256),(0,h.assertIsString)(t);var n=i.from(t,"utf8");return(0,r.keccak)(n,e)};r.keccakFromHexString=function(t,e){return void 0===e&&(e=256),(0,h.assertIsHexString)(t),(0,r.keccak)((0,u.toBuffer)(t),e)};r.keccakFromArray=function(t,e){return void 0===e&&(e=256),(0,h.assertIsArray)(t),(0,r.keccak)((0,u.toBuffer)(t),e)};var a=function(t){return t=(0,u.toBuffer)(t),o("sha256").update(t).digest()};r.sha256=function(t){return(0,h.assertIsBuffer)(t),a(t)};r.sha256FromString=function(t){return(0,h.assertIsString)(t),a(t)};r.sha256FromArray=function(t){return(0,h.assertIsArray)(t),a(t)};var f=function(t,r){t=(0,u.toBuffer)(t);var e=o("rmd160").update(t).digest();return!0===r?(0,u.setLengthLeft)(e,32):e};r.ripemd160=function(t,r){return(0,h.assertIsBuffer)(t),f(t,r)};r.ripemd160FromString=function(t,r){return(0,h.assertIsString)(t),f(t,r)};r.ripemd160FromArray=function(t,r){return(0,h.assertIsArray)(t),f(t,r)};r.rlphash=function(t){return(0,r.keccak)(s.rlp.encode(t))}},46350:function(t,r,e){"use strict";var i=e(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.assertIsString=r.assertIsArray=r.assertIsBuffer=r.assertIsHexString=void 0;var n=e(92644);r.assertIsHexString=function(t){if(!(0,n.isHexString)(t)){var r="This method only supports 0x-prefixed hex strings but input was: ".concat(t);throw new Error(r)}};r.assertIsBuffer=function(t){if(!i.isBuffer(t)){var r="This method only supports Buffer but input was: ".concat(t);throw new Error(r)}};r.assertIsArray=function(t){if(!Array.isArray(t)){var r="This method only supports number arrays but input was: ".concat(t);throw new Error(r)}};r.assertIsString=function(t){if("string"!=typeof t){var r="This method only supports strings but input was: ".concat(t);throw new Error(r)}}},74370:function(t,r,e){"use strict";var i=this&&this.__createBinding||(Object.create?function(t,r,e,i){void 0===i&&(i=e),Object.defineProperty(t,i,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,i){void 0===i&&(i=e),t[i]=r[e]}),n=this&&this.__exportStar||function(t,r){for(var e in t)"default"===e||Object.prototype.hasOwnProperty.call(r,e)||i(r,t,e)};Object.defineProperty(r,"__esModule",{value:!0}),r.isHexString=r.getKeys=r.fromAscii=r.fromUtf8=r.toAscii=r.arrayContainsArray=r.getBinarySize=r.padToEven=r.stripHexPrefix=r.isHexPrefixed=void 0,n(e(1797),r),n(e(1297),r),n(e(9380),r),n(e(39529),r),n(e(41612),r),n(e(10215),r),n(e(30499),r),n(e(7231),r),n(e(25309),r);var o=e(92644);Object.defineProperty(r,"isHexPrefixed",{enumerable:!0,get:function(){return o.isHexPrefixed}}),Object.defineProperty(r,"stripHexPrefix",{enumerable:!0,get:function(){return o.stripHexPrefix}}),Object.defineProperty(r,"padToEven",{enumerable:!0,get:function(){return o.padToEven}}),Object.defineProperty(r,"getBinarySize",{enumerable:!0,get:function(){return o.getBinarySize}}),Object.defineProperty(r,"arrayContainsArray",{enumerable:!0,get:function(){return o.arrayContainsArray}}),Object.defineProperty(r,"toAscii",{enumerable:!0,get:function(){return o.toAscii}}),Object.defineProperty(r,"fromUtf8",{enumerable:!0,get:function(){return o.fromUtf8}}),Object.defineProperty(r,"fromAscii",{enumerable:!0,get:function(){return o.fromAscii}}),Object.defineProperty(r,"getKeys",{enumerable:!0,get:function(){return o.getKeys}}),Object.defineProperty(r,"isHexString",{enumerable:!0,get:function(){return o.isHexString}})},92644:function(t,r,e){"use strict";var i=e(23085).Buffer;function n(t){if("string"!=typeof t)throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof t));return"0"===t[0]&&"x"===t[1]}Object.defineProperty(r,"__esModule",{value:!0}),r.isHexString=r.getKeys=r.fromAscii=r.fromUtf8=r.toAscii=r.arrayContainsArray=r.getBinarySize=r.padToEven=r.stripHexPrefix=r.isHexPrefixed=void 0,r.isHexPrefixed=n;function o(t){var r=t;if("string"!=typeof r)throw new Error("[padToEven] value must be type 'string', received ".concat(typeof r));return r.length%2&&(r="0".concat(r)),r}r.stripHexPrefix=function(t){if("string"!=typeof t)throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof t));return n(t)?t.slice(2):t},r.padToEven=o,r.getBinarySize=function(t){if("string"!=typeof t)throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof t));return i.byteLength(t,"utf8")},r.arrayContainsArray=function(t,r,e){if(!0!==Array.isArray(t))throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof t,"'"));if(!0!==Array.isArray(r))throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof r,"'"));return r[e?"some":"every"]((function(r){return t.indexOf(r)>=0}))},r.toAscii=function(t){var r="",e=0,i=t.length;for("0x"===t.substring(0,2)&&(e=2);e<i;e+=2){var n=parseInt(t.substr(e,2),16);r+=String.fromCharCode(n)}return r},r.fromUtf8=function(t){var r=i.from(t,"utf8");return"0x".concat(o(r.toString("hex")).replace(/^0+|0+$/g,""))},r.fromAscii=function(t){for(var r="",e=0;e<t.length;e++){var i=t.charCodeAt(e).toString(16);r+=i.length<2?"0".concat(i):i}return"0x".concat(r)},r.getKeys=function(t,r,e){if(!Array.isArray(t))throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof t));if("string"!=typeof r)throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof t));for(var i=[],n=0;n<t.length;n++){var o=t[n][r];if(e&&!o)o="";else if("string"!=typeof o)throw new Error("invalid abi - expected type 'string', received ".concat(typeof o));i.push(o)}return i},r.isHexString=function(t,r){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/))&&(!r||t.length===2+2*r)}},30499:function(t,r,e){"use strict";var i=e(23085).Buffer,n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0}),r.defineProperties=void 0;var o=n(e(69282)),s=e(92644),u=e(7231),h=e(10215);r.defineProperties=function(t,r,e){if(t.raw=[],t._fields=[],t.toJSON=function(r){if(void 0===r&&(r=!1),r){var e={};return t._fields.forEach((function(r){e[r]="0x".concat(t[r].toString("hex"))})),e}return(0,h.baToJSON)(t.raw)},t.serialize=function(){return u.rlp.encode(t.raw)},r.forEach((function(r,e){function n(){return t.raw[e]}function s(n){"00"!==(n=(0,h.toBuffer)(n)).toString("hex")||r.allowZero||(n=i.allocUnsafe(0)),r.allowLess&&r.length?(n=(0,h.unpadBuffer)(n),(0,o.default)(r.length>=n.length,"The field ".concat(r.name," must not have more ").concat(r.length," bytes"))):r.allowZero&&0===n.length||!r.length||(0,o.default)(r.length===n.length,"The field ".concat(r.name," must have byte length of ").concat(r.length)),t.raw[e]=n}t._fields.push(r.name),Object.defineProperty(t,r.name,{enumerable:!0,configurable:!0,get:n,set:s}),r.default&&(t[r.name]=r.default),r.alias&&Object.defineProperty(t,r.alias,{enumerable:!1,configurable:!0,set:s,get:n})})),e)if("string"==typeof e&&(e=i.from((0,s.stripHexPrefix)(e),"hex")),i.isBuffer(e)&&(e=u.rlp.decode(e)),Array.isArray(e)){if(e.length>t._fields.length)throw new Error("wrong number of fields in data");e.forEach((function(r,e){t[t._fields[e]]=(0,h.toBuffer)(r)}))}else{if("object"!=typeof e)throw new Error("invalid data");var n=Object.keys(e);r.forEach((function(r){-1!==n.indexOf(r.name)&&(t[r.name]=e[r.name]),-1!==n.indexOf(r.alias)&&(t[r.alias]=e[r.alias])}))}}},41612:function(t,r,e){"use strict";var i=e(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.hashPersonalMessage=r.isValidSignature=r.fromRpcSig=r.toCompactSig=r.toRpcSig=r.ecrecover=r.ecsign=void 0;var n=e(95053),o=e(7231),s=e(10215),u=e(39529),h=e(46350),a=e(25309);function f(t,r){var e=(0,a.toType)(t,a.TypeOutput.BN);if(!r)return e.subn(27);var i=(0,a.toType)(r,a.TypeOutput.BN);return e.sub(i.muln(2).addn(35))}function l(t){var r=new o.BN(t);return r.eqn(0)||r.eqn(1)}r.ecsign=function(t,r,e){var o=(0,n.ecdsaSign)(t,r),s=o.signature,u=o.recid,h=i.from(s.slice(0,32)),f=i.from(s.slice(32,64));if(!e||"number"==typeof e){if(e&&!Number.isSafeInteger(e))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");return{r:h,s:f,v:e?u+(2*e+35):u+27}}return{r:h,s:f,v:(0,a.toType)(e,a.TypeOutput.BN).muln(2).addn(35).addn(u).toArrayLike(i)}};r.ecrecover=function(t,r,e,o,u){var h=i.concat([(0,s.setLengthLeft)(e,32),(0,s.setLengthLeft)(o,32)],64),a=f(r,u);if(!l(a))throw new Error("Invalid signature v value");var d=(0,n.ecdsaRecover)(h,a.toNumber(),t);return i.from((0,n.publicKeyConvert)(d,!1).slice(1))};r.toRpcSig=function(t,r,e,n){if(!l(f(t,n)))throw new Error("Invalid signature v value");return(0,s.bufferToHex)(i.concat([(0,s.setLengthLeft)(r,32),(0,s.setLengthLeft)(e,32),(0,s.toBuffer)(t)]))};r.toCompactSig=function(t,r,e,n){if(!l(f(t,n)))throw new Error("Invalid signature v value");var o=(0,a.toType)(t,a.TypeOutput.Number),u=e;return(o>28&&o%2==1||1===o||28===o)&&((u=i.from(e))[0]|=128),(0,s.bufferToHex)(i.concat([(0,s.setLengthLeft)(r,32),(0,s.setLengthLeft)(u,32)]))};r.fromRpcSig=function(t){var r,e,i,n=(0,s.toBuffer)(t);if(n.length>=65)r=n.slice(0,32),e=n.slice(32,64),i=(0,s.bufferToInt)(n.slice(64));else{if(64!==n.length)throw new Error("Invalid signature length");r=n.slice(0,32),e=n.slice(32,64),i=(0,s.bufferToInt)(n.slice(32,33))>>7,e[0]&=127}return i<27&&(i+=27),{v:i,r:r,s:e}};r.isValidSignature=function(t,r,e,i,n){void 0===i&&(i=!0);var s=new o.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),u=new o.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);if(32!==r.length||32!==e.length)return!1;if(!l(f(t,n)))return!1;var h=new o.BN(r),a=new o.BN(e);return!(h.isZero()||h.gt(u)||a.isZero()||a.gt(u))&&(!i||1!==a.cmp(s))};r.hashPersonalMessage=function(t){(0,h.assertIsBuffer)(t);var r=i.from("Ethereum Signed Message:\n".concat(t.length),"utf-8");return(0,u.keccak)(i.concat([r,t]))}},25309:function(t,r,e){"use strict";var i=e(23085).Buffer;Object.defineProperty(r,"__esModule",{value:!0}),r.toType=r.TypeOutput=r.bnToRlp=r.bnToUnpaddedBuffer=r.bnToHex=void 0;var n,o=e(7231),s=e(92644),u=e(10215);function h(t){return(0,u.unpadBuffer)(t.toArrayLike(i))}r.bnToHex=function(t){return"0x".concat(t.toString(16))},r.bnToUnpaddedBuffer=h,r.bnToRlp=function(t){return h(t)},function(t){t[t.Number=0]="Number",t[t.BN=1]="BN",t[t.Buffer=2]="Buffer",t[t.PrefixedHexString=3]="PrefixedHexString"}(n=r.TypeOutput||(r.TypeOutput={})),r.toType=function(t,r){if(null===t)return null;if(void 0!==t){if("string"==typeof t&&!(0,s.isHexString)(t))throw new Error("A string must be provided with a 0x-prefix, given: ".concat(t));if("number"==typeof t&&!Number.isSafeInteger(t))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");var e=(0,u.toBuffer)(t);if(r===n.Buffer)return e;if(r===n.BN)return new o.BN(e);if(r===n.Number){var i=new o.BN(e),h=new o.BN(Number.MAX_SAFE_INTEGER.toString());if(i.gt(h))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");return i.toNumber()}return"0x".concat(e.toString("hex"))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy05ZDE3OGEzYy5mNDMwYjM5NTMyOTkyNGYwZjRlOS5qcyIsIm1hcHBpbmdzIjoicUdBQUEsU0FBV0EsRUFBUUMsR0FDakIsYUFHQSxTQUFTQyxFQUFRQyxFQUFLQyxHQUNwQixJQUFLRCxFQUFLLE1BQU0sSUFBSUUsTUFBTUQsR0FBTyxvQkFLbkMsU0FBU0UsRUFBVUMsRUFBTUMsR0FDdkJELEVBQUtFLE9BQVNELEVBQ2QsSUFBSUUsRUFBVyxhQUNmQSxFQUFTQyxVQUFZSCxFQUFVRyxVQUMvQkosRUFBS0ksVUFBWSxJQUFJRCxFQUNyQkgsRUFBS0ksVUFBVUMsWUFBY0wsRUFLL0IsU0FBU00sRUFBSUMsRUFBUUMsRUFBTUMsR0FDekIsR0FBSUgsRUFBR0ksS0FBS0gsR0FDVixPQUFPQSxFQUdUSSxLQUFLQyxTQUFXLEVBQ2hCRCxLQUFLRSxNQUFRLEtBQ2JGLEtBQUtHLE9BQVMsRUFHZEgsS0FBS0ksSUFBTSxLQUVJLE9BQVhSLElBQ1csT0FBVEMsR0FBMEIsT0FBVEEsSUFDbkJDLEVBQVNELEVBQ1RBLEVBQU8sSUFHVEcsS0FBS0ssTUFBTVQsR0FBVSxFQUFHQyxHQUFRLEdBQUlDLEdBQVUsT0FZbEQsSUFBSVEsRUFUa0IsaUJBQVh4QixFQUNUQSxFQUFPQyxRQUFVWSxFQUVqQlosRUFBUVksR0FBS0EsRUFHZkEsRUFBR0EsR0FBS0EsRUFDUkEsRUFBR1ksU0FBVyxHQUdkLElBRUlELEVBRG9CLG9CQUFYRSxhQUFtRCxJQUFsQkEsT0FBT0YsT0FDeENFLE9BQU9GLE9BRVAsZ0JBRVgsTUFBT0csSUFnSVQsU0FBU0MsRUFBZUMsRUFBUUMsR0FDOUIsSUFBSUMsRUFBSUYsRUFBT0csV0FBV0YsR0FFMUIsT0FBSUMsR0FBSyxJQUFNQSxHQUFLLEdBQ1hBLEVBQUksR0FFRkEsR0FBSyxJQUFNQSxHQUFLLEdBQ2xCQSxFQUFJLEdBRUZBLEdBQUssSUFBTUEsR0FBSyxJQUNsQkEsRUFBSSxRQUVYN0IsR0FBTyxFQUFPLHdCQUEwQjJCLEdBSTVDLFNBQVNJ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Yy9JLEdBQ3hELE1BQU0sSUFBSWphLE1BQU0sK0ZBRXBCLElBQUlrYSxHQUFTLEVBQUk4QyxFQUFRbFgsVUFBVW1VLEdBQ25DLEdBQUlpUixJQUFlN0wsRUFBV2xlLE9BQzFCLE9BQU8rWSxFQUVOLEdBQUlnUixJQUFlN0wsRUFBVzdlLEdBQy9CLE9BQU8sSUFBSW9jLEVBQVlwYyxHQUFHMFosR0FFekIsR0FBSWdSLElBQWU3TCxFQUFXMEQsT0FBUSxDQUN2QyxJQUFJb0ksRUFBSyxJQUFJdk8sRUFBWXBjLEdBQUcwWixHQUN4Qm5YLEVBQU0sSUFBSTZaLEVBQVlwYyxHQUFHdWlCLE9BQU9xSSxpQkFBaUIvbkIsWUFDckQsR0FBSThuQixFQUFHOVUsR0FBR3RULEdBQ04sTUFBTSxJQUFJL0MsTUFBTSxnR0FFcEIsT0FBT21yQixFQUFHeGxCLFdBSVYsTUFBTyxLQUFLd2EsT0FBT2pHLEVBQU83VyxTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC5icm93c2VyL2FjY291bnQuanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC5icm93c2VyL2FkZHJlc3MuanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC5icm93c2VyL2J5dGVzLmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL2NvbW1vbi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QuYnJvd3Nlci9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC5icm93c2VyL2V4dGVybmFscy5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0LmJyb3dzZXIvaGFzaC5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0LmJyb3dzZXIvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0LmJyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC5icm93c2VyL2ludGVybmFsLmpzIiwid2VicGFjazovL2h1Z2lyaXMtbmZ0Ly4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL2NvbW1vbi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QuYnJvd3Nlci9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vaHVnaXJpcy1uZnQvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC5icm93c2VyL3NpZ25hdHVyZS5qcyIsIndlYnBhY2s6Ly9odWdpcmlzLW5mdC8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0LmJyb3dzZXIvdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5CdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBCdWZmZXIgPSB3aW5kb3cuQnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gIH1cblxuICBCTi5pc0JOID0gZnVuY3Rpb24gaXNCTiAobnVtKSB7XG4gICAgaWYgKG51bSBpbnN0YW5jZW9mIEJOKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtICE9PSBudWxsICYmIHR5cGVvZiBudW0gPT09ICdvYmplY3QnICYmXG4gICAgICBudW0uY29uc3RydWN0b3Iud29yZFNpemUgPT09IEJOLndvcmRTaXplICYmIEFycmF5LmlzQXJyYXkobnVtLndvcmRzKTtcbiAgfTtcblxuICBCTi5tYXggPSBmdW5jdGlvbiBtYXggKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA+IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5taW4gPSBmdW5jdGlvbiBtaW4gKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA8IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBiYXNlID0gMTY7XG4gICAgfVxuICAgIGFzc2VydChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KTtcblxuICAgIG51bWJlciA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICBzdGFydCsrO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0IDwgbnVtYmVyLmxlbmd0aCkge1xuICAgICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQsIGVuZGlhbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgICAgIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgICAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtudW1iZXIgJiAweDNmZmZmZmZdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFswXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKG51bWJlci5sZW5ndGggLyAzKTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIHZhciBvZmYgPSAwO1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxLCBqID0gMDsgaSA+PSAwOyBpIC09IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSAtIDFdIDw8IDgpIHwgKG51bWJlcltpIC0gMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgKyAxXSA8PCA4KSB8IChudW1iZXJbaSArIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleDRCaXRzIChzdHJpbmcsIGluZGV4KSB7XG4gICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCk7XG4gICAgLy8gJzAnIC0gJzknXG4gICAgaWYgKGMgPj0gNDggJiYgYyA8PSA1Nykge1xuICAgICAgcmV0dXJuIGMgLSA0ODtcbiAgICAvLyAnQScgLSAnRidcbiAgICB9IGVsc2UgaWYgKGMgPj0gNjUgJiYgYyA8PSA3MCkge1xuICAgICAgcmV0dXJuIGMgLSA1NTtcbiAgICAvLyAnYScgLSAnZidcbiAgICB9IGVsc2UgaWYgKGMgPj0gOTcgJiYgYyA8PSAxMDIpIHtcbiAgICAgIHJldHVybiBjIC0gODc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ0ludmFsaWQgY2hhcmFjdGVyIGluICcgKyBzdHJpbmcpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4Qnl0ZSAoc3RyaW5nLCBsb3dlckJvdW5kLCBpbmRleCkge1xuICAgIHZhciByID0gcGFyc2VIZXg0Qml0cyhzdHJpbmcsIGluZGV4KTtcbiAgICBpZiAoaW5kZXggLSAxID49IGxvd2VyQm91bmQpIHtcbiAgICAgIHIgfD0gcGFyc2VIZXg0Qml0cyhzdHJpbmcsIGluZGV4IC0gMSkgPDwgNDtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlSGV4ID0gZnVuY3Rpb24gX3BhcnNlSGV4IChudW1iZXIsIHN0YXJ0LCBlbmRpYW4pIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICAvLyAyNC1iaXRzIGNodW5rc1xuICAgIHZhciBvZmYgPSAwO1xuICAgIHZhciBqID0gMDtcblxuICAgIHZhciB3O1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxOyBpID49IHN0YXJ0OyBpIC09IDIpIHtcbiAgICAgICAgdyA9IHBhcnNlSGV4Qnl0ZShudW1iZXIsIHN0YXJ0LCBpKSA8PCBvZmY7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gdyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgaWYgKG9mZiA+PSAxOCkge1xuICAgICAgICAgIG9mZiAtPSAxODtcbiAgICAgICAgICBqICs9IDE7XG4gICAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ID4+PiAyNjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmYgKz0gODtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFyc2VMZW5ndGggPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgICBmb3IgKGkgPSBwYXJzZUxlbmd0aCAlIDIgPT09IDAgPyBzdGFydCArIDEgOiBzdGFydDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICB3ID0gcGFyc2VIZXhCeXRlKG51bWJlciwgc3RhcnQsIGkpIDw8IG9mZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ICYgMHgzZmZmZmZmO1xuICAgICAgICBpZiAob2ZmID49IDE4KSB7XG4gICAgICAgICAgb2ZmIC09IDE4O1xuICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgPj4+IDI2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZiArPSA4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBiID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByICo9IG11bDtcblxuICAgICAgLy8gJ2EnXG4gICAgICBpZiAoYyA+PSA0OSkge1xuICAgICAgICBiID0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICBiID0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIgPSBjO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGMgPj0gMCAmJiBiIDwgbXVsLCAnSW52YWxpZCBjaGFyYWN0ZXInKTtcbiAgICAgIHIgKz0gYjtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWzBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKGRlc3QpIHtcbiAgICBkZXN0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlc3Qud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgIH1cbiAgICBkZXN0Lmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIGRlc3QubmVnYXRpdmUgPSB0aGlzLm5lZ2F0aXZlO1xuICAgIGRlc3QucmVkID0gdGhpcy5yZWQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gbW92ZSAoZGVzdCwgc3JjKSB7XG4gICAgZGVzdC53b3JkcyA9IHNyYy53b3JkcztcbiAgICBkZXN0Lmxlbmd0aCA9IHNyYy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHNyYy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHNyYy5yZWQ7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX21vdmUgPSBmdW5jdGlvbiBfbW92ZSAoZGVzdCkge1xuICAgIG1vdmUoZGVzdCwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgIHZhciByID0gbmV3IEJOKG51bGwpO1xuICAgIHRoaXMuY29weShyKTtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2V4cGFuZCA9IGZ1bmN0aW9uIF9leHBhbmQgKHNpemUpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBzaXplKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gUmVtb3ZlIGxlYWRpbmcgYDBgIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5fc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gQ2hlY2sgU3ltYm9sLmZvciBiZWNhdXNlIG5vdCBldmVyeXdoZXJlIHdoZXJlIFN5bWJvbCBkZWZpbmVkXG4gIC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TeW1ib2wjQnJvd3Nlcl9jb21wYXRpYmlsaXR5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgU3ltYm9sLmZvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICBCTi5wcm90b3R5cGVbU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0gPSBpbnNwZWN0O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gaW5zcGVjdDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBpbnNwZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH1cblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2Rybihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNiwgMik7XG4gIH07XG5cbiAgaWYgKEJ1ZmZlcikge1xuICAgIEJOLnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uIHRvQnVmZmVyIChlbmRpYW4sIGxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQnVmZmVyLCBlbmRpYW4sIGxlbmd0aCk7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIGFsbG9jYXRlIChBcnJheVR5cGUsIHNpemUpIHtcbiAgICBpZiAoQXJyYXlUeXBlLmFsbG9jVW5zYWZlKSB7XG4gICAgICByZXR1cm4gQXJyYXlUeXBlLmFsbG9jVW5zYWZlKHNpemUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEFycmF5VHlwZShzaXplKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHRoaXMuX3N0cmlwKCk7XG5cbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCgpO1xuICAgIHZhciByZXFMZW5ndGggPSBsZW5ndGggfHwgTWF0aC5tYXgoMSwgYnl0ZUxlbmd0aCk7XG4gICAgYXNzZXJ0KGJ5dGVMZW5ndGggPD0gcmVxTGVuZ3RoLCAnYnl0ZSBhcnJheSBsb25nZXIgdGhhbiBkZXNpcmVkIGxlbmd0aCcpO1xuICAgIGFzc2VydChyZXFMZW5ndGggPiAwLCAnUmVxdWVzdGVkIGFycmF5IGxlbmd0aCA8PSAwJyk7XG5cbiAgICB2YXIgcmVzID0gYWxsb2NhdGUoQXJyYXlUeXBlLCByZXFMZW5ndGgpO1xuICAgIHZhciBwb3N0Zml4ID0gZW5kaWFuID09PSAnbGUnID8gJ0xFJyA6ICdCRSc7XG4gICAgdGhpc1snX3RvQXJyYXlMaWtlJyArIHBvc3RmaXhdKHJlcywgYnl0ZUxlbmd0aCk7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3RvQXJyYXlMaWtlTEUgPSBmdW5jdGlvbiBfdG9BcnJheUxpa2VMRSAocmVzLCBieXRlTGVuZ3RoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gMDtcbiAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIHNoaWZ0ID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3b3JkID0gKHRoaXMud29yZHNbaV0gPDwgc2hpZnQpIHwgY2Fycnk7XG5cbiAgICAgIHJlc1twb3NpdGlvbisrXSA9IHdvcmQgJiAweGZmO1xuICAgICAgaWYgKHBvc2l0aW9uIDwgcmVzLmxlbmd0aCkge1xuICAgICAgICByZXNbcG9zaXRpb24rK10gPSAod29yZCA+PiA4KSAmIDB4ZmY7XG4gICAgICB9XG4gICAgICBpZiAocG9zaXRpb24gPCByZXMubGVuZ3RoKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbisrXSA9ICh3b3JkID4+IDE2KSAmIDB4ZmY7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGlmdCA9PT0gNikge1xuICAgICAgICBpZiAocG9zaXRpb24gPCByZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmVzW3Bvc2l0aW9uKytdID0gKHdvcmQgPj4gMjQpICYgMHhmZjtcbiAgICAgICAgfVxuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICAgIHNoaWZ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcnJ5ID0gd29yZCA+Pj4gMjQ7XG4gICAgICAgIHNoaWZ0ICs9IDI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgcmVzLmxlbmd0aCkge1xuICAgICAgcmVzW3Bvc2l0aW9uKytdID0gY2Fycnk7XG5cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA8IHJlcy5sZW5ndGgpIHtcbiAgICAgICAgcmVzW3Bvc2l0aW9uKytdID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl90b0FycmF5TGlrZUJFID0gZnVuY3Rpb24gX3RvQXJyYXlMaWtlQkUgKHJlcywgYnl0ZUxlbmd0aCkge1xuICAgIHZhciBwb3NpdGlvbiA9IHJlcy5sZW5ndGggLSAxO1xuICAgIHZhciBjYXJyeSA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgc2hpZnQgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHdvcmQgPSAodGhpcy53b3Jkc1tpXSA8PCBzaGlmdCkgfCBjYXJyeTtcblxuICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gd29yZCAmIDB4ZmY7XG4gICAgICBpZiAocG9zaXRpb24gPj0gMCkge1xuICAgICAgICByZXNbcG9zaXRpb24tLV0gPSAod29yZCA+PiA4KSAmIDB4ZmY7XG4gICAgICB9XG4gICAgICBpZiAocG9zaXRpb24gPj0gMCkge1xuICAgICAgICByZXNbcG9zaXRpb24tLV0gPSAod29yZCA+PiAxNikgJiAweGZmO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hpZnQgPT09IDYpIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uID49IDApIHtcbiAgICAgICAgICByZXNbcG9zaXRpb24tLV0gPSAod29yZCA+PiAyNCkgJiAweGZmO1xuICAgICAgICB9XG4gICAgICAgIGNhcnJ5ID0gMDtcbiAgICAgICAgc2hpZnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3b3JkID4+PiAyNDtcbiAgICAgICAgc2hpZnQgKz0gMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPj0gMCkge1xuICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gY2Fycnk7XG5cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA+PSAwKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbi0tXSA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSA+Pj4gd2JpdCkgJiAweDAxO1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYW5kID0gZnVuY3Rpb24gaWFuZCAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVhbmQobnVtKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhbmQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVhbmQgPSBmdW5jdGlvbiB1YW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1YW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1YW5kKHRoaXMpO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXV4b3IgPSBmdW5jdGlvbiBpdXhvciAobnVtKSB7XG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhO1xuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV0gXiBiLndvcmRzW2ldO1xuICAgIH1cblxuICAgIGlmICh0aGlzICE9PSBhKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChudW0pIHtcbiAgICB2YXIgcjtcblxuICAgIC8vIG5lZ2F0aXZlICsgcG9zaXRpdmVcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG5cbiAgICAvLyBwb3NpdGl2ZSArIG5lZ2F0aXZlXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGhdID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIC8vIENvcHkgdGhlIHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgfSBlbHNlIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChudW0pIHtcbiAgICB2YXIgcmVzO1xuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDAgJiYgdGhpcy5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IHRoaXMuc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIGlmIChudW0ubmVnYXRpdmUgPT09IDAgJiYgdGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSBudW0uc3ViKHRoaXMpO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZChudW0pO1xuXG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhZGQodGhpcyk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChudW0pIHtcbiAgICAvLyB0aGlzIC0gKC1udW0pID0gdGhpcyArIG51bVxuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICB2YXIgciA9IHRoaXMuaWFkZChudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gLXRoaXMgLSBudW0gPSAtKHRoaXMgKyBudW0pXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZChudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmVcbiAgICB2YXIgY21wID0gdGhpcy5jbXAobnVtKTtcblxuICAgIC8vIE9wdGltaXphdGlvbiAtIHplcm9pZnlcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gYSA+IGJcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoY21wID4gMCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApIC0gKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIENvcHkgcmVzdCBvZiB0aGUgd29yZHNcbiAgICBpZiAoY2FycnkgPT09IDAgJiYgaSA8IGEubGVuZ3RoICYmIGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpKTtcblxuICAgIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0Ll9zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuX3N0cmlwKCk7XG4gIH1cblxuICBmdW5jdGlvbiBqdW1ib011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIC8vIFRlbXBvcmFyeSBkaXNhYmxlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvaXNzdWVzLzIxMVxuICAgIC8vIHZhciBmZnRtID0gbmV3IEZGVE0oKTtcbiAgICAvLyByZXR1cm4gZmZ0bS5tdWxwKHNlbGYsIG51bSwgb3V0KTtcbiAgICByZXR1cm4gYmlnTXVsVG8oc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuX3N0cmlwKCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgYHRoaXNgIGJ5IGBudW1gXG4gIEJOLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXMubXVsVG8obnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGVtcGxveWluZyBGRlRcbiAgQk4ucHJvdG90eXBlLm11bGYgPSBmdW5jdGlvbiBtdWxmIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBNdWx0aXBsaWNhdGlvblxuICBCTi5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubXVsVG8obnVtLCB0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW11bG4gPSBmdW5jdGlvbiBpbXVsbiAobnVtKSB7XG4gICAgdmFyIGlzTmVnTnVtID0gbnVtIDwgMDtcbiAgICBpZiAoaXNOZWdOdW0pIG51bSA9IC1udW07XG5cbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiBpc05lZ051bSA/IHRoaXMuaW5lZygpIDogdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubXVsbiA9IGZ1bmN0aW9uIG11bG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW11bG4obnVtKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKHRoaXMpO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLmltdWwodGhpcy5jbG9uZSgpKTtcbiAgfTtcblxuICAvLyBNYXRoLnBvdyhgdGhpc2AsIGBudW1gKVxuICBCTi5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChudW0pIHtcbiAgICB2YXIgdyA9IHRvQml0QXJyYXkobnVtKTtcbiAgICBpZiAody5sZW5ndGggPT09IDApIHJldHVybiBuZXcgQk4oMSk7XG5cbiAgICAvLyBTa2lwIGxlYWRpbmcgemVyb2VzXG4gICAgdmFyIHJlcyA9IHRoaXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3Lmxlbmd0aDsgaSsrLCByZXMgPSByZXMuc3FyKCkpIHtcbiAgICAgIGlmICh3W2ldICE9PSAwKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoKytpIDwgdy5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIHEgPSByZXMuc3FyKCk7IGkgPCB3Lmxlbmd0aDsgaSsrLCBxID0gcS5zcXIoKSkge1xuICAgICAgICBpZiAod1tpXSA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gcmVzLm11bChxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnQgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1c2hsbiA9IGZ1bmN0aW9uIGl1c2hsbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcbiAgICB2YXIgY2FycnlNYXNrID0gKDB4M2ZmZmZmZiA+Pj4gKDI2IC0gcikpIDw8ICgyNiAtIHIpO1xuICAgIHZhciBpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuZXdDYXJyeSA9IHRoaXMud29yZHNbaV0gJiBjYXJyeU1hc2s7XG4gICAgICAgIHZhciBjID0gKCh0aGlzLndvcmRzW2ldIHwgMCkgLSBuZXdDYXJyeSkgPDwgcjtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGMgfCBjYXJyeTtcbiAgICAgICAgY2FycnkgPSBuZXdDYXJyeSA+Pj4gKDI2IC0gcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYXJyeSkge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHMgIT09IDApIHtcbiAgICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgc10gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxlbmd0aCArPSBzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5tYXNrbiA9IGZ1bmN0aW9uIG1hc2tuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbWFza24oYml0cyk7XG4gIH07XG5cbiAgLy8gQWRkIHBsYWluIG51bWJlciBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlhZGRuID0gZnVuY3Rpb24gaWFkZG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlzdWJuKC1udW0pO1xuXG4gICAgLy8gUG9zc2libGUgc2lnbiBjaGFuZ2VcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmICh0aGlzLndvcmRzWzBdIHwgMCkgPD0gbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuXG4gICAgLy8gU3VidHJhY3Rpb24gb3ZlcmZsb3dcbiAgICBhc3NlcnQoY2FycnkgPT09IC0xKTtcbiAgICBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAtKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5fc3RyaXAoKTtcbiAgICB9XG4gICAgYS5fc3RyaXAoKTtcblxuICAgIC8vIERlbm9ybWFsaXplXG4gICAgaWYgKG1vZGUgIT09ICdkaXYnICYmIHNoaWZ0ICE9PSAwKSB7XG4gICAgICBhLml1c2hybihzaGlmdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpdjogcSB8fCBudWxsLFxuICAgICAgbW9kOiBhXG4gICAgfTtcbiAgfTtcblxuICAvLyBOT1RFOiAxKSBgbW9kZWAgY2FuIGJlIHNldCB0byBgbW9kYCB0byByZXF1ZXN0IG1vZCBvbmx5LFxuICAvLyAgICAgICB0byBgZGl2YCB0byByZXF1ZXN0IGRpdiBvbmx5LCBvciBiZSBhYnNlbnQgdG9cbiAgLy8gICAgICAgcmVxdWVzdCBib3RoIGRpdiAmIG1vZFxuICAvLyAgICAgICAyKSBgcG9zaXRpdmVgIGlzIHRydWUgaWYgdW5zaWduZWQgbW9kIGlzIHJlcXVlc3RlZFxuICBCTi5wcm90b3R5cGUuZGl2bW9kID0gZnVuY3Rpb24gZGl2bW9kIChudW0sIG1vZGUsIHBvc2l0aXZlKSB7XG4gICAgYXNzZXJ0KCFudW0uaXNaZXJvKCkpO1xuXG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IG5ldyBCTigwKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGl2LCBtb2QsIHJlcztcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pYWRkKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IHJlcy5tb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLm5lZ2F0aXZlICYgbnVtLm5lZ2F0aXZlKSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaXN1YihudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogcmVzLmRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZSBhdCB0aGlzIHBvaW50XG5cbiAgICAvLyBTdHJpcCBib3RoIG51bWJlcnMgdG8gYXBwcm94aW1hdGUgc2hpZnQgdmFsdWVcbiAgICBpZiAobnVtLmxlbmd0aCA+IHRoaXMubGVuZ3RoIHx8IHRoaXMuY21wKG51bSkgPCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiB0aGlzXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFZlcnkgc2hvcnQgcmVkdWN0aW9uXG4gICAgaWYgKG51bS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmIChtb2RlID09PSAnZGl2Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgICAgbW9kOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlID09PSAnbW9kJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogbnVsbCxcbiAgICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZHJuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kcm4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgKHIyID09PSAxICYmIGNtcCA9PT0gMCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZHJuID0gZnVuY3Rpb24gbW9kcm4gKG51bSkge1xuICAgIHZhciBpc05lZ051bSA9IG51bSA8IDA7XG4gICAgaWYgKGlzTmVnTnVtKSBudW0gPSAtbnVtO1xuXG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzTmVnTnVtID8gLWFjYyA6IGFjYztcbiAgfTtcblxuICAvLyBXQVJOSU5HOiBERVBSRUNBVEVEXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kcm4obnVtKTtcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIHZhciBpc05lZ051bSA9IG51bSA8IDA7XG4gICAgaWYgKGlzTmVnTnVtKSBudW0gPSAtbnVtO1xuXG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdHJpcCgpO1xuICAgIHJldHVybiBpc05lZ051bSA/IHRoaXMuaW5lZygpIDogdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLl9zdHJpcCgpO1xuXG4gICAgdmFyIHJlcztcbiAgICBpZiAodGhpcy5sZW5ndGggPiAxKSB7XG4gICAgICByZXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmVnYXRpdmUpIHtcbiAgICAgICAgbnVtID0gLW51bTtcbiAgICAgIH1cblxuICAgICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYsICdOdW1iZXIgaXMgdG9vIGJpZycpO1xuXG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbMF0gfCAwO1xuICAgICAgcmVzID0gdyA9PT0gbnVtID8gMCA6IHcgPCBudW0gPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb21wYXJlIHR3byBudW1iZXJzIGFuZCByZXR1cm46XG4gIC8vIDEgLSBpZiBgdGhpc2AgPiBgbnVtYFxuICAvLyAwIC0gaWYgYHRoaXNgID09IGBudW1gXG4gIC8vIC0xIC0gaWYgYHRoaXNgIDwgYG51bWBcbiAgQk4ucHJvdG90eXBlLmNtcCA9IGZ1bmN0aW9uIGNtcCAobnVtKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gMTtcblxuICAgIHZhciByZXMgPSB0aGlzLnVjbXAobnVtKTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gVW5zaWduZWQgY29tcGFyaXNvblxuICBCTi5wcm90b3R5cGUudWNtcCA9IGZ1bmN0aW9uIHVjbXAgKG51bSkge1xuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGhhdmUgdGhlIHNhbWUgc2lnblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiAxO1xuICAgIGlmICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHJldHVybiAtMTtcblxuICAgIHZhciByZXMgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgYSA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdmFyIGIgPSBudW0ud29yZHNbaV0gfCAwO1xuXG4gICAgICBpZiAoYSA9PT0gYikgY29udGludWU7XG4gICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgcmVzID0gLTE7XG4gICAgICB9IGVsc2UgaWYgKGEgPiBiKSB7XG4gICAgICAgIHJlcyA9IDE7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RuID0gZnVuY3Rpb24gZ3RuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ID0gZnVuY3Rpb24gZ3QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGVuID0gZnVuY3Rpb24gZ3RlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZSA9IGZ1bmN0aW9uIGd0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRuID0gZnVuY3Rpb24gbHRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdCA9IGZ1bmN0aW9uIGx0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZW4gPSBmdW5jdGlvbiBsdGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlID0gZnVuY3Rpb24gbHRlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcW4gPSBmdW5jdGlvbiBlcW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDA7XG4gIH07XG5cbiAgLy9cbiAgLy8gQSByZWR1Y2UgY29udGV4dCwgY291bGQgYmUgdXNpbmcgbW9udGdvbWVyeSBvciBzb21ldGhpbmcgYmV0dGVyLCBkZXBlbmRpbmdcbiAgLy8gb24gdGhlIGBtYCBpdHNlbGYuXG4gIC8vXG4gIEJOLnJlZCA9IGZ1bmN0aW9uIHJlZCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBSZWQobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9SZWQgPSBmdW5jdGlvbiB0b1JlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgcmV0dXJuIGN0eC5jb252ZXJ0VG8odGhpcykuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21SZWQgPSBmdW5jdGlvbiBmcm9tUmVkICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdmcm9tUmVkIHdvcmtzIG9ubHkgd2l0aCBudW1iZXJzIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmNvbnZlcnRGcm9tKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZm9yY2VSZWQgPSBmdW5jdGlvbiBfZm9yY2VSZWQgKGN0eCkge1xuICAgIHRoaXMucmVkID0gY3R4O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mb3JjZVJlZCA9IGZ1bmN0aW9uIGZvcmNlUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRBZGQgPSBmdW5jdGlvbiByZWRBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElBZGQgPSBmdW5jdGlvbiByZWRJQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFN1YiA9IGZ1bmN0aW9uIHJlZFN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVN1YiA9IGZ1bmN0aW9uIHJlZElTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU2hsID0gZnVuY3Rpb24gcmVkU2hsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTaGwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNobCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRNdWwgPSBmdW5jdGlvbiByZWRNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5tdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSU11bCA9IGZ1bmN0aW9uIHJlZElNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNxciA9IGZ1bmN0aW9uIHJlZFNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXIodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTcXIgPSBmdW5jdGlvbiByZWRJU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3FyKHRoaXMpO1xuICB9O1xuXG4gIC8vIFNxdWFyZSByb290IG92ZXIgcFxuICBCTi5wcm90b3R5cGUucmVkU3FydCA9IGZ1bmN0aW9uIHJlZFNxcnQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxcnQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcnQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEludm0gPSBmdW5jdGlvbiByZWRJbnZtICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJbnZtIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbnZtKHRoaXMpO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2AgJSBgcmVkIG1vZHVsb2BcbiAgQk4ucHJvdG90eXBlLnJlZE5lZyA9IGZ1bmN0aW9uIHJlZE5lZyAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTmVnIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5uZWcodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFBvdyA9IGZ1bmN0aW9uIHJlZFBvdyAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkICYmICFudW0ucmVkLCAncmVkUG93KG5vcm1hbE51bSknKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQucG93KHRoaXMsIG51bSk7XG4gIH07XG5cbiAgLy8gUHJpbWUgbnVtYmVycyB3aXRoIGVmZmljaWVudCByZWR1Y3Rpb25cbiAgdmFyIHByaW1lcyA9IHtcbiAgICBrMjU2OiBudWxsLFxuICAgIHAyMjQ6IG51bGwsXG4gICAgcDE5MjogbnVsbCxcbiAgICBwMjU1MTk6IG51bGxcbiAgfTtcblxuICAvLyBQc2V1ZG8tTWVyc2VubmUgcHJpbWVcbiAgZnVuY3Rpb24gTVByaW1lIChuYW1lLCBwKSB7XG4gICAgLy8gUCA9IDIgXiBOIC0gS1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5wID0gbmV3IEJOKHAsIDE2KTtcbiAgICB0aGlzLm4gPSB0aGlzLnAuYml0TGVuZ3RoKCk7XG4gICAgdGhpcy5rID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLm4pLmlzdWIodGhpcy5wKTtcblxuICAgIHRoaXMudG1wID0gdGhpcy5fdG1wKCk7XG4gIH1cblxuICBNUHJpbWUucHJvdG90eXBlLl90bXAgPSBmdW5jdGlvbiBfdG1wICgpIHtcbiAgICB2YXIgdG1wID0gbmV3IEJOKG51bGwpO1xuICAgIHRtcC53b3JkcyA9IG5ldyBBcnJheShNYXRoLmNlaWwodGhpcy5uIC8gMTMpKTtcbiAgICByZXR1cm4gdG1wO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaXJlZHVjZSA9IGZ1bmN0aW9uIGlyZWR1Y2UgKG51bSkge1xuICAgIC8vIEFzc3VtZXMgdGhhdCBgbnVtYCBpcyBsZXNzIHRoYW4gYFBeMmBcbiAgICAvLyBudW0gPSBISSAqICgyIF4gTiAtIEspICsgSEkgKiBLICsgTE8gPSBISSAqIEsgKyBMTyAobW9kIFApXG4gICAgdmFyIHIgPSBudW07XG4gICAgdmFyIHJsZW47XG5cbiAgICBkbyB7XG4gICAgICB0aGlzLnNwbGl0KHIsIHRoaXMudG1wKTtcbiAgICAgIHIgPSB0aGlzLmltdWxLKHIpO1xuICAgICAgciA9IHIuaWFkZCh0aGlzLnRtcCk7XG4gICAgICBybGVuID0gci5iaXRMZW5ndGgoKTtcbiAgICB9IHdoaWxlIChybGVuID4gdGhpcy5uKTtcblxuICAgIHZhciBjbXAgPSBybGVuIDwgdGhpcy5uID8gLTEgOiByLnVjbXAodGhpcy5wKTtcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICByLndvcmRzWzBdID0gMDtcbiAgICAgIHIubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAgIHIuaXN1Yih0aGlzLnApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoci5zdHJpcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIHIgaXMgYSBCTiB2NCBpbnN0YW5jZVxuICAgICAgICByLnN0cmlwKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByIGlzIGEgQk4gdjUgaW5zdGFuY2VcbiAgICAgICAgci5fc3RyaXAoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIG1vdmUoYSwgYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpKTtcbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5hZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlhZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLnN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlzdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobCAoYSwgbnVtKSB7XG4gICAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bChhLCBhLmNsb25lKCkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7XG5cbiAgICAvLyBGYXN0IGNhc2VcbiAgICBpZiAobW9kMyA9PT0gMykge1xuICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7XG4gICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTtcbiAgICB9XG5cbiAgICAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpXG4gICAgLy9cbiAgICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7XG4gICAgdmFyIHMgPSAwO1xuICAgIHdoaWxlICghcS5pc1plcm8oKSAmJiBxLmFuZGxuKDEpID09PSAwKSB7XG4gICAgICBzKys7XG4gICAgICBxLml1c2hybigxKTtcbiAgICB9XG4gICAgYXNzZXJ0KCFxLmlzWmVybygpKTtcblxuICAgIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7XG5cbiAgICAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZVxuICAgIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICAgIHZhciBscG93ID0gdGhpcy5tLnN1Ym4oMSkuaXVzaHJuKDEpO1xuICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTtcblxuICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHtcbiAgICAgIHoucmVkSUFkZChuT25lKTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICAgIHZhciByID0gdGhpcy5wb3coYSwgcS5hZGRuKDEpLml1c2hybigxKSk7XG4gICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTtcbiAgICB2YXIgbSA9IHM7XG4gICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICAgIHZhciB0bXAgPSB0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IHRtcC5jbXAob25lKSAhPT0gMDsgaSsrKSB7XG4gICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChpIDwgbSk7XG4gICAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pdXNobG4obSAtIGkgLSAxKSk7XG5cbiAgICAgIHIgPSByLnJlZE11bChiKTtcbiAgICAgIGMgPSBiLnJlZFNxcigpO1xuICAgICAgdCA9IHQucmVkTXVsKGMpO1xuICAgICAgbSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pO1xuICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGludi5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KTtcbiAgICB9XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKGEsIG51bSkge1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSA0O1xuICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTtcbiAgICB3bmRbMF0gPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgd25kWzFdID0gYTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykge1xuICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHduZFswXTtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW4gPSAwO1xuICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2O1xuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBudW0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdmFyIGJpdCA9ICh3b3JkID4+IGopICYgMTtcbiAgICAgICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudCA8PD0gMTtcbiAgICAgICAgY3VycmVudCB8PSBiaXQ7XG4gICAgICAgIGN1cnJlbnRMZW4rKztcbiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTtcbiAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgIGN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICB2YXIgciA9IG51bS51bW9kKHRoaXMubSk7XG5cbiAgICByZXR1cm4gciA9PT0gbnVtID8gci5jbG9uZSgpIDogcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTtcbiAgICByZXMucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vXG4gIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuICAvL1xuXG4gIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250IChudW0pIHtcbiAgICByZXR1cm4gbmV3IE1vbnQobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBNb250IChtKSB7XG4gICAgUmVkLmNhbGwodGhpcywgbSk7XG5cbiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHtcbiAgICAgIHRoaXMuc2hpZnQgKz0gMjYgLSAodGhpcy5zaGlmdCAlIDI2KTtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO1xuICAgIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7XG5cbiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7XG4gICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLnIuc3ViKHRoaXMubWludik7XG4gIH1cbiAgaW5oZXJpdHMoTW9udCwgUmVkKTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpO1xuICAgIHIucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHtcbiAgICAgIGEud29yZHNbMF0gPSAwO1xuICAgICAgYS5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdmFyIHQgPSBhLmltdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG5cbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgdmFyIHQgPSBhLm11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUlxuICAgIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xufSkodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbW9kdWxlLCB0aGlzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1plcm9BZGRyZXNzID0gZXhwb3J0cy56ZXJvQWRkcmVzcyA9IGV4cG9ydHMuaW1wb3J0UHVibGljID0gZXhwb3J0cy5wcml2YXRlVG9BZGRyZXNzID0gZXhwb3J0cy5wcml2YXRlVG9QdWJsaWMgPSBleHBvcnRzLnB1YmxpY1RvQWRkcmVzcyA9IGV4cG9ydHMucHViVG9BZGRyZXNzID0gZXhwb3J0cy5pc1ZhbGlkUHVibGljID0gZXhwb3J0cy5pc1ZhbGlkUHJpdmF0ZSA9IGV4cG9ydHMuZ2VuZXJhdGVBZGRyZXNzMiA9IGV4cG9ydHMuZ2VuZXJhdGVBZGRyZXNzID0gZXhwb3J0cy5pc1ZhbGlkQ2hlY2tzdW1BZGRyZXNzID0gZXhwb3J0cy50b0NoZWNrc3VtQWRkcmVzcyA9IGV4cG9ydHMuaXNWYWxpZEFkZHJlc3MgPSBleHBvcnRzLkFjY291bnQgPSB2b2lkIDA7XG52YXIgYXNzZXJ0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImFzc2VydFwiKSk7XG52YXIgZXh0ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9leHRlcm5hbHNcIik7XG52YXIgc2VjcDI1NmsxXzEgPSByZXF1aXJlKFwiZXRoZXJldW0tY3J5cHRvZ3JhcGh5L3NlY3AyNTZrMVwiKTtcbnZhciBpbnRlcm5hbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWxcIik7XG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG52YXIgYnl0ZXNfMSA9IHJlcXVpcmUoXCIuL2J5dGVzXCIpO1xudmFyIGhhc2hfMSA9IHJlcXVpcmUoXCIuL2hhc2hcIik7XG52YXIgaGVscGVyc18xID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcbnZhciB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG52YXIgQWNjb3VudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGNvbnN0cnVjdG9yIGFzc2lnbnMgYW5kIHZhbGlkYXRlcyB0aGUgdmFsdWVzLlxuICAgICAqIFVzZSB0aGUgc3RhdGljIGZhY3RvcnkgbWV0aG9kcyB0byBhc3Npc3QgaW4gY3JlYXRpbmcgYW4gQWNjb3VudCBmcm9tIHZhcnlpbmcgZGF0YSB0eXBlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBBY2NvdW50KG5vbmNlLCBiYWxhbmNlLCBzdGF0ZVJvb3QsIGNvZGVIYXNoKSB7XG4gICAgICAgIGlmIChub25jZSA9PT0gdm9pZCAwKSB7IG5vbmNlID0gbmV3IGV4dGVybmFsc18xLkJOKDApOyB9XG4gICAgICAgIGlmIChiYWxhbmNlID09PSB2b2lkIDApIHsgYmFsYW5jZSA9IG5ldyBleHRlcm5hbHNfMS5CTigwKTsgfVxuICAgICAgICBpZiAoc3RhdGVSb290ID09PSB2b2lkIDApIHsgc3RhdGVSb290ID0gY29uc3RhbnRzXzEuS0VDQ0FLMjU2X1JMUDsgfVxuICAgICAgICBpZiAoY29kZUhhc2ggPT09IHZvaWQgMCkgeyBjb2RlSGFzaCA9IGNvbnN0YW50c18xLktFQ0NBSzI1Nl9OVUxMOyB9XG4gICAgICAgIHRoaXMubm9uY2UgPSBub25jZTtcbiAgICAgICAgdGhpcy5iYWxhbmNlID0gYmFsYW5jZTtcbiAgICAgICAgdGhpcy5zdGF0ZVJvb3QgPSBzdGF0ZVJvb3Q7XG4gICAgICAgIHRoaXMuY29kZUhhc2ggPSBjb2RlSGFzaDtcbiAgICAgICAgdGhpcy5fdmFsaWRhdGUoKTtcbiAgICB9XG4gICAgQWNjb3VudC5mcm9tQWNjb3VudERhdGEgPSBmdW5jdGlvbiAoYWNjb3VudERhdGEpIHtcbiAgICAgICAgdmFyIG5vbmNlID0gYWNjb3VudERhdGEubm9uY2UsIGJhbGFuY2UgPSBhY2NvdW50RGF0YS5iYWxhbmNlLCBzdGF0ZVJvb3QgPSBhY2NvdW50RGF0YS5zdGF0ZVJvb3QsIGNvZGVIYXNoID0gYWNjb3VudERhdGEuY29kZUhhc2g7XG4gICAgICAgIHJldHVybiBuZXcgQWNjb3VudChub25jZSA/IG5ldyBleHRlcm5hbHNfMS5CTigoMCwgYnl0ZXNfMS50b0J1ZmZlcikobm9uY2UpKSA6IHVuZGVmaW5lZCwgYmFsYW5jZSA/IG5ldyBleHRlcm5hbHNfMS5CTigoMCwgYnl0ZXNfMS50b0J1ZmZlcikoYmFsYW5jZSkpIDogdW5kZWZpbmVkLCBzdGF0ZVJvb3QgPyAoMCwgYnl0ZXNfMS50b0J1ZmZlcikoc3RhdGVSb290KSA6IHVuZGVmaW5lZCwgY29kZUhhc2ggPyAoMCwgYnl0ZXNfMS50b0J1ZmZlcikoY29kZUhhc2gpIDogdW5kZWZpbmVkKTtcbiAgICB9O1xuICAgIEFjY291bnQuZnJvbVJscFNlcmlhbGl6ZWRBY2NvdW50ID0gZnVuY3Rpb24gKHNlcmlhbGl6ZWQpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IGV4dGVybmFsc18xLnJscC5kZWNvZGUoc2VyaWFsaXplZCk7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2VyaWFsaXplZCBhY2NvdW50IGlucHV0LiBNdXN0IGJlIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVZhbHVlc0FycmF5KHZhbHVlcyk7XG4gICAgfTtcbiAgICBBY2NvdW50LmZyb21WYWx1ZXNBcnJheSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgdmFyIF9hID0gX19yZWFkKHZhbHVlcywgNCksIG5vbmNlID0gX2FbMF0sIGJhbGFuY2UgPSBfYVsxXSwgc3RhdGVSb290ID0gX2FbMl0sIGNvZGVIYXNoID0gX2FbM107XG4gICAgICAgIHJldHVybiBuZXcgQWNjb3VudChuZXcgZXh0ZXJuYWxzXzEuQk4obm9uY2UpLCBuZXcgZXh0ZXJuYWxzXzEuQk4oYmFsYW5jZSksIHN0YXRlUm9vdCwgY29kZUhhc2gpO1xuICAgIH07XG4gICAgQWNjb3VudC5wcm90b3R5cGUuX3ZhbGlkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5ub25jZS5sdChuZXcgZXh0ZXJuYWxzXzEuQk4oMCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vbmNlIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5iYWxhbmNlLmx0KG5ldyBleHRlcm5hbHNfMS5CTigwKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFsYW5jZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhdGVSb290Lmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc3RhdGVSb290IG11c3QgaGF2ZSBhIGxlbmd0aCBvZiAzMicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvZGVIYXNoLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY29kZUhhc2ggbXVzdCBoYXZlIGEgbGVuZ3RoIG9mIDMyJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCdWZmZXIgQXJyYXkgb2YgdGhlIHJhdyBCdWZmZXJzIGZvciB0aGUgYWNjb3VudCwgaW4gb3JkZXIuXG4gICAgICovXG4gICAgQWNjb3VudC5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgKDAsIHR5cGVzXzEuYm5Ub1VucGFkZGVkQnVmZmVyKSh0aGlzLm5vbmNlKSxcbiAgICAgICAgICAgICgwLCB0eXBlc18xLmJuVG9VbnBhZGRlZEJ1ZmZlcikodGhpcy5iYWxhbmNlKSxcbiAgICAgICAgICAgIHRoaXMuc3RhdGVSb290LFxuICAgICAgICAgICAgdGhpcy5jb2RlSGFzaCxcbiAgICAgICAgXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFJMUCBzZXJpYWxpemF0aW9uIG9mIHRoZSBhY2NvdW50IGFzIGEgYEJ1ZmZlcmAuXG4gICAgICovXG4gICAgQWNjb3VudC5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZXh0ZXJuYWxzXzEucmxwLmVuY29kZSh0aGlzLnJhdygpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBgQm9vbGVhbmAgZGV0ZXJtaW5pbmcgaWYgdGhlIGFjY291bnQgaXMgYSBjb250cmFjdC5cbiAgICAgKi9cbiAgICBBY2NvdW50LnByb3RvdHlwZS5pc0NvbnRyYWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuY29kZUhhc2guZXF1YWxzKGNvbnN0YW50c18xLktFQ0NBSzI1Nl9OVUxMKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBgQm9vbGVhbmAgZGV0ZXJtaW5pbmcgaWYgdGhlIGFjY291bnQgaXMgZW1wdHkgY29tcGx5aW5nIHRvIHRoZSBkZWZpbml0aW9uIG9mXG4gICAgICogYWNjb3VudCBlbXB0aW5lc3MgaW4gW0VJUC0xNjFdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTYxKTpcbiAgICAgKiBcIkFuIGFjY291bnQgaXMgY29uc2lkZXJlZCBlbXB0eSB3aGVuIGl0IGhhcyBubyBjb2RlIGFuZCB6ZXJvIG5vbmNlIGFuZCB6ZXJvIGJhbGFuY2UuXCJcbiAgICAgKi9cbiAgICBBY2NvdW50LnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYWxhbmNlLmlzWmVybygpICYmIHRoaXMubm9uY2UuaXNaZXJvKCkgJiYgdGhpcy5jb2RlSGFzaC5lcXVhbHMoY29uc3RhbnRzXzEuS0VDQ0FLMjU2X05VTEwpO1xuICAgIH07XG4gICAgcmV0dXJuIEFjY291bnQ7XG59KCkpO1xuZXhwb3J0cy5BY2NvdW50ID0gQWNjb3VudDtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBhZGRyZXNzIGlzIGEgdmFsaWQuIEFjY2VwdHMgY2hlY2tzdW1tZWQgYWRkcmVzc2VzIHRvby5cbiAqL1xudmFyIGlzVmFsaWRBZGRyZXNzID0gZnVuY3Rpb24gKGhleEFkZHJlc3MpIHtcbiAgICB0cnkge1xuICAgICAgICAoMCwgaGVscGVyc18xLmFzc2VydElzU3RyaW5nKShoZXhBZGRyZXNzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gL14weFswLTlhLWZBLUZdezQwfSQvLnRlc3QoaGV4QWRkcmVzcyk7XG59O1xuZXhwb3J0cy5pc1ZhbGlkQWRkcmVzcyA9IGlzVmFsaWRBZGRyZXNzO1xuLyoqXG4gKiBSZXR1cm5zIGEgY2hlY2tzdW1tZWQgYWRkcmVzcy5cbiAqXG4gKiBJZiBhbiBlaXAxMTkxQ2hhaW5JZCBpcyBwcm92aWRlZCwgdGhlIGNoYWluSWQgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgY2hlY2tzdW0gY2FsY3VsYXRpb24uIFRoaXNcbiAqIGhhcyB0aGUgZWZmZWN0IG9mIGNoZWNrc3VtbWVkIGFkZHJlc3NlcyBmb3Igb25lIGNoYWluIGhhdmluZyBpbnZhbGlkIGNoZWNrc3VtcyBmb3Igb3RoZXJzLlxuICogRm9yIG1vcmUgZGV0YWlscyBzZWUgW0VJUC0xMTkxXShodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTEpLlxuICpcbiAqIFdBUk5JTkc6IENoZWNrc3VtcyB3aXRoIGFuZCB3aXRob3V0IHRoZSBjaGFpbklkIHdpbGwgZGlmZmVyIGFuZCB0aGUgRUlQLTExOTEgY2hlY2tzdW0gaXMgbm90XG4gKiBiYWNrd2FyZHMgY29tcGF0aWJsZSB0byB0aGUgb3JpZ2luYWwgd2lkZWx5IGFkb3B0ZWQgY2hlY2tzdW0gZm9ybWF0IHN0YW5kYXJkIGludHJvZHVjZWQgaW5cbiAqIFtFSVAtNTVdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNTUpLCBzbyB0aGlzIHdpbGwgYnJlYWsgaW4gZXhpc3RpbmcgYXBwbGljYXRpb25zLlxuICogVXNhZ2Ugb2YgdGhpcyBFSVAgaXMgdGhlcmVmb3JlIGRpc2NvdXJhZ2VkIHVubGVzcyB5b3UgaGF2ZSBhIHZlcnkgdGFyZ2V0ZWQgdXNlIGNhc2UuXG4gKi9cbnZhciB0b0NoZWNrc3VtQWRkcmVzcyA9IGZ1bmN0aW9uIChoZXhBZGRyZXNzLCBlaXAxMTkxQ2hhaW5JZCkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNIZXhTdHJpbmcpKGhleEFkZHJlc3MpO1xuICAgIHZhciBhZGRyZXNzID0gKDAsIGludGVybmFsXzEuc3RyaXBIZXhQcmVmaXgpKGhleEFkZHJlc3MpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIHByZWZpeCA9ICcnO1xuICAgIGlmIChlaXAxMTkxQ2hhaW5JZCkge1xuICAgICAgICB2YXIgY2hhaW5JZCA9ICgwLCB0eXBlc18xLnRvVHlwZSkoZWlwMTE5MUNoYWluSWQsIHR5cGVzXzEuVHlwZU91dHB1dC5CTik7XG4gICAgICAgIHByZWZpeCA9IGNoYWluSWQudG9TdHJpbmcoKSArICcweCc7XG4gICAgfVxuICAgIHZhciBoYXNoID0gKDAsIGhhc2hfMS5rZWNjYWtGcm9tU3RyaW5nKShwcmVmaXggKyBhZGRyZXNzKS50b1N0cmluZygnaGV4Jyk7XG4gICAgdmFyIHJldCA9ICcweCc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhZGRyZXNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwYXJzZUludChoYXNoW2ldLCAxNikgPj0gOCkge1xuICAgICAgICAgICAgcmV0ICs9IGFkZHJlc3NbaV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldCArPSBhZGRyZXNzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuZXhwb3J0cy50b0NoZWNrc3VtQWRkcmVzcyA9IHRvQ2hlY2tzdW1BZGRyZXNzO1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGFkZHJlc3MgaXMgYSB2YWxpZCBjaGVja3N1bW1lZCBhZGRyZXNzLlxuICpcbiAqIFNlZSB0b0NoZWNrc3VtQWRkcmVzcycgZG9jdW1lbnRhdGlvbiBmb3IgZGV0YWlscyBhYm91dCB0aGUgZWlwMTE5MUNoYWluSWQgcGFyYW1ldGVyLlxuICovXG52YXIgaXNWYWxpZENoZWNrc3VtQWRkcmVzcyA9IGZ1bmN0aW9uIChoZXhBZGRyZXNzLCBlaXAxMTkxQ2hhaW5JZCkge1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5pc1ZhbGlkQWRkcmVzcykoaGV4QWRkcmVzcykgJiYgKDAsIGV4cG9ydHMudG9DaGVja3N1bUFkZHJlc3MpKGhleEFkZHJlc3MsIGVpcDExOTFDaGFpbklkKSA9PT0gaGV4QWRkcmVzcztcbn07XG5leHBvcnRzLmlzVmFsaWRDaGVja3N1bUFkZHJlc3MgPSBpc1ZhbGlkQ2hlY2tzdW1BZGRyZXNzO1xuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gYWRkcmVzcyBvZiBhIG5ld2x5IGNyZWF0ZWQgY29udHJhY3QuXG4gKiBAcGFyYW0gZnJvbSBUaGUgYWRkcmVzcyB3aGljaCBpcyBjcmVhdGluZyB0aGlzIG5ldyBhZGRyZXNzXG4gKiBAcGFyYW0gbm9uY2UgVGhlIG5vbmNlIG9mIHRoZSBmcm9tIGFjY291bnRcbiAqL1xudmFyIGdlbmVyYXRlQWRkcmVzcyA9IGZ1bmN0aW9uIChmcm9tLCBub25jZSkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNCdWZmZXIpKGZyb20pO1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNCdWZmZXIpKG5vbmNlKTtcbiAgICB2YXIgbm9uY2VCTiA9IG5ldyBleHRlcm5hbHNfMS5CTihub25jZSk7XG4gICAgaWYgKG5vbmNlQk4uaXNaZXJvKCkpIHtcbiAgICAgICAgLy8gaW4gUkxQIHdlIHdhbnQgdG8gZW5jb2RlIG51bGwgaW4gdGhlIGNhc2Ugb2YgemVybyBub25jZVxuICAgICAgICAvLyByZWFkIHRoZSBSTFAgZG9jdW1lbnRhdGlvbiBmb3IgYW4gYW5zd2VyIGlmIHlvdSBkYXJlXG4gICAgICAgIHJldHVybiAoMCwgaGFzaF8xLnJscGhhc2gpKFtmcm9tLCBudWxsXSkuc2xpY2UoLTIwKTtcbiAgICB9XG4gICAgLy8gT25seSB0YWtlIHRoZSBsb3dlciAxNjBiaXRzIG9mIHRoZSBoYXNoXG4gICAgcmV0dXJuICgwLCBoYXNoXzEucmxwaGFzaCkoW2Zyb20sIEJ1ZmZlci5mcm9tKG5vbmNlQk4udG9BcnJheSgpKV0pLnNsaWNlKC0yMCk7XG59O1xuZXhwb3J0cy5nZW5lcmF0ZUFkZHJlc3MgPSBnZW5lcmF0ZUFkZHJlc3M7XG4vKipcbiAqIEdlbmVyYXRlcyBhbiBhZGRyZXNzIGZvciBhIGNvbnRyYWN0IGNyZWF0ZWQgdXNpbmcgQ1JFQVRFMi5cbiAqIEBwYXJhbSBmcm9tIFRoZSBhZGRyZXNzIHdoaWNoIGlzIGNyZWF0aW5nIHRoaXMgbmV3IGFkZHJlc3NcbiAqIEBwYXJhbSBzYWx0IEEgc2FsdFxuICogQHBhcmFtIGluaXRDb2RlIFRoZSBpbml0IGNvZGUgb2YgdGhlIGNvbnRyYWN0IGJlaW5nIGNyZWF0ZWRcbiAqL1xudmFyIGdlbmVyYXRlQWRkcmVzczIgPSBmdW5jdGlvbiAoZnJvbSwgc2FsdCwgaW5pdENvZGUpIHtcbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQnVmZmVyKShmcm9tKTtcbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQnVmZmVyKShzYWx0KTtcbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQnVmZmVyKShpbml0Q29kZSk7XG4gICAgKDAsIGFzc2VydF8xLmRlZmF1bHQpKGZyb20ubGVuZ3RoID09PSAyMCk7XG4gICAgKDAsIGFzc2VydF8xLmRlZmF1bHQpKHNhbHQubGVuZ3RoID09PSAzMik7XG4gICAgdmFyIGFkZHJlc3MgPSAoMCwgaGFzaF8xLmtlY2NhazI1NikoQnVmZmVyLmNvbmNhdChbQnVmZmVyLmZyb20oJ2ZmJywgJ2hleCcpLCBmcm9tLCBzYWx0LCAoMCwgaGFzaF8xLmtlY2NhazI1NikoaW5pdENvZGUpXSkpO1xuICAgIHJldHVybiBhZGRyZXNzLnNsaWNlKC0yMCk7XG59O1xuZXhwb3J0cy5nZW5lcmF0ZUFkZHJlc3MyID0gZ2VuZXJhdGVBZGRyZXNzMjtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBwcml2YXRlIGtleSBzYXRpc2ZpZXMgdGhlIHJ1bGVzIG9mIHRoZSBjdXJ2ZSBzZWNwMjU2azEuXG4gKi9cbnZhciBpc1ZhbGlkUHJpdmF0ZSA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gICAgcmV0dXJuICgwLCBzZWNwMjU2azFfMS5wcml2YXRlS2V5VmVyaWZ5KShwcml2YXRlS2V5KTtcbn07XG5leHBvcnRzLmlzVmFsaWRQcml2YXRlID0gaXNWYWxpZFByaXZhdGU7XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgcHVibGljIGtleSBzYXRpc2ZpZXMgdGhlIHJ1bGVzIG9mIHRoZSBjdXJ2ZSBzZWNwMjU2azFcbiAqIGFuZCB0aGUgcmVxdWlyZW1lbnRzIG9mIEV0aGVyZXVtLlxuICogQHBhcmFtIHB1YmxpY0tleSBUaGUgdHdvIHBvaW50cyBvZiBhbiB1bmNvbXByZXNzZWQga2V5LCB1bmxlc3Mgc2FuaXRpemUgaXMgZW5hYmxlZFxuICogQHBhcmFtIHNhbml0aXplIEFjY2VwdCBwdWJsaWMga2V5cyBpbiBvdGhlciBmb3JtYXRzXG4gKi9cbnZhciBpc1ZhbGlkUHVibGljID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgc2FuaXRpemUpIHtcbiAgICBpZiAoc2FuaXRpemUgPT09IHZvaWQgMCkgeyBzYW5pdGl6ZSA9IGZhbHNlOyB9XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikocHVibGljS2V5KTtcbiAgICBpZiAocHVibGljS2V5Lmxlbmd0aCA9PT0gNjQpIHtcbiAgICAgICAgLy8gQ29udmVydCB0byBTRUMxIGZvciBzZWNwMjU2azFcbiAgICAgICAgcmV0dXJuICgwLCBzZWNwMjU2azFfMS5wdWJsaWNLZXlWZXJpZnkpKEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5mcm9tKFs0XSksIHB1YmxpY0tleV0pKTtcbiAgICB9XG4gICAgaWYgKCFzYW5pdGl6ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoMCwgc2VjcDI1NmsxXzEucHVibGljS2V5VmVyaWZ5KShwdWJsaWNLZXkpO1xufTtcbmV4cG9ydHMuaXNWYWxpZFB1YmxpYyA9IGlzVmFsaWRQdWJsaWM7XG4vKipcbiAqIFJldHVybnMgdGhlIGV0aGVyZXVtIGFkZHJlc3Mgb2YgYSBnaXZlbiBwdWJsaWMga2V5LlxuICogQWNjZXB0cyBcIkV0aGVyZXVtIHB1YmxpYyBrZXlzXCIgYW5kIFNFQzEgZW5jb2RlZCBrZXlzLlxuICogQHBhcmFtIHB1YktleSBUaGUgdHdvIHBvaW50cyBvZiBhbiB1bmNvbXByZXNzZWQga2V5LCB1bmxlc3Mgc2FuaXRpemUgaXMgZW5hYmxlZFxuICogQHBhcmFtIHNhbml0aXplIEFjY2VwdCBwdWJsaWMga2V5cyBpbiBvdGhlciBmb3JtYXRzXG4gKi9cbnZhciBwdWJUb0FkZHJlc3MgPSBmdW5jdGlvbiAocHViS2V5LCBzYW5pdGl6ZSkge1xuICAgIGlmIChzYW5pdGl6ZSA9PT0gdm9pZCAwKSB7IHNhbml0aXplID0gZmFsc2U7IH1cbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQnVmZmVyKShwdWJLZXkpO1xuICAgIGlmIChzYW5pdGl6ZSAmJiBwdWJLZXkubGVuZ3RoICE9PSA2NCkge1xuICAgICAgICBwdWJLZXkgPSBCdWZmZXIuZnJvbSgoMCwgc2VjcDI1NmsxXzEucHVibGljS2V5Q29udmVydCkocHViS2V5LCBmYWxzZSkuc2xpY2UoMSkpO1xuICAgIH1cbiAgICAoMCwgYXNzZXJ0XzEuZGVmYXVsdCkocHViS2V5Lmxlbmd0aCA9PT0gNjQpO1xuICAgIC8vIE9ubHkgdGFrZSB0aGUgbG93ZXIgMTYwYml0cyBvZiB0aGUgaGFzaFxuICAgIHJldHVybiAoMCwgaGFzaF8xLmtlY2NhaykocHViS2V5KS5zbGljZSgtMjApO1xufTtcbmV4cG9ydHMucHViVG9BZGRyZXNzID0gcHViVG9BZGRyZXNzO1xuZXhwb3J0cy5wdWJsaWNUb0FkZHJlc3MgPSBleHBvcnRzLnB1YlRvQWRkcmVzcztcbi8qKlxuICogUmV0dXJucyB0aGUgZXRoZXJldW0gcHVibGljIGtleSBvZiBhIGdpdmVuIHByaXZhdGUga2V5LlxuICogQHBhcmFtIHByaXZhdGVLZXkgQSBwcml2YXRlIGtleSBtdXN0IGJlIDI1NiBiaXRzIHdpZGVcbiAqL1xudmFyIHByaXZhdGVUb1B1YmxpYyA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikocHJpdmF0ZUtleSk7XG4gICAgLy8gc2tpcCB0aGUgdHlwZSBmbGFnIGFuZCB1c2UgdGhlIFgsIFkgcG9pbnRzXG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKCgwLCBzZWNwMjU2azFfMS5wdWJsaWNLZXlDcmVhdGUpKHByaXZhdGVLZXksIGZhbHNlKSkuc2xpY2UoMSk7XG59O1xuZXhwb3J0cy5wcml2YXRlVG9QdWJsaWMgPSBwcml2YXRlVG9QdWJsaWM7XG4vKipcbiAqIFJldHVybnMgdGhlIGV0aGVyZXVtIGFkZHJlc3Mgb2YgYSBnaXZlbiBwcml2YXRlIGtleS5cbiAqIEBwYXJhbSBwcml2YXRlS2V5IEEgcHJpdmF0ZSBrZXkgbXVzdCBiZSAyNTYgYml0cyB3aWRlXG4gKi9cbnZhciBwcml2YXRlVG9BZGRyZXNzID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgICByZXR1cm4gKDAsIGV4cG9ydHMucHVibGljVG9BZGRyZXNzKSgoMCwgZXhwb3J0cy5wcml2YXRlVG9QdWJsaWMpKHByaXZhdGVLZXkpKTtcbn07XG5leHBvcnRzLnByaXZhdGVUb0FkZHJlc3MgPSBwcml2YXRlVG9BZGRyZXNzO1xuLyoqXG4gKiBDb252ZXJ0cyBhIHB1YmxpYyBrZXkgdG8gdGhlIEV0aGVyZXVtIGZvcm1hdC5cbiAqL1xudmFyIGltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIChwdWJsaWNLZXkpIHtcbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQnVmZmVyKShwdWJsaWNLZXkpO1xuICAgIGlmIChwdWJsaWNLZXkubGVuZ3RoICE9PSA2NCkge1xuICAgICAgICBwdWJsaWNLZXkgPSBCdWZmZXIuZnJvbSgoMCwgc2VjcDI1NmsxXzEucHVibGljS2V5Q29udmVydCkocHVibGljS2V5LCBmYWxzZSkuc2xpY2UoMSkpO1xuICAgIH1cbiAgICByZXR1cm4gcHVibGljS2V5O1xufTtcbmV4cG9ydHMuaW1wb3J0UHVibGljID0gaW1wb3J0UHVibGljO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB6ZXJvIGFkZHJlc3MuXG4gKi9cbnZhciB6ZXJvQWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYWRkcmVzc0xlbmd0aCA9IDIwO1xuICAgIHZhciBhZGRyID0gKDAsIGJ5dGVzXzEuemVyb3MpKGFkZHJlc3NMZW5ndGgpO1xuICAgIHJldHVybiAoMCwgYnl0ZXNfMS5idWZmZXJUb0hleCkoYWRkcik7XG59O1xuZXhwb3J0cy56ZXJvQWRkcmVzcyA9IHplcm9BZGRyZXNzO1xuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBhZGRyZXNzIGlzIHRoZSB6ZXJvIGFkZHJlc3MuXG4gKi9cbnZhciBpc1plcm9BZGRyZXNzID0gZnVuY3Rpb24gKGhleEFkZHJlc3MpIHtcbiAgICB0cnkge1xuICAgICAgICAoMCwgaGVscGVyc18xLmFzc2VydElzU3RyaW5nKShoZXhBZGRyZXNzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgemVyb0FkZHIgPSAoMCwgZXhwb3J0cy56ZXJvQWRkcmVzcykoKTtcbiAgICByZXR1cm4gemVyb0FkZHIgPT09IGhleEFkZHJlc3M7XG59O1xuZXhwb3J0cy5pc1plcm9BZGRyZXNzID0gaXNaZXJvQWRkcmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY291bnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFkZHJlc3MgPSB2b2lkIDA7XG52YXIgYXNzZXJ0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImFzc2VydFwiKSk7XG52YXIgZXh0ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9leHRlcm5hbHNcIik7XG52YXIgYnl0ZXNfMSA9IHJlcXVpcmUoXCIuL2J5dGVzXCIpO1xudmFyIGFjY291bnRfMSA9IHJlcXVpcmUoXCIuL2FjY291bnRcIik7XG52YXIgQWRkcmVzcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBZGRyZXNzKGJ1Zikge1xuICAgICAgICAoMCwgYXNzZXJ0XzEuZGVmYXVsdCkoYnVmLmxlbmd0aCA9PT0gMjAsICdJbnZhbGlkIGFkZHJlc3MgbGVuZ3RoJyk7XG4gICAgICAgIHRoaXMuYnVmID0gYnVmO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB6ZXJvIGFkZHJlc3MuXG4gICAgICovXG4gICAgQWRkcmVzcy56ZXJvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IEFkZHJlc3MoKDAsIGJ5dGVzXzEuemVyb3MpKDIwKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIEFkZHJlc3Mgb2JqZWN0IGZyb20gYSBoZXgtZW5jb2RlZCBzdHJpbmcuXG4gICAgICogQHBhcmFtIHN0ciAtIEhleC1lbmNvZGVkIGFkZHJlc3NcbiAgICAgKi9cbiAgICBBZGRyZXNzLmZyb21TdHJpbmcgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgICgwLCBhc3NlcnRfMS5kZWZhdWx0KSgoMCwgYWNjb3VudF8xLmlzVmFsaWRBZGRyZXNzKShzdHIpLCAnSW52YWxpZCBhZGRyZXNzJyk7XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcygoMCwgYnl0ZXNfMS50b0J1ZmZlcikoc3RyKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFkZHJlc3MgZm9yIGEgZ2l2ZW4gcHVibGljIGtleS5cbiAgICAgKiBAcGFyYW0gcHViS2V5IFRoZSB0d28gcG9pbnRzIG9mIGFuIHVuY29tcHJlc3NlZCBrZXlcbiAgICAgKi9cbiAgICBBZGRyZXNzLmZyb21QdWJsaWNLZXkgPSBmdW5jdGlvbiAocHViS2V5KSB7XG4gICAgICAgICgwLCBhc3NlcnRfMS5kZWZhdWx0KShCdWZmZXIuaXNCdWZmZXIocHViS2V5KSwgJ1B1YmxpYyBrZXkgc2hvdWxkIGJlIEJ1ZmZlcicpO1xuICAgICAgICB2YXIgYnVmID0gKDAsIGFjY291bnRfMS5wdWJUb0FkZHJlc3MpKHB1YktleSk7XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhidWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhZGRyZXNzIGZvciBhIGdpdmVuIHByaXZhdGUga2V5LlxuICAgICAqIEBwYXJhbSBwcml2YXRlS2V5IEEgcHJpdmF0ZSBrZXkgbXVzdCBiZSAyNTYgYml0cyB3aWRlXG4gICAgICovXG4gICAgQWRkcmVzcy5mcm9tUHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gICAgICAgICgwLCBhc3NlcnRfMS5kZWZhdWx0KShCdWZmZXIuaXNCdWZmZXIocHJpdmF0ZUtleSksICdQcml2YXRlIGtleSBzaG91bGQgYmUgQnVmZmVyJyk7XG4gICAgICAgIHZhciBidWYgPSAoMCwgYWNjb3VudF8xLnByaXZhdGVUb0FkZHJlc3MpKHByaXZhdGVLZXkpO1xuICAgICAgICByZXR1cm4gbmV3IEFkZHJlc3MoYnVmKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhbiBhZGRyZXNzIGZvciBhIG5ld2x5IGNyZWF0ZWQgY29udHJhY3QuXG4gICAgICogQHBhcmFtIGZyb20gVGhlIGFkZHJlc3Mgd2hpY2ggaXMgY3JlYXRpbmcgdGhpcyBuZXcgYWRkcmVzc1xuICAgICAqIEBwYXJhbSBub25jZSBUaGUgbm9uY2Ugb2YgdGhlIGZyb20gYWNjb3VudFxuICAgICAqL1xuICAgIEFkZHJlc3MuZ2VuZXJhdGUgPSBmdW5jdGlvbiAoZnJvbSwgbm9uY2UpIHtcbiAgICAgICAgKDAsIGFzc2VydF8xLmRlZmF1bHQpKGV4dGVybmFsc18xLkJOLmlzQk4obm9uY2UpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKCgwLCBhY2NvdW50XzEuZ2VuZXJhdGVBZGRyZXNzKShmcm9tLmJ1Ziwgbm9uY2UudG9BcnJheUxpa2UoQnVmZmVyKSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGFuIGFkZHJlc3MgZm9yIGEgY29udHJhY3QgY3JlYXRlZCB1c2luZyBDUkVBVEUyLlxuICAgICAqIEBwYXJhbSBmcm9tIFRoZSBhZGRyZXNzIHdoaWNoIGlzIGNyZWF0aW5nIHRoaXMgbmV3IGFkZHJlc3NcbiAgICAgKiBAcGFyYW0gc2FsdCBBIHNhbHRcbiAgICAgKiBAcGFyYW0gaW5pdENvZGUgVGhlIGluaXQgY29kZSBvZiB0aGUgY29udHJhY3QgYmVpbmcgY3JlYXRlZFxuICAgICAqL1xuICAgIEFkZHJlc3MuZ2VuZXJhdGUyID0gZnVuY3Rpb24gKGZyb20sIHNhbHQsIGluaXRDb2RlKSB7XG4gICAgICAgICgwLCBhc3NlcnRfMS5kZWZhdWx0KShCdWZmZXIuaXNCdWZmZXIoc2FsdCkpO1xuICAgICAgICAoMCwgYXNzZXJ0XzEuZGVmYXVsdCkoQnVmZmVyLmlzQnVmZmVyKGluaXRDb2RlKSk7XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcygoMCwgYWNjb3VudF8xLmdlbmVyYXRlQWRkcmVzczIpKGZyb20uYnVmLCBzYWx0LCBpbml0Q29kZSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSXMgYWRkcmVzcyBlcXVhbCB0byBhbm90aGVyLlxuICAgICAqL1xuICAgIEFkZHJlc3MucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1Zi5lcXVhbHMoYWRkcmVzcy5idWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSXMgYWRkcmVzcyB6ZXJvLlxuICAgICAqL1xuICAgIEFkZHJlc3MucHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXF1YWxzKEFkZHJlc3MuemVybygpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRydWUgaWYgYWRkcmVzcyBpcyBpbiB0aGUgYWRkcmVzcyByYW5nZSBkZWZpbmVkXG4gICAgICogYnkgRUlQLTEzNTJcbiAgICAgKi9cbiAgICBBZGRyZXNzLnByb3RvdHlwZS5pc1ByZWNvbXBpbGVPclN5c3RlbUFkZHJlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhZGRyZXNzQk4gPSBuZXcgZXh0ZXJuYWxzXzEuQk4odGhpcy5idWYpO1xuICAgICAgICB2YXIgcmFuZ2VNaW4gPSBuZXcgZXh0ZXJuYWxzXzEuQk4oMCk7XG4gICAgICAgIHZhciByYW5nZU1heCA9IG5ldyBleHRlcm5hbHNfMS5CTignZmZmZicsICdoZXgnKTtcbiAgICAgICAgcmV0dXJuIGFkZHJlc3NCTi5ndGUocmFuZ2VNaW4pICYmIGFkZHJlc3NCTi5sdGUocmFuZ2VNYXgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBoZXggZW5jb2Rpbmcgb2YgYWRkcmVzcy5cbiAgICAgKi9cbiAgICBBZGRyZXNzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcweCcgKyB0aGlzLmJ1Zi50b1N0cmluZygnaGV4Jyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIEJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBhZGRyZXNzLlxuICAgICAqL1xuICAgIEFkZHJlc3MucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy5idWYpO1xuICAgIH07XG4gICAgcmV0dXJuIEFkZHJlc3M7XG59KCkpO1xuZXhwb3J0cy5BZGRyZXNzID0gQWRkcmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3MuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJ1ZkFyclRvQXJyID0gZXhwb3J0cy5hcnJUb0J1ZkFyciA9IGV4cG9ydHMudmFsaWRhdGVOb0xlYWRpbmdaZXJvZXMgPSBleHBvcnRzLmJhVG9KU09OID0gZXhwb3J0cy50b1V0ZjggPSBleHBvcnRzLmFkZEhleFByZWZpeCA9IGV4cG9ydHMudG9VbnNpZ25lZCA9IGV4cG9ydHMuZnJvbVNpZ25lZCA9IGV4cG9ydHMuYnVmZmVyVG9IZXggPSBleHBvcnRzLmJ1ZmZlclRvSW50ID0gZXhwb3J0cy50b0J1ZmZlciA9IGV4cG9ydHMudW5wYWRIZXhTdHJpbmcgPSBleHBvcnRzLnVucGFkQXJyYXkgPSBleHBvcnRzLnVucGFkQnVmZmVyID0gZXhwb3J0cy5zZXRMZW5ndGhSaWdodCA9IGV4cG9ydHMuc2V0TGVuZ3RoTGVmdCA9IGV4cG9ydHMuemVyb3MgPSBleHBvcnRzLmludFRvQnVmZmVyID0gZXhwb3J0cy5pbnRUb0hleCA9IHZvaWQgMDtcbnZhciBleHRlcm5hbHNfMSA9IHJlcXVpcmUoXCIuL2V4dGVybmFsc1wiKTtcbnZhciBpbnRlcm5hbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWxcIik7XG52YXIgaGVscGVyc18xID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcbi8qKlxuICogQ29udmVydHMgYSBgTnVtYmVyYCBpbnRvIGEgaGV4IGBTdHJpbmdgXG4gKiBAcGFyYW0ge051bWJlcn0gaVxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG52YXIgaW50VG9IZXggPSBmdW5jdGlvbiAoaSkge1xuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIoaSkgfHwgaSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVjZWl2ZWQgYW4gaW52YWxpZCBpbnRlZ2VyIHR5cGU6IFwiLmNvbmNhdChpKSk7XG4gICAgfVxuICAgIHJldHVybiBcIjB4XCIuY29uY2F0KGkudG9TdHJpbmcoMTYpKTtcbn07XG5leHBvcnRzLmludFRvSGV4ID0gaW50VG9IZXg7XG4vKipcbiAqIENvbnZlcnRzIGFuIGBOdW1iZXJgIHRvIGEgYEJ1ZmZlcmBcbiAqIEBwYXJhbSB7TnVtYmVyfSBpXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbnZhciBpbnRUb0J1ZmZlciA9IGZ1bmN0aW9uIChpKSB7XG4gICAgdmFyIGhleCA9ICgwLCBleHBvcnRzLmludFRvSGV4KShpKTtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oKDAsIGludGVybmFsXzEucGFkVG9FdmVuKShoZXguc2xpY2UoMikpLCAnaGV4Jyk7XG59O1xuZXhwb3J0cy5pbnRUb0J1ZmZlciA9IGludFRvQnVmZmVyO1xuLyoqXG4gKiBSZXR1cm5zIGEgYnVmZmVyIGZpbGxlZCB3aXRoIDBzLlxuICogQHBhcmFtIGJ5dGVzIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIGJ1ZmZlciBzaG91bGQgYmVcbiAqL1xudmFyIHplcm9zID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvY1Vuc2FmZShieXRlcykuZmlsbCgwKTtcbn07XG5leHBvcnRzLnplcm9zID0gemVyb3M7XG4vKipcbiAqIFBhZHMgYSBgQnVmZmVyYCB3aXRoIHplcm9zIHRpbGwgaXQgaGFzIGBsZW5ndGhgIGJ5dGVzLlxuICogVHJ1bmNhdGVzIHRoZSBiZWdpbm5pbmcgb3IgZW5kIG9mIGlucHV0IGlmIGl0cyBsZW5ndGggZXhjZWVkcyBgbGVuZ3RoYC5cbiAqIEBwYXJhbSBtc2cgdGhlIHZhbHVlIHRvIHBhZCAoQnVmZmVyKVxuICogQHBhcmFtIGxlbmd0aCB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBvdXRwdXQgc2hvdWxkIGJlXG4gKiBAcGFyYW0gcmlnaHQgd2hldGhlciB0byBzdGFydCBwYWRkaW5nIGZvcm0gdGhlIGxlZnQgb3IgcmlnaHRcbiAqIEByZXR1cm4gKEJ1ZmZlcilcbiAqL1xudmFyIHNldExlbmd0aCA9IGZ1bmN0aW9uIChtc2csIGxlbmd0aCwgcmlnaHQpIHtcbiAgICB2YXIgYnVmID0gKDAsIGV4cG9ydHMuemVyb3MpKGxlbmd0aCk7XG4gICAgaWYgKHJpZ2h0KSB7XG4gICAgICAgIGlmIChtc2cubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBtc2cuY29weShidWYpO1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbXNnLnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAobXNnLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgbXNnLmNvcHkoYnVmLCBsZW5ndGggLSBtc2cubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBidWY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1zZy5zbGljZSgtbGVuZ3RoKTtcbiAgICB9XG59O1xuLyoqXG4gKiBMZWZ0IFBhZHMgYSBgQnVmZmVyYCB3aXRoIGxlYWRpbmcgemVyb3MgdGlsbCBpdCBoYXMgYGxlbmd0aGAgYnl0ZXMuXG4gKiBPciBpdCB0cnVuY2F0ZXMgdGhlIGJlZ2lubmluZyBpZiBpdCBleGNlZWRzLlxuICogQHBhcmFtIG1zZyB0aGUgdmFsdWUgdG8gcGFkIChCdWZmZXIpXG4gKiBAcGFyYW0gbGVuZ3RoIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIG91dHB1dCBzaG91bGQgYmVcbiAqIEByZXR1cm4gKEJ1ZmZlcilcbiAqL1xudmFyIHNldExlbmd0aExlZnQgPSBmdW5jdGlvbiAobXNnLCBsZW5ndGgpIHtcbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQnVmZmVyKShtc2cpO1xuICAgIHJldHVybiBzZXRMZW5ndGgobXNnLCBsZW5ndGgsIGZhbHNlKTtcbn07XG5leHBvcnRzLnNldExlbmd0aExlZnQgPSBzZXRMZW5ndGhMZWZ0O1xuLyoqXG4gKiBSaWdodCBQYWRzIGEgYEJ1ZmZlcmAgd2l0aCB0cmFpbGluZyB6ZXJvcyB0aWxsIGl0IGhhcyBgbGVuZ3RoYCBieXRlcy5cbiAqIGl0IHRydW5jYXRlcyB0aGUgZW5kIGlmIGl0IGV4Y2VlZHMuXG4gKiBAcGFyYW0gbXNnIHRoZSB2YWx1ZSB0byBwYWQgKEJ1ZmZlcilcbiAqIEBwYXJhbSBsZW5ndGggdGhlIG51bWJlciBvZiBieXRlcyB0aGUgb3V0cHV0IHNob3VsZCBiZVxuICogQHJldHVybiAoQnVmZmVyKVxuICovXG52YXIgc2V0TGVuZ3RoUmlnaHQgPSBmdW5jdGlvbiAobXNnLCBsZW5ndGgpIHtcbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQnVmZmVyKShtc2cpO1xuICAgIHJldHVybiBzZXRMZW5ndGgobXNnLCBsZW5ndGgsIHRydWUpO1xufTtcbmV4cG9ydHMuc2V0TGVuZ3RoUmlnaHQgPSBzZXRMZW5ndGhSaWdodDtcbi8qKlxuICogVHJpbXMgbGVhZGluZyB6ZXJvcyBmcm9tIGEgYEJ1ZmZlcmAsIGBTdHJpbmdgIG9yIGBOdW1iZXJbXWAuXG4gKiBAcGFyYW0gYSAoQnVmZmVyfEFycmF5fFN0cmluZylcbiAqIEByZXR1cm4gKEJ1ZmZlcnxBcnJheXxTdHJpbmcpXG4gKi9cbnZhciBzdHJpcFplcm9zID0gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgZmlyc3QgPSBhWzBdO1xuICAgIHdoaWxlIChhLmxlbmd0aCA+IDAgJiYgZmlyc3QudG9TdHJpbmcoKSA9PT0gJzAnKSB7XG4gICAgICAgIGEgPSBhLnNsaWNlKDEpO1xuICAgICAgICBmaXJzdCA9IGFbMF07XG4gICAgfVxuICAgIHJldHVybiBhO1xufTtcbi8qKlxuICogVHJpbXMgbGVhZGluZyB6ZXJvcyBmcm9tIGEgYEJ1ZmZlcmAuXG4gKiBAcGFyYW0gYSAoQnVmZmVyKVxuICogQHJldHVybiAoQnVmZmVyKVxuICovXG52YXIgdW5wYWRCdWZmZXIgPSBmdW5jdGlvbiAoYSkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNCdWZmZXIpKGEpO1xuICAgIHJldHVybiBzdHJpcFplcm9zKGEpO1xufTtcbmV4cG9ydHMudW5wYWRCdWZmZXIgPSB1bnBhZEJ1ZmZlcjtcbi8qKlxuICogVHJpbXMgbGVhZGluZyB6ZXJvcyBmcm9tIGFuIGBBcnJheWAgKG9mIG51bWJlcnMpLlxuICogQHBhcmFtIGEgKG51bWJlcltdKVxuICogQHJldHVybiAobnVtYmVyW10pXG4gKi9cbnZhciB1bnBhZEFycmF5ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQXJyYXkpKGEpO1xuICAgIHJldHVybiBzdHJpcFplcm9zKGEpO1xufTtcbmV4cG9ydHMudW5wYWRBcnJheSA9IHVucGFkQXJyYXk7XG4vKipcbiAqIFRyaW1zIGxlYWRpbmcgemVyb3MgZnJvbSBhIGhleC1wcmVmaXhlZCBgU3RyaW5nYC5cbiAqIEBwYXJhbSBhIChTdHJpbmcpXG4gKiBAcmV0dXJuIChTdHJpbmcpXG4gKi9cbnZhciB1bnBhZEhleFN0cmluZyA9IGZ1bmN0aW9uIChhKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0hleFN0cmluZykoYSk7XG4gICAgYSA9ICgwLCBpbnRlcm5hbF8xLnN0cmlwSGV4UHJlZml4KShhKTtcbiAgICByZXR1cm4gc3RyaXBaZXJvcyhhKTtcbn07XG5leHBvcnRzLnVucGFkSGV4U3RyaW5nID0gdW5wYWRIZXhTdHJpbmc7XG4vKipcbiAqIEF0dGVtcHRzIHRvIHR1cm4gYSB2YWx1ZSBpbnRvIGEgYEJ1ZmZlcmAuXG4gKiBJbnB1dHMgc3VwcG9ydGVkOiBgQnVmZmVyYCwgYFN0cmluZ2AgKGhleC1wcmVmaXhlZCksIGBOdW1iZXJgLCBudWxsL3VuZGVmaW5lZCwgYEJOYCBhbmQgb3RoZXIgb2JqZWN0c1xuICogd2l0aCBhIGB0b0FycmF5KClgIG9yIGB0b0J1ZmZlcigpYCBtZXRob2QuXG4gKiBAcGFyYW0gdiB0aGUgdmFsdWVcbiAqL1xudmFyIHRvQnVmZmVyID0gZnVuY3Rpb24gKHYpIHtcbiAgICBpZiAodiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKTtcbiAgICB9XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2KSkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odik7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHYpIHx8IHYgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh2KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoISgwLCBpbnRlcm5hbF8xLmlzSGV4U3RyaW5nKSh2KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbnZlcnQgc3RyaW5nIHRvIGJ1ZmZlci4gdG9CdWZmZXIgb25seSBzdXBwb3J0cyAweC1wcmVmaXhlZCBoZXggc3RyaW5ncyBhbmQgdGhpcyBzdHJpbmcgd2FzIGdpdmVuOiBcIi5jb25jYXQodikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSgoMCwgaW50ZXJuYWxfMS5wYWRUb0V2ZW4pKCgwLCBpbnRlcm5hbF8xLnN0cmlwSGV4UHJlZml4KSh2KSksICdoZXgnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gKDAsIGV4cG9ydHMuaW50VG9CdWZmZXIpKHYpO1xuICAgIH1cbiAgICBpZiAoZXh0ZXJuYWxzXzEuQk4uaXNCTih2KSkge1xuICAgICAgICBpZiAodi5pc05lZygpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29udmVydCBuZWdhdGl2ZSBCTiB0byBidWZmZXIuIEdpdmVuOiBcIi5jb25jYXQodikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2LnRvQXJyYXlMaWtlKEJ1ZmZlcik7XG4gICAgfVxuICAgIGlmICh2LnRvQXJyYXkpIHtcbiAgICAgICAgLy8gY29udmVydHMgYSBCTiB0byBhIEJ1ZmZlclxuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odi50b0FycmF5KCkpO1xuICAgIH1cbiAgICBpZiAodi50b0J1ZmZlcikge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odi50b0J1ZmZlcigpKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHR5cGUnKTtcbn07XG5leHBvcnRzLnRvQnVmZmVyID0gdG9CdWZmZXI7XG4vKipcbiAqIENvbnZlcnRzIGEgYEJ1ZmZlcmAgdG8gYSBgTnVtYmVyYC5cbiAqIEBwYXJhbSBidWYgYEJ1ZmZlcmAgb2JqZWN0IHRvIGNvbnZlcnRcbiAqIEB0aHJvd3MgSWYgdGhlIGlucHV0IG51bWJlciBleGNlZWRzIDUzIGJpdHMuXG4gKi9cbnZhciBidWZmZXJUb0ludCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICByZXR1cm4gbmV3IGV4dGVybmFsc18xLkJOKCgwLCBleHBvcnRzLnRvQnVmZmVyKShidWYpKS50b051bWJlcigpO1xufTtcbmV4cG9ydHMuYnVmZmVyVG9JbnQgPSBidWZmZXJUb0ludDtcbi8qKlxuICogQ29udmVydHMgYSBgQnVmZmVyYCBpbnRvIGEgYDB4YC1wcmVmaXhlZCBoZXggYFN0cmluZ2AuXG4gKiBAcGFyYW0gYnVmIGBCdWZmZXJgIG9iamVjdCB0byBjb252ZXJ0XG4gKi9cbnZhciBidWZmZXJUb0hleCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICBidWYgPSAoMCwgZXhwb3J0cy50b0J1ZmZlcikoYnVmKTtcbiAgICByZXR1cm4gJzB4JyArIGJ1Zi50b1N0cmluZygnaGV4Jyk7XG59O1xuZXhwb3J0cy5idWZmZXJUb0hleCA9IGJ1ZmZlclRvSGV4O1xuLyoqXG4gKiBJbnRlcnByZXRzIGEgYEJ1ZmZlcmAgYXMgYSBzaWduZWQgaW50ZWdlciBhbmQgcmV0dXJucyBhIGBCTmAuIEFzc3VtZXMgMjU2LWJpdCBudW1iZXJzLlxuICogQHBhcmFtIG51bSBTaWduZWQgaW50ZWdlciB2YWx1ZVxuICovXG52YXIgZnJvbVNpZ25lZCA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICByZXR1cm4gbmV3IGV4dGVybmFsc18xLkJOKG51bSkuZnJvbVR3b3MoMjU2KTtcbn07XG5leHBvcnRzLmZyb21TaWduZWQgPSBmcm9tU2lnbmVkO1xuLyoqXG4gKiBDb252ZXJ0cyBhIGBCTmAgdG8gYW4gdW5zaWduZWQgaW50ZWdlciBhbmQgcmV0dXJucyBpdCBhcyBhIGBCdWZmZXJgLiBBc3N1bWVzIDI1Ni1iaXQgbnVtYmVycy5cbiAqIEBwYXJhbSBudW1cbiAqL1xudmFyIHRvVW5zaWduZWQgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKG51bS50b1R3b3MoMjU2KS50b0FycmF5KCkpO1xufTtcbmV4cG9ydHMudG9VbnNpZ25lZCA9IHRvVW5zaWduZWQ7XG4vKipcbiAqIEFkZHMgXCIweFwiIHRvIGEgZ2l2ZW4gYFN0cmluZ2AgaWYgaXQgZG9lcyBub3QgYWxyZWFkeSBzdGFydCB3aXRoIFwiMHhcIi5cbiAqL1xudmFyIGFkZEhleFByZWZpeCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBpbnRlcm5hbF8xLmlzSGV4UHJlZml4ZWQpKHN0cikgPyBzdHIgOiAnMHgnICsgc3RyO1xufTtcbmV4cG9ydHMuYWRkSGV4UHJlZml4ID0gYWRkSGV4UHJlZml4O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB1dGY4IHN0cmluZyByZXByZXNlbnRhdGlvbiBmcm9tIGEgaGV4IHN0cmluZy5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiBJbnB1dCAxOiAnNjU3NDY4NjU3MjY1NzU2ZDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAqIElucHV0IDI6ICc2NTc0Njg2NTcyNjU3NTZkJ1xuICogSW5wdXQgMzogJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDY1NzQ2ODY1NzI2NTc1NmQnXG4gKlxuICogT3V0cHV0IChhbGwgMyBpbnB1dCB2YXJpYW50cyk6ICdldGhlcmV1bSdcbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgd2l0aCBoZXggc3RyaW5nc1xuICogcmVwcmVzZW50aW5nIHF1YW50aXRpZXMgaW4gYm90aCBiaWcgZW5kaWFuIG9yIGxpdHRsZSBlbmRpYW4gbm90YXRpb24uXG4gKlxuICogQHBhcmFtIHN0cmluZyBIZXggc3RyaW5nLCBzaG91bGQgYmUgYDB4YCBwcmVmaXhlZFxuICogQHJldHVybiBVdGY4IHN0cmluZ1xuICovXG52YXIgdG9VdGY4ID0gZnVuY3Rpb24gKGhleCkge1xuICAgIHZhciB6ZXJvc1JlZ2V4cCA9IC9eKDAwKSt8KDAwKSskL2c7XG4gICAgaGV4ID0gKDAsIGludGVybmFsXzEuc3RyaXBIZXhQcmVmaXgpKGhleCk7XG4gICAgaWYgKGhleC5sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBub24tZXZlbiBoZXggc3RyaW5nIGlucHV0IGZvciB0b1V0ZjgoKSBwcm92aWRlZCcpO1xuICAgIH1cbiAgICB2YXIgYnVmZmVyVmFsID0gQnVmZmVyLmZyb20oaGV4LnJlcGxhY2UoemVyb3NSZWdleHAsICcnKSwgJ2hleCcpO1xuICAgIHJldHVybiBidWZmZXJWYWwudG9TdHJpbmcoJ3V0ZjgnKTtcbn07XG5leHBvcnRzLnRvVXRmOCA9IHRvVXRmODtcbi8qKlxuICogQ29udmVydHMgYSBgQnVmZmVyYCBvciBgQXJyYXlgIHRvIEpTT04uXG4gKiBAcGFyYW0gYmEgKEJ1ZmZlcnxBcnJheSlcbiAqIEByZXR1cm4gKEFycmF5fFN0cmluZ3xudWxsKVxuICovXG52YXIgYmFUb0pTT04gPSBmdW5jdGlvbiAoYmEpIHtcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGJhKSkge1xuICAgICAgICByZXR1cm4gXCIweFwiLmNvbmNhdChiYS50b1N0cmluZygnaGV4JykpO1xuICAgIH1cbiAgICBlbHNlIGlmIChiYSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKCgwLCBleHBvcnRzLmJhVG9KU09OKShiYVtpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG59O1xuZXhwb3J0cy5iYVRvSlNPTiA9IGJhVG9KU09OO1xuLyoqXG4gKiBDaGVja3MgcHJvdmlkZWQgQnVmZmVycyBmb3IgbGVhZGluZyB6ZXJvZXMgYW5kIHRocm93cyBpZiBmb3VuZC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiBWYWxpZCB2YWx1ZXM6IDB4MSwgMHgsIDB4MDEsIDB4MTIzNFxuICogSW52YWxpZCB2YWx1ZXM6IDB4MCwgMHgwMCwgMHgwMDEsIDB4MDAwMVxuICpcbiAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIHVzZWZ1bCBmb3IgdmFsaWRhdGluZyB0aGF0IFJMUCBlbmNvZGVkIGludGVnZXJzIGNvbXBseSB3aXRoIHRoZSBydWxlIHRoYXQgYWxsXG4gKiBpbnRlZ2VyIHZhbHVlcyBlbmNvZGVkIHRvIFJMUCBtdXN0IGJlIGluIHRoZSBtb3N0IGNvbXBhY3QgZm9ybSBhbmQgY29udGFpbiBubyBsZWFkaW5nIHplcm8gYnl0ZXNcbiAqIEBwYXJhbSB2YWx1ZXMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgc3RyaW5nIGtleXMgYW5kIEJ1ZmZlciB2YWx1ZXNcbiAqIEB0aHJvd3MgaWYgYW55IHByb3ZpZGVkIHZhbHVlIGlzIGZvdW5kIHRvIGhhdmUgbGVhZGluZyB6ZXJvIGJ5dGVzXG4gKi9cbnZhciB2YWxpZGF0ZU5vTGVhZGluZ1plcm9lcyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICB2YXIgZV8xLCBfYTtcbiAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKE9iamVjdC5lbnRyaWVzKHZhbHVlcykpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICB2YXIgX2QgPSBfX3JlYWQoX2MudmFsdWUsIDIpLCBrID0gX2RbMF0sIHYgPSBfZFsxXTtcbiAgICAgICAgICAgIGlmICh2ICE9PSB1bmRlZmluZWQgJiYgdi5sZW5ndGggPiAwICYmIHZbMF0gPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIi5jb25jYXQoaywgXCIgY2Fubm90IGhhdmUgbGVhZGluZyB6ZXJvZXMsIHJlY2VpdmVkOiBcIikuY29uY2F0KHYudG9TdHJpbmcoJ2hleCcpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgfVxufTtcbmV4cG9ydHMudmFsaWRhdGVOb0xlYWRpbmdaZXJvZXMgPSB2YWxpZGF0ZU5vTGVhZGluZ1plcm9lcztcbmZ1bmN0aW9uIGFyclRvQnVmQXJyKGFycikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShhcnIpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gYXJyVG9CdWZBcnIoYSk7IH0pO1xufVxuZXhwb3J0cy5hcnJUb0J1ZkFyciA9IGFyclRvQnVmQXJyO1xuZnVuY3Rpb24gYnVmQXJyVG9BcnIoYXJyKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShhcnIgIT09IG51bGwgJiYgYXJyICE9PSB2b2lkIDAgPyBhcnIgOiBbXSk7XG4gICAgfVxuICAgIHJldHVybiBhcnIubWFwKGZ1bmN0aW9uIChhKSB7IHJldHVybiBidWZBcnJUb0FycihhKTsgfSk7XG59XG5leHBvcnRzLmJ1ZkFyclRvQXJyID0gYnVmQXJyVG9BcnI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ieXRlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUCA9IGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1MgPSBleHBvcnRzLktFQ0NBSzI1Nl9OVUxMID0gZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TID0gZXhwb3J0cy5UV09fUE9XMjU2ID0gZXhwb3J0cy5NQVhfSU5URUdFUiA9IGV4cG9ydHMuTUFYX1VJTlQ2NCA9IHZvaWQgMDtcbnZhciBidWZmZXJfMSA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG52YXIgZXh0ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9leHRlcm5hbHNcIik7XG4vKipcbiAqIDJeNjQtMVxuICovXG5leHBvcnRzLk1BWF9VSU5UNjQgPSBuZXcgZXh0ZXJuYWxzXzEuQk4oJ2ZmZmZmZmZmZmZmZmZmZmYnLCAxNik7XG4vKipcbiAqIFRoZSBtYXggaW50ZWdlciB0aGF0IHRoZSBldm0gY2FuIGhhbmRsZSAoMl4yNTYtMSlcbiAqL1xuZXhwb3J0cy5NQVhfSU5URUdFUiA9IG5ldyBleHRlcm5hbHNfMS5CTignZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZicsIDE2KTtcbi8qKlxuICogMl4yNTZcbiAqL1xuZXhwb3J0cy5UV09fUE9XMjU2ID0gbmV3IGV4dGVybmFsc18xLkJOKCcxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsIDE2KTtcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIG51bGxcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TID0gJ2M1ZDI0NjAxODZmNzIzM2M5MjdlN2RiMmRjYzcwM2MwZTUwMGI2NTNjYTgyMjczYjdiZmFkODA0NWQ4NWE0NzAnO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgbnVsbFxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9OVUxMID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TLCAnaGV4Jyk7XG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5XG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TID0gJzFkY2M0ZGU4ZGVjNzVkN2FhYjg1YjU2N2I2Y2NkNDFhZDMxMjQ1MWI5NDhhNzQxM2YwYTE0MmZkNDBkNDkzNDcnO1xuLyoqXG4gKiBLZWNjYWstMjU2IG9mIGFuIFJMUCBvZiBhbiBlbXB0eSBhcnJheVxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9STFBfQVJSQVkgPSBidWZmZXJfMS5CdWZmZXIuZnJvbShleHBvcnRzLktFQ0NBSzI1Nl9STFBfQVJSQVlfUywgJ2hleCcpO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIFJMUCBvZiBudWxsXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TID0gJzU2ZTgxZjE3MWJjYzU1YTZmZjgzNDVlNjkyYzBmODZlNWI0OGUwMWI5OTZjYWRjMDAxNjIyZmI1ZTM2M2I0MjEnO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIFJMUCBvZiBudWxsXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUCA9IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TLCAnaGV4Jyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIFJlLWV4cG9ydHMgY29tbW9ubHkgdXNlZCBtb2R1bGVzOlxuICogKiBFeHBvcnRzIFtgQk5gXShodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcyksIFtgcmxwYF0oaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtanMvcmxwKS5cbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmxwID0gZXhwb3J0cy5CTiA9IHZvaWQgMDtcbnZhciBibl9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJibi5qc1wiKSk7XG5leHBvcnRzLkJOID0gYm5fanNfMS5kZWZhdWx0O1xudmFyIHJscCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwicmxwXCIpKTtcbmV4cG9ydHMucmxwID0gcmxwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0ZXJuYWxzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ybHBoYXNoID0gZXhwb3J0cy5yaXBlbWQxNjBGcm9tQXJyYXkgPSBleHBvcnRzLnJpcGVtZDE2MEZyb21TdHJpbmcgPSBleHBvcnRzLnJpcGVtZDE2MCA9IGV4cG9ydHMuc2hhMjU2RnJvbUFycmF5ID0gZXhwb3J0cy5zaGEyNTZGcm9tU3RyaW5nID0gZXhwb3J0cy5zaGEyNTYgPSBleHBvcnRzLmtlY2Nha0Zyb21BcnJheSA9IGV4cG9ydHMua2VjY2FrRnJvbUhleFN0cmluZyA9IGV4cG9ydHMua2VjY2FrRnJvbVN0cmluZyA9IGV4cG9ydHMua2VjY2FrMjU2ID0gZXhwb3J0cy5rZWNjYWsgPSB2b2lkIDA7XG52YXIga2VjY2FrXzEgPSByZXF1aXJlKFwiZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2tlY2Nha1wiKTtcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKTtcbnZhciBleHRlcm5hbHNfMSA9IHJlcXVpcmUoXCIuL2V4dGVybmFsc1wiKTtcbnZhciBieXRlc18xID0gcmVxdWlyZShcIi4vYnl0ZXNcIik7XG52YXIgaGVscGVyc18xID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcbi8qKlxuICogQ3JlYXRlcyBLZWNjYWsgaGFzaCBvZiBhIEJ1ZmZlciBpbnB1dFxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKEJ1ZmZlcilcbiAqIEBwYXJhbSBiaXRzIChudW1iZXIgPSAyNTYpIFRoZSBLZWNjYWsgd2lkdGhcbiAqL1xudmFyIGtlY2NhayA9IGZ1bmN0aW9uIChhLCBiaXRzKSB7XG4gICAgaWYgKGJpdHMgPT09IHZvaWQgMCkgeyBiaXRzID0gMjU2OyB9XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikoYSk7XG4gICAgc3dpdGNoIChiaXRzKSB7XG4gICAgICAgIGNhc2UgMjI0OiB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGtlY2Nha18xLmtlY2NhazIyNCkoYSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAyNTY6IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwga2VjY2FrXzEua2VjY2FrMjU2KShhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDM4NDoge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBrZWNjYWtfMS5rZWNjYWszODQpKGEpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgNTEyOiB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGtlY2Nha18xLmtlY2NhazUxMikoYSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxkIGFsZ29yaXRobToga2VjY2FrXCIuY29uY2F0KGJpdHMpKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5leHBvcnRzLmtlY2NhayA9IGtlY2Nhaztcbi8qKlxuICogQ3JlYXRlcyBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIGlucHV0LCBhbGlhcyBmb3Iga2VjY2FrKGEsIDI1NikuXG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YSAoQnVmZmVyKVxuICovXG52YXIga2VjY2FrMjU2ID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gKDAsIGV4cG9ydHMua2VjY2FrKShhKTtcbn07XG5leHBvcnRzLmtlY2NhazI1NiA9IGtlY2NhazI1Njtcbi8qKlxuICogQ3JlYXRlcyBLZWNjYWsgaGFzaCBvZiBhIHV0Zi04IHN0cmluZyBpbnB1dFxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKFN0cmluZylcbiAqIEBwYXJhbSBiaXRzIChudW1iZXIgPSAyNTYpIFRoZSBLZWNjYWsgd2lkdGhcbiAqL1xudmFyIGtlY2Nha0Zyb21TdHJpbmcgPSBmdW5jdGlvbiAoYSwgYml0cykge1xuICAgIGlmIChiaXRzID09PSB2b2lkIDApIHsgYml0cyA9IDI1NjsgfVxuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNTdHJpbmcpKGEpO1xuICAgIHZhciBidWYgPSBCdWZmZXIuZnJvbShhLCAndXRmOCcpO1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5rZWNjYWspKGJ1ZiwgYml0cyk7XG59O1xuZXhwb3J0cy5rZWNjYWtGcm9tU3RyaW5nID0ga2VjY2FrRnJvbVN0cmluZztcbi8qKlxuICogQ3JlYXRlcyBLZWNjYWsgaGFzaCBvZiBhbiAweC1wcmVmaXhlZCBzdHJpbmcgaW5wdXRcbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhIChTdHJpbmcpXG4gKiBAcGFyYW0gYml0cyAobnVtYmVyID0gMjU2KSBUaGUgS2VjY2FrIHdpZHRoXG4gKi9cbnZhciBrZWNjYWtGcm9tSGV4U3RyaW5nID0gZnVuY3Rpb24gKGEsIGJpdHMpIHtcbiAgICBpZiAoYml0cyA9PT0gdm9pZCAwKSB7IGJpdHMgPSAyNTY7IH1cbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzSGV4U3RyaW5nKShhKTtcbiAgICByZXR1cm4gKDAsIGV4cG9ydHMua2VjY2FrKSgoMCwgYnl0ZXNfMS50b0J1ZmZlcikoYSksIGJpdHMpO1xufTtcbmV4cG9ydHMua2VjY2FrRnJvbUhleFN0cmluZyA9IGtlY2Nha0Zyb21IZXhTdHJpbmc7XG4vKipcbiAqIENyZWF0ZXMgS2VjY2FrIGhhc2ggb2YgYSBudW1iZXIgYXJyYXkgaW5wdXRcbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhIChudW1iZXJbXSlcbiAqIEBwYXJhbSBiaXRzIChudW1iZXIgPSAyNTYpIFRoZSBLZWNjYWsgd2lkdGhcbiAqL1xudmFyIGtlY2Nha0Zyb21BcnJheSA9IGZ1bmN0aW9uIChhLCBiaXRzKSB7XG4gICAgaWYgKGJpdHMgPT09IHZvaWQgMCkgeyBiaXRzID0gMjU2OyB9XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0FycmF5KShhKTtcbiAgICByZXR1cm4gKDAsIGV4cG9ydHMua2VjY2FrKSgoMCwgYnl0ZXNfMS50b0J1ZmZlcikoYSksIGJpdHMpO1xufTtcbmV4cG9ydHMua2VjY2FrRnJvbUFycmF5ID0ga2VjY2FrRnJvbUFycmF5O1xuLyoqXG4gKiBDcmVhdGVzIFNIQTI1NiBoYXNoIG9mIGFuIGlucHV0LlxuICogQHBhcmFtICBhIFRoZSBpbnB1dCBkYXRhIChCdWZmZXJ8QXJyYXl8U3RyaW5nKVxuICovXG52YXIgX3NoYTI1NiA9IGZ1bmN0aW9uIChhKSB7XG4gICAgYSA9ICgwLCBieXRlc18xLnRvQnVmZmVyKShhKTtcbiAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGEpLmRpZ2VzdCgpO1xufTtcbi8qKlxuICogQ3JlYXRlcyBTSEEyNTYgaGFzaCBvZiBhIEJ1ZmZlciBpbnB1dC5cbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhIChCdWZmZXIpXG4gKi9cbnZhciBzaGEyNTYgPSBmdW5jdGlvbiAoYSkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNCdWZmZXIpKGEpO1xuICAgIHJldHVybiBfc2hhMjU2KGEpO1xufTtcbmV4cG9ydHMuc2hhMjU2ID0gc2hhMjU2O1xuLyoqXG4gKiBDcmVhdGVzIFNIQTI1NiBoYXNoIG9mIGEgc3RyaW5nIGlucHV0LlxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKHN0cmluZylcbiAqL1xudmFyIHNoYTI1NkZyb21TdHJpbmcgPSBmdW5jdGlvbiAoYSkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNTdHJpbmcpKGEpO1xuICAgIHJldHVybiBfc2hhMjU2KGEpO1xufTtcbmV4cG9ydHMuc2hhMjU2RnJvbVN0cmluZyA9IHNoYTI1NkZyb21TdHJpbmc7XG4vKipcbiAqIENyZWF0ZXMgU0hBMjU2IGhhc2ggb2YgYSBudW1iZXJbXSBpbnB1dC5cbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhIChudW1iZXJbXSlcbiAqL1xudmFyIHNoYTI1NkZyb21BcnJheSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0FycmF5KShhKTtcbiAgICByZXR1cm4gX3NoYTI1NihhKTtcbn07XG5leHBvcnRzLnNoYTI1NkZyb21BcnJheSA9IHNoYTI1NkZyb21BcnJheTtcbi8qKlxuICogQ3JlYXRlcyBSSVBFTUQxNjAgaGFzaCBvZiB0aGUgaW5wdXQuXG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YSAoQnVmZmVyfEFycmF5fFN0cmluZ3xOdW1iZXIpXG4gKiBAcGFyYW0gcGFkZGVkIFdoZXRoZXIgaXQgc2hvdWxkIGJlIHBhZGRlZCB0byAyNTYgYml0cyBvciBub3RcbiAqL1xudmFyIF9yaXBlbWQxNjAgPSBmdW5jdGlvbiAoYSwgcGFkZGVkKSB7XG4gICAgYSA9ICgwLCBieXRlc18xLnRvQnVmZmVyKShhKTtcbiAgICB2YXIgaGFzaCA9IGNyZWF0ZUhhc2goJ3JtZDE2MCcpLnVwZGF0ZShhKS5kaWdlc3QoKTtcbiAgICBpZiAocGFkZGVkID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiAoMCwgYnl0ZXNfMS5zZXRMZW5ndGhMZWZ0KShoYXNoLCAzMik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG59O1xuLyoqXG4gKiBDcmVhdGVzIFJJUEVNRDE2MCBoYXNoIG9mIGEgQnVmZmVyIGlucHV0LlxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKEJ1ZmZlcilcbiAqIEBwYXJhbSBwYWRkZWQgV2hldGhlciBpdCBzaG91bGQgYmUgcGFkZGVkIHRvIDI1NiBiaXRzIG9yIG5vdFxuICovXG52YXIgcmlwZW1kMTYwID0gZnVuY3Rpb24gKGEsIHBhZGRlZCkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNCdWZmZXIpKGEpO1xuICAgIHJldHVybiBfcmlwZW1kMTYwKGEsIHBhZGRlZCk7XG59O1xuZXhwb3J0cy5yaXBlbWQxNjAgPSByaXBlbWQxNjA7XG4vKipcbiAqIENyZWF0ZXMgUklQRU1EMTYwIGhhc2ggb2YgYSBzdHJpbmcgaW5wdXQuXG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YSAoU3RyaW5nKVxuICogQHBhcmFtIHBhZGRlZCBXaGV0aGVyIGl0IHNob3VsZCBiZSBwYWRkZWQgdG8gMjU2IGJpdHMgb3Igbm90XG4gKi9cbnZhciByaXBlbWQxNjBGcm9tU3RyaW5nID0gZnVuY3Rpb24gKGEsIHBhZGRlZCkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNTdHJpbmcpKGEpO1xuICAgIHJldHVybiBfcmlwZW1kMTYwKGEsIHBhZGRlZCk7XG59O1xuZXhwb3J0cy5yaXBlbWQxNjBGcm9tU3RyaW5nID0gcmlwZW1kMTYwRnJvbVN0cmluZztcbi8qKlxuICogQ3JlYXRlcyBSSVBFTUQxNjAgaGFzaCBvZiBhIG51bWJlcltdIGlucHV0LlxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKG51bWJlcltdKVxuICogQHBhcmFtIHBhZGRlZCBXaGV0aGVyIGl0IHNob3VsZCBiZSBwYWRkZWQgdG8gMjU2IGJpdHMgb3Igbm90XG4gKi9cbnZhciByaXBlbWQxNjBGcm9tQXJyYXkgPSBmdW5jdGlvbiAoYSwgcGFkZGVkKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0FycmF5KShhKTtcbiAgICByZXR1cm4gX3JpcGVtZDE2MChhLCBwYWRkZWQpO1xufTtcbmV4cG9ydHMucmlwZW1kMTYwRnJvbUFycmF5ID0gcmlwZW1kMTYwRnJvbUFycmF5O1xuLyoqXG4gKiBDcmVhdGVzIFNIQS0zIGhhc2ggb2YgdGhlIFJMUCBlbmNvZGVkIHZlcnNpb24gb2YgdGhlIGlucHV0LlxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGFcbiAqL1xudmFyIHJscGhhc2ggPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5rZWNjYWspKGV4dGVybmFsc18xLnJscC5lbmNvZGUoYSkpO1xufTtcbmV4cG9ydHMucmxwaGFzaCA9IHJscGhhc2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hc3NlcnRJc1N0cmluZyA9IGV4cG9ydHMuYXNzZXJ0SXNBcnJheSA9IGV4cG9ydHMuYXNzZXJ0SXNCdWZmZXIgPSBleHBvcnRzLmFzc2VydElzSGV4U3RyaW5nID0gdm9pZCAwO1xudmFyIGludGVybmFsXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbFwiKTtcbi8qKlxuICogVGhyb3dzIGlmIGEgc3RyaW5nIGlzIG5vdCBoZXggcHJlZml4ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBzdHJpbmcgdG8gY2hlY2sgaGV4IHByZWZpeCBvZlxuICovXG52YXIgYXNzZXJ0SXNIZXhTdHJpbmcgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoISgwLCBpbnRlcm5hbF8xLmlzSGV4U3RyaW5nKShpbnB1dCkpIHtcbiAgICAgICAgdmFyIG1zZyA9IFwiVGhpcyBtZXRob2Qgb25seSBzdXBwb3J0cyAweC1wcmVmaXhlZCBoZXggc3RyaW5ncyBidXQgaW5wdXQgd2FzOiBcIi5jb25jYXQoaW5wdXQpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuZXhwb3J0cy5hc3NlcnRJc0hleFN0cmluZyA9IGFzc2VydElzSGV4U3RyaW5nO1xuLyoqXG4gKiBUaHJvd3MgaWYgaW5wdXQgaXMgbm90IGEgYnVmZmVyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gaW5wdXQgdmFsdWUgdG8gY2hlY2tcbiAqL1xudmFyIGFzc2VydElzQnVmZmVyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoaW5wdXQpKSB7XG4gICAgICAgIHZhciBtc2cgPSBcIlRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgQnVmZmVyIGJ1dCBpbnB1dCB3YXM6IFwiLmNvbmNhdChpbnB1dCk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn07XG5leHBvcnRzLmFzc2VydElzQnVmZmVyID0gYXNzZXJ0SXNCdWZmZXI7XG4vKipcbiAqIFRocm93cyBpZiBpbnB1dCBpcyBub3QgYW4gYXJyYXlcbiAqIEBwYXJhbSB7bnVtYmVyW119IGlucHV0IHZhbHVlIHRvIGNoZWNrXG4gKi9cbnZhciBhc3NlcnRJc0FycmF5ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICB2YXIgbXNnID0gXCJUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIG51bWJlciBhcnJheXMgYnV0IGlucHV0IHdhczogXCIuY29uY2F0KGlucHV0KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbmV4cG9ydHMuYXNzZXJ0SXNBcnJheSA9IGFzc2VydElzQXJyYXk7XG4vKipcbiAqIFRocm93cyBpZiBpbnB1dCBpcyBub3QgYSBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCB2YWx1ZSB0byBjaGVja1xuICovXG52YXIgYXNzZXJ0SXNTdHJpbmcgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgbXNnID0gXCJUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIHN0cmluZ3MgYnV0IGlucHV0IHdhczogXCIuY29uY2F0KGlucHV0KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbmV4cG9ydHMuYXNzZXJ0SXNTdHJpbmcgPSBhc3NlcnRJc1N0cmluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNIZXhTdHJpbmcgPSBleHBvcnRzLmdldEtleXMgPSBleHBvcnRzLmZyb21Bc2NpaSA9IGV4cG9ydHMuZnJvbVV0ZjggPSBleHBvcnRzLnRvQXNjaWkgPSBleHBvcnRzLmFycmF5Q29udGFpbnNBcnJheSA9IGV4cG9ydHMuZ2V0QmluYXJ5U2l6ZSA9IGV4cG9ydHMucGFkVG9FdmVuID0gZXhwb3J0cy5zdHJpcEhleFByZWZpeCA9IGV4cG9ydHMuaXNIZXhQcmVmaXhlZCA9IHZvaWQgMDtcbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25zdGFudHNcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBBY2NvdW50IGNsYXNzIGFuZCBoZWxwZXIgZnVuY3Rpb25zXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hY2NvdW50XCIpLCBleHBvcnRzKTtcbi8qKlxuICogQWRkcmVzcyB0eXBlXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hZGRyZXNzXCIpLCBleHBvcnRzKTtcbi8qKlxuICogSGFzaCBmdW5jdGlvbnNcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2hhc2hcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBFQ0RTQSBzaWduYXR1cmVcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NpZ25hdHVyZVwiKSwgZXhwb3J0cyk7XG4vKipcbiAqIFV0aWxpdGllcyBmb3IgbWFuaXB1bGF0aW5nIEJ1ZmZlcnMsIGJ5dGUgYXJyYXlzLCBldGMuXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ieXRlc1wiKSwgZXhwb3J0cyk7XG4vKipcbiAqIEZ1bmN0aW9uIGZvciBkZWZpbmluaW5nIHByb3BlcnRpZXMgb24gYW4gb2JqZWN0XG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9vYmplY3RcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBFeHRlcm5hbCBleHBvcnRzIChCTiwgcmxwKVxuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXh0ZXJuYWxzXCIpLCBleHBvcnRzKTtcbi8qKlxuICogSGVscGZ1bCBUeXBlU2NyaXB0IHR5cGVzXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG4vKipcbiAqIEV4cG9ydCBldGhqcy11dGlsIG1ldGhvZHNcbiAqL1xudmFyIGludGVybmFsXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzSGV4UHJlZml4ZWRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsXzEuaXNIZXhQcmVmaXhlZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0cmlwSGV4UHJlZml4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF8xLnN0cmlwSGV4UHJlZml4OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFkVG9FdmVuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF8xLnBhZFRvRXZlbjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldEJpbmFyeVNpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsXzEuZ2V0QmluYXJ5U2l6ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFycmF5Q29udGFpbnNBcnJheVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfMS5hcnJheUNvbnRhaW5zQXJyYXk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0FzY2lpXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF8xLnRvQXNjaWk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmcm9tVXRmOFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfMS5mcm9tVXRmODsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21Bc2NpaVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfMS5mcm9tQXNjaWk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRLZXlzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF8xLmdldEtleXM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0hleFN0cmluZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfMS5pc0hleFN0cmluZzsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLypcblRoZSBNSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMTYgTmljayBEb2Rzb24uIG5pY2tkb2Rzb24uY29tXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzSGV4U3RyaW5nID0gZXhwb3J0cy5nZXRLZXlzID0gZXhwb3J0cy5mcm9tQXNjaWkgPSBleHBvcnRzLmZyb21VdGY4ID0gZXhwb3J0cy50b0FzY2lpID0gZXhwb3J0cy5hcnJheUNvbnRhaW5zQXJyYXkgPSBleHBvcnRzLmdldEJpbmFyeVNpemUgPSBleHBvcnRzLnBhZFRvRXZlbiA9IGV4cG9ydHMuc3RyaXBIZXhQcmVmaXggPSBleHBvcnRzLmlzSGV4UHJlZml4ZWQgPSB2b2lkIDA7XG4vKipcbiAqIFJldHVybnMgYSBgQm9vbGVhbmAgb24gd2hldGhlciBvciBub3QgdGhlIGEgYFN0cmluZ2Agc3RhcnRzIHdpdGggJzB4J1xuICogQHBhcmFtIHN0ciB0aGUgc3RyaW5nIGlucHV0IHZhbHVlXG4gKiBAcmV0dXJuIGEgYm9vbGVhbiBpZiBpdCBpcyBvciBpcyBub3QgaGV4IHByZWZpeGVkXG4gKiBAdGhyb3dzIGlmIHRoZSBzdHIgaW5wdXQgaXMgbm90IGEgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGlzSGV4UHJlZml4ZWQoc3RyKSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIltpc0hleFByZWZpeGVkXSBpbnB1dCBtdXN0IGJlIHR5cGUgJ3N0cmluZycsIHJlY2VpdmVkIHR5cGUgXCIuY29uY2F0KHR5cGVvZiBzdHIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0clswXSA9PT0gJzAnICYmIHN0clsxXSA9PT0gJ3gnO1xufVxuZXhwb3J0cy5pc0hleFByZWZpeGVkID0gaXNIZXhQcmVmaXhlZDtcbi8qKlxuICogUmVtb3ZlcyAnMHgnIGZyb20gYSBnaXZlbiBgU3RyaW5nYCBpZiBwcmVzZW50XG4gKiBAcGFyYW0gc3RyIHRoZSBzdHJpbmcgdmFsdWVcbiAqIEByZXR1cm5zIHRoZSBzdHJpbmcgd2l0aG91dCAweCBwcmVmaXhcbiAqL1xudmFyIHN0cmlwSGV4UHJlZml4ID0gZnVuY3Rpb24gKHN0cikge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW3N0cmlwSGV4UHJlZml4XSBpbnB1dCBtdXN0IGJlIHR5cGUgJ3N0cmluZycsIHJlY2VpdmVkIFwiLmNvbmNhdCh0eXBlb2Ygc3RyKSk7XG4gICAgcmV0dXJuIGlzSGV4UHJlZml4ZWQoc3RyKSA/IHN0ci5zbGljZSgyKSA6IHN0cjtcbn07XG5leHBvcnRzLnN0cmlwSGV4UHJlZml4ID0gc3RyaXBIZXhQcmVmaXg7XG4vKipcbiAqIFBhZHMgYSBgU3RyaW5nYCB0byBoYXZlIGFuIGV2ZW4gbGVuZ3RoXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEByZXR1cm4gb3V0cHV0XG4gKi9cbmZ1bmN0aW9uIHBhZFRvRXZlbih2YWx1ZSkge1xuICAgIHZhciBhID0gdmFsdWU7XG4gICAgaWYgKHR5cGVvZiBhICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbcGFkVG9FdmVuXSB2YWx1ZSBtdXN0IGJlIHR5cGUgJ3N0cmluZycsIHJlY2VpdmVkIFwiLmNvbmNhdCh0eXBlb2YgYSkpO1xuICAgIH1cbiAgICBpZiAoYS5sZW5ndGggJSAyKVxuICAgICAgICBhID0gXCIwXCIuY29uY2F0KGEpO1xuICAgIHJldHVybiBhO1xufVxuZXhwb3J0cy5wYWRUb0V2ZW4gPSBwYWRUb0V2ZW47XG4vKipcbiAqIEdldCB0aGUgYmluYXJ5IHNpemUgb2YgYSBzdHJpbmdcbiAqIEBwYXJhbSBzdHJcbiAqIEByZXR1cm5zIHRoZSBudW1iZXIgb2YgYnl0ZXMgY29udGFpbmVkIHdpdGhpbiB0aGUgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGdldEJpbmFyeVNpemUoc3RyKSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIltnZXRCaW5hcnlTaXplXSBtZXRob2QgcmVxdWlyZXMgaW5wdXQgdHlwZSAnc3RyaW5nJywgcmVjaWV2ZWQgXCIuY29uY2F0KHR5cGVvZiBzdHIpKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5ieXRlTGVuZ3RoKHN0ciwgJ3V0ZjgnKTtcbn1cbmV4cG9ydHMuZ2V0QmluYXJ5U2l6ZSA9IGdldEJpbmFyeVNpemU7XG4vKipcbiAqIFJldHVybnMgVFJVRSBpZiB0aGUgZmlyc3Qgc3BlY2lmaWVkIGFycmF5IGNvbnRhaW5zIGFsbCBlbGVtZW50c1xuICogZnJvbSB0aGUgc2Vjb25kIG9uZS4gRkFMU0Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSBzdXBlcnNldFxuICogQHBhcmFtIHN1YnNldFxuICpcbiAqL1xuZnVuY3Rpb24gYXJyYXlDb250YWluc0FycmF5KHN1cGVyc2V0LCBzdWJzZXQsIHNvbWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdXBlcnNldCkgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW2FycmF5Q29udGFpbnNBcnJheV0gbWV0aG9kIHJlcXVpcmVzIGlucHV0ICdzdXBlcnNldCcgdG8gYmUgYW4gYXJyYXksIGdvdCB0eXBlICdcIi5jb25jYXQodHlwZW9mIHN1cGVyc2V0LCBcIidcIikpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJzZXQpICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlthcnJheUNvbnRhaW5zQXJyYXldIG1ldGhvZCByZXF1aXJlcyBpbnB1dCAnc3Vic2V0JyB0byBiZSBhbiBhcnJheSwgZ290IHR5cGUgJ1wiLmNvbmNhdCh0eXBlb2Ygc3Vic2V0LCBcIidcIikpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic2V0W3NvbWUgPyAnc29tZScgOiAnZXZlcnknXShmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHN1cGVyc2V0LmluZGV4T2YodmFsdWUpID49IDA7IH0pO1xufVxuZXhwb3J0cy5hcnJheUNvbnRhaW5zQXJyYXkgPSBhcnJheUNvbnRhaW5zQXJyYXk7XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZ2V0IGFzY2lpIGZyb20gaXRzIGhleCByZXByZXNlbnRhdGlvblxuICpcbiAqIEBwYXJhbSBzdHJpbmcgaW4gaGV4XG4gKiBAcmV0dXJucyBhc2NpaSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgaGV4IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRvQXNjaWkoaGV4KSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbCA9IGhleC5sZW5ndGg7XG4gICAgaWYgKGhleC5zdWJzdHJpbmcoMCwgMikgPT09ICcweCcpXG4gICAgICAgIGkgPSAyO1xuICAgIGZvciAoOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgICAgIHZhciBjb2RlID0gcGFyc2VJbnQoaGV4LnN1YnN0cihpLCAyKSwgMTYpO1xuICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbmV4cG9ydHMudG9Bc2NpaSA9IHRvQXNjaWk7XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZ2V0IGhleCByZXByZXNlbnRhdGlvbiAocHJlZml4ZWQgYnkgMHgpIG9mIHV0Zjggc3RyaW5nXG4gKlxuICogQHBhcmFtIHN0cmluZ1xuICogQHBhcmFtIG9wdGlvbmFsIHBhZGRpbmdcbiAqIEByZXR1cm5zIGhleCByZXByZXNlbnRhdGlvbiBvZiBpbnB1dCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZnJvbVV0Zjgoc3RyaW5nVmFsdWUpIHtcbiAgICB2YXIgc3RyID0gQnVmZmVyLmZyb20oc3RyaW5nVmFsdWUsICd1dGY4Jyk7XG4gICAgcmV0dXJuIFwiMHhcIi5jb25jYXQocGFkVG9FdmVuKHN0ci50b1N0cmluZygnaGV4JykpLnJlcGxhY2UoL14wK3wwKyQvZywgJycpKTtcbn1cbmV4cG9ydHMuZnJvbVV0ZjggPSBmcm9tVXRmODtcbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBnZXQgaGV4IHJlcHJlc2VudGF0aW9uIChwcmVmaXhlZCBieSAweCkgb2YgYXNjaWkgc3RyaW5nXG4gKlxuICogQHBhcmFtICBzdHJpbmdcbiAqIEBwYXJhbSAgb3B0aW9uYWwgcGFkZGluZ1xuICogQHJldHVybnMgIGhleCByZXByZXNlbnRhdGlvbiBvZiBpbnB1dCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZnJvbUFzY2lpKHN0cmluZ1ZhbHVlKSB7XG4gICAgdmFyIGhleCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNvZGUgPSBzdHJpbmdWYWx1ZS5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB2YXIgbiA9IGNvZGUudG9TdHJpbmcoMTYpO1xuICAgICAgICBoZXggKz0gbi5sZW5ndGggPCAyID8gXCIwXCIuY29uY2F0KG4pIDogbjtcbiAgICB9XG4gICAgcmV0dXJuIFwiMHhcIi5jb25jYXQoaGV4KTtcbn1cbmV4cG9ydHMuZnJvbUFzY2lpID0gZnJvbUFzY2lpO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBrZXlzIGZyb20gYW4gYXJyYXkgb2Ygb2JqZWN0cy5cbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogZ2V0S2V5cyhbe2E6ICcxJywgYjogJzInfSwge2E6ICczJywgYjogJzQnfV0sICdhJykgPT4gWycxJywgJzMnXVxuICpgYGBgXG4gKiBAcGFyYW0gIHBhcmFtc1xuICogQHBhcmFtICBrZXlcbiAqIEBwYXJhbSAgYWxsb3dFbXB0eVxuICogQHJldHVybnMgb3V0cHV0IGp1c3QgYSBzaW1wbGUgYXJyYXkgb2Ygb3V0cHV0IGtleXNcbiAqL1xuZnVuY3Rpb24gZ2V0S2V5cyhwYXJhbXMsIGtleSwgYWxsb3dFbXB0eSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwYXJhbXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIltnZXRLZXlzXSBtZXRob2QgZXhwZWN0cyBpbnB1dCAncGFyYW1zJyB0byBiZSBhbiBhcnJheSwgZ290IFwiLmNvbmNhdCh0eXBlb2YgcGFyYW1zKSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbZ2V0S2V5c10gbWV0aG9kIGV4cGVjdHMgaW5wdXQgJ2tleScgdG8gYmUgdHlwZSAnc3RyaW5nJywgZ290IFwiLmNvbmNhdCh0eXBlb2YgcGFyYW1zKSk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJhbXNbaV1ba2V5XTtcbiAgICAgICAgaWYgKGFsbG93RW1wdHkgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYWJpIC0gZXhwZWN0ZWQgdHlwZSAnc3RyaW5nJywgcmVjZWl2ZWQgXCIuY29uY2F0KHR5cGVvZiB2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZ2V0S2V5cyA9IGdldEtleXM7XG4vKipcbiAqIElzIHRoZSBzdHJpbmcgYSBoZXggc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAgdmFsdWVcbiAqIEBwYXJhbSAgbGVuZ3RoXG4gKiBAcmV0dXJucyAgb3V0cHV0IHRoZSBzdHJpbmcgaXMgYSBoZXggc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGlzSGV4U3RyaW5nKHZhbHVlLCBsZW5ndGgpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCAhdmFsdWUubWF0Y2goL14weFswLTlBLUZhLWZdKiQvKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChsZW5ndGggJiYgdmFsdWUubGVuZ3RoICE9PSAyICsgMiAqIGxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5pc0hleFN0cmluZyA9IGlzSGV4U3RyaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJuYWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmluZVByb3BlcnRpZXMgPSB2b2lkIDA7XG52YXIgYXNzZXJ0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImFzc2VydFwiKSk7XG52YXIgaW50ZXJuYWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsXCIpO1xudmFyIGV4dGVybmFsc18xID0gcmVxdWlyZShcIi4vZXh0ZXJuYWxzXCIpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbi8qKlxuICogRGVmaW5lcyBwcm9wZXJ0aWVzIG9uIGEgYE9iamVjdGAuIEl0IG1ha2UgdGhlIGFzc3VtcHRpb24gdGhhdCB1bmRlcmx5aW5nIGRhdGEgaXMgYmluYXJ5LlxuICogQHBhcmFtIHNlbGYgdGhlIGBPYmplY3RgIHRvIGRlZmluZSBwcm9wZXJ0aWVzIG9uXG4gKiBAcGFyYW0gZmllbGRzIGFuIGFycmF5IGZpZWxkcyB0byBkZWZpbmUuIEZpZWxkcyBjYW4gY29udGFpbjpcbiAqICogYG5hbWVgIC0gdGhlIG5hbWUgb2YgdGhlIHByb3BlcnRpZXNcbiAqICogYGxlbmd0aGAgLSB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBmaWVsZCBjYW4gaGF2ZVxuICogKiBgYWxsb3dMZXNzYCAtIGlmIHRoZSBmaWVsZCBjYW4gYmUgbGVzcyB0aGFuIHRoZSBsZW5ndGhcbiAqICogYGFsbG93RW1wdHlgXG4gKiBAcGFyYW0gZGF0YSBkYXRhIHRvIGJlIHZhbGlkYXRlZCBhZ2FpbnN0IHRoZSBkZWZpbml0aW9uc1xuICogQGRlcHJlY2F0ZWRcbiAqL1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAoc2VsZiwgZmllbGRzLCBkYXRhKSB7XG4gICAgc2VsZi5yYXcgPSBbXTtcbiAgICBzZWxmLl9maWVsZHMgPSBbXTtcbiAgICAvLyBhdHRhY2ggdGhlIGB0b0pTT05gXG4gICAgc2VsZi50b0pTT04gPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgaWYgKGxhYmVsID09PSB2b2lkIDApIHsgbGFiZWwgPSBmYWxzZTsgfVxuICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgIHZhciBvYmpfMSA9IHt9O1xuICAgICAgICAgICAgc2VsZi5fZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgb2JqXzFbZmllbGRdID0gXCIweFwiLmNvbmNhdChzZWxmW2ZpZWxkXS50b1N0cmluZygnaGV4JykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb2JqXzE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCBieXRlc18xLmJhVG9KU09OKShzZWxmLnJhdyk7XG4gICAgfTtcbiAgICBzZWxmLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVybmFsc18xLnJscC5lbmNvZGUoc2VsZi5yYXcpO1xuICAgIH07XG4gICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkLCBpKSB7XG4gICAgICAgIHNlbGYuX2ZpZWxkcy5wdXNoKGZpZWxkLm5hbWUpO1xuICAgICAgICBmdW5jdGlvbiBnZXR0ZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5yYXdbaV07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0dGVyKHYpIHtcbiAgICAgICAgICAgIHYgPSAoMCwgYnl0ZXNfMS50b0J1ZmZlcikodik7XG4gICAgICAgICAgICBpZiAodi50b1N0cmluZygnaGV4JykgPT09ICcwMCcgJiYgIWZpZWxkLmFsbG93WmVybykge1xuICAgICAgICAgICAgICAgIHYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmllbGQuYWxsb3dMZXNzICYmIGZpZWxkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHYgPSAoMCwgYnl0ZXNfMS51bnBhZEJ1ZmZlcikodik7XG4gICAgICAgICAgICAgICAgKDAsIGFzc2VydF8xLmRlZmF1bHQpKGZpZWxkLmxlbmd0aCA+PSB2Lmxlbmd0aCwgXCJUaGUgZmllbGQgXCIuY29uY2F0KGZpZWxkLm5hbWUsIFwiIG11c3Qgbm90IGhhdmUgbW9yZSBcIikuY29uY2F0KGZpZWxkLmxlbmd0aCwgXCIgYnl0ZXNcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIShmaWVsZC5hbGxvd1plcm8gJiYgdi5sZW5ndGggPT09IDApICYmIGZpZWxkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICgwLCBhc3NlcnRfMS5kZWZhdWx0KShmaWVsZC5sZW5ndGggPT09IHYubGVuZ3RoLCBcIlRoZSBmaWVsZCBcIi5jb25jYXQoZmllbGQubmFtZSwgXCIgbXVzdCBoYXZlIGJ5dGUgbGVuZ3RoIG9mIFwiKS5jb25jYXQoZmllbGQubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLnJhd1tpXSA9IHY7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYsIGZpZWxkLm5hbWUsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgIHNldDogc2V0dGVyLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZpZWxkLmRlZmF1bHQpIHtcbiAgICAgICAgICAgIHNlbGZbZmllbGQubmFtZV0gPSBmaWVsZC5kZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8vIGF0dGFjaCBhbGlhc1xuICAgICAgICBpZiAoZmllbGQuYWxpYXMpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCBmaWVsZC5hbGlhcywge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gaWYgdGhlIGNvbnN0dWN0b3IgaXMgcGFzc2VkIGRhdGFcbiAgICBpZiAoZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkYXRhID0gQnVmZmVyLmZyb20oKDAsIGludGVybmFsXzEuc3RyaXBIZXhQcmVmaXgpKGRhdGEpLCAnaGV4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICAgICAgZGF0YSA9IGV4dGVybmFsc18xLnJscC5kZWNvZGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IHNlbGYuX2ZpZWxkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIG51bWJlciBvZiBmaWVsZHMgaW4gZGF0YScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGFsbCB0aGUgaXRlbXMgYXJlIGJ1ZmZlcnNcbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICAgICAgICAgIHNlbGZbc2VsZi5fZmllbGRzW2ldXSA9ICgwLCBieXRlc18xLnRvQnVmZmVyKShkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdmFyIGtleXNfMSA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgICAgICAgICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleXNfMS5pbmRleE9mKGZpZWxkLm5hbWUpICE9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgc2VsZltmaWVsZC5uYW1lXSA9IGRhdGFbZmllbGQubmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKGtleXNfMS5pbmRleE9mKGZpZWxkLmFsaWFzKSAhPT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIHNlbGZbZmllbGQuYWxpYXNdID0gZGF0YVtmaWVsZC5hbGlhc107XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBkYXRhJyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuZXhwb3J0cy5kZWZpbmVQcm9wZXJ0aWVzID0gZGVmaW5lUHJvcGVydGllcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzaFBlcnNvbmFsTWVzc2FnZSA9IGV4cG9ydHMuaXNWYWxpZFNpZ25hdHVyZSA9IGV4cG9ydHMuZnJvbVJwY1NpZyA9IGV4cG9ydHMudG9Db21wYWN0U2lnID0gZXhwb3J0cy50b1JwY1NpZyA9IGV4cG9ydHMuZWNyZWNvdmVyID0gZXhwb3J0cy5lY3NpZ24gPSB2b2lkIDA7XG52YXIgc2VjcDI1NmsxXzEgPSByZXF1aXJlKFwiZXRoZXJldW0tY3J5cHRvZ3JhcGh5L3NlY3AyNTZrMVwiKTtcbnZhciBleHRlcm5hbHNfMSA9IHJlcXVpcmUoXCIuL2V4dGVybmFsc1wiKTtcbnZhciBieXRlc18xID0gcmVxdWlyZShcIi4vYnl0ZXNcIik7XG52YXIgaGFzaF8xID0gcmVxdWlyZShcIi4vaGFzaFwiKTtcbnZhciBoZWxwZXJzXzEgPSByZXF1aXJlKFwiLi9oZWxwZXJzXCIpO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmZ1bmN0aW9uIGVjc2lnbihtc2dIYXNoLCBwcml2YXRlS2V5LCBjaGFpbklkKSB7XG4gICAgdmFyIF9hID0gKDAsIHNlY3AyNTZrMV8xLmVjZHNhU2lnbikobXNnSGFzaCwgcHJpdmF0ZUtleSksIHNpZ25hdHVyZSA9IF9hLnNpZ25hdHVyZSwgcmVjb3ZlcnkgPSBfYS5yZWNpZDtcbiAgICB2YXIgciA9IEJ1ZmZlci5mcm9tKHNpZ25hdHVyZS5zbGljZSgwLCAzMikpO1xuICAgIHZhciBzID0gQnVmZmVyLmZyb20oc2lnbmF0dXJlLnNsaWNlKDMyLCA2NCkpO1xuICAgIGlmICghY2hhaW5JZCB8fCB0eXBlb2YgY2hhaW5JZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gcmV0dXJuIGxlZ2FjeSB0eXBlIEVDRFNBU2lnbmF0dXJlIChkZXByZWNhdGVkIGluIGZhdm9yIG9mIEVDRFNBU2lnbmF0dXJlQnVmZmVyIHRvIGhhbmRsZSBsYXJnZSBjaGFpbklkcylcbiAgICAgICAgaWYgKGNoYWluSWQgJiYgIU51bWJlci5pc1NhZmVJbnRlZ2VyKGNoYWluSWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm92aWRlZCBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIE1BWF9TQUZFX0lOVEVHRVIgKHBsZWFzZSB1c2UgYW4gYWx0ZXJuYXRpdmUgaW5wdXQgdHlwZSknKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdl8xID0gY2hhaW5JZCA/IHJlY292ZXJ5ICsgKGNoYWluSWQgKiAyICsgMzUpIDogcmVjb3ZlcnkgKyAyNztcbiAgICAgICAgcmV0dXJuIHsgcjogciwgczogcywgdjogdl8xIH07XG4gICAgfVxuICAgIHZhciBjaGFpbklkQk4gPSAoMCwgdHlwZXNfMS50b1R5cGUpKGNoYWluSWQsIHR5cGVzXzEuVHlwZU91dHB1dC5CTik7XG4gICAgdmFyIHYgPSBjaGFpbklkQk4ubXVsbigyKS5hZGRuKDM1KS5hZGRuKHJlY292ZXJ5KS50b0FycmF5TGlrZShCdWZmZXIpO1xuICAgIHJldHVybiB7IHI6IHIsIHM6IHMsIHY6IHYgfTtcbn1cbmV4cG9ydHMuZWNzaWduID0gZWNzaWduO1xuZnVuY3Rpb24gY2FsY3VsYXRlU2lnUmVjb3ZlcnkodiwgY2hhaW5JZCkge1xuICAgIHZhciB2Qk4gPSAoMCwgdHlwZXNfMS50b1R5cGUpKHYsIHR5cGVzXzEuVHlwZU91dHB1dC5CTik7XG4gICAgaWYgKCFjaGFpbklkKSB7XG4gICAgICAgIHJldHVybiB2Qk4uc3VibigyNyk7XG4gICAgfVxuICAgIHZhciBjaGFpbklkQk4gPSAoMCwgdHlwZXNfMS50b1R5cGUpKGNoYWluSWQsIHR5cGVzXzEuVHlwZU91dHB1dC5CTik7XG4gICAgcmV0dXJuIHZCTi5zdWIoY2hhaW5JZEJOLm11bG4oMikuYWRkbigzNSkpO1xufVxuZnVuY3Rpb24gaXNWYWxpZFNpZ1JlY292ZXJ5KHJlY292ZXJ5KSB7XG4gICAgdmFyIHJlYyA9IG5ldyBleHRlcm5hbHNfMS5CTihyZWNvdmVyeSk7XG4gICAgcmV0dXJuIHJlYy5lcW4oMCkgfHwgcmVjLmVxbigxKTtcbn1cbi8qKlxuICogRUNEU0EgcHVibGljIGtleSByZWNvdmVyeSBmcm9tIHNpZ25hdHVyZS5cbiAqIEByZXR1cm5zIFJlY292ZXJlZCBwdWJsaWMga2V5XG4gKi9cbnZhciBlY3JlY292ZXIgPSBmdW5jdGlvbiAobXNnSGFzaCwgdiwgciwgcywgY2hhaW5JZCkge1xuICAgIHZhciBzaWduYXR1cmUgPSBCdWZmZXIuY29uY2F0KFsoMCwgYnl0ZXNfMS5zZXRMZW5ndGhMZWZ0KShyLCAzMiksICgwLCBieXRlc18xLnNldExlbmd0aExlZnQpKHMsIDMyKV0sIDY0KTtcbiAgICB2YXIgcmVjb3ZlcnkgPSBjYWxjdWxhdGVTaWdSZWNvdmVyeSh2LCBjaGFpbklkKTtcbiAgICBpZiAoIWlzVmFsaWRTaWdSZWNvdmVyeShyZWNvdmVyeSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSB2IHZhbHVlJyk7XG4gICAgfVxuICAgIHZhciBzZW5kZXJQdWJLZXkgPSAoMCwgc2VjcDI1NmsxXzEuZWNkc2FSZWNvdmVyKShzaWduYXR1cmUsIHJlY292ZXJ5LnRvTnVtYmVyKCksIG1zZ0hhc2gpO1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSgoMCwgc2VjcDI1NmsxXzEucHVibGljS2V5Q29udmVydCkoc2VuZGVyUHViS2V5LCBmYWxzZSkuc2xpY2UoMSkpO1xufTtcbmV4cG9ydHMuZWNyZWNvdmVyID0gZWNyZWNvdmVyO1xuLyoqXG4gKiBDb252ZXJ0IHNpZ25hdHVyZSBwYXJhbWV0ZXJzIGludG8gdGhlIGZvcm1hdCBvZiBgZXRoX3NpZ25gIFJQQyBtZXRob2QuXG4gKiBAcmV0dXJucyBTaWduYXR1cmVcbiAqL1xudmFyIHRvUnBjU2lnID0gZnVuY3Rpb24gKHYsIHIsIHMsIGNoYWluSWQpIHtcbiAgICB2YXIgcmVjb3ZlcnkgPSBjYWxjdWxhdGVTaWdSZWNvdmVyeSh2LCBjaGFpbklkKTtcbiAgICBpZiAoIWlzVmFsaWRTaWdSZWNvdmVyeShyZWNvdmVyeSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSB2IHZhbHVlJyk7XG4gICAgfVxuICAgIC8vIGdldGggKGFuZCB0aGUgUlBDIGV0aF9zaWduIG1ldGhvZCkgdXNlcyB0aGUgNjUgYnl0ZSBmb3JtYXQgdXNlZCBieSBCaXRjb2luXG4gICAgcmV0dXJuICgwLCBieXRlc18xLmJ1ZmZlclRvSGV4KShCdWZmZXIuY29uY2F0KFsoMCwgYnl0ZXNfMS5zZXRMZW5ndGhMZWZ0KShyLCAzMiksICgwLCBieXRlc18xLnNldExlbmd0aExlZnQpKHMsIDMyKSwgKDAsIGJ5dGVzXzEudG9CdWZmZXIpKHYpXSkpO1xufTtcbmV4cG9ydHMudG9ScGNTaWcgPSB0b1JwY1NpZztcbi8qKlxuICogQ29udmVydCBzaWduYXR1cmUgcGFyYW1ldGVycyBpbnRvIHRoZSBmb3JtYXQgb2YgQ29tcGFjdCBTaWduYXR1cmUgUmVwcmVzZW50YXRpb24gKEVJUC0yMDk4KS5cbiAqIEByZXR1cm5zIFNpZ25hdHVyZVxuICovXG52YXIgdG9Db21wYWN0U2lnID0gZnVuY3Rpb24gKHYsIHIsIHMsIGNoYWluSWQpIHtcbiAgICB2YXIgcmVjb3ZlcnkgPSBjYWxjdWxhdGVTaWdSZWNvdmVyeSh2LCBjaGFpbklkKTtcbiAgICBpZiAoIWlzVmFsaWRTaWdSZWNvdmVyeShyZWNvdmVyeSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSB2IHZhbHVlJyk7XG4gICAgfVxuICAgIHZhciB2biA9ICgwLCB0eXBlc18xLnRvVHlwZSkodiwgdHlwZXNfMS5UeXBlT3V0cHV0Lk51bWJlcik7XG4gICAgdmFyIHNzID0gcztcbiAgICBpZiAoKHZuID4gMjggJiYgdm4gJSAyID09PSAxKSB8fCB2biA9PT0gMSB8fCB2biA9PT0gMjgpIHtcbiAgICAgICAgc3MgPSBCdWZmZXIuZnJvbShzKTtcbiAgICAgICAgc3NbMF0gfD0gMHg4MDtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBieXRlc18xLmJ1ZmZlclRvSGV4KShCdWZmZXIuY29uY2F0KFsoMCwgYnl0ZXNfMS5zZXRMZW5ndGhMZWZ0KShyLCAzMiksICgwLCBieXRlc18xLnNldExlbmd0aExlZnQpKHNzLCAzMildKSk7XG59O1xuZXhwb3J0cy50b0NvbXBhY3RTaWcgPSB0b0NvbXBhY3RTaWc7XG4vKipcbiAqIENvbnZlcnQgc2lnbmF0dXJlIGZvcm1hdCBvZiB0aGUgYGV0aF9zaWduYCBSUEMgbWV0aG9kIHRvIHNpZ25hdHVyZSBwYXJhbWV0ZXJzXG4gKiBOT1RFOiBhbGwgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBnZXRoOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzIwNTNcbiAqL1xudmFyIGZyb21ScGNTaWcgPSBmdW5jdGlvbiAoc2lnKSB7XG4gICAgdmFyIGJ1ZiA9ICgwLCBieXRlc18xLnRvQnVmZmVyKShzaWcpO1xuICAgIHZhciByO1xuICAgIHZhciBzO1xuICAgIHZhciB2O1xuICAgIGlmIChidWYubGVuZ3RoID49IDY1KSB7XG4gICAgICAgIHIgPSBidWYuc2xpY2UoMCwgMzIpO1xuICAgICAgICBzID0gYnVmLnNsaWNlKDMyLCA2NCk7XG4gICAgICAgIHYgPSAoMCwgYnl0ZXNfMS5idWZmZXJUb0ludCkoYnVmLnNsaWNlKDY0KSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGJ1Zi5sZW5ndGggPT09IDY0KSB7XG4gICAgICAgIC8vIENvbXBhY3QgU2lnbmF0dXJlIFJlcHJlc2VudGF0aW9uIChodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTIwOTgpXG4gICAgICAgIHIgPSBidWYuc2xpY2UoMCwgMzIpO1xuICAgICAgICBzID0gYnVmLnNsaWNlKDMyLCA2NCk7XG4gICAgICAgIHYgPSAoMCwgYnl0ZXNfMS5idWZmZXJUb0ludCkoYnVmLnNsaWNlKDMyLCAzMykpID4+IDc7XG4gICAgICAgIHNbMF0gJj0gMHg3ZjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzaWduYXR1cmUgbGVuZ3RoJyk7XG4gICAgfVxuICAgIC8vIHN1cHBvcnQgYm90aCB2ZXJzaW9ucyBvZiBgZXRoX3NpZ25gIHJlc3BvbnNlc1xuICAgIGlmICh2IDwgMjcpIHtcbiAgICAgICAgdiArPSAyNztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdjogdixcbiAgICAgICAgcjogcixcbiAgICAgICAgczogcyxcbiAgICB9O1xufTtcbmV4cG9ydHMuZnJvbVJwY1NpZyA9IGZyb21ScGNTaWc7XG4vKipcbiAqIFZhbGlkYXRlIGEgRUNEU0Egc2lnbmF0dXJlLlxuICogQHBhcmFtIGhvbWVzdGVhZE9yTGF0ZXIgSW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBiZWluZyB1c2VkIG9uIGVpdGhlciB0aGUgaG9tZXN0ZWFkIGhhcmRmb3JrIG9yIGEgbGF0ZXIgb25lXG4gKi9cbnZhciBpc1ZhbGlkU2lnbmF0dXJlID0gZnVuY3Rpb24gKHYsIHIsIHMsIGhvbWVzdGVhZE9yTGF0ZXIsIGNoYWluSWQpIHtcbiAgICBpZiAoaG9tZXN0ZWFkT3JMYXRlciA9PT0gdm9pZCAwKSB7IGhvbWVzdGVhZE9yTGF0ZXIgPSB0cnVlOyB9XG4gICAgdmFyIFNFQ1AyNTZLMV9OX0RJVl8yID0gbmV3IGV4dGVybmFsc18xLkJOKCc3ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjVkNTc2ZTczNTdhNDUwMWRkZmU5MmY0NjY4MWIyMGEwJywgMTYpO1xuICAgIHZhciBTRUNQMjU2SzFfTiA9IG5ldyBleHRlcm5hbHNfMS5CTignZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmViYWFlZGNlNmFmNDhhMDNiYmZkMjVlOGNkMDM2NDE0MScsIDE2KTtcbiAgICBpZiAoci5sZW5ndGggIT09IDMyIHx8IHMubGVuZ3RoICE9PSAzMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghaXNWYWxpZFNpZ1JlY292ZXJ5KGNhbGN1bGF0ZVNpZ1JlY292ZXJ5KHYsIGNoYWluSWQpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciByQk4gPSBuZXcgZXh0ZXJuYWxzXzEuQk4ocik7XG4gICAgdmFyIHNCTiA9IG5ldyBleHRlcm5hbHNfMS5CTihzKTtcbiAgICBpZiAockJOLmlzWmVybygpIHx8IHJCTi5ndChTRUNQMjU2SzFfTikgfHwgc0JOLmlzWmVybygpIHx8IHNCTi5ndChTRUNQMjU2SzFfTikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaG9tZXN0ZWFkT3JMYXRlciAmJiBzQk4uY21wKFNFQ1AyNTZLMV9OX0RJVl8yKSA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbmV4cG9ydHMuaXNWYWxpZFNpZ25hdHVyZSA9IGlzVmFsaWRTaWduYXR1cmU7XG4vKipcbiAqIFJldHVybnMgdGhlIGtlY2Nhay0yNTYgaGFzaCBvZiBgbWVzc2FnZWAsIHByZWZpeGVkIHdpdGggdGhlIGhlYWRlciB1c2VkIGJ5IHRoZSBgZXRoX3NpZ25gIFJQQyBjYWxsLlxuICogVGhlIG91dHB1dCBvZiB0aGlzIGZ1bmN0aW9uIGNhbiBiZSBmZWQgaW50byBgZWNzaWduYCB0byBwcm9kdWNlIHRoZSBzYW1lIHNpZ25hdHVyZSBhcyB0aGUgYGV0aF9zaWduYFxuICogY2FsbCBmb3IgYSBnaXZlbiBgbWVzc2FnZWAsIG9yIGZlZCB0byBgZWNyZWNvdmVyYCBhbG9uZyB3aXRoIGEgc2lnbmF0dXJlIHRvIHJlY292ZXIgdGhlIHB1YmxpYyBrZXlcbiAqIHVzZWQgdG8gcHJvZHVjZSB0aGUgc2lnbmF0dXJlLlxuICovXG52YXIgaGFzaFBlcnNvbmFsTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgKDAsIGhlbHBlcnNfMS5hc3NlcnRJc0J1ZmZlcikobWVzc2FnZSk7XG4gICAgdmFyIHByZWZpeCA9IEJ1ZmZlci5mcm9tKFwiXFx1MDAxOUV0aGVyZXVtIFNpZ25lZCBNZXNzYWdlOlxcblwiLmNvbmNhdChtZXNzYWdlLmxlbmd0aCksICd1dGYtOCcpO1xuICAgIHJldHVybiAoMCwgaGFzaF8xLmtlY2NhaykoQnVmZmVyLmNvbmNhdChbcHJlZml4LCBtZXNzYWdlXSkpO1xufTtcbmV4cG9ydHMuaGFzaFBlcnNvbmFsTWVzc2FnZSA9IGhhc2hQZXJzb25hbE1lc3NhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaWduYXR1cmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvVHlwZSA9IGV4cG9ydHMuVHlwZU91dHB1dCA9IGV4cG9ydHMuYm5Ub1JscCA9IGV4cG9ydHMuYm5Ub1VucGFkZGVkQnVmZmVyID0gZXhwb3J0cy5iblRvSGV4ID0gdm9pZCAwO1xudmFyIGV4dGVybmFsc18xID0gcmVxdWlyZShcIi4vZXh0ZXJuYWxzXCIpO1xudmFyIGludGVybmFsXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbFwiKTtcbnZhciBieXRlc18xID0gcmVxdWlyZShcIi4vYnl0ZXNcIik7XG4vKipcbiAqIENvbnZlcnQgQk4gdG8gMHgtcHJlZml4ZWQgaGV4IHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYm5Ub0hleCh2YWx1ZSkge1xuICAgIHJldHVybiBcIjB4XCIuY29uY2F0KHZhbHVlLnRvU3RyaW5nKDE2KSk7XG59XG5leHBvcnRzLmJuVG9IZXggPSBiblRvSGV4O1xuLyoqXG4gKiBDb252ZXJ0IHZhbHVlIGZyb20gQk4gdG8gYW4gdW5wYWRkZWQgQnVmZmVyXG4gKiAodXNlZnVsIGZvciBSTFAgdHJhbnNwb3J0KVxuICogQHBhcmFtIHZhbHVlIHZhbHVlIHRvIGNvbnZlcnRcbiAqL1xuZnVuY3Rpb24gYm5Ub1VucGFkZGVkQnVmZmVyKHZhbHVlKSB7XG4gICAgLy8gVXNpbmcgYGJuLnRvQXJyYXlMaWtlKEJ1ZmZlcilgIGluc3RlYWQgb2YgYGJuLnRvQnVmZmVyKClgXG4gICAgLy8gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBicm93c2VyaWZ5IGFuZCBzaW1pbGFyIHRvb2xzXG4gICAgcmV0dXJuICgwLCBieXRlc18xLnVucGFkQnVmZmVyKSh2YWx1ZS50b0FycmF5TGlrZShCdWZmZXIpKTtcbn1cbmV4cG9ydHMuYm5Ub1VucGFkZGVkQnVmZmVyID0gYm5Ub1VucGFkZGVkQnVmZmVyO1xuLyoqXG4gKiBEZXByZWNhdGVkIGFsaWFzIGZvciB7QGxpbmsgYm5Ub1VucGFkZGVkQnVmZmVyfVxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZnVuY3Rpb24gYm5Ub1JscCh2YWx1ZSkge1xuICAgIHJldHVybiBiblRvVW5wYWRkZWRCdWZmZXIodmFsdWUpO1xufVxuZXhwb3J0cy5iblRvUmxwID0gYm5Ub1JscDtcbi8qKlxuICogVHlwZSBvdXRwdXQgb3B0aW9uc1xuICovXG52YXIgVHlwZU91dHB1dDtcbihmdW5jdGlvbiAoVHlwZU91dHB1dCkge1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIk51bWJlclwiXSA9IDBdID0gXCJOdW1iZXJcIjtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJCTlwiXSA9IDFdID0gXCJCTlwiO1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIkJ1ZmZlclwiXSA9IDJdID0gXCJCdWZmZXJcIjtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJQcmVmaXhlZEhleFN0cmluZ1wiXSA9IDNdID0gXCJQcmVmaXhlZEhleFN0cmluZ1wiO1xufSkoVHlwZU91dHB1dCA9IGV4cG9ydHMuVHlwZU91dHB1dCB8fCAoZXhwb3J0cy5UeXBlT3V0cHV0ID0ge30pKTtcbmZ1bmN0aW9uIHRvVHlwZShpbnB1dCwgb3V0cHV0VHlwZSkge1xuICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgJiYgISgwLCBpbnRlcm5hbF8xLmlzSGV4U3RyaW5nKShpbnB1dCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQSBzdHJpbmcgbXVzdCBiZSBwcm92aWRlZCB3aXRoIGEgMHgtcHJlZml4LCBnaXZlbjogXCIuY29uY2F0KGlucHV0KSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc1NhZmVJbnRlZ2VyKGlucHV0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm92aWRlZCBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIE1BWF9TQUZFX0lOVEVHRVIgKHBsZWFzZSB1c2UgYW4gYWx0ZXJuYXRpdmUgaW5wdXQgdHlwZSknKTtcbiAgICB9XG4gICAgdmFyIG91dHB1dCA9ICgwLCBieXRlc18xLnRvQnVmZmVyKShpbnB1dCk7XG4gICAgaWYgKG91dHB1dFR5cGUgPT09IFR5cGVPdXRwdXQuQnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFR5cGUgPT09IFR5cGVPdXRwdXQuQk4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBleHRlcm5hbHNfMS5CTihvdXRwdXQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRUeXBlID09PSBUeXBlT3V0cHV0Lk51bWJlcikge1xuICAgICAgICB2YXIgYm4gPSBuZXcgZXh0ZXJuYWxzXzEuQk4ob3V0cHV0KTtcbiAgICAgICAgdmFyIG1heCA9IG5ldyBleHRlcm5hbHNfMS5CTihOdW1iZXIuTUFYX1NBRkVfSU5URUdFUi50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKGJuLmd0KG1heCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb3ZpZGVkIG51bWJlciBpcyBncmVhdGVyIHRoYW4gTUFYX1NBRkVfSU5URUdFUiAocGxlYXNlIHVzZSBhbiBhbHRlcm5hdGl2ZSBvdXRwdXQgdHlwZSknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm4udG9OdW1iZXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIG91dHB1dFR5cGUgPT09IFR5cGVPdXRwdXQuUHJlZml4ZWRIZXhTdHJpbmdcbiAgICAgICAgcmV0dXJuIFwiMHhcIi5jb25jYXQob3V0cHV0LnRvU3RyaW5nKCdoZXgnKSk7XG4gICAgfVxufVxuZXhwb3J0cy50b1R5cGUgPSB0b1R5cGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFzc2VydCIsInZhbCIsIm1zZyIsIkVycm9yIiwiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsIkJOIiwibnVtYmVyIiwiYmFzZSIsImVuZGlhbiIsImlzQk4iLCJ0aGlzIiwibmVnYXRpdmUiLCJ3b3JkcyIsImxlbmd0aCIsInJlZCIsIl9pbml0IiwiQnVmZmVyIiwid29yZFNpemUiLCJ3aW5kb3ciLCJlIiwicGFyc2VIZXg0Qml0cyIsInN0cmluZyIsImluZGV4IiwiYyIsImNoYXJDb2RlQXQiLCJwYXJzZUhleEJ5dGUiLCJsb3dlckJvdW5kIiwiciIsInBhcnNlQmFzZSIsInN0ciIsInN0YXJ0IiwiZW5kIiwibXVsIiwiYiIsImxlbiIsIk1hdGgiLCJtaW4iLCJpIiwibW92ZSIsImRlc3QiLCJzcmMiLCJudW0iLCJBcnJheSIsImlzQXJyYXkiLCJtYXgiLCJsZWZ0IiwicmlnaHQiLCJjbXAiLCJfaW5pdE51bWJlciIsIl9pbml0QXJyYXkiLCJ0b1N0cmluZyIsInJlcGxhY2UiLCJfcGFyc2VIZXgiLCJfcGFyc2VCYXNlIiwidG9BcnJheSIsImNlaWwiLCJqIiwidyIsIm9mZiIsIl9zdHJpcCIsImxpbWJMZW4iLCJsaW1iUG93IiwidG90YWwiLCJtb2QiLCJ3b3JkIiwiaW11bG4iLCJfaWFkZG4iLCJwb3ciLCJjb3B5IiwiX21vdmUiLCJjbG9uZSIsIl9leHBhbmQiLCJzaXplIiwiX25vcm1TaWduIiwiU3ltYm9sIiwiZm9yIiwiaW5zcGVjdCIsInplcm9zIiwiZ3JvdXBTaXplcyIsImdyb3VwQmFzZXMiLCJwYWRkaW5nIiwib3V0IiwiY2FycnkiLCJncm91cFNpemUiLCJncm91cEJhc2UiLCJpc1plcm8iLCJtb2RybiIsImlkaXZuIiwidG9OdW1iZXIiLCJyZXQiLCJ0b0pTT04iLCJ0b0J1ZmZlciIsInRvQXJyYXlMaWtlIiwic21hbGxNdWxUbyIsInNlbGYiLCJhIiwibG8iLCJrIiwibmNhcnJ5IiwicndvcmQiLCJtYXhKIiwiQXJyYXlUeXBlIiwiYnl0ZUxlbmd0aCIsInJlcUxlbmd0aCIsInJlcyIsImFsbG9jVW5zYWZlIiwiYWxsb2NhdGUiLCJfdG9BcnJheUxpa2VMRSIsInBvc2l0aW9uIiwic2hpZnQiLCJfdG9BcnJheUxpa2VCRSIsImNsejMyIiwiX2NvdW50Qml0cyIsInQiLCJfemVyb0JpdHMiLCJiaXRMZW5ndGgiLCJoaSIsInplcm9CaXRzIiwidG9Ud29zIiwid2lkdGgiLCJhYnMiLCJpbm90biIsImlhZGRuIiwiZnJvbVR3b3MiLCJ0ZXN0biIsIm5vdG4iLCJpbmVnIiwiaXNOZWciLCJuZWciLCJpdW9yIiwiaW9yIiwib3IiLCJ1b3IiLCJpdWFuZCIsImlhbmQiLCJhbmQiLCJ1YW5kIiwiaXV4b3IiLCJpeG9yIiwieG9yIiwidXhvciIsImJ5dGVzTmVlZGVkIiwiYml0c0xlZnQiLCJzZXRuIiwiYml0Iiwid2JpdCIsImlhZGQiLCJpc3ViIiwiYWRkIiwic3ViIiwiY29tYjEwTXVsVG8iLCJtaWQiLCJvIiwiYTAiLCJhbDAiLCJhaDAiLCJhMSIsImFsMSIsImFoMSIsImEyIiwiYWwyIiwiYWgyIiwiYTMiLCJhbDMiLCJhaDMiLCJhNCIsImFsNCIsImFoNCIsImE1IiwiYWw1IiwiYWg1IiwiYTYiLCJhbDYiLCJhaDYiLCJhNyIsImFsNyIsImFoNyIsImE4IiwiYWw4IiwiYWg4IiwiYTkiLCJhbDkiLCJhaDkiLCJiMCIsImJsMCIsImJoMCIsImIxIiwiYmwxIiwiYmgxIiwiYjIiLCJibDIiLCJiaDIiLCJiMyIsImJsMyIsImJoMyIsImI0IiwiYmw0IiwiYmg0IiwiYjUiLCJibDUiLCJiaDUiLCJiNiIsImJsNiIsImJoNiIsImI3IiwiYmw3IiwiYmg3IiwiYjgiLCJibDgiLCJiaDgiLCJiOSIsImJsOSIsImJoOSIsIncwIiwiaW11bCIsIncxIiwidzIiLCJ3MyIsInc0IiwidzUiLCJ3NiIsInc3IiwidzgiLCJ3OSIsIncxMCIsIncxMSIsIncxMiIsIncxMyIsIncxNCIsIncxNSIsIncxNiIsIncxNyIsIncxOCIsImJpZ011bFRvIiwiaG5jYXJyeSIsImp1bWJvTXVsVG8iLCJGRlRNIiwieCIsInkiLCJtdWxUbyIsIm1ha2VSQlQiLCJOIiwibCIsInJldkJpbiIsInJiIiwicGVybXV0ZSIsInJidCIsInJ3cyIsIml3cyIsInJ0d3MiLCJpdHdzIiwidHJhbnNmb3JtIiwicyIsInJ0d2RmIiwiY29zIiwiUEkiLCJpdHdkZiIsInNpbiIsInAiLCJydHdkZl8iLCJpdHdkZl8iLCJyZSIsImllIiwicm8iLCJpbyIsInJ4IiwiZ3Vlc3NMZW4xM2IiLCJuIiwibSIsIm9kZCIsImNvbmp1Z2F0ZSIsIm5vcm1hbGl6ZTEzYiIsIndzIiwicm91bmQiLCJjb252ZXJ0MTNiIiwic3R1YiIsInBoIiwibXVscCIsIl8iLCJyd3N0IiwiaXdzdCIsIm5yd3MiLCJucndzdCIsIm5pd3N0Iiwicm13cyIsIm11bGYiLCJpc05lZ051bSIsIm11bG4iLCJzcXIiLCJpc3FyIiwidG9CaXRBcnJheSIsInEiLCJpdXNobG4iLCJiaXRzIiwiY2FycnlNYXNrIiwibmV3Q2FycnkiLCJpc2hsbiIsIml1c2hybiIsImhpbnQiLCJleHRlbmRlZCIsImgiLCJtYXNrIiwibWFza2VkV29yZHMiLCJpc2hybiIsInNobG4iLCJ1c2hsbiIsInNocm4iLCJ1c2hybiIsImltYXNrbiIsIm1hc2tuIiwiaXN1Ym4iLCJhZGRuIiwic3VibiIsImlhYnMiLCJfaXNobG5zdWJtdWwiLCJfd29yZERpdiIsIm1vZGUiLCJiaGkiLCJkaWZmIiwicWoiLCJkaXYiLCJkaXZtb2QiLCJwb3NpdGl2ZSIsImRpdm4iLCJ1bW9kIiwiZGl2Um91bmQiLCJkbSIsImhhbGYiLCJyMiIsImFuZGxuIiwiYWNjIiwibW9kbiIsImVnY2QiLCJBIiwiQiIsIkMiLCJEIiwiZyIsImlzRXZlbiIsInlwIiwieHAiLCJpbSIsImlzT2RkIiwiam0iLCJnY2QiLCJfaW52bXAiLCJ4MSIsIngyIiwiZGVsdGEiLCJjbXBuIiwiaW52bSIsImJpbmNuIiwidWNtcCIsImd0biIsImd0IiwiZ3RlbiIsImd0ZSIsImx0biIsImx0IiwibHRlbiIsImx0ZSIsImVxbiIsImVxIiwiUmVkIiwidG9SZWQiLCJjdHgiLCJjb252ZXJ0VG8iLCJfZm9yY2VSZWQiLCJmcm9tUmVkIiwiY29udmVydEZyb20iLCJmb3JjZVJlZCIsInJlZEFkZCIsInJlZElBZGQiLCJyZWRTdWIiLCJyZWRJU3ViIiwicmVkU2hsIiwic2hsIiwicmVkTXVsIiwiX3ZlcmlmeTIiLCJyZWRJTXVsIiwicmVkU3FyIiwiX3ZlcmlmeTEiLCJyZWRJU3FyIiwicmVkU3FydCIsInNxcnQiLCJyZWRJbnZtIiwicmVkTmVnIiwicmVkUG93IiwicHJpbWVzIiwiazI1NiIsInAyMjQiLCJwMTkyIiwicDI1NTE5IiwiTVByaW1lIiwibmFtZSIsInRtcCIsIl90bXAiLCJLMjU2IiwiY2FsbCIsIlAyMjQiLCJQMTkyIiwiUDI1NTE5IiwicHJpbWUiLCJfcHJpbWUiLCJNb250IiwiaW1vZCIsInJpbnYiLCJtaW52IiwiaXJlZHVjZSIsInJsZW4iLCJzcGxpdCIsImltdWxLIiwidW5kZWZpbmVkIiwic3RyaXAiLCJpbnB1dCIsIm91dHB1dCIsIm91dExlbiIsInByZXYiLCJuZXh0IiwibW9kMyIsIm9uZSIsIm5PbmUiLCJscG93IiwieiIsImludiIsInduZCIsImN1cnJlbnQiLCJjdXJyZW50TGVuIiwibW9udCIsInUiLCJfX3JlYWQiLCJpdGVyYXRvciIsImFyIiwiZG9uZSIsInB1c2giLCJ2YWx1ZSIsImVycm9yIiwiX19pbXBvcnREZWZhdWx0IiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiaXNaZXJvQWRkcmVzcyIsInplcm9BZGRyZXNzIiwiaW1wb3J0UHVibGljIiwicHJpdmF0ZVRvQWRkcmVzcyIsInByaXZhdGVUb1B1YmxpYyIsInB1YmxpY1RvQWRkcmVzcyIsInB1YlRvQWRkcmVzcyIsImlzVmFsaWRQdWJsaWMiLCJpc1ZhbGlkUHJpdmF0ZSIsImdlbmVyYXRlQWRkcmVzczIiLCJnZW5lcmF0ZUFkZHJlc3MiLCJpc1ZhbGlkQ2hlY2tzdW1BZGRyZXNzIiwidG9DaGVja3N1bUFkZHJlc3MiLCJpc1ZhbGlkQWRkcmVzcyIsIkFjY291bnQiLCJhc3NlcnRfMSIsImV4dGVybmFsc18xIiwic2VjcDI1NmsxXzEiLCJpbnRlcm5hbF8xIiwiY29uc3RhbnRzXzEiLCJieXRlc18xIiwiaGFzaF8xIiwiaGVscGVyc18xIiwidHlwZXNfMSIsIm5vbmNlIiwiYmFsYW5jZSIsInN0YXRlUm9vdCIsImNvZGVIYXNoIiwiS0VDQ0FLMjU2X1JMUCIsIktFQ0NBSzI1Nl9OVUxMIiwiX3ZhbGlkYXRlIiwiZnJvbUFjY291bnREYXRhIiwiYWNjb3VudERhdGEiLCJmcm9tUmxwU2VyaWFsaXplZEFjY291bnQiLCJzZXJpYWxpemVkIiwidmFsdWVzIiwicmxwIiwiZGVjb2RlIiwiZnJvbVZhbHVlc0FycmF5IiwiX2EiLCJyYXciLCJiblRvVW5wYWRkZWRCdWZmZXIiLCJzZXJpYWxpemUiLCJlbmNvZGUiLCJpc0NvbnRyYWN0IiwiZXF1YWxzIiwiaXNFbXB0eSIsImhleEFkZHJlc3MiLCJhc3NlcnRJc1N0cmluZyIsInRlc3QiLCJlaXAxMTkxQ2hhaW5JZCIsImFzc2VydElzSGV4U3RyaW5nIiwiYWRkcmVzcyIsInN0cmlwSGV4UHJlZml4IiwidG9Mb3dlckNhc2UiLCJwcmVmaXgiLCJ0b1R5cGUiLCJUeXBlT3V0cHV0IiwiaGFzaCIsImtlY2Nha0Zyb21TdHJpbmciLCJwYXJzZUludCIsInRvVXBwZXJDYXNlIiwiZnJvbSIsImFzc2VydElzQnVmZmVyIiwibm9uY2VCTiIsInJscGhhc2giLCJzbGljZSIsInNhbHQiLCJpbml0Q29kZSIsImRlZmF1bHQiLCJrZWNjYWsyNTYiLCJjb25jYXQiLCJwcml2YXRlS2V5IiwicHJpdmF0ZUtleVZlcmlmeSIsInB1YmxpY0tleSIsInNhbml0aXplIiwicHVibGljS2V5VmVyaWZ5IiwicHViS2V5IiwicHVibGljS2V5Q29udmVydCIsImtlY2NhayIsInB1YmxpY0tleUNyZWF0ZSIsImFkZHIiLCJidWZmZXJUb0hleCIsIkFkZHJlc3MiLCJhY2NvdW50XzEiLCJidWYiLCJ6ZXJvIiwiZnJvbVN0cmluZyIsImZyb21QdWJsaWNLZXkiLCJpc0J1ZmZlciIsImZyb21Qcml2YXRlS2V5IiwiZ2VuZXJhdGUiLCJnZW5lcmF0ZTIiLCJpc1ByZWNvbXBpbGVPclN5c3RlbUFkZHJlc3MiLCJhZGRyZXNzQk4iLCJyYW5nZU1pbiIsInJhbmdlTWF4IiwiX192YWx1ZXMiLCJUeXBlRXJyb3IiLCJidWZBcnJUb0FyciIsImFyclRvQnVmQXJyIiwidmFsaWRhdGVOb0xlYWRpbmdaZXJvZXMiLCJiYVRvSlNPTiIsInRvVXRmOCIsImFkZEhleFByZWZpeCIsInRvVW5zaWduZWQiLCJmcm9tU2lnbmVkIiwiYnVmZmVyVG9JbnQiLCJ1bnBhZEhleFN0cmluZyIsInVucGFkQXJyYXkiLCJ1bnBhZEJ1ZmZlciIsInNldExlbmd0aFJpZ2h0Iiwic2V0TGVuZ3RoTGVmdCIsImludFRvQnVmZmVyIiwiaW50VG9IZXgiLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwiaGV4IiwicGFkVG9FdmVuIiwiYnl0ZXMiLCJmaWxsIiwic2V0TGVuZ3RoIiwic3RyaXBaZXJvcyIsImZpcnN0IiwiYXNzZXJ0SXNBcnJheSIsInYiLCJVaW50OEFycmF5IiwiaXNIZXhTdHJpbmciLCJpc0hleFByZWZpeGVkIiwiYmEiLCJhcnJheSIsImVfMSIsIl9iIiwiZW50cmllcyIsIl9jIiwiX2QiLCJlXzFfMSIsInJldHVybiIsImFyciIsIm1hcCIsIktFQ0NBSzI1Nl9STFBfUyIsIktFQ0NBSzI1Nl9STFBfQVJSQVkiLCJLRUNDQUsyNTZfUkxQX0FSUkFZX1MiLCJLRUNDQUsyNTZfTlVMTF9TIiwiVFdPX1BPVzI1NiIsIk1BWF9JTlRFR0VSIiwiTUFYX1VJTlQ2NCIsImJ1ZmZlcl8xIiwiX19jcmVhdGVCaW5kaW5nIiwiY3JlYXRlIiwiazIiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwiX19pbXBvcnRTdGFyIiwicmVzdWx0IiwiaGFzT3duUHJvcGVydHkiLCJibl9qc18xIiwicmlwZW1kMTYwRnJvbUFycmF5IiwicmlwZW1kMTYwRnJvbVN0cmluZyIsInJpcGVtZDE2MCIsInNoYTI1NkZyb21BcnJheSIsInNoYTI1NkZyb21TdHJpbmciLCJzaGEyNTYiLCJrZWNjYWtGcm9tQXJyYXkiLCJrZWNjYWtGcm9tSGV4U3RyaW5nIiwia2VjY2FrXzEiLCJjcmVhdGVIYXNoIiwia2VjY2FrMjI0Iiwia2VjY2FrMzg0Iiwia2VjY2FrNTEyIiwiX3NoYTI1NiIsInVwZGF0ZSIsImRpZ2VzdCIsIl9yaXBlbWQxNjAiLCJwYWRkZWQiLCJfX2V4cG9ydFN0YXIiLCJnZXRLZXlzIiwiZnJvbUFzY2lpIiwiZnJvbVV0ZjgiLCJ0b0FzY2lpIiwiYXJyYXlDb250YWluc0FycmF5IiwiZ2V0QmluYXJ5U2l6ZSIsInN1cGVyc2V0Iiwic3Vic2V0Iiwic29tZSIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJjb2RlIiwic3Vic3RyIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwic3RyaW5nVmFsdWUiLCJwYXJhbXMiLCJrZXkiLCJhbGxvd0VtcHR5IiwibWF0Y2giLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZmllbGRzIiwiZGF0YSIsIl9maWVsZHMiLCJsYWJlbCIsIm9ial8xIiwiZm9yRWFjaCIsImZpZWxkIiwiZ2V0dGVyIiwic2V0dGVyIiwiYWxsb3daZXJvIiwiYWxsb3dMZXNzIiwiY29uZmlndXJhYmxlIiwic2V0IiwiYWxpYXMiLCJkIiwia2V5c18xIiwia2V5cyIsImhhc2hQZXJzb25hbE1lc3NhZ2UiLCJpc1ZhbGlkU2lnbmF0dXJlIiwiZnJvbVJwY1NpZyIsInRvQ29tcGFjdFNpZyIsInRvUnBjU2lnIiwiZWNyZWNvdmVyIiwiZWNzaWduIiwiY2FsY3VsYXRlU2lnUmVjb3ZlcnkiLCJjaGFpbklkIiwidkJOIiwiY2hhaW5JZEJOIiwiaXNWYWxpZFNpZ1JlY292ZXJ5IiwicmVjb3ZlcnkiLCJyZWMiLCJtc2dIYXNoIiwiZWNkc2FTaWduIiwic2lnbmF0dXJlIiwicmVjaWQiLCJzZW5kZXJQdWJLZXkiLCJlY2RzYVJlY292ZXIiLCJ2biIsInNzIiwic2lnIiwiaG9tZXN0ZWFkT3JMYXRlciIsIlNFQ1AyNTZLMV9OX0RJVl8yIiwiU0VDUDI1NksxX04iLCJyQk4iLCJzQk4iLCJtZXNzYWdlIiwiYm5Ub1JscCIsImJuVG9IZXgiLCJvdXRwdXRUeXBlIiwiYm4iLCJNQVhfU0FGRV9JTlRFR0VSIl0sInNvdXJjZVJvb3QiOiIifQ==
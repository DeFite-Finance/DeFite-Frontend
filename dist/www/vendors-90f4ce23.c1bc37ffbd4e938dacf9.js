"use strict";(self.webpackChunkhugiris_nft=self.webpackChunkhugiris_nft||[]).push([[6882],{82415:function(e,t,r){r.d(t,{RQ:function(){return X},_R:function(){return p}});var n=r(53587),i=r(80711);const o="abi/5.0.7";r(25108);const s=new i.Yd(o),f={};let a={calldata:!0,memory:!0,storage:!0},u={calldata:!0,memory:!0};function d(e,t){if("bytes"===e||"string"===e){if(a[t])return!0}else if("address"===e){if("payable"===t)return!0}else if((e.indexOf("[")>=0||"tuple"===e)&&u[t])return!0;return(a[t]||"payable"===t)&&s.throwArgumentError("invalid modifier","name",t),!1}function c(e,t){for(let r in t)(0,n.zG)(e,r,t[r])}const h=Object.freeze({sighash:"sighash",minimal:"minimal",full:"full",json:"json"}),l=new RegExp(/^(.*)\[([0-9]*)\]$/);class p{constructor(e,t){e!==f&&s.throwError("use fromString",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:"new ParamType()"}),c(this,t);let r=this.type.match(l);c(this,r?{arrayLength:parseInt(r[2]||"-1"),arrayChildren:p.fromObject({type:r[1],components:this.components}),baseType:"array"}:{arrayLength:null,arrayChildren:null,baseType:null!=this.components?"tuple":this.type}),this._isParamType=!0,Object.freeze(this)}format(e){if(e||(e=h.sighash),h[e]||s.throwArgumentError("invalid format type","format",e),e===h.json){let t={type:"tuple"===this.baseType?"tuple":this.type,name:this.name||void 0};return"boolean"==typeof this.indexed&&(t.indexed=this.indexed),this.components&&(t.components=this.components.map((t=>JSON.parse(t.format(e))))),JSON.stringify(t)}let t="";return"array"===this.baseType?(t+=this.arrayChildren.format(e),t+="["+(this.arrayLength<0?"":String(this.arrayLength))+"]"):"tuple"===this.baseType?(e!==h.sighash&&(t+=this.type),t+="("+this.components.map((t=>t.format(e))).join(e===h.full?", ":",")+")"):t+=this.type,e!==h.sighash&&(!0===this.indexed&&(t+=" indexed"),e===h.full&&this.name&&(t+=" "+this.name)),t}static from(e,t){return"string"==typeof e?p.fromString(e,t):p.fromObject(e)}static fromObject(e){return p.isParamType(e)?e:new p(f,{name:e.name||null,type:g(e.type),indexed:null==e.indexed?null:!!e.indexed,components:e.components?e.components.map(p.fromObject):null})}static fromString(e,t){return r=function(e,t){let r=e;function n(t){s.throwArgumentError(`unexpected character at position ${t}`,"param",e)}function i(e){let r={type:"",name:"",parent:e,state:{allowType:!0}};return t&&(r.indexed=!1),r}e=e.replace(/\s/g," ");let o={type:"",name:"",state:{allowType:!0}},f=o;for(let r=0;r<e.length;r++){let o=e[r];switch(o){case"(":f.state.allowType&&""===f.type?f.type="tuple":f.state.allowParams||n(r),f.state.allowType=!1,f.type=g(f.type),f.components=[i(f)],f=f.components[0];break;case")":delete f.state,"indexed"===f.name&&(t||n(r),f.indexed=!0,f.name=""),d(f.type,f.name)&&(f.name=""),f.type=g(f.type);let e=f;f=f.parent,f||n(r),delete e.parent,f.state.allowParams=!1,f.state.allowName=!0,f.state.allowArray=!0;break;case",":delete f.state,"indexed"===f.name&&(t||n(r),f.indexed=!0,f.name=""),d(f.type,f.name)&&(f.name=""),f.type=g(f.type);let s=i(f.parent);f.parent.components.push(s),delete f.parent,f=s;break;case" ":f.state.allowType&&""!==f.type&&(f.type=g(f.type),delete f.state.allowType,f.state.allowName=!0,f.state.allowParams=!0),f.state.allowName&&""!==f.name&&("indexed"===f.name?(t||n(r),f.indexed&&n(r),f.indexed=!0,f.name=""):d(f.type,f.name)?f.name="":f.state.allowName=!1);break;case"[":f.state.allowArray||n(r),f.type+=o,f.state.allowArray=!1,f.state.allowName=!1,f.state.readArray=!0;break;case"]":f.state.readArray||n(r),f.type+=o,f.state.readArray=!1,f.state.allowArray=!0,f.state.allowName=!0;break;default:f.state.allowType?(f.type+=o,f.state.allowParams=!0,f.state.allowArray=!0):f.state.allowName?(f.name+=o,delete f.state.allowArray):f.state.readArray?f.type+=o:n(r)}}return f.parent&&s.throwArgumentError("unexpected eof","param",e),delete o.state,"indexed"===f.name?(t||n(r.length-7),f.indexed&&n(r.length-7),f.indexed=!0,f.name=""):d(f.type,f.name)&&(f.name=""),o.type=g(o.type),o}(e,!!t),p.fromObject({name:r.name,type:r.type,indexed:r.indexed,components:r.components});var r}static isParamType(e){return!(null==e||!e._isParamType)}}function g(e){return e.match(/^uint($|[^1-9])/)?e="uint256"+e.substring(4):e.match(/^int($|[^1-9])/)&&(e="int256"+e.substring(3)),e}var m=r(93286),v=r(15154);const y=new i.Yd(o);class b{constructor(e,t,r,n){this.name=e,this.type=t,this.localName=r,this.dynamic=n}_throwError(e,t){y.throwArgumentError(e,this.localName,t)}}class w{constructor(e){(0,n.zG)(this,"wordSize",e||32),this._data=[],this._dataLength=0,this._padding=new Uint8Array(e)}get data(){return(0,m.xs)(this._data)}get length(){return this._dataLength}_writeData(e){return this._data.push(e),this._dataLength+=e.length,e.length}appendWriter(e){return this._writeData((0,m.zo)(e._data))}writeBytes(e){let t=(0,m.lE)(e);const r=t.length%this.wordSize;return r&&(t=(0,m.zo)([t,this._padding.slice(r)])),this._writeData(t)}_getValue(e){let t=(0,m.lE)(v.O$.from(e));return t.length>this.wordSize&&y.throwError("value out-of-bounds",i.Yd.errors.BUFFER_OVERRUN,{length:this.wordSize,offset:t.length}),t.length%this.wordSize&&(t=(0,m.zo)([this._padding.slice(t.length%this.wordSize),t])),t}writeValue(e){return this._writeData(this._getValue(e))}writeUpdatableValue(){const e=this._data.length;return this._data.push(this._padding),this._dataLength+=this.wordSize,t=>{this._data[e]=this._getValue(t)}}}class E{constructor(e,t,r,i){(0,n.zG)(this,"_data",(0,m.lE)(e)),(0,n.zG)(this,"wordSize",t||32),(0,n.zG)(this,"_coerceFunc",r),(0,n.zG)(this,"allowLoose",i),this._offset=0}get data(){return(0,m.Dv)(this._data)}get consumed(){return this._offset}static coerce(e,t){let r=e.match("^u?int([0-9]+)$");return r&&parseInt(r[1])<=48&&(t=t.toNumber()),t}coerce(e,t){return this._coerceFunc?this._coerceFunc(e,t):E.coerce(e,t)}_peekBytes(e,t,r){let n=Math.ceil(t/this.wordSize)*this.wordSize;return this._offset+n>this._data.length&&(this.allowLoose&&r&&this._offset+t<=this._data.length?n=t:y.throwError("data out-of-bounds",i.Yd.errors.BUFFER_OVERRUN,{length:this._data.length,offset:this._offset+n})),this._data.slice(this._offset,this._offset+n)}subReader(e){return new E(this._data.slice(this._offset+e),this.wordSize,this._coerceFunc,this.allowLoose)}readBytes(e,t){let r=this._peekBytes(0,e,!!t);return this._offset+=r.length,r.slice(0,e)}readValue(){return v.O$.from(this.readBytes(this.wordSize))}}var A=r(64594);class _ extends b{constructor(e){super("address","address",e,!1)}encode(e,t){try{(0,A.Kn)(t)}catch(e){this._throwError(e.message,t)}return e.writeValue(t)}decode(e){return(0,A.Kn)((0,m.$m)(e.readValue().toHexString(),20))}}class x extends b{constructor(e){super(e.name,e.type,void 0,e.dynamic),this.coder=e}encode(e,t){return this.coder.encode(e,t)}decode(e){return this.coder.decode(e)}}const N=new i.Yd(o);function S(e,t,r){let n=null;if(Array.isArray(r))n=r;else if(r&&"object"==typeof r){let e={};n=t.map((t=>{const n=t.localName;return n||N.throwError("cannot encode object for signature with missing names",i.Yd.errors.INVALID_ARGUMENT,{argument:"values",coder:t,value:r}),e[n]&&N.throwError("cannot encode object for signature with duplicate names",i.Yd.errors.INVALID_ARGUMENT,{argument:"values",coder:t,value:r}),e[n]=!0,r[n]}))}else N.throwArgumentError("invalid tuple value","tuple",r);t.length!==n.length&&N.throwArgumentError("types/value length mismatch","tuple",r);let o=new w(e.wordSize),s=new w(e.wordSize),f=[];t.forEach(((e,t)=>{let r=n[t];if(e.dynamic){let t=s.length;e.encode(s,r);let n=o.writeUpdatableValue();f.push((e=>{n(e+t)}))}else e.encode(o,r)})),f.forEach((e=>{e(o.length)}));let a=e.appendWriter(o);return a+=e.appendWriter(s),a}function I(e,t){let r=[],n=e.subReader(0);t.forEach((t=>{let o=null;if(t.dynamic){let r=e.readValue(),s=n.subReader(r.toNumber());try{o=t.decode(s)}catch(e){if(e.code===i.Yd.errors.BUFFER_OVERRUN)throw e;o=e,o.baseType=t.name,o.name=t.localName,o.type=t.type}}else try{o=t.decode(e)}catch(e){if(e.code===i.Yd.errors.BUFFER_OVERRUN)throw e;o=e,o.baseType=t.name,o.name=t.localName,o.type=t.type}null!=o&&r.push(o)}));const o=t.reduce(((e,t)=>{const r=t.localName;return r&&(e[r]||(e[r]=0),e[r]++),e}),{});t.forEach(((e,t)=>{let n=e.localName;if(!n||1!==o[n])return;if("length"===n&&(n="_length"),null!=r[n])return;const i=r[t];i instanceof Error?Object.defineProperty(r,n,{get:()=>{throw i}}):r[n]=i}));for(let e=0;e<r.length;e++){const t=r[e];t instanceof Error&&Object.defineProperty(r,e,{get:()=>{throw t}})}return Object.freeze(r)}class R extends b{constructor(e,t,r){super("array",e.type+"["+(t>=0?t:"")+"]",r,-1===t||e.dynamic),this.coder=e,this.length=t}encode(e,t){Array.isArray(t)||this._throwError("expected array value",t);let r=this.length;-1===r&&(r=t.length,e.writeValue(t.length)),N.checkArgumentCount(t.length,r,"coder array"+(this.localName?" "+this.localName:""));let n=[];for(let e=0;e<t.length;e++)n.push(this.coder);return S(e,n,t)}decode(e){let t=this.length;-1===t&&(t=e.readValue().toNumber());let r=[];for(let e=0;e<t;e++)r.push(new x(this.coder));return e.coerce(this.name,I(e,r))}}class P extends b{constructor(e){super("bool","bool",e,!1)}encode(e,t){return e.writeValue(t?1:0)}decode(e){return e.coerce(this.type,!e.readValue().isZero())}}class O extends b{constructor(e,t){super(e,e,t,!0)}encode(e,t){t=(0,m.lE)(t);let r=e.writeValue(t.length);return r+=e.writeBytes(t),r}decode(e){return e.readBytes(e.readValue().toNumber(),!0)}}class T extends O{constructor(e){super("bytes",e)}decode(e){return e.coerce(this.name,(0,m.Dv)(super.decode(e)))}}class M extends b{constructor(e,t){let r="bytes"+String(e);super(r,r,t,!1),this.size=e}encode(e,t){let r=(0,m.lE)(t);return r.length!==this.size&&this._throwError("incorrect data length",t),e.writeBytes(r)}decode(e){return e.coerce(this.name,(0,m.Dv)(e.readBytes(this.size)))}}class U extends b{constructor(e){super("null","",e,!1)}encode(e,t){return null!=t&&this._throwError("not null",t),e.writeBytes([])}decode(e){return e.readBytes(0),e.coerce(this.name,null)}}var z=r(21046);class F extends b{constructor(e,t,r){const n=(t?"int":"uint")+8*e;super(n,n,r,!1),this.size=e,this.signed=t}encode(e,t){let r=v.O$.from(t),n=z.Bz.mask(8*e.wordSize);if(this.signed){let e=n.mask(8*this.size-1);(r.gt(e)||r.lt(e.add(z.fh).mul(z.tL)))&&this._throwError("value out-of-bounds",t)}else(r.lt(z._Y)||r.gt(n.mask(8*this.size)))&&this._throwError("value out-of-bounds",t);return r=r.toTwos(8*this.size).mask(8*this.size),this.signed&&(r=r.fromTwos(8*this.size).toTwos(8*e.wordSize)),e.writeValue(r)}decode(e){let t=e.readValue().mask(8*this.size);return this.signed&&(t=t.fromTwos(8*this.size)),e.coerce(this.name,t)}}const L=new i.Yd("strings/5.5.0");var k,D;function C(e,t,r,n,i){if(e===D.BAD_PREFIX||e===D.UNEXPECTED_CONTINUE){let e=0;for(let n=t+1;n<r.length&&r[n]>>6==2;n++)e++;return e}return e===D.OVERRUN?r.length-t-1:0}!function(e){e.current="",e.NFC="NFC",e.NFD="NFD",e.NFKC="NFKC",e.NFKD="NFKD"}(k||(k={})),function(e){e.UNEXPECTED_CONTINUE="unexpected continuation byte",e.BAD_PREFIX="bad codepoint prefix",e.OVERRUN="string overrun",e.MISSING_CONTINUE="missing continuation byte",e.OUT_OF_RANGE="out of UTF-8 range",e.UTF16_SURROGATE="UTF-16 surrogate",e.OVERLONG="overlong representation"}(D||(D={}));const q=Object.freeze({error:function(e,t,r,n,i){return L.throwArgumentError(`invalid codepoint at offset ${t}; ${e}`,"bytes",r)},ignore:C,replace:function(e,t,r,n,i){return e===D.OVERLONG?(n.push(i),0):(n.push(65533),C(e,t,r))}});function G(e,t){null==t&&(t=q.error),e=(0,m.lE)(e);const r=[];let n=0;for(;n<e.length;){const i=e[n++];if(i>>7==0){r.push(i);continue}let o=null,s=null;if(192==(224&i))o=1,s=127;else if(224==(240&i))o=2,s=2047;else{if(240!=(248&i)){n+=t(128==(192&i)?D.UNEXPECTED_CONTINUE:D.BAD_PREFIX,n-1,e,r);continue}o=3,s=65535}if(n-1+o>=e.length){n+=t(D.OVERRUN,n-1,e,r);continue}let f=i&(1<<8-o-1)-1;for(let i=0;i<o;i++){let i=e[n];if(128!=(192&i)){n+=t(D.MISSING_CONTINUE,n,e,r),f=null;break}f=f<<6|63&i,n++}null!==f&&(f>1114111?n+=t(D.OUT_OF_RANGE,n-1-o,e,r,f):f>=55296&&f<=57343?n+=t(D.UTF16_SURROGATE,n-1-o,e,r,f):f<=s?n+=t(D.OVERLONG,n-1-o,e,r,f):r.push(f))}return r}function j(e,t=k.current){t!=k.current&&(L.checkNormalize(),e=e.normalize(t));let r=[];for(let t=0;t<e.length;t++){const n=e.charCodeAt(t);if(n<128)r.push(n);else if(n<2048)r.push(n>>6|192),r.push(63&n|128);else if(55296==(64512&n)){t++;const i=e.charCodeAt(t);if(t>=e.length||56320!=(64512&i))throw new Error("invalid utf-8 string");const o=65536+((1023&n)<<10)+(1023&i);r.push(o>>18|240),r.push(o>>12&63|128),r.push(o>>6&63|128),r.push(63&o|128)}else r.push(n>>12|224),r.push(n>>6&63|128),r.push(63&n|128)}return(0,m.lE)(r)}function B(e,t){return G(e,t).map((e=>e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10&1023),56320+(1023&e))))).join("")}class V extends O{constructor(e){super("string",e)}encode(e,t){return super.encode(e,j(t))}decode(e){return B(super.decode(e))}}class K extends b{constructor(e,t){let r=!1;const n=[];e.forEach((e=>{e.dynamic&&(r=!0),n.push(e.type)}));super("tuple","tuple("+n.join(",")+")",t,r),this.coders=e}encode(e,t){return S(e,this.coders,t)}decode(e){return e.coerce(this.name,I(e,this.coders))}}const $=new i.Yd(o),Y=new RegExp(/^bytes([0-9]*)$/),W=new RegExp(/^(u?int)([0-9]*)$/);class X{constructor(e){$.checkNew(new.target,X),(0,n.zG)(this,"coerceFunc",e||null)}_getCoder(e){switch(e.baseType){case"address":return new _(e.name);case"bool":return new P(e.name);case"string":return new V(e.name);case"bytes":return new T(e.name);case"array":return new R(this._getCoder(e.arrayChildren),e.arrayLength,e.name);case"tuple":return new K((e.components||[]).map((e=>this._getCoder(e))),e.name);case"":return new U(e.name)}let t=e.type.match(W);if(t){let r=parseInt(t[2]||"256");return(0===r||r>256||r%8!=0)&&$.throwArgumentError("invalid "+t[1]+" bit length","param",e),new F(r/8,"int"===t[1],e.name)}if(t=e.type.match(Y),t){let r=parseInt(t[1]);return(0===r||r>32)&&$.throwArgumentError("invalid bytes length","param",e),new M(r,e.name)}return $.throwArgumentError("invalid type","type",e.type)}_getWordSize(){return 32}_getReader(e,t){return new E(e,this._getWordSize(),this.coerceFunc,t)}_getWriter(){return new w(this._getWordSize())}encode(e,t){e.length!==t.length&&$.throwError("types/values length mismatch",i.Yd.errors.INVALID_ARGUMENT,{count:{types:e.length,values:t.length},value:{types:e,values:t}});const r=e.map((e=>this._getCoder(p.from(e)))),n=new K(r,"_"),o=this._getWriter();return n.encode(o,t),o.data}decode(e,t,r){const n=e.map((e=>this._getCoder(p.from(e))));return new K(n,"_").decode(this._getReader((0,m.lE)(t),r))}}new X,new i.Yd(o)},64594:function(e,t,r){r.d(t,{Kn:function(){return h}});var n=r(93286),i=r(15154),o=r(38197);const s=new(r(80711).Yd)("address/5.5.0");function f(e){(0,n.A7)(e,20)||s.throwArgumentError("invalid address","address",e);const t=(e=e.toLowerCase()).substring(2).split(""),r=new Uint8Array(40);for(let e=0;e<40;e++)r[e]=t[e].charCodeAt(0);const i=(0,n.lE)((0,o.w)(r));for(let e=0;e<40;e+=2)i[e>>1]>>4>=8&&(t[e]=t[e].toUpperCase()),(15&i[e>>1])>=8&&(t[e+1]=t[e+1].toUpperCase());return"0x"+t.join("")}const a={};for(let e=0;e<10;e++)a[String(e)]=String(e);for(let e=0;e<26;e++)a[String.fromCharCode(65+e)]=String(10+e);const u=Math.floor((d=9007199254740991,Math.log10?Math.log10(d):Math.log(d)/Math.LN10));var d;function c(e){let t=(e=(e=e.toUpperCase()).substring(4)+e.substring(0,2)+"00").split("").map((e=>a[e])).join("");for(;t.length>=u;){let e=t.substring(0,u);t=parseInt(e,10)%97+t.substring(e.length)}let r=String(98-parseInt(t,10)%97);for(;r.length<2;)r="0"+r;return r}function h(e){let t=null;if("string"!=typeof e&&s.throwArgumentError("invalid address","address",e),e.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==e.substring(0,2)&&(e="0x"+e),t=f(e),e.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&t!==e&&s.throwArgumentError("bad address checksum","address",e);else if(e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(e.substring(2,4)!==c(e)&&s.throwArgumentError("bad icap checksum","address",e),t=(0,i.g$)(e.substring(4));t.length<40;)t="0"+t;t=f("0x"+t)}else s.throwArgumentError("invalid address","address",e);return t}},15154:function(e,t,r){r.d(t,{O$:function(){return h},g$:function(){return v}});var n=r(13550),i=r.n(n),o=r(93286),s=r(80711);var f=i().BN;const a=new s.Yd("bignumber/5.5.0"),u={},d=9007199254740991;let c=!1;class h{constructor(e,t){a.checkNew(new.target,h),e!==u&&a.throwError("cannot call constructor directly; use BigNumber.from",s.Yd.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=t,this._isBigNumber=!0,Object.freeze(this)}fromTwos(e){return p(g(this).fromTwos(e))}toTwos(e){return p(g(this).toTwos(e))}abs(){return"-"===this._hex[0]?h.from(this._hex.substring(1)):this}add(e){return p(g(this).add(g(e)))}sub(e){return p(g(this).sub(g(e)))}div(e){return h.from(e).isZero()&&m("division by zero","div"),p(g(this).div(g(e)))}mul(e){return p(g(this).mul(g(e)))}mod(e){const t=g(e);return t.isNeg()&&m("cannot modulo negative values","mod"),p(g(this).umod(t))}pow(e){const t=g(e);return t.isNeg()&&m("cannot raise to negative values","pow"),p(g(this).pow(t))}and(e){const t=g(e);return(this.isNegative()||t.isNeg())&&m("cannot 'and' negative values","and"),p(g(this).and(t))}or(e){const t=g(e);return(this.isNegative()||t.isNeg())&&m("cannot 'or' negative values","or"),p(g(this).or(t))}xor(e){const t=g(e);return(this.isNegative()||t.isNeg())&&m("cannot 'xor' negative values","xor"),p(g(this).xor(t))}mask(e){return(this.isNegative()||e<0)&&m("cannot mask negative values","mask"),p(g(this).maskn(e))}shl(e){return(this.isNegative()||e<0)&&m("cannot shift negative values","shl"),p(g(this).shln(e))}shr(e){return(this.isNegative()||e<0)&&m("cannot shift negative values","shr"),p(g(this).shrn(e))}eq(e){return g(this).eq(g(e))}lt(e){return g(this).lt(g(e))}lte(e){return g(this).lte(g(e))}gt(e){return g(this).gt(g(e))}gte(e){return g(this).gte(g(e))}isNegative(){return"-"===this._hex[0]}isZero(){return g(this).isZero()}toNumber(){try{return g(this).toNumber()}catch(e){m("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(e){}return a.throwError("this platform does not support BigInt",s.Yd.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?c||(c=!0,a.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?a.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",s.Yd.errors.UNEXPECTED_ARGUMENT,{}):a.throwError("BigNumber.toString does not accept parameters",s.Yd.errors.UNEXPECTED_ARGUMENT,{})),g(this).toString(10)}toHexString(){return this._hex}toJSON(e){return{type:"BigNumber",hex:this.toHexString()}}static from(e){if(e instanceof h)return e;if("string"==typeof e)return e.match(/^-?0x[0-9a-f]+$/i)?new h(u,l(e)):e.match(/^-?[0-9]+$/)?new h(u,l(new f(e))):a.throwArgumentError("invalid BigNumber string","value",e);if("number"==typeof e)return e%1&&m("underflow","BigNumber.from",e),(e>=d||e<=-d)&&m("overflow","BigNumber.from",e),h.from(String(e));const t=e;if("bigint"==typeof t)return h.from(t.toString());if((0,o._t)(t))return h.from((0,o.Dv)(t));if(t)if(t.toHexString){const e=t.toHexString();if("string"==typeof e)return h.from(e)}else{let e=t._hex;if(null==e&&"BigNumber"===t.type&&(e=t.hex),"string"==typeof e&&((0,o.A7)(e)||"-"===e[0]&&(0,o.A7)(e.substring(1))))return h.from(e)}return a.throwArgumentError("invalid BigNumber value","value",e)}static isBigNumber(e){return!(!e||!e._isBigNumber)}}function l(e){if("string"!=typeof e)return l(e.toString(16));if("-"===e[0])return"-"===(e=e.substring(1))[0]&&a.throwArgumentError("invalid hex","value",e),"0x00"===(e=l(e))?e:"-"+e;if("0x"!==e.substring(0,2)&&(e="0x"+e),"0x"===e)return"0x00";for(e.length%2&&(e="0x0"+e.substring(2));e.length>4&&"0x00"===e.substring(0,4);)e="0x"+e.substring(4);return e}function p(e){return h.from(l(e))}function g(e){const t=h.from(e).toHexString();return"-"===t[0]?new f("-"+t.substring(3),16):new f(t.substring(2),16)}function m(e,t,r){const n={fault:e,operation:t};return null!=r&&(n.value=r),a.throwError(e,s.Yd.errors.NUMERIC_FAULT,n)}function v(e){return new f(e,36).toString(16)}},93286:function(e,t,r){r.d(t,{lE:function(){return u},zo:function(){return d},xs:function(){return v},E1:function(){return g},p3:function(){return m},$m:function(){return y},Dv:function(){return p},_t:function(){return a},Zq:function(){return s},A7:function(){return h},N:function(){return b},G1:function(){return c}});const n=new(r(80711).Yd)("bytes/5.5.0");function i(e){return!!e.toHexString}function o(e){return e.slice||(e.slice=function(){const t=Array.prototype.slice.call(arguments);return o(new Uint8Array(Array.prototype.slice.apply(e,t)))}),e}function s(e){return h(e)&&!(e.length%2)||a(e)}function f(e){return"number"==typeof e&&e==e&&e%1==0}function a(e){if(null==e)return!1;if(e.constructor===Uint8Array)return!0;if("string"==typeof e)return!1;if(!f(e.length)||e.length<0)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(!f(r)||r<0||r>=256)return!1}return!0}function u(e,t){if(t||(t={}),"number"==typeof e){n.checkSafeUint53(e,"invalid arrayify value");const t=[];for(;e;)t.unshift(255&e),e=parseInt(String(e/256));return 0===t.length&&t.push(0),o(new Uint8Array(t))}if(t.allowMissingPrefix&&"string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),i(e)&&(e=e.toHexString()),h(e)){let r=e.substring(2);r.length%2&&("left"===t.hexPad?r="0x0"+r.substring(2):"right"===t.hexPad?r+="0":n.throwArgumentError("hex data is odd-length","value",e));const i=[];for(let e=0;e<r.length;e+=2)i.push(parseInt(r.substring(e,e+2),16));return o(new Uint8Array(i))}return a(e)?o(new Uint8Array(e)):n.throwArgumentError("invalid arrayify value","value",e)}function d(e){const t=e.map((e=>u(e))),r=t.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(r);return t.reduce(((e,t)=>(n.set(t,e),e+t.length)),0),o(n)}function c(e){let t=u(e);if(0===t.length)return t;let r=0;for(;r<t.length&&0===t[r];)r++;return r&&(t=t.slice(r)),t}function h(e,t){return!("string"!=typeof e||!e.match(/^0x[0-9A-Fa-f]*$/))&&(!t||e.length===2+2*t)}const l="0123456789abcdef";function p(e,t){if(t||(t={}),"number"==typeof e){n.checkSafeUint53(e,"invalid hexlify value");let t="";for(;e;)t=l[15&e]+t,e=Math.floor(e/16);return t.length?(t.length%2&&(t="0"+t),"0x"+t):"0x00"}if("bigint"==typeof e)return(e=e.toString(16)).length%2?"0x0"+e:"0x"+e;if(t.allowMissingPrefix&&"string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),i(e))return e.toHexString();if(h(e))return e.length%2&&("left"===t.hexPad?e="0x0"+e.substring(2):"right"===t.hexPad?e+="0":n.throwArgumentError("hex data is odd-length","value",e)),e.toLowerCase();if(a(e)){let t="0x";for(let r=0;r<e.length;r++){let n=e[r];t+=l[(240&n)>>4]+l[15&n]}return t}return n.throwArgumentError("invalid hexlify value","value",e)}function g(e){if("string"!=typeof e)e=p(e);else if(!h(e)||e.length%2)return null;return(e.length-2)/2}function m(e,t,r){return"string"!=typeof e?e=p(e):(!h(e)||e.length%2)&&n.throwArgumentError("invalid hexData","value",e),t=2+2*t,null!=r?"0x"+e.substring(t,2+2*r):"0x"+e.substring(t)}function v(e){let t="0x";return e.forEach((e=>{t+=p(e).substring(2)})),t}function y(e,t){for("string"!=typeof e?e=p(e):h(e)||n.throwArgumentError("invalid hex string","value",e),e.length>2*t+2&&n.throwArgumentError("value out of range","value",arguments[1]);e.length<2*t+2;)e="0x0"+e.substring(2);return e}function b(e){const t={r:"0x",s:"0x",_vs:"0x",recoveryParam:0,v:0};if(s(e)){const r=u(e);65!==r.length&&n.throwArgumentError("invalid signature string; must be 65 bytes","signature",e),t.r=p(r.slice(0,32)),t.s=p(r.slice(32,64)),t.v=r[64],t.v<27&&(0===t.v||1===t.v?t.v+=27:n.throwArgumentError("signature invalid v byte","signature",e)),t.recoveryParam=1-t.v%2,t.recoveryParam&&(r[32]|=128),t._vs=p(r.slice(32,64))}else{if(t.r=e.r,t.s=e.s,t.v=e.v,t.recoveryParam=e.recoveryParam,t._vs=e._vs,null!=t._vs){const r=function(e,t){(e=u(e)).length>t&&n.throwArgumentError("value out of range","value",arguments[0]);const r=new Uint8Array(t);return r.set(e,t-e.length),o(r)}(u(t._vs),32);t._vs=p(r);const i=r[0]>=128?1:0;null==t.recoveryParam?t.recoveryParam=i:t.recoveryParam!==i&&n.throwArgumentError("signature recoveryParam mismatch _vs","signature",e),r[0]&=127;const s=p(r);null==t.s?t.s=s:t.s!==s&&n.throwArgumentError("signature v mismatch _vs","signature",e)}if(null==t.recoveryParam)null==t.v?n.throwArgumentError("signature missing v and recoveryParam","signature",e):0===t.v||1===t.v?t.recoveryParam=t.v:t.recoveryParam=1-t.v%2;else if(null==t.v)t.v=27+t.recoveryParam;else{const r=0===t.v||1===t.v?t.v:1-t.v%2;t.recoveryParam!==r&&n.throwArgumentError("signature recoveryParam mismatch v","signature",e)}null!=t.r&&h(t.r)?t.r=y(t.r,32):n.throwArgumentError("signature missing or invalid r","signature",e),null!=t.s&&h(t.s)?t.s=y(t.s,32):n.throwArgumentError("signature missing or invalid s","signature",e);const r=u(t.s);r[0]>=128&&n.throwArgumentError("signature s out of range","signature",e),t.recoveryParam&&(r[0]|=128);const i=p(r);t._vs&&(h(t._vs)||n.throwArgumentError("signature invalid _vs","signature",e),t._vs=y(t._vs,32)),null==t._vs?t._vs=i:t._vs!==i&&n.throwArgumentError("signature _vs mismatch v and s","signature",e)}return t}},21046:function(e,t,r){r.d(t,{tL:function(){return i},_Y:function(){return o},fh:function(){return s},Bz:function(){return f}});var n=r(15154);const i=n.O$.from(-1),o=n.O$.from(0),s=n.O$.from(1),f=n.O$.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")},38197:function(e,t,r){r.d(t,{w:function(){return s}});var n=r(91094),i=r.n(n),o=r(93286);function s(e){return"0x"+i().keccak_256((0,o.lE)(e))}},80711:function(e,t,r){r.d(t,{Yd:function(){return l}});var n=r(25108);let i=!1,o=!1;const s={debug:1,default:2,info:2,warning:3,error:4,off:5};let f=s.default,a=null;const u=function(){try{const e=[];if(["NFD","NFC","NFKD","NFKC"].forEach((t=>{try{if("test"!=="test".normalize(t))throw new Error("bad normalize")}catch(r){e.push(t)}})),e.length)throw new Error("missing "+e.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(e){return e.message}return null}();var d,c;!function(e){e.DEBUG="DEBUG",e.INFO="INFO",e.WARNING="WARNING",e.ERROR="ERROR",e.OFF="OFF"}(d||(d={})),function(e){e.UNKNOWN_ERROR="UNKNOWN_ERROR",e.NOT_IMPLEMENTED="NOT_IMPLEMENTED",e.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",e.NETWORK_ERROR="NETWORK_ERROR",e.SERVER_ERROR="SERVER_ERROR",e.TIMEOUT="TIMEOUT",e.BUFFER_OVERRUN="BUFFER_OVERRUN",e.NUMERIC_FAULT="NUMERIC_FAULT",e.MISSING_NEW="MISSING_NEW",e.INVALID_ARGUMENT="INVALID_ARGUMENT",e.MISSING_ARGUMENT="MISSING_ARGUMENT",e.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",e.CALL_EXCEPTION="CALL_EXCEPTION",e.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",e.NONCE_EXPIRED="NONCE_EXPIRED",e.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",e.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",e.TRANSACTION_REPLACED="TRANSACTION_REPLACED"}(c||(c={}));const h="0123456789abcdef";class l{constructor(e){Object.defineProperty(this,"version",{enumerable:!0,value:e,writable:!1})}_log(e,t){const r=e.toLowerCase();null==s[r]&&this.throwArgumentError("invalid log level name","logLevel",e),f>s[r]||n.log.apply(n,t)}debug(...e){this._log(l.levels.DEBUG,e)}info(...e){this._log(l.levels.INFO,e)}warn(...e){this._log(l.levels.WARNING,e)}makeError(e,t,r){if(o)return this.makeError("censored error",t,{});t||(t=l.errors.UNKNOWN_ERROR),r||(r={});const n=[];Object.keys(r).forEach((e=>{const t=r[e];try{if(t instanceof Uint8Array){let r="";for(let e=0;e<t.length;e++)r+=h[t[e]>>4],r+=h[15&t[e]];n.push(e+"=Uint8Array(0x"+r+")")}else n.push(e+"="+JSON.stringify(t))}catch(t){n.push(e+"="+JSON.stringify(r[e].toString()))}})),n.push(`code=${t}`),n.push(`version=${this.version}`);const i=e;n.length&&(e+=" ("+n.join(", ")+")");const s=new Error(e);return s.reason=i,s.code=t,Object.keys(r).forEach((function(e){s[e]=r[e]})),s}throwError(e,t,r){throw this.makeError(e,t,r)}throwArgumentError(e,t,r){return this.throwError(e,l.errors.INVALID_ARGUMENT,{argument:t,value:r})}assert(e,t,r,n){e||this.throwError(t,r,n)}assertArgument(e,t,r,n){e||this.throwArgumentError(t,r,n)}checkNormalize(e){null==e&&(e="platform missing String.prototype.normalize"),u&&this.throwError("platform missing String.prototype.normalize",l.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:u})}checkSafeUint53(e,t){"number"==typeof e&&(null==t&&(t="value not safe"),(e<0||e>=9007199254740991)&&this.throwError(t,l.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:e}),e%1&&this.throwError(t,l.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:e}))}checkArgumentCount(e,t,r){r=r?": "+r:"",e<t&&this.throwError("missing argument"+r,l.errors.MISSING_ARGUMENT,{count:e,expectedCount:t}),e>t&&this.throwError("too many arguments"+r,l.errors.UNEXPECTED_ARGUMENT,{count:e,expectedCount:t})}checkNew(e,t){e!==Object&&null!=e||this.throwError("missing new",l.errors.MISSING_NEW,{name:t.name})}checkAbstract(e,t){e===t?this.throwError("cannot instantiate abstract class "+JSON.stringify(t.name)+" directly; use a sub-class",l.errors.UNSUPPORTED_OPERATION,{name:e.name,operation:"new"}):e!==Object&&null!=e||this.throwError("missing new",l.errors.MISSING_NEW,{name:t.name})}static globalLogger(){return a||(a=new l("logger/5.5.0")),a}static setCensorship(e,t){if(!e&&t&&this.globalLogger().throwError("cannot permanently disable censorship",l.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),i){if(!e)return;this.globalLogger().throwError("error censorship permanent",l.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}o=!!e,i=!!t}static setLogLevel(e){const t=s[e.toLowerCase()];null!=t?f=t:l.globalLogger().warn("invalid log level - "+e)}static from(e){return new l(e)}}l.errors=c,l.levels=d},53587:function(e,t,r){r.d(t,{uj:function(){return s},zG:function(){return o}});var n=r(80711);const i=new n.Yd("properties/5.5.0");function o(e,t,r){Object.defineProperty(e,t,{enumerable:!0,value:r,writable:!1})}function s(e,t){e&&"object"==typeof e||i.throwArgumentError("invalid object","object",e),Object.keys(e).forEach((r=>{t[r]||i.throwArgumentError("invalid object key - "+r,"transaction:"+r,e)}))}},75504:function(e,t,r){r.r(t),r.d(t,{TransactionTypes:function(){return ce},accessListify:function(){return we},computeAddress:function(){return me},parse:function(){return Se},recoverAddress:function(){return ve},serialize:function(){return xe}});var n=r(64594),i=r(15154),o=r(93286),s=r(21046),f=r(38197),a=r(53587),u=r(80711);const d=new u.Yd("rlp/5.5.0");function c(e){const t=[];for(;e;)t.unshift(255&e),e>>=8;return t}function h(e,t,r){let n=0;for(let i=0;i<r;i++)n=256*n+e[t+i];return n}function l(e){if(Array.isArray(e)){let t=[];if(e.forEach((function(e){t=t.concat(l(e))})),t.length<=55)return t.unshift(192+t.length),t;const r=c(t.length);return r.unshift(247+r.length),r.concat(t)}(0,o.Zq)(e)||d.throwArgumentError("RLP object must be BytesLike","object",e);const t=Array.prototype.slice.call((0,o.lE)(e));if(1===t.length&&t[0]<=127)return t;if(t.length<=55)return t.unshift(128+t.length),t;const r=c(t.length);return r.unshift(183+r.length),r.concat(t)}function p(e){return(0,o.Dv)(l(e))}function g(e,t,r,n){const i=[];for(;r<t+1+n;){const o=m(e,r);i.push(o.result),(r+=o.consumed)>t+1+n&&d.throwError("child data too short",u.Yd.errors.BUFFER_OVERRUN,{})}return{consumed:1+n,result:i}}function m(e,t){if(0===e.length&&d.throwError("data too short",u.Yd.errors.BUFFER_OVERRUN,{}),e[t]>=248){const r=e[t]-247;t+1+r>e.length&&d.throwError("data short segment too short",u.Yd.errors.BUFFER_OVERRUN,{});const n=h(e,t+1,r);return t+1+r+n>e.length&&d.throwError("data long segment too short",u.Yd.errors.BUFFER_OVERRUN,{}),g(e,t,t+1+r,r+n)}if(e[t]>=192){const r=e[t]-192;return t+1+r>e.length&&d.throwError("data array too short",u.Yd.errors.BUFFER_OVERRUN,{}),g(e,t,t+1,r)}if(e[t]>=184){const r=e[t]-183;t+1+r>e.length&&d.throwError("data array too short",u.Yd.errors.BUFFER_OVERRUN,{});const n=h(e,t+1,r);t+1+r+n>e.length&&d.throwError("data array too short",u.Yd.errors.BUFFER_OVERRUN,{});return{consumed:1+r+n,result:(0,o.Dv)(e.slice(t+1+r,t+1+r+n))}}if(e[t]>=128){const r=e[t]-128;t+1+r>e.length&&d.throwError("data too short",u.Yd.errors.BUFFER_OVERRUN,{});return{consumed:1+r,result:(0,o.Dv)(e.slice(t+1,t+1+r))}}return{consumed:1,result:(0,o.Dv)(e[t])}}function v(e){const t=(0,o.lE)(e),r=m(t,0);return r.consumed!==t.length&&d.throwArgumentError("invalid rlp data","data",e),r.result}var y=r(13550),b=r.n(y),w=r(33715),E=r.n(w);"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==r.g?r.g:"undefined"!=typeof self&&self;function A(e,t,r){return r={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&r.path)}},e(r,r.exports),r.exports}var _=x;function x(e,t){if(!e)throw new Error(t||"Assertion failed")}x.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)};var N=A((function(e,t){var r=t;function n(e){return 1===e.length?"0"+e:e}function i(e){for(var t="",r=0;r<e.length;r++)t+=n(e[r].toString(16));return t}r.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"!=typeof e){for(var n=0;n<e.length;n++)r[n]=0|e[n];return r}if("hex"===t){(e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e);for(n=0;n<e.length;n+=2)r.push(parseInt(e[n]+e[n+1],16))}else for(n=0;n<e.length;n++){var i=e.charCodeAt(n),o=i>>8,s=255&i;o?r.push(o,s):r.push(s)}return r},r.zero2=n,r.toHex=i,r.encode=function(e,t){return"hex"===t?i(e):e}})),S=A((function(e,t){var r=t;r.assert=_,r.toArray=N.toArray,r.zero2=N.zero2,r.toHex=N.toHex,r.encode=N.encode,r.getNAF=function(e,t,r){var n=new Array(Math.max(e.bitLength(),r)+1);n.fill(0);for(var i=1<<t+1,o=e.clone(),s=0;s<n.length;s++){var f,a=o.andln(i-1);o.isOdd()?(f=a>(i>>1)-1?(i>>1)-a:a,o.isubn(f)):f=0,n[s]=f,o.iushrn(1)}return n},r.getJSF=function(e,t){var r=[[],[]];e=e.clone(),t=t.clone();for(var n,i=0,o=0;e.cmpn(-i)>0||t.cmpn(-o)>0;){var s,f,a=e.andln(3)+i&3,u=t.andln(3)+o&3;3===a&&(a=-1),3===u&&(u=-1),s=0==(1&a)?0:3!==(n=e.andln(7)+i&7)&&5!==n||2!==u?a:-a,r[0].push(s),f=0==(1&u)?0:3!==(n=t.andln(7)+o&7)&&5!==n||2!==a?u:-u,r[1].push(f),2*i===s+1&&(i=1-i),2*o===f+1&&(o=1-o),e.iushrn(1),t.iushrn(1)}return r},r.cachedProperty=function(e,t,r){var n="_"+t;e.prototype[t]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)}},r.parseBytes=function(e){return"string"==typeof e?r.toArray(e,"hex"):e},r.intFromLE=function(e){return new(b())(e,"hex","le")}})),I=S.getNAF,R=S.getJSF,P=S.assert;function O(e,t){this.type=e,this.p=new(b())(t.p,16),this.red=t.prime?b().red(t.prime):b().mont(this.p),this.zero=new(b())(0).toRed(this.red),this.one=new(b())(1).toRed(this.red),this.two=new(b())(2).toRed(this.red),this.n=t.n&&new(b())(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}var T=O;function M(e,t){this.curve=e,this.type=t,this.precomputed=null}O.prototype.point=function(){throw new Error("Not implemented")},O.prototype.validate=function(){throw new Error("Not implemented")},O.prototype._fixedNafMul=function(e,t){P(e.precomputed);var r=e._getDoubles(),n=I(t,1,this._bitLength),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;var o,s,f=[];for(o=0;o<n.length;o+=r.step){s=0;for(var a=o+r.step-1;a>=o;a--)s=(s<<1)+n[a];f.push(s)}for(var u=this.jpoint(null,null,null),d=this.jpoint(null,null,null),c=i;c>0;c--){for(o=0;o<f.length;o++)(s=f[o])===c?d=d.mixedAdd(r.points[o]):s===-c&&(d=d.mixedAdd(r.points[o].neg()));u=u.add(d)}return u.toP()},O.prototype._wnafMul=function(e,t){var r=4,n=e._getNAFPoints(r);r=n.wnd;for(var i=n.points,o=I(t,r,this._bitLength),s=this.jpoint(null,null,null),f=o.length-1;f>=0;f--){for(var a=0;f>=0&&0===o[f];f--)a++;if(f>=0&&a++,s=s.dblp(a),f<0)break;var u=o[f];P(0!==u),s="affine"===e.type?u>0?s.mixedAdd(i[u-1>>1]):s.mixedAdd(i[-u-1>>1].neg()):u>0?s.add(i[u-1>>1]):s.add(i[-u-1>>1].neg())}return"affine"===e.type?s.toP():s},O.prototype._wnafMulAdd=function(e,t,r,n,i){var o,s,f,a=this._wnafT1,u=this._wnafT2,d=this._wnafT3,c=0;for(o=0;o<n;o++){var h=(f=t[o])._getNAFPoints(e);a[o]=h.wnd,u[o]=h.points}for(o=n-1;o>=1;o-=2){var l=o-1,p=o;if(1===a[l]&&1===a[p]){var g=[t[l],null,null,t[p]];0===t[l].y.cmp(t[p].y)?(g[1]=t[l].add(t[p]),g[2]=t[l].toJ().mixedAdd(t[p].neg())):0===t[l].y.cmp(t[p].y.redNeg())?(g[1]=t[l].toJ().mixedAdd(t[p]),g[2]=t[l].add(t[p].neg())):(g[1]=t[l].toJ().mixedAdd(t[p]),g[2]=t[l].toJ().mixedAdd(t[p].neg()));var m=[-3,-1,-5,-7,0,7,5,1,3],v=R(r[l],r[p]);for(c=Math.max(v[0].length,c),d[l]=new Array(c),d[p]=new Array(c),s=0;s<c;s++){var y=0|v[0][s],b=0|v[1][s];d[l][s]=m[3*(y+1)+(b+1)],d[p][s]=0,u[l]=g}}else d[l]=I(r[l],a[l],this._bitLength),d[p]=I(r[p],a[p],this._bitLength),c=Math.max(d[l].length,c),c=Math.max(d[p].length,c)}var w=this.jpoint(null,null,null),E=this._wnafT4;for(o=c;o>=0;o--){for(var A=0;o>=0;){var _=!0;for(s=0;s<n;s++)E[s]=0|d[s][o],0!==E[s]&&(_=!1);if(!_)break;A++,o--}if(o>=0&&A++,w=w.dblp(A),o<0)break;for(s=0;s<n;s++){var x=E[s];0!==x&&(x>0?f=u[s][x-1>>1]:x<0&&(f=u[s][-x-1>>1].neg()),w="affine"===f.type?w.mixedAdd(f):w.add(f))}}for(o=0;o<n;o++)u[o]=null;return i?w:w.toP()},O.BasePoint=M,M.prototype.eq=function(){throw new Error("Not implemented")},M.prototype.validate=function(){return this.curve.validate(this)},O.prototype.decodePoint=function(e,t){e=S.toArray(e,t);var r=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*r)return 6===e[0]?P(e[e.length-1]%2==0):7===e[0]&&P(e[e.length-1]%2==1),this.point(e.slice(1,1+r),e.slice(1+r,1+2*r));if((2===e[0]||3===e[0])&&e.length-1===r)return this.pointFromX(e.slice(1,1+r),3===e[0]);throw new Error("Unknown point format")},M.prototype.encodeCompressed=function(e){return this.encode(e,!0)},M.prototype._encode=function(e){var t=this.curve.p.byteLength(),r=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",t))},M.prototype.encode=function(e,t){return S.encode(this._encode(t),e)},M.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},M.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},M.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<t;i+=e){for(var o=0;o<e;o++)n=n.dbl();r.push(n)}return{step:e,points:r}},M.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],r=(1<<e)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)t[i]=t[i-1].add(n);return{wnd:e,points:t}},M.prototype._getBeta=function(){return null},M.prototype.dblp=function(e){for(var t=this,r=0;r<e;r++)t=t.dbl();return t};var U=A((function(e){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}})),z=S.assert;function F(e){T.call(this,"short",e),this.a=new(b())(e.a,16).toRed(this.red),this.b=new(b())(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}U(F,T);var L=F;function k(e,t,r,n){T.BasePoint.call(this,e,"affine"),null===t&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new(b())(t,16),this.y=new(b())(r,16),n&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function D(e,t,r,n){T.BasePoint.call(this,e,"jacobian"),null===t&&null===r&&null===n?(this.x=this.curve.one,this.y=this.curve.one,this.z=new(b())(0)):(this.x=new(b())(t,16),this.y=new(b())(r,16),this.z=new(b())(n,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}F.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,r;if(e.beta)t=new(b())(e.beta,16).toRed(this.red);else{var n=this._getEndoRoots(this.p);t=(t=n[0].cmp(n[1])<0?n[0]:n[1]).toRed(this.red)}if(e.lambda)r=new(b())(e.lambda,16);else{var i=this._getEndoRoots(this.n);0===this.g.mul(i[0]).x.cmp(this.g.x.redMul(t))?r=i[0]:(r=i[1],z(0===this.g.mul(r).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:r,basis:e.basis?e.basis.map((function(e){return{a:new(b())(e.a,16),b:new(b())(e.b,16)}})):this._getEndoBasis(r)}}},F.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:b().mont(e),r=new(b())(2).toRed(t).redInvm(),n=r.redNeg(),i=new(b())(3).toRed(t).redNeg().redSqrt().redMul(r);return[n.redAdd(i).fromRed(),n.redSub(i).fromRed()]},F.prototype._getEndoBasis=function(e){for(var t,r,n,i,o,s,f,a,u,d=this.n.ushrn(Math.floor(this.n.bitLength()/2)),c=e,h=this.n.clone(),l=new(b())(1),p=new(b())(0),g=new(b())(0),m=new(b())(1),v=0;0!==c.cmpn(0);){var y=h.div(c);a=h.sub(y.mul(c)),u=g.sub(y.mul(l));var w=m.sub(y.mul(p));if(!n&&a.cmp(d)<0)t=f.neg(),r=l,n=a.neg(),i=u;else if(n&&2==++v)break;f=a,h=c,c=a,g=l,l=u,m=p,p=w}o=a.neg(),s=u;var E=n.sqr().add(i.sqr());return o.sqr().add(s.sqr()).cmp(E)>=0&&(o=t,s=r),n.negative&&(n=n.neg(),i=i.neg()),o.negative&&(o=o.neg(),s=s.neg()),[{a:n,b:i},{a:o,b:s}]},F.prototype._endoSplit=function(e){var t=this.endo.basis,r=t[0],n=t[1],i=n.b.mul(e).divRound(this.n),o=r.b.neg().mul(e).divRound(this.n),s=i.mul(r.a),f=o.mul(n.a),a=i.mul(r.b),u=o.mul(n.b);return{k1:e.sub(s).sub(f),k2:a.add(u).neg()}},F.prototype.pointFromX=function(e,t){(e=new(b())(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),n=r.redSqrt();if(0!==n.redSqr().redSub(r).cmp(this.zero))throw new Error("invalid point");var i=n.fromRed().isOdd();return(t&&!i||!t&&i)&&(n=n.redNeg()),this.point(e,n)},F.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,r=e.y,n=this.a.redMul(t),i=t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},F.prototype._endoWnafMulAdd=function(e,t,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,o=0;o<e.length;o++){var s=this._endoSplit(t[o]),f=e[o],a=f._getBeta();s.k1.negative&&(s.k1.ineg(),f=f.neg(!0)),s.k2.negative&&(s.k2.ineg(),a=a.neg(!0)),n[2*o]=f,n[2*o+1]=a,i[2*o]=s.k1,i[2*o+1]=s.k2}for(var u=this._wnafMulAdd(1,n,i,2*o,r),d=0;d<2*o;d++)n[d]=null,i[d]=null;return u},U(k,T.BasePoint),F.prototype.point=function(e,t,r){return new k(this,e,t,r)},F.prototype.pointFromJSON=function(e,t){return k.fromJSON(this,e,t)},k.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var r=this.curve,n=function(e){return r.point(e.x.redMul(r.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(n)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(n)}}}return t}},k.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},k.fromJSON=function(e,t,r){"string"==typeof t&&(t=JSON.parse(t));var n=e.point(t[0],t[1],r);if(!t[2])return n;function i(t){return e.point(t[0],t[1],r)}var o=t[2];return n.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[n].concat(o.doubles.points.map(i))},naf:o.naf&&{wnd:o.naf.wnd,points:[n].concat(o.naf.points.map(i))}},n},k.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},k.prototype.isInfinity=function(){return this.inf},k.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var r=t.redSqr().redISub(this.x).redISub(e.x),n=t.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},k.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,r=this.x.redSqr(),n=e.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),o=i.redSqr().redISub(this.x.redAdd(this.x)),s=i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,s)},k.prototype.getX=function(){return this.x.fromRed()},k.prototype.getY=function(){return this.y.fromRed()},k.prototype.mul=function(e){return e=new(b())(e,16),this.isInfinity()?this:this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},k.prototype.mulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},k.prototype.jmulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},k.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},k.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var r=this.precomputed,n=function(e){return e.neg()};t.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}}}return t},k.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},U(D,T.BasePoint),F.prototype.jpoint=function(e,t,r){return new D(this,e,t,r)},D.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),r=this.x.redMul(t),n=this.y.redMul(t).redMul(e);return this.curve.point(r,n)},D.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},D.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(t),i=e.x.redMul(r),o=this.y.redMul(t.redMul(e.z)),s=e.y.redMul(r.redMul(this.z)),f=n.redSub(i),a=o.redSub(s);if(0===f.cmpn(0))return 0!==a.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var u=f.redSqr(),d=u.redMul(f),c=n.redMul(u),h=a.redSqr().redIAdd(d).redISub(c).redISub(c),l=a.redMul(c.redISub(h)).redISub(o.redMul(d)),p=this.z.redMul(e.z).redMul(f);return this.curve.jpoint(h,l,p)},D.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),r=this.x,n=e.x.redMul(t),i=this.y,o=e.y.redMul(t).redMul(this.z),s=r.redSub(n),f=i.redSub(o);if(0===s.cmpn(0))return 0!==f.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var a=s.redSqr(),u=a.redMul(s),d=r.redMul(a),c=f.redSqr().redIAdd(u).redISub(d).redISub(d),h=f.redMul(d.redISub(c)).redISub(i.redMul(u)),l=this.z.redMul(s);return this.curve.jpoint(c,h,l)},D.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();var t;if(this.curve.zeroA||this.curve.threeA){var r=this;for(t=0;t<e;t++)r=r.dbl();return r}var n=this.curve.a,i=this.curve.tinv,o=this.x,s=this.y,f=this.z,a=f.redSqr().redSqr(),u=s.redAdd(s);for(t=0;t<e;t++){var d=o.redSqr(),c=u.redSqr(),h=c.redSqr(),l=d.redAdd(d).redIAdd(d).redIAdd(n.redMul(a)),p=o.redMul(c),g=l.redSqr().redISub(p.redAdd(p)),m=p.redISub(g),v=l.redMul(m);v=v.redIAdd(v).redISub(h);var y=u.redMul(f);t+1<e&&(a=a.redMul(h)),o=g,f=y,u=v}return this.curve.jpoint(o,u.redMul(i),f)},D.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},D.prototype._zeroDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var f=n.redAdd(n).redIAdd(n),a=f.redSqr().redISub(s).redISub(s),u=o.redIAdd(o);u=(u=u.redIAdd(u)).redIAdd(u),e=a,t=f.redMul(s.redISub(a)).redISub(u),r=this.y.redAdd(this.y)}else{var d=this.x.redSqr(),c=this.y.redSqr(),h=c.redSqr(),l=this.x.redAdd(c).redSqr().redISub(d).redISub(h);l=l.redIAdd(l);var p=d.redAdd(d).redIAdd(d),g=p.redSqr(),m=h.redIAdd(h);m=(m=m.redIAdd(m)).redIAdd(m),e=g.redISub(l).redISub(l),t=p.redMul(l.redISub(e)).redISub(m),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(e,t,r)},D.prototype._threeDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var f=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),a=f.redSqr().redISub(s).redISub(s);e=a;var u=o.redIAdd(o);u=(u=u.redIAdd(u)).redIAdd(u),t=f.redMul(s.redISub(a)).redISub(u),r=this.y.redAdd(this.y)}else{var d=this.z.redSqr(),c=this.y.redSqr(),h=this.x.redMul(c),l=this.x.redSub(d).redMul(this.x.redAdd(d));l=l.redAdd(l).redIAdd(l);var p=h.redIAdd(h),g=(p=p.redIAdd(p)).redAdd(p);e=l.redSqr().redISub(g),r=this.y.redAdd(this.z).redSqr().redISub(c).redISub(d);var m=c.redSqr();m=(m=(m=m.redIAdd(m)).redIAdd(m)).redIAdd(m),t=l.redMul(p.redISub(e)).redISub(m)}return this.curve.jpoint(e,t,r)},D.prototype._dbl=function(){var e=this.curve.a,t=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),o=t.redSqr(),s=r.redSqr(),f=o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)),a=t.redAdd(t),u=(a=a.redIAdd(a)).redMul(s),d=f.redSqr().redISub(u.redAdd(u)),c=u.redISub(d),h=s.redSqr();h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var l=f.redMul(c).redISub(h),p=r.redAdd(r).redMul(n);return this.curve.jpoint(d,l,p)},D.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr(),n=t.redSqr(),i=e.redAdd(e).redIAdd(e),o=i.redSqr(),s=this.x.redAdd(t).redSqr().redISub(e).redISub(n),f=(s=(s=(s=s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(),a=n.redIAdd(n);a=(a=(a=a.redIAdd(a)).redIAdd(a)).redIAdd(a);var u=i.redIAdd(s).redSqr().redISub(o).redISub(f).redISub(a),d=t.redMul(u);d=(d=d.redIAdd(d)).redIAdd(d);var c=this.x.redMul(f).redISub(d);c=(c=c.redIAdd(c)).redIAdd(c);var h=this.y.redMul(u.redMul(a.redISub(u)).redISub(s.redMul(f)));h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var l=this.z.redAdd(s).redSqr().redISub(r).redISub(f);return this.curve.jpoint(c,h,l)},D.prototype.mul=function(e,t){return e=new(b())(e,t),this.curve._wnafMul(this,e)},D.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),r=e.z.redSqr();if(0!==this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0))return!1;var n=t.redMul(this.z),i=r.redMul(e.z);return 0===this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0)},D.prototype.eqXToP=function(e){var t=this.z.redSqr(),r=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(r))return!0;for(var n=e.clone(),i=this.curve.redN.redMul(t);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}},D.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},D.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};var C=A((function(e,t){var r=t;r.base=T,r.short=L,r.mont=null,r.edwards=null})),q=A((function(e,t){var r,n=t,i=S.assert;function o(e){"short"===e.type?this.curve=new C.short(e):"edwards"===e.type?this.curve=new C.edwards(e):this.curve=new C.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,i(this.g.validate(),"Invalid curve"),i(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function s(e,t){Object.defineProperty(n,e,{configurable:!0,enumerable:!0,get:function(){var r=new o(t);return Object.defineProperty(n,e,{configurable:!0,enumerable:!0,value:r}),r}})}n.PresetCurve=o,s("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:E().sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),s("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:E().sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),s("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:E().sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),s("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:E().sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),s("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:E().sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),s("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:E().sha256,gRed:!1,g:["9"]}),s("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:E().sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{r=null.crash()}catch(e){r=void 0}s("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:E().sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",r]})}));function G(e){if(!(this instanceof G))return new G(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=N.toArray(e.entropy,e.entropyEnc||"hex"),r=N.toArray(e.nonce,e.nonceEnc||"hex"),n=N.toArray(e.pers,e.persEnc||"hex");_(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,r,n)}var j=G;G.prototype._init=function(e,t,r){var n=e.concat(t).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},G.prototype._hmac=function(){return new(E().hmac)(this.hash,this.K)},G.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},G.prototype.reseed=function(e,t,r,n){"string"!=typeof t&&(n=r,r=t,t=null),e=N.toArray(e,t),r=N.toArray(r,n),_(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(r||[])),this._reseed=1},G.prototype.generate=function(e,t,r,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(n=r,r=t,t=null),r&&(r=N.toArray(r,n||"hex"),this._update(r));for(var i=[];i.length<e;)this.V=this._hmac().update(this.V).digest(),i=i.concat(this.V);var o=i.slice(0,e);return this._update(r),this._reseed++,N.encode(o,t)};var B=S.assert;function V(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}var K=V;V.fromPublic=function(e,t,r){return t instanceof V?t:new V(e,{pub:t,pubEnc:r})},V.fromPrivate=function(e,t,r){return t instanceof V?t:new V(e,{priv:t,privEnc:r})},V.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},V.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},V.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},V.prototype._importPrivate=function(e,t){this.priv=new(b())(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},V.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?B(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||B(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},V.prototype.derive=function(e){return e.validate()||B(e.validate(),"public point not validated"),e.mul(this.priv).getX()},V.prototype.sign=function(e,t,r){return this.ec.sign(e,this,t,r)},V.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},V.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};var $=S.assert;function Y(e,t){if(e instanceof Y)return e;this._importDER(e,t)||($(e.r&&e.s,"Signature without r or s"),this.r=new(b())(e.r,16),this.s=new(b())(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}var W=Y;function X(){this.place=0}function J(e,t){var r=e[t.place++];if(!(128&r))return r;var n=15&r;if(0===n||n>4)return!1;for(var i=0,o=0,s=t.place;o<n;o++,s++)i<<=8,i|=e[s],i>>>=0;return!(i<=127)&&(t.place=s,i)}function H(e){for(var t=0,r=e.length-1;!e[t]&&!(128&e[t+1])&&t<r;)t++;return 0===t?e:e.slice(t)}function Z(e,t){if(t<128)e.push(t);else{var r=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|r);--r;)e.push(t>>>(r<<3)&255);e.push(t)}}Y.prototype._importDER=function(e,t){e=S.toArray(e,t);var r=new X;if(48!==e[r.place++])return!1;var n=J(e,r);if(!1===n)return!1;if(n+r.place!==e.length)return!1;if(2!==e[r.place++])return!1;var i=J(e,r);if(!1===i)return!1;var o=e.slice(r.place,i+r.place);if(r.place+=i,2!==e[r.place++])return!1;var s=J(e,r);if(!1===s)return!1;if(e.length!==s+r.place)return!1;var f=e.slice(r.place,s+r.place);if(0===o[0]){if(!(128&o[1]))return!1;o=o.slice(1)}if(0===f[0]){if(!(128&f[1]))return!1;f=f.slice(1)}return this.r=new(b())(o),this.s=new(b())(f),this.recoveryParam=null,!0},Y.prototype.toDER=function(e){var t=this.r.toArray(),r=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&r[0]&&(r=[0].concat(r)),t=H(t),r=H(r);!(r[0]||128&r[1]);)r=r.slice(1);var n=[2];Z(n,t.length),(n=n.concat(t)).push(2),Z(n,r.length);var i=n.concat(r),o=[48];return Z(o,i.length),o=o.concat(i),S.encode(o,e)};var Q=function(){throw new Error("unsupported")},ee=S.assert;function te(e){if(!(this instanceof te))return new te(e);"string"==typeof e&&(ee(Object.prototype.hasOwnProperty.call(q,e),"Unknown curve "+e),e=q[e]),e instanceof q.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}var re=te;te.prototype.keyPair=function(e){return new K(this,e)},te.prototype.keyFromPrivate=function(e,t){return K.fromPrivate(this,e,t)},te.prototype.keyFromPublic=function(e,t){return K.fromPublic(this,e,t)},te.prototype.genKeyPair=function(e){e||(e={});for(var t=new j({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||Q(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),n=this.n.sub(new(b())(2));;){var i=new(b())(t.generate(r));if(!(i.cmp(n)>0))return i.iaddn(1),this.keyFromPrivate(i)}},te.prototype._truncateToN=function(e,t){var r=8*e.byteLength()-this.n.bitLength();return r>0&&(e=e.ushrn(r)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},te.prototype.sign=function(e,t,r,n){"object"==typeof r&&(n=r,r=null),n||(n={}),t=this.keyFromPrivate(t,r),e=this._truncateToN(new(b())(e,16));for(var i=this.n.byteLength(),o=t.getPrivate().toArray("be",i),s=e.toArray("be",i),f=new j({hash:this.hash,entropy:o,nonce:s,pers:n.pers,persEnc:n.persEnc||"utf8"}),a=this.n.sub(new(b())(1)),u=0;;u++){var d=n.k?n.k(u):new(b())(f.generate(this.n.byteLength()));if(!((d=this._truncateToN(d,!0)).cmpn(1)<=0||d.cmp(a)>=0)){var c=this.g.mul(d);if(!c.isInfinity()){var h=c.getX(),l=h.umod(this.n);if(0!==l.cmpn(0)){var p=d.invm(this.n).mul(l.mul(t.getPrivate()).iadd(e));if(0!==(p=p.umod(this.n)).cmpn(0)){var g=(c.getY().isOdd()?1:0)|(0!==h.cmp(l)?2:0);return n.canonical&&p.cmp(this.nh)>0&&(p=this.n.sub(p),g^=1),new W({r:l,s:p,recoveryParam:g})}}}}}},te.prototype.verify=function(e,t,r,n){e=this._truncateToN(new(b())(e,16)),r=this.keyFromPublic(r,n);var i=(t=new W(t,"hex")).r,o=t.s;if(i.cmpn(1)<0||i.cmp(this.n)>=0)return!1;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;var s,f=o.invm(this.n),a=f.mul(e).umod(this.n),u=f.mul(i).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(a,r.getPublic(),u)).isInfinity()&&s.eqXToP(i):!(s=this.g.mulAdd(a,r.getPublic(),u)).isInfinity()&&0===s.getX().umod(this.n).cmp(i)},te.prototype.recoverPubKey=function(e,t,r,n){ee((3&r)===r,"The recovery param is more than two bits"),t=new W(t,n);var i=this.n,o=new(b())(e),s=t.r,f=t.s,a=1&r,u=r>>1;if(s.cmp(this.curve.p.umod(this.curve.n))>=0&&u)throw new Error("Unable to find sencond key candinate");s=u?this.curve.pointFromX(s.add(this.curve.n),a):this.curve.pointFromX(s,a);var d=t.r.invm(i),c=i.sub(o).mul(d).umod(i),h=f.mul(d).umod(i);return this.g.mulAdd(c,s,h)},te.prototype.getKeyRecoveryParam=function(e,t,r,n){if(null!==(t=new W(t,n)).recoveryParam)return t.recoveryParam;for(var i=0;i<4;i++){var o;try{o=this.recoverPubKey(e,t,i)}catch(e){continue}if(o.eq(r))return i}throw new Error("Unable to find valid recovery factor")};var ne=A((function(e,t){var r=t;r.version="6.5.4",r.utils=S,r.rand=function(){throw new Error("unsupported")},r.curve=C,r.curves=q,r.ec=re,r.eddsa=null})).ec;const ie=new u.Yd("signing-key/5.5.0");let oe=null;function se(){return oe||(oe=new ne("secp256k1")),oe}class fe{constructor(e){(0,a.zG)(this,"curve","secp256k1"),(0,a.zG)(this,"privateKey",(0,o.Dv)(e));const t=se().keyFromPrivate((0,o.lE)(this.privateKey));(0,a.zG)(this,"publicKey","0x"+t.getPublic(!1,"hex")),(0,a.zG)(this,"compressedPublicKey","0x"+t.getPublic(!0,"hex")),(0,a.zG)(this,"_isSigningKey",!0)}_addPoint(e){const t=se().keyFromPublic((0,o.lE)(this.publicKey)),r=se().keyFromPublic((0,o.lE)(e));return"0x"+t.pub.add(r.pub).encodeCompressed("hex")}signDigest(e){const t=se().keyFromPrivate((0,o.lE)(this.privateKey)),r=(0,o.lE)(e);32!==r.length&&ie.throwArgumentError("bad digest length","digest",e);const n=t.sign(r,{canonical:!0});return(0,o.N)({recoveryParam:n.recoveryParam,r:(0,o.$m)("0x"+n.r.toString(16),32),s:(0,o.$m)("0x"+n.s.toString(16),32)})}computeSharedSecret(e){const t=se().keyFromPrivate((0,o.lE)(this.privateKey)),r=se().keyFromPublic((0,o.lE)(ae(e)));return(0,o.$m)("0x"+t.derive(r.getPublic()).toString(16),32)}static isSigningKey(e){return!(!e||!e._isSigningKey)}}function ae(e,t){const r=(0,o.lE)(e);if(32===r.length){const e=new fe(r);return t?"0x"+se().keyFromPrivate(r).getPublic(!0,"hex"):e.publicKey}return 33===r.length?t?(0,o.Dv)(r):"0x"+se().keyFromPublic(r).getPublic(!1,"hex"):65===r.length?t?"0x"+se().keyFromPublic(r).getPublic(!0,"hex"):(0,o.Dv)(r):ie.throwArgumentError("invalid public or private key","key","[REDACTED]")}var ue=r(25108);const de=new u.Yd("transactions/5.5.0");var ce;function he(e){return"0x"===e?null:(0,n.Kn)(e)}function le(e){return"0x"===e?s._Y:i.O$.from(e)}!function(e){e[e.legacy=0]="legacy",e[e.eip2930=1]="eip2930",e[e.eip1559=2]="eip1559"}(ce||(ce={}));const pe=[{name:"nonce",maxLength:32,numeric:!0},{name:"gasPrice",maxLength:32,numeric:!0},{name:"gasLimit",maxLength:32,numeric:!0},{name:"to",length:20},{name:"value",maxLength:32,numeric:!0},{name:"data"}],ge={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,type:!0,value:!0};function me(e){const t=ae(e);return(0,n.Kn)((0,o.p3)((0,f.w)((0,o.p3)(t,1)),12))}function ve(e,t){return me(function(e,t){const r=(0,o.N)(t),n={r:(0,o.lE)(r.r),s:(0,o.lE)(r.s)};return"0x"+se().recoverPubKey((0,o.lE)(e),n,r.recoveryParam).encode("hex",!1)}((0,o.lE)(e),t))}function ye(e,t){const r=(0,o.G1)(i.O$.from(e).toHexString());return r.length>32&&de.throwArgumentError("invalid length for "+t,"transaction:"+t,e),r}function be(e,t){return{address:(0,n.Kn)(e),storageKeys:(t||[]).map(((t,r)=>(32!==(0,o.E1)(t)&&de.throwArgumentError("invalid access list storageKey",`accessList[${e}:${r}]`,t),t.toLowerCase())))}}function we(e){if(Array.isArray(e))return e.map(((e,t)=>Array.isArray(e)?(e.length>2&&de.throwArgumentError("access list expected to be [ address, storageKeys[] ]",`value[${t}]`,e),be(e[0],e[1])):be(e.address,e.storageKeys)));const t=Object.keys(e).map((t=>{const r=e[t].reduce(((e,t)=>(e[t]=!0,e)),{});return be(t,Object.keys(r).sort())}));return t.sort(((e,t)=>e.address.localeCompare(t.address))),t}function Ee(e){return we(e).map((e=>[e.address,e.storageKeys]))}function Ae(e,t){if(null!=e.gasPrice){const t=i.O$.from(e.gasPrice),r=i.O$.from(e.maxFeePerGas||0);t.eq(r)||de.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas","tx",{gasPrice:t,maxFeePerGas:r})}const r=[ye(e.chainId||0,"chainId"),ye(e.nonce||0,"nonce"),ye(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),ye(e.maxFeePerGas||0,"maxFeePerGas"),ye(e.gasLimit||0,"gasLimit"),null!=e.to?(0,n.Kn)(e.to):"0x",ye(e.value||0,"value"),e.data||"0x",Ee(e.accessList||[])];if(t){const e=(0,o.N)(t);r.push(ye(e.recoveryParam,"recoveryParam")),r.push((0,o.G1)(e.r)),r.push((0,o.G1)(e.s))}return(0,o.xs)(["0x02",p(r)])}function _e(e,t){const r=[ye(e.chainId||0,"chainId"),ye(e.nonce||0,"nonce"),ye(e.gasPrice||0,"gasPrice"),ye(e.gasLimit||0,"gasLimit"),null!=e.to?(0,n.Kn)(e.to):"0x",ye(e.value||0,"value"),e.data||"0x",Ee(e.accessList||[])];if(t){const e=(0,o.N)(t);r.push(ye(e.recoveryParam,"recoveryParam")),r.push((0,o.G1)(e.r)),r.push((0,o.G1)(e.s))}return(0,o.xs)(["0x01",p(r)])}function xe(e,t){if(null==e.type||0===e.type)return null!=e.accessList&&de.throwArgumentError("untyped transactions do not support accessList; include type: 1","transaction",e),function(e,t){(0,a.uj)(e,ge);const r=[];pe.forEach((function(t){let n=e[t.name]||[];const i={};t.numeric&&(i.hexPad="left"),n=(0,o.lE)((0,o.Dv)(n,i)),t.length&&n.length!==t.length&&n.length>0&&de.throwArgumentError("invalid length for "+t.name,"transaction:"+t.name,n),t.maxLength&&(n=(0,o.G1)(n),n.length>t.maxLength&&de.throwArgumentError("invalid length for "+t.name,"transaction:"+t.name,n)),r.push((0,o.Dv)(n))}));let n=0;if(null!=e.chainId?(n=e.chainId,"number"!=typeof n&&de.throwArgumentError("invalid transaction.chainId","transaction",e)):t&&!(0,o.Zq)(t)&&t.v>28&&(n=Math.floor((t.v-35)/2)),0!==n&&(r.push((0,o.Dv)(n)),r.push("0x"),r.push("0x")),!t)return p(r);const i=(0,o.N)(t);let s=27+i.recoveryParam;return 0!==n?(r.pop(),r.pop(),r.pop(),s+=2*n+8,i.v>28&&i.v!==s&&de.throwArgumentError("transaction.chainId/signature.v mismatch","signature",t)):i.v!==s&&de.throwArgumentError("transaction.chainId/signature.v mismatch","signature",t),r.push((0,o.Dv)(s)),r.push((0,o.G1)((0,o.lE)(i.r))),r.push((0,o.G1)((0,o.lE)(i.s))),p(r)}(e,t);switch(e.type){case 1:return _e(e,t);case 2:return Ae(e,t)}return de.throwError(`unsupported transaction type: ${e.type}`,u.Yd.errors.UNSUPPORTED_OPERATION,{operation:"serializeTransaction",transactionType:e.type})}function Ne(e,t,r){try{const r=le(t[0]).toNumber();if(0!==r&&1!==r)throw new Error("bad recid");e.v=r}catch(e){de.throwArgumentError("invalid v for transaction type: 1","v",t[0])}e.r=(0,o.$m)(t[1],32),e.s=(0,o.$m)(t[2],32);try{const t=(0,f.w)(r(e));e.from=ve(t,{r:e.r,s:e.s,recoveryParam:e.v})}catch(e){ue.log(e)}}function Se(e){const t=(0,o.lE)(e);if(t[0]>127)return function(e){const t=v(e);9!==t.length&&6!==t.length&&de.throwArgumentError("invalid raw transaction","rawTransaction",e);const r={nonce:le(t[0]).toNumber(),gasPrice:le(t[1]),gasLimit:le(t[2]),to:he(t[3]),value:le(t[4]),data:t[5],chainId:0};if(6===t.length)return r;try{r.v=i.O$.from(t[6]).toNumber()}catch(e){return ue.log(e),r}if(r.r=(0,o.$m)(t[7],32),r.s=(0,o.$m)(t[8],32),i.O$.from(r.r).isZero()&&i.O$.from(r.s).isZero())r.chainId=r.v,r.v=0;else{r.chainId=Math.floor((r.v-35)/2),r.chainId<0&&(r.chainId=0);let n=r.v-27;const i=t.slice(0,6);0!==r.chainId&&(i.push((0,o.Dv)(r.chainId)),i.push("0x"),i.push("0x"),n-=2*r.chainId+8);const s=(0,f.w)(p(i));try{r.from=ve(s,{r:(0,o.Dv)(r.r),s:(0,o.Dv)(r.s),recoveryParam:n})}catch(e){ue.log(e)}r.hash=(0,f.w)(e)}return r.type=null,r}(t);switch(t[0]){case 1:return function(e){const t=v(e.slice(1));8!==t.length&&11!==t.length&&de.throwArgumentError("invalid component count for transaction type: 1","payload",(0,o.Dv)(e));const r={type:1,chainId:le(t[0]).toNumber(),nonce:le(t[1]).toNumber(),gasPrice:le(t[2]),gasLimit:le(t[3]),to:he(t[4]),value:le(t[5]),data:t[6],accessList:we(t[7])};return 8===t.length||(r.hash=(0,f.w)(e),Ne(r,t.slice(8),_e)),r}(t);case 2:return function(e){const t=v(e.slice(1));9!==t.length&&12!==t.length&&de.throwArgumentError("invalid component count for transaction type: 2","payload",(0,o.Dv)(e));const r=le(t[2]),n=le(t[3]),i={type:2,chainId:le(t[0]).toNumber(),nonce:le(t[1]).toNumber(),maxPriorityFeePerGas:r,maxFeePerGas:n,gasPrice:null,gasLimit:le(t[4]),to:he(t[5]),value:le(t[6]),data:t[7],accessList:we(t[8])};return 9===t.length||(i.hash=(0,f.w)(e),Ne(i,t.slice(9),Ae)),i}(t)}return de.throwError(`unsupported transaction type: ${t[0]}`,u.Yd.errors.UNSUPPORTED_OPERATION,{operation:"parseTransaction",transactionType:t[0]})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,